// Generated from MocaSql.g4 by ANTLR 4.5.3

package com.github.mrglassdanny.mocalanguageserver.moca.lang.antlr;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MocaSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, ABSENT=2, ADD=3, AES=4, ALL=5, ALLOW_CONNECTIONS=6, ALLOW_MULTIPLE_EVENT_LOSS=7, 
		ALLOW_SINGLE_EVENT_LOSS=8, ALTER=9, AND=10, ANONYMOUS=11, ANY=12, APPEND=13, 
		APPLICATION=14, AS=15, ASC=16, ASYMMETRIC=17, ASYNCHRONOUS_COMMIT=18, 
		AUTHORIZATION=19, AUTHENTICATION=20, AUTOMATED_BACKUP_PREFERENCE=21, AUTOMATIC=22, 
		AVAILABILITY_MODE=23, BACKSLASH=24, BACKUP=25, BEFORE=26, BEGIN=27, BETWEEN=28, 
		BLOCK=29, BLOCKSIZE=30, BLOCKING_HIERARCHY=31, BREAK=32, BROWSE=33, BUFFER=34, 
		BUFFERCOUNT=35, BULK=36, BY=37, CACHE=38, CALLED=39, CASCADE=40, CASE=41, 
		CERTIFICATE=42, CHANGETABLE=43, CHANGES=44, CHECK=45, CHECKPOINT=46, CHECK_POLICY=47, 
		CHECK_EXPIRATION=48, CLASSIFIER_FUNCTION=49, CLOSE=50, CLUSTER=51, CLUSTERED=52, 
		COALESCE=53, COLLATE=54, COLUMN=55, COMPRESSION=56, COMMIT=57, COMPUTE=58, 
		CONFIGURATION=59, CONSTRAINT=60, CONTAINMENT=61, CONTAINS=62, CONTAINSTABLE=63, 
		CONTEXT=64, CONTINUE=65, CONTINUE_AFTER_ERROR=66, CONTRACT=67, CONTRACT_NAME=68, 
		CONVERSATION=69, CONVERT=70, COPY_ONLY=71, CREATE=72, CROSS=73, CURRENT=74, 
		CURRENT_DATE=75, CURRENT_TIME=76, CURRENT_TIMESTAMP=77, CURRENT_USER=78, 
		CURSOR=79, CYCLE=80, DATA_COMPRESSION=81, DATA_SOURCE=82, DATABASE=83, 
		DATABASE_MIRRORING=84, DBCC=85, DEALLOCATE=86, DECLARE=87, DEFAULT=88, 
		DEFAULT_DATABASE=89, DEFAULT_SCHEMA=90, DELETE=91, DENY=92, DESC=93, DIAGNOSTICS=94, 
		DIFFERENTIAL=95, DISK=96, DISTINCT=97, DISTRIBUTED=98, DOUBLE=99, DOUBLE_BACK_SLASH=100, 
		DOUBLE_FORWARD_SLASH=101, DROP=102, DTC_SUPPORT=103, DUMP=104, ELSE=105, 
		ENABLED=106, END=107, ENDPOINT=108, ERRLVL=109, ESCAPE=110, ERROR=111, 
		EVENT=112, EVENTDATA=113, EVENT_RETENTION_MODE=114, EXCEPT=115, EXECUTABLE_FILE=116, 
		EXECUTE=117, EXISTS=118, EXPIREDATE=119, EXIT=120, EXTENSION=121, EXTERNAL=122, 
		EXTERNAL_ACCESS=123, FAILOVER=124, FAILURECONDITIONLEVEL=125, FAN_IN=126, 
		FETCH=127, FILE=128, FILENAME=129, FILLFACTOR=130, FILE_SNAPSHOT=131, 
		FOR=132, FORCESEEK=133, FORCE_SERVICE_ALLOW_DATA_LOSS=134, FOREIGN=135, 
		FREETEXT=136, FREETEXTTABLE=137, FROM=138, FULL=139, FUNCTION=140, GET=141, 
		GOTO=142, GOVERNOR=143, GRANT=144, GROUP=145, HAVING=146, HASHED=147, 
		HEALTHCHECKTIMEOUT=148, IDENTITY=149, IDENTITYCOL=150, IDENTITY_INSERT=151, 
		IF=152, IIF=153, IN=154, INCLUDE=155, INCREMENT=156, INDEX=157, INFINITE=158, 
		INIT=159, INNER=160, INSERT=161, INSTEAD=162, INTERSECT=163, INTO=164, 
		IPV4_ADDR=165, IPV6_ADDR=166, IS=167, ISNULL=168, JOIN=169, KERBEROS=170, 
		KEY=171, KEY_PATH=172, KEY_STORE_PROVIDER_NAME=173, KILL=174, LANGUAGE=175, 
		LEFT=176, LIBRARY=177, LIFETIME=178, LIKE=179, LINENO=180, LINUX=181, 
		LISTENER_IP=182, LISTENER_PORT=183, LOAD=184, LOCAL_SERVICE_NAME=185, 
		LOG=186, MATCHED=187, MASTER=188, MAX_MEMORY=189, MAXTRANSFER=190, MAXVALUE=191, 
		MAX_DISPATCH_LATENCY=192, MAX_EVENT_SIZE=193, MAX_SIZE=194, MAX_OUTSTANDING_IO_PER_VOLUME=195, 
		MEDIADESCRIPTION=196, MEDIANAME=197, MEMBER=198, MEMORY_PARTITION_MODE=199, 
		MERGE=200, MESSAGE_FORWARDING=201, MESSAGE_FORWARD_SIZE=202, MINVALUE=203, 
		MIRROR=204, MUST_CHANGE=205, NATIONAL=206, NEGOTIATE=207, NOCHECK=208, 
		NOFORMAT=209, NOINIT=210, NONCLUSTERED=211, NONE=212, NOREWIND=213, NOSKIP=214, 
		NOUNLOAD=215, NO_CHECKSUM=216, NO_COMPRESSION=217, NO_EVENT_LOSS=218, 
		NOT=219, NOTIFICATION=220, NTLM=221, NULL=222, NULLIF=223, OF=224, OFF=225, 
		OFFSETS=226, OLD_PASSWORD=227, ON=228, ON_FAILURE=229, OPEN=230, OPENDATASOURCE=231, 
		OPENQUERY=232, OPENROWSET=233, OPENXML=234, OPTION=235, OR=236, ORDER=237, 
		OUTER=238, OVER=239, PAGE=240, PARAM_NODE=241, PARTIAL=242, PASSWORD=243, 
		PERCENT=244, PERMISSION_SET=245, PER_CPU=246, PER_DB=247, PER_NODE=248, 
		PIVOT=249, PLAN=250, PLATFORM=251, POLICY=252, PRECISION=253, PREDICATE=254, 
		PRIMARY=255, PRINT=256, PROC=257, PROCEDURE=258, PROCESS=259, PUBLIC=260, 
		PYTHON=261, R=262, RAISERROR=263, RAW=264, READ=265, READTEXT=266, READ_WRITE_FILEGROUPS=267, 
		RECONFIGURE=268, REFERENCES=269, REGENERATE=270, RELATED_CONVERSATION=271, 
		RELATED_CONVERSATION_GROUP=272, REPLICATION=273, REQUIRED=274, RESET=275, 
		RESTART=276, RESTORE=277, RESTRICT=278, RESUME=279, RETAINDAYS=280, RETURN=281, 
		RETURNS=282, REVERT=283, REVOKE=284, REWIND=285, RIGHT=286, ROLLBACK=287, 
		ROLE=288, ROWCOUNT=289, ROWGUIDCOL=290, RSA_512=291, RSA_1024=292, RSA_2048=293, 
		RSA_3072=294, RSA_4096=295, SAFETY=296, RULE=297, SAFE=298, SAVE=299, 
		SCHEDULER=300, SCHEMA=301, SCHEME=302, SECURITYAUDIT=303, SELECT=304, 
		SEMANTICKEYPHRASETABLE=305, SEMANTICSIMILARITYDETAILSTABLE=306, SEMANTICSIMILARITYTABLE=307, 
		SERVER=308, SERVICE=309, SERVICE_BROKER=310, SERVICE_NAME=311, SESSION=312, 
		SESSION_USER=313, SET=314, SETUSER=315, SHUTDOWN=316, SID=317, SKIP_KEYWORD=318, 
		SOFTNUMA=319, SOME=320, SOURCE=321, SPECIFICATION=322, SPLIT=323, SQLDUMPERFLAGS=324, 
		SQLDUMPERPATH=325, SQLDUMPERTIMEOUT=326, STATISTICS=327, STATE=328, STATS=329, 
		START=330, STARTED=331, STARTUP_STATE=332, STOP=333, STOPPED=334, STOP_ON_ERROR=335, 
		SUPPORTED=336, SYSTEM_USER=337, TABLE=338, TABLESAMPLE=339, TAPE=340, 
		TARGET=341, TCP=342, TEXTSIZE=343, THEN=344, TO=345, TOP=346, TRACK_CAUSALITY=347, 
		TRAN=348, TRANSACTION=349, TRANSFER=350, TRIGGER=351, TRUNCATE=352, TSEQUAL=353, 
		UNCHECKED=354, UNION=355, UNIQUE=356, UNLOCK=357, UNPIVOT=358, UNSAFE=359, 
		UPDATE=360, UPDATETEXT=361, URL=362, USE=363, USED=364, USER=365, VALUES=366, 
		VARYING=367, VERBOSELOGGING=368, VIEW=369, VISIBILITY=370, WAITFOR=371, 
		WHEN=372, WHERE=373, WHILE=374, WINDOWS=375, WITH=376, WITHIN=377, WITHOUT=378, 
		WITNESS=379, WRITETEXT=380, ABSOLUTE=381, ACCENT_SENSITIVITY=382, ACTION=383, 
		ACTIVATION=384, ACTIVE=385, ADDRESS=386, AES_128=387, AES_192=388, AES_256=389, 
		AFFINITY=390, AFTER=391, AGGREGATE=392, ALGORITHM=393, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=394, 
		ALLOW_SNAPSHOT_ISOLATION=395, ALLOWED=396, ANSI_NULL_DEFAULT=397, ANSI_NULLS=398, 
		ANSI_PADDING=399, ANSI_WARNINGS=400, APPLICATION_LOG=401, APPLY=402, ARITHABORT=403, 
		ASSEMBLY=404, AUDIT=405, AUDIT_GUID=406, AUTO=407, AUTO_CLEANUP=408, AUTO_CLOSE=409, 
		AUTO_CREATE_STATISTICS=410, AUTO_SHRINK=411, AUTO_UPDATE_STATISTICS=412, 
		AUTO_UPDATE_STATISTICS_ASYNC=413, AVAILABILITY=414, AVG=415, BACKUP_PRIORITY=416, 
		BEGIN_DIALOG=417, BIGINT=418, BINARY_BASE64=419, BINARY_CHECKSUM=420, 
		BINDING=421, BLOB_STORAGE=422, BROKER=423, BROKER_INSTANCE=424, BULK_LOGGED=425, 
		CALLER=426, CAP_CPU_PERCENT=427, CAST=428, CATALOG=429, CATCH=430, CHANGE_RETENTION=431, 
		CHANGE_TRACKING=432, CHECKSUM=433, CHECKSUM_AGG=434, CLEANUP=435, COLLECTION=436, 
		COLUMN_MASTER_KEY=437, COMMITTED=438, COMPATIBILITY_LEVEL=439, CONCAT=440, 
		CONCAT_NULL_YIELDS_NULL=441, CONTENT=442, CONTROL=443, COOKIE=444, COUNT=445, 
		COUNT_BIG=446, COUNTER=447, CPU=448, CREATE_NEW=449, CREATION_DISPOSITION=450, 
		CREDENTIAL=451, CRYPTOGRAPHIC=452, CURSOR_CLOSE_ON_COMMIT=453, CURSOR_DEFAULT=454, 
		DATA=455, DATE_CORRELATION_OPTIMIZATION=456, DATEADD=457, DATEDIFF=458, 
		DATENAME=459, DATEPART=460, DAYS=461, DB_CHAINING=462, DB_FAILOVER=463, 
		DECRYPTION=464, DEFAULT_DOUBLE_QUOTE=465, DEFAULT_FULLTEXT_LANGUAGE=466, 
		DEFAULT_LANGUAGE=467, DELAY=468, DELAYED_DURABILITY=469, DELETED=470, 
		DENSE_RANK=471, DEPENDENTS=472, DES=473, DESCRIPTION=474, DESX=475, DHCP=476, 
		DIALOG=477, DIRECTORY_NAME=478, DISABLE=479, DISABLE_BROKER=480, DISABLED=481, 
		DISK_DRIVE=482, DOCUMENT=483, DYNAMIC=484, ELEMENTS=485, EMERGENCY=486, 
		EMPTY=487, ENABLE=488, ENABLE_BROKER=489, ENCRYPTED_VALUE=490, ENCRYPTION=491, 
		ENDPOINT_URL=492, ERROR_BROKER_CONVERSATIONS=493, EXCLUSIVE=494, EXECUTABLE=495, 
		EXIST=496, EXPAND=497, EXPIRY_DATE=498, EXPLICIT=499, FAIL_OPERATION=500, 
		FAILOVER_MODE=501, FAILURE=502, FAILURE_CONDITION_LEVEL=503, FAST=504, 
		FAST_FORWARD=505, FILEGROUP=506, FILEGROWTH=507, FILEPATH=508, FILESTREAM=509, 
		FILTER=510, FIRST=511, FIRST_VALUE=512, FOLLOWING=513, FORCE=514, FORCE_FAILOVER_ALLOW_DATA_LOSS=515, 
		FORCED=516, FORMAT=517, FORWARD_ONLY=518, FULLSCAN=519, FULLTEXT=520, 
		GB=521, GETDATE=522, GETUTCDATE=523, GLOBAL=524, GO=525, GROUP_MAX_REQUESTS=526, 
		GROUPING=527, GROUPING_ID=528, HADR=529, HASH=530, HEALTH_CHECK_TIMEOUT=531, 
		HIGH=532, HONOR_BROKER_PRIORITY=533, HOURS=534, IDENTITY_VALUE=535, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=536, 
		IMMEDIATE=537, IMPERSONATE=538, IMPORTANCE=539, INCLUDE_NULL_VALUES=540, 
		INCREMENTAL=541, INITIATOR=542, INPUT=543, INSENSITIVE=544, INSERTED=545, 
		INT=546, IP=547, ISOLATION=548, JOB=549, JSON=550, KB=551, KEEP=552, KEEPFIXED=553, 
		KEY_SOURCE=554, KEYS=555, KEYSET=556, LAG=557, LAST=558, LAST_VALUE=559, 
		LEAD=560, LEVEL=561, LIST=562, LISTENER=563, LISTENER_URL=564, LOB_COMPACTION=565, 
		LOCAL=566, LOCATION=567, LOCK=568, LOCK_ESCALATION=569, LOGIN=570, LOOP=571, 
		LOW=572, MANUAL=573, MARK=574, MATERIALIZED=575, MAX=576, MAX_CPU_PERCENT=577, 
		MAX_DOP=578, MAX_FILES=579, MAX_IOPS_PER_VOLUME=580, MAX_MEMORY_PERCENT=581, 
		MAX_PROCESSES=582, MAX_QUEUE_READERS=583, MAX_ROLLOVER_FILES=584, MAXDOP=585, 
		MAXRECURSION=586, MAXSIZE=587, MB=588, MEDIUM=589, MEMORY_OPTIMIZED_DATA=590, 
		MESSAGE=591, MIN=592, MIN_ACTIVE_ROWVERSION=593, MIN_CPU_PERCENT=594, 
		MIN_IOPS_PER_VOLUME=595, MIN_MEMORY_PERCENT=596, MINUTES=597, MIRROR_ADDRESS=598, 
		MIXED_PAGE_ALLOCATION=599, MODE=600, MODIFY=601, MOVE=602, MULTI_USER=603, 
		NAME=604, NESTED_TRIGGERS=605, NEW_ACCOUNT=606, NEW_BROKER=607, NEW_PASSWORD=608, 
		NEXT=609, NO=610, NO_TRUNCATE=611, NO_WAIT=612, NOCOUNT=613, NODES=614, 
		NOEXPAND=615, NON_TRANSACTED_ACCESS=616, NORECOMPUTE=617, NORECOVERY=618, 
		NOWAIT=619, NTILE=620, NUMANODE=621, NUMBER=622, NUMERIC_ROUNDABORT=623, 
		OBJECT=624, OFFLINE=625, OFFSET=626, OLD_ACCOUNT=627, ONLINE=628, ONLY=629, 
		OPEN_EXISTING=630, OPTIMISTIC=631, OPTIMIZE=632, OUT=633, OUTPUT=634, 
		OVERRIDE=635, OWNER=636, PAGE_VERIFY=637, PARAMETERIZATION=638, PARTITION=639, 
		PARTITIONS=640, PARTNER=641, PATH=642, POISON_MESSAGE_HANDLING=643, POOL=644, 
		PORT=645, PRECEDING=646, PRIMARY_ROLE=647, PRIOR=648, PRIORITY=649, PRIORITY_LEVEL=650, 
		PRIVATE=651, PRIVATE_KEY=652, PRIVILEGES=653, PROCEDURE_NAME=654, PROPERTY=655, 
		PROVIDER=656, PROVIDER_KEY_NAME=657, QUERY=658, QUEUE=659, QUEUE_DELAY=660, 
		QUOTED_IDENTIFIER=661, RANGE=662, RANK=663, RC2=664, RC4=665, RC4_128=666, 
		READ_COMMITTED_SNAPSHOT=667, READ_ONLY=668, READ_ONLY_ROUTING_LIST=669, 
		READ_WRITE=670, READONLY=671, REBUILD=672, RECEIVE=673, RECOMPILE=674, 
		RECOVERY=675, RECURSIVE_TRIGGERS=676, RELATIVE=677, REMOTE=678, REMOTE_SERVICE_NAME=679, 
		REMOVE=680, REORGANIZE=681, REPEATABLE=682, REPLICA=683, REQUEST_MAX_CPU_TIME_SEC=684, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=685, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=686, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=687, RESERVE_DISK_SPACE=688, 
		RESOURCE=689, RESOURCE_MANAGER_LOCATION=690, RESTRICTED_USER=691, RETENTION=692, 
		ROBUST=693, ROOT=694, ROUTE=695, ROW=696, ROW_NUMBER=697, ROWGUID=698, 
		ROWS=699, SAMPLE=700, SCHEMABINDING=701, SCOPED=702, SCROLL=703, SCROLL_LOCKS=704, 
		SEARCH=705, SECONDARY=706, SECONDARY_ONLY=707, SECONDARY_ROLE=708, SECONDS=709, 
		SECRET=710, SECURITY=711, SECURITY_LOG=712, SEEDING_MODE=713, SELF=714, 
		SEMI_SENSITIVE=715, SEND=716, SENT=717, SEQUENCE=718, SERIALIZABLE=719, 
		SESSION_TIMEOUT=720, SETERROR=721, SHARE=722, SHOWPLAN=723, SIGNATURE=724, 
		SIMPLE=725, SINGLE_USER=726, SIZE=727, SMALLINT=728, SNAPSHOT=729, SPATIAL_WINDOW_MAX_CELLS=730, 
		STANDBY=731, START_DATE=732, STATIC=733, STATS_STREAM=734, STATUS=735, 
		STATUSONLY=736, STDEV=737, STDEVP=738, STOPLIST=739, STRING_AGG=740, STUFF=741, 
		SUBJECT=742, SUBSCRIPTION=743, SUM=744, SUSPEND=745, SYMMETRIC=746, SYNCHRONOUS_COMMIT=747, 
		SYNONYM=748, SYSTEM=749, TAKE=750, TARGET_RECOVERY_TIME=751, TB=752, TEXTIMAGE_ON=753, 
		THROW=754, TIES=755, TIME=756, TIMEOUT=757, TIMER=758, TINYINT=759, TORN_PAGE_DETECTION=760, 
		TRANSFORM_NOISE_WORDS=761, TRIPLE_DES=762, TRIPLE_DES_3KEY=763, TRUSTWORTHY=764, 
		TRY=765, TSQL=766, TWO_DIGIT_YEAR_CUTOFF=767, TYPE=768, TYPE_WARNING=769, 
		UNBOUNDED=770, UNCOMMITTED=771, UNKNOWN=772, UNLIMITED=773, UOW=774, USING=775, 
		VALID_XML=776, VALIDATION=777, VALUE=778, VAR=779, VARP=780, VIEW_METADATA=781, 
		VIEWS=782, WAIT=783, WELL_FORMED_XML=784, WITHOUT_ARRAY_WRAPPER=785, WORK=786, 
		WORKLOAD=787, XML=788, XMLDATA=789, XMLNAMESPACES=790, XMLSCHEMA=791, 
		XSINIL=792, DOLLAR_ACTION=793, MOCA_ONSTACK=794, MOCA_IGNORE=795, SPACE=796, 
		COMMENT=797, LINE_COMMENT=798, DOUBLE_QUOTE_ID=799, SINGLE_QUOTE=800, 
		SQUARE_BRACKET_ID=801, LOCAL_ID=802, MOCA_ENVIRONMENT_VARIABLE=803, MOCA_AT_MINUS_VARIABLE=804, 
		MOCA_AT_PLUS_VARIABLE=805, MOCA_AT_STAR=806, DECIMAL=807, ID=808, QUOTED_URL=809, 
		QUOTED_HOST_AND_PORT=810, STRING=811, BINARY=812, FLOAT=813, REAL=814, 
		EQUAL=815, NOT_EQUAL=816, GREATER=817, LESS=818, GREATER_EQUAL=819, LESS_EQUAL=820, 
		EXCLAMATION=821, PLUS_ASSIGN=822, MINUS_ASSIGN=823, MULT_ASSIGN=824, DIV_ASSIGN=825, 
		MOD_ASSIGN=826, AND_ASSIGN=827, XOR_ASSIGN=828, OR_ASSIGN=829, DOUBLE_BAR=830, 
		DOT=831, UNDERLINE=832, AT=833, SHARP=834, DOLLAR=835, LR_BRACKET=836, 
		RR_BRACKET=837, COMMA=838, SEMI=839, COLON=840, STAR=841, DIVIDE=842, 
		MODULE=843, PLUS=844, MINUS=845, BIT_NOT=846, BIT_OR=847, BIT_AND=848, 
		BIT_XOR=849, IPV4_OCTECT=850;
	public static final int
		RULE_moca_sql_script = 0, RULE_sql_clauses = 1, RULE_sql_clause = 2, RULE_dml_clause = 3, 
		RULE_ddl_clause = 4, RULE_empty_statement = 5, RULE_drop_sequence = 6, 
		RULE_alter_sequence = 7, RULE_create_sequence = 8, RULE_merge_statement = 9, 
		RULE_merge_matched = 10, RULE_merge_not_matched = 11, RULE_delete_statement = 12, 
		RULE_delete_statement_from = 13, RULE_insert_statement = 14, RULE_insert_statement_value = 15, 
		RULE_select_statement = 16, RULE_update_statement = 17, RULE_output_clause = 18, 
		RULE_output_dml_list_elem = 19, RULE_output_column_name = 20, RULE_create_index = 21, 
		RULE_create_table = 22, RULE_table_options = 23, RULE_create_view = 24, 
		RULE_view_attribute = 25, RULE_alter_table = 26, RULE_host = 27, RULE_drop_index = 28, 
		RULE_drop_relational_or_xml_or_spatial_index = 29, RULE_drop_backward_compatible_index = 30, 
		RULE_drop_table = 31, RULE_drop_view = 32, RULE_rowset_function_limited = 33, 
		RULE_openquery = 34, RULE_opendatasource = 35, RULE_execute_statement = 36, 
		RULE_execute_body = 37, RULE_execute_statement_arg = 38, RULE_execute_var_string = 39, 
		RULE_column_def_table_constraints = 40, RULE_column_def_table_constraint = 41, 
		RULE_column_definition = 42, RULE_materialized_column_definition = 43, 
		RULE_column_constraint = 44, RULE_table_constraint = 45, RULE_on_delete = 46, 
		RULE_on_update = 47, RULE_index_options = 48, RULE_index_option = 49, 
		RULE_constant_LOCAL_ID = 50, RULE_expression = 51, RULE_moca_at_variable = 52, 
		RULE_moca_environment_variable = 53, RULE_moca_at_minus_variable = 54, 
		RULE_moca_at_plus_variable = 55, RULE_moca_at_star = 56, RULE_moca_integration_variable = 57, 
		RULE_primitive_expression = 58, RULE_case_expression = 59, RULE_unary_operator_expression = 60, 
		RULE_bracket_expression = 61, RULE_constant_expression = 62, RULE_subquery = 63, 
		RULE_with_expression = 64, RULE_common_table_expression = 65, RULE_update_elem = 66, 
		RULE_search_condition_list = 67, RULE_search_condition = 68, RULE_search_condition_and = 69, 
		RULE_search_condition_not = 70, RULE_predicate = 71, RULE_query_expression = 72, 
		RULE_sql_union = 73, RULE_query_specification = 74, RULE_top_clause = 75, 
		RULE_top_percent = 76, RULE_top_count = 77, RULE_order_by_clause = 78, 
		RULE_for_clause = 79, RULE_xml_common_directives = 80, RULE_order_by_expression = 81, 
		RULE_group_by_item = 82, RULE_option_clause = 83, RULE_option = 84, RULE_optimize_for_arg = 85, 
		RULE_select_list = 86, RULE_udt_method_arguments = 87, RULE_asterisk = 88, 
		RULE_column_elem = 89, RULE_udt_elem = 90, RULE_expression_elem = 91, 
		RULE_select_list_elem = 92, RULE_table_sources = 93, RULE_table_source = 94, 
		RULE_table_source_item_joined = 95, RULE_table_source_item = 96, RULE_open_xml = 97, 
		RULE_schema_declaration = 98, RULE_column_declaration = 99, RULE_change_table = 100, 
		RULE_join_part = 101, RULE_pivot_clause = 102, RULE_unpivot_clause = 103, 
		RULE_full_column_name_list = 104, RULE_table_name_with_hint = 105, RULE_rowset_function = 106, 
		RULE_bulk_option = 107, RULE_derived_table = 108, RULE_function_call = 109, 
		RULE_xml_data_type_methods = 110, RULE_value_method = 111, RULE_query_method = 112, 
		RULE_exist_method = 113, RULE_modify_method = 114, RULE_nodes_method = 115, 
		RULE_switch_section = 116, RULE_switch_search_condition_section = 117, 
		RULE_as_column_alias = 118, RULE_as_table_alias = 119, RULE_table_alias = 120, 
		RULE_with_table_hints = 121, RULE_insert_with_table_hints = 122, RULE_table_hint = 123, 
		RULE_index_value = 124, RULE_column_alias_list = 125, RULE_column_alias = 126, 
		RULE_table_value_constructor = 127, RULE_expression_list = 128, RULE_ranking_windowed_function = 129, 
		RULE_aggregate_windowed_function = 130, RULE_analytic_windowed_function = 131, 
		RULE_all_distinct_expression = 132, RULE_over_clause = 133, RULE_row_or_range_clause = 134, 
		RULE_window_frame_extent = 135, RULE_window_frame_bound = 136, RULE_window_frame_preceding = 137, 
		RULE_window_frame_following = 138, RULE_full_table_name = 139, RULE_table_name = 140, 
		RULE_simple_name = 141, RULE_func_proc_name_schema = 142, RULE_func_proc_name_database_schema = 143, 
		RULE_func_proc_name_server_database_schema = 144, RULE_ddl_object = 145, 
		RULE_full_column_name = 146, RULE_column_name_list_with_order = 147, RULE_column_name_list = 148, 
		RULE_cursor_name = 149, RULE_on_off = 150, RULE_clustered = 151, RULE_null_notnull = 152, 
		RULE_null_or_default = 153, RULE_scalar_function_name = 154, RULE_data_type = 155, 
		RULE_constant = 156, RULE_sign = 157, RULE_id = 158, RULE_simple_id = 159, 
		RULE_comparison_operator = 160, RULE_assignment_operator = 161;
	public static final String[] ruleNames = {
		"moca_sql_script", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"empty_statement", "drop_sequence", "alter_sequence", "create_sequence", 
		"merge_statement", "merge_matched", "merge_not_matched", "delete_statement", 
		"delete_statement_from", "insert_statement", "insert_statement_value", 
		"select_statement", "update_statement", "output_clause", "output_dml_list_elem", 
		"output_column_name", "create_index", "create_table", "table_options", 
		"create_view", "view_attribute", "alter_table", "host", "drop_index", 
		"drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index", 
		"drop_table", "drop_view", "rowset_function_limited", "openquery", "opendatasource", 
		"execute_statement", "execute_body", "execute_statement_arg", "execute_var_string", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"materialized_column_definition", "column_constraint", "table_constraint", 
		"on_delete", "on_update", "index_options", "index_option", "constant_LOCAL_ID", 
		"expression", "moca_at_variable", "moca_environment_variable", "moca_at_minus_variable", 
		"moca_at_plus_variable", "moca_at_star", "moca_integration_variable", 
		"primitive_expression", "case_expression", "unary_operator_expression", 
		"bracket_expression", "constant_expression", "subquery", "with_expression", 
		"common_table_expression", "update_elem", "search_condition_list", "search_condition", 
		"search_condition_and", "search_condition_not", "predicate", "query_expression", 
		"sql_union", "query_specification", "top_clause", "top_percent", "top_count", 
		"order_by_clause", "for_clause", "xml_common_directives", "order_by_expression", 
		"group_by_item", "option_clause", "option", "optimize_for_arg", "select_list", 
		"udt_method_arguments", "asterisk", "column_elem", "udt_elem", "expression_elem", 
		"select_list_elem", "table_sources", "table_source", "table_source_item_joined", 
		"table_source_item", "open_xml", "schema_declaration", "column_declaration", 
		"change_table", "join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "xml_data_type_methods", "value_method", "query_method", 
		"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "full_table_name", 
		"table_name", "simple_name", "func_proc_name_schema", "func_proc_name_database_schema", 
		"func_proc_name_server_database_schema", "ddl_object", "full_column_name", 
		"column_name_list_with_order", "column_name_list", "cursor_name", "on_off", 
		"clustered", "null_notnull", "null_or_default", "scalar_function_name", 
		"data_type", "constant", "sign", "id", "simple_id", "comparison_operator", 
		"assignment_operator"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "':I_'", "'ABSENT'", "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", 
		"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", 
		"'AND'", "'ANONYMOUS'", "'ANY'", "'APPEND'", "'APPLICATION'", "'AS'", 
		"'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", "'AUTHORIZATION'", "'AUTHENTICATION'", 
		"'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", "'AVAILABILITY_MODE'", 
		"'\\'", "'BACKUP'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", 
		"'BLOCKING_HIERARCHY'", "'BREAK'", "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", 
		"'BULK'", "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASE'", "'CERTIFICATE'", 
		"'CHANGETABLE'", "'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", 
		"'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLOSE'", "'CLUSTER'", 
		"'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMPRESSION'", 
		"'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", "'CONSTRAINT'", "'CONTAINMENT'", 
		"'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", "'CONTINUE'", "'CONTINUE_AFTER_ERROR'", 
		"'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", null, "'COPY_ONLY'", 
		"'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'CYCLE'", "'DATA_COMPRESSION'", 
		"'DATA_SOURCE'", "'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", 
		"'DECLARE'", "'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DELETE'", 
		"'DENY'", "'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", "'DISK'", "'DISTINCT'", 
		"'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", 
		"'DUMP'", "'ELSE'", "'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", "'ESCAPE'", 
		"'ERROR'", "'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXECUTABLE_FILE'", 
		null, "'EXISTS'", "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
		"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
		"'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", "'FILE_SNAPSHOT'", 
		"'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GET'", 
		"'GOTO'", "'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", 
		"'HEALTHCHECKTIMEOUT'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
		"'IF'", "'IIF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INFINITE'", 
		"'INIT'", "'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", 
		null, null, "'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", 
		"'KEY_STORE_PROVIDER_NAME'", "'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", 
		"'LIFETIME'", "'LIKE'", "'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
		"'LOAD'", "'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
		"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", 
		"'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
		"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MERGE'", "'MESSAGE_FORWARDING'", 
		"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", 
		"'NEGOTIATE'", "'NOCHECK'", "'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", 
		"'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
		"'NO_EVENT_LOSS'", "'NOT'", "'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", 
		"'OF'", "'OFF'", "'OFFSETS'", "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", 
		"'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", 
		"'OPTION'", "'OR'", "'ORDER'", "'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", 
		"'PARTIAL'", "'PASSWORD'", "'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", 
		"'PER_DB'", "'PER_NODE'", "'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", 
		"'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", 
		"'PROCESS'", "'PUBLIC'", "'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", 
		"'READTEXT'", "'READ_WRITE_FILEGROUPS'", "'RECONFIGURE'", "'REFERENCES'", 
		"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
		"'REPLICATION'", "'REQUIRED'", "'RESET'", "'RESTART'", "'RESTORE'", "'RESTRICT'", 
		"'RESUME'", "'RETAINDAYS'", "'RETURN'", "'RETURNS'", "'REVERT'", "'REVOKE'", 
		"'REWIND'", "'RIGHT'", "'ROLLBACK'", "'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
		"'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", "'RSA_4096'", "'SAFETY'", 
		"'RULE'", "'SAFE'", "'SAVE'", "'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITYAUDIT'", 
		"'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
		"'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", "'SETUSER'", 
		"'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", "'SOME'", "'SOURCE'", "'SPECIFICATION'", 
		"'SPLIT'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
		"'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
		"'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", 
		"'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", 
		"'UNIQUE'", "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", 
		"'VIEW'", "'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
		"'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", 
		"'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
		"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", 
		"'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
		"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
		"'CALLER'", "'CAP_CPU_PERCENT'", null, "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
		"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
		"'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'DATA'", "'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", "'DATEDIFF'", 
		"'DATENAME'", "'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", 
		"'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
		"'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", "'DEPENDENTS'", 
		"'DES'", "'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", 
		"'DISABLE'", "'DISABLE_BROKER'", "'DISABLED'", null, "'DOCUMENT'", "'DYNAMIC'", 
		"'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'", 
		"'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", 
		"'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", 
		"'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
		"'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILEPATH'", 
		"'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", 
		"'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCED'", "'FORMAT'", 
		"'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", 
		"'GLOBAL'", "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", "'GROUPING_ID'", 
		"'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
		"'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JOB'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", "'NODES'", 
		"'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OVERRIDE'", "'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", 
		"'PARTITIONS'", "'PARTNER'", "'PATH'", "'POISON_MESSAGE_HANDLING'", "'POOL'", 
		"'PORT'", "'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
		"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
		"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
		"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
		"'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
		"'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", "'REQUEST_MAX_CPU_TIME_SEC'", 
		"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURITY'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", 
		"'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SERIALIZABLE'", 
		"'SESSION_TIMEOUT'", "'SETERROR'", "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", 
		"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'STANDBY'", "'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", 
		"'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOPLIST'", "'STRING_AGG'", "'STUFF'", 
		"'SUBJECT'", "'SUBSCRIPTION'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", 
		"'SYNONYM'", "'SYSTEM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", "'TB'", "'TEXTIMAGE_ON'", 
		"'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", "'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", 
		"'TRANSFORM_NOISE_WORDS'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", 
		"'TRY'", "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", 
		"'UNBOUNDED'", "'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'UOW'", "'USING'", 
		"'VALID_XML'", "'VALIDATION'", "'VALUE'", "'VAR'", "'VARP'", "'VIEW_METADATA'", 
		"'VIEWS'", "'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", "'WORK'", 
		"'WORKLOAD'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", 
		"'XSINIL'", "'$ACTION'", "'ONSTACK'", "'IGNORE'", null, null, null, null, 
		"'''", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "'='", null, "'>'", "'<'", "'>='", "'<='", "'!'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", 
		"'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
		"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", 
		"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHORIZATION", 
		"AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", 
		"BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
		"BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", 
		"BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE", 
		"CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
		"CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", 
		"COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", "CONSTRAINT", 
		"CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", 
		"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "CYCLE", "DATA_COMPRESSION", "DATA_SOURCE", 
		"DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", 
		"DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", "DENY", "DESC", "DIAGNOSTICS", 
		"DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
		"DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", "ELSE", "ENABLED", 
		"END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", "EVENT", "EVENTDATA", 
		"EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
		"EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", 
		"FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
		"FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
		"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
		"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IIF", "IN", "INCLUDE", 
		"INCREMENT", "INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", 
		"INTERSECT", "INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", 
		"KERBEROS", "KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", 
		"LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", 
		"LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", 
		"MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", 
		"MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", 
		"MEMBER", "MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", "NOCHECK", 
		"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
		"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
		"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
		"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", "R", "RAISERROR", 
		"RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", "RECONFIGURE", "REFERENCES", 
		"REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REPLICATION", 
		"REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAINDAYS", 
		"RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT", "ROLLBACK", 
		"ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
		"RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", "SCHEMA", "SCHEME", 
		"SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SERVER", "SERVICE", "SERVICE_BROKER", "SERVICE_NAME", 
		"SESSION", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", 
		"SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", "SPLIT", "SQLDUMPERFLAGS", 
		"SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATISTICS", "STATE", "STATS", "START", 
		"STARTED", "STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", "SUPPORTED", 
		"SYSTEM_USER", "TABLE", "TABLESAMPLE", "TAPE", "TARGET", "TCP", "TEXTSIZE", 
		"THEN", "TO", "TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER", 
		"TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", "UNIQUE", "UNLOCK", 
		"UNPIVOT", "UNSAFE", "UPDATE", "UPDATETEXT", "URL", "USE", "USED", "USER", 
		"VALUES", "VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", "WAITFOR", 
		"WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITNESS", 
		"WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", 
		"ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", "AFTER", 
		"AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_SNAPSHOT_ISOLATION", 
		"ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", 
		"APPLICATION_LOG", "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
		"AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
		"AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", "AVAILABILITY", 
		"AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", 
		"BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", 
		"CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", "CHANGE_RETENTION", 
		"CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", 
		"COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "COUNTER", "CPU", 
		"CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", 
		"CURSOR_DEFAULT", "DATA", "DATE_CORRELATION_OPTIMIZATION", "DATEADD", 
		"DATEDIFF", "DATENAME", "DATEPART", "DAYS", "DB_CHAINING", "DB_FAILOVER", 
		"DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", 
		"DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DEPENDENTS", 
		"DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", "DISABLE", 
		"DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", "ELEMENTS", 
		"EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", 
		"ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", "EXECUTABLE", 
		"EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", "FAILOVER_MODE", 
		"FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", "FILEGROUP", 
		"FILEGROWTH", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", 
		"FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORCED", "FORMAT", 
		"FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", "GETUTCDATE", 
		"GLOBAL", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", "HADR", 
		"HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", "HOURS", 
		"IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JOB", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", "NOEXPAND", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOWAIT", "NTILE", 
		"NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
		"OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", 
		"OUT", "OUTPUT", "OVERRIDE", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
		"PARTITION", "PARTITIONS", "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", 
		"POOL", "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
		"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
		"PROVIDER", "PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", "RECEIVE", 
		"RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEMI_SENSITIVE", "SEND", "SENT", "SEQUENCE", "SERIALIZABLE", 
		"SESSION_TIMEOUT", "SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", 
		"SINGLE_USER", "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
		"STANDBY", "START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STATUSONLY", 
		"STDEV", "STDEVP", "STOPLIST", "STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIPTION", 
		"SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", 
		"TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES", 
		"TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
		"TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", 
		"UOW", "USING", "VALID_XML", "VALIDATION", "VALUE", "VAR", "VARP", "VIEW_METADATA", 
		"VIEWS", "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", 
		"XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", 
		"MOCA_ONSTACK", "MOCA_IGNORE", "SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", 
		"SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "MOCA_ENVIRONMENT_VARIABLE", 
		"MOCA_AT_MINUS_VARIABLE", "MOCA_AT_PLUS_VARIABLE", "MOCA_AT_STAR", "DECIMAL", 
		"ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", "FLOAT", 
		"REAL", "EQUAL", "NOT_EQUAL", "GREATER", "LESS", "GREATER_EQUAL", "LESS_EQUAL", 
		"EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", "DOT", 
		"UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", 
		"SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", 
		"BIT_OR", "BIT_AND", "BIT_XOR", "IPV4_OCTECT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MocaSql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MocaSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Moca_sql_scriptContext extends ParserRuleContext {
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public Moca_sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_sql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_sql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_sql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_sql_scriptContext moca_sql_script() throws RecognitionException {
		Moca_sql_scriptContext _localctx = new Moca_sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_moca_sql_script);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(324);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MocaSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MocaSqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSql_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSql_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSql_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sql_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(330); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(326);
				sql_clause();
				setState(328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					setState(327);
					match(SEMI);
					}
					break;
				}
				}
				}
				setState(332); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALTER || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (CREATE - 72)) | (1L << (DELETE - 72)) | (1L << (DROP - 72)))) != 0) || _la==INSERT || _la==MERGE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LR_BRACKET || _la==SEMI );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clauseContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Empty_statementContext empty_statement() {
			return getRuleContext(Empty_statementContext.class,0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSql_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSql_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSql_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clauseContext sql_clause() throws RecognitionException {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_clause);
		try {
			setState(337);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(334);
				dml_clause();
				}
				break;
			case ALTER:
			case CREATE:
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(335);
				ddl_clause();
				}
				break;
			case SEMI:
				enterOuterAlt(_localctx, 3);
				{
				setState(336);
				empty_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDml_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDml_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDml_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_dml_clause);
		try {
			setState(344);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(339);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(340);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(341);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(342);
				select_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(343);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddl_clause);
		try {
			setState(356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(346);
				alter_sequence();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(347);
				alter_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(348);
				create_index();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(349);
				create_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(350);
				create_table();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(351);
				create_view();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(352);
				drop_index();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(353);
				drop_sequence();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(354);
				drop_table();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(355);
				drop_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEmpty_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEmpty_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(358);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(360);
			match(DROP);
			setState(361);
			match(SEQUENCE);
			setState(364);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(362);
				match(IF);
				setState(363);
				match(EXISTS);
				}
			}

			setState(380);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0) || _la==COMMA) {
				{
				setState(367);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(366);
					match(COMMA);
					}
				}

				setState(372);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(369);
					((Drop_sequenceContext)_localctx).database_name = id();
					setState(370);
					match(DOT);
					}
					break;
				}
				setState(377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(374);
					((Drop_sequenceContext)_localctx).schema_name = id();
					setState(375);
					match(DOT);
					}
					break;
				}
				setState(379);
				((Drop_sequenceContext)_localctx).sequence_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public Token sequnce_increment;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode RESTART() { return getToken(MocaSqlParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(MocaSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(MocaSqlParser.MINVALUE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NO() { return getTokens(MocaSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MocaSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(MocaSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(MocaSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(MocaSqlParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(382);
			match(ALTER);
			setState(383);
			match(SEQUENCE);
			setState(387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(384);
				((Alter_sequenceContext)_localctx).schema_name = id();
				setState(385);
				match(DOT);
				}
				break;
			}
			setState(389);
			((Alter_sequenceContext)_localctx).sequence_name = id();
			setState(395);
			_la = _input.LA(1);
			if (_la==RESTART) {
				{
				setState(390);
				match(RESTART);
				setState(393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(391);
					match(WITH);
					setState(392);
					match(DECIMAL);
					}
					break;
				}
				}
			}

			setState(400);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(397);
				match(INCREMENT);
				setState(398);
				match(BY);
				setState(399);
				((Alter_sequenceContext)_localctx).sequnce_increment = match(DECIMAL);
				}
			}

			setState(406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(402);
				match(MINVALUE);
				setState(403);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(404);
				match(NO);
				setState(405);
				match(MINVALUE);
				}
				break;
			}
			setState(412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(408);
				match(MAXVALUE);
				setState(409);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(410);
				match(NO);
				setState(411);
				match(MAXVALUE);
				}
				break;
			}
			setState(417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(414);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(415);
				match(NO);
				setState(416);
				match(CYCLE);
				}
				break;
			}
			setState(423);
			switch (_input.LA(1)) {
			case CACHE:
				{
				setState(419);
				match(CACHE);
				setState(420);
				match(DECIMAL);
				}
				break;
			case NO:
				{
				setState(421);
				match(NO);
				setState(422);
				match(CACHE);
				}
				break;
			case EOF:
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(MocaSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode INCREMENT() { return getToken(MocaSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(MocaSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(MocaSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MocaSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(MocaSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(MocaSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(MocaSqlParser.CACHE, 0); }
		public TerminalNode MINUS() { return getToken(MocaSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(425);
			match(CREATE);
			setState(426);
			match(SEQUENCE);
			setState(430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(427);
				((Create_sequenceContext)_localctx).schema_name = id();
				setState(428);
				match(DOT);
				}
				break;
			}
			setState(432);
			((Create_sequenceContext)_localctx).sequence_name = id();
			setState(435);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(433);
				match(AS);
				setState(434);
				data_type();
				}
			}

			setState(440);
			_la = _input.LA(1);
			if (_la==START) {
				{
				setState(437);
				match(START);
				setState(438);
				match(WITH);
				setState(439);
				match(DECIMAL);
				}
			}

			setState(448);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(442);
				match(INCREMENT);
				setState(443);
				match(BY);
				setState(445);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(444);
					match(MINUS);
					}
				}

				setState(447);
				match(DECIMAL);
				}
			}

			setState(456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(450);
				match(MINVALUE);
				setState(452);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(451);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(454);
				match(NO);
				setState(455);
				match(MINVALUE);
				}
				break;
			}
			setState(464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(458);
				match(MAXVALUE);
				setState(460);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(459);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(462);
				match(NO);
				setState(463);
				match(MAXVALUE);
				}
				break;
			}
			setState(469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(466);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(467);
				match(NO);
				setState(468);
				match(CYCLE);
				}
				break;
			}
			setState(477);
			switch (_input.LA(1)) {
			case CACHE:
				{
				setState(471);
				match(CACHE);
				setState(473);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(472);
					match(DECIMAL);
					}
				}

				}
				break;
			case NO:
				{
				setState(475);
				match(NO);
				setState(476);
				match(CACHE);
				}
				break;
			case EOF:
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(MocaSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(MocaSqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(MocaSqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(MocaSqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(MocaSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(MocaSqlParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(MocaSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(MocaSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(MocaSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MocaSqlParser.BY, i);
		}
		public List<TerminalNode> SOURCE() { return getTokens(MocaSqlParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(MocaSqlParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public List<TerminalNode> AND() { return getTokens(MocaSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MocaSqlParser.AND, i);
		}
		public TerminalNode TARGET() { return getToken(MocaSqlParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(480);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(479);
				with_expression();
				}
			}

			setState(482);
			match(MERGE);
			setState(490);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(483);
				match(TOP);
				setState(484);
				match(LR_BRACKET);
				setState(485);
				expression(0);
				setState(486);
				match(RR_BRACKET);
				setState(488);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(487);
					match(PERCENT);
					}
				}

				}
			}

			setState(493);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(492);
				match(INTO);
				}
			}

			setState(495);
			ddl_object();
			setState(497);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(496);
				insert_with_table_hints();
				}
			}

			setState(500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(499);
				as_table_alias();
				}
				break;
			}
			setState(502);
			match(USING);
			setState(503);
			table_sources();
			setState(504);
			match(ON);
			setState(505);
			search_condition();
			setState(516);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(506);
					match(WHEN);
					setState(507);
					match(MATCHED);
					setState(510);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(508);
						match(AND);
						setState(509);
						search_condition();
						}
					}

					setState(512);
					match(THEN);
					setState(513);
					merge_matched();
					}
					} 
				}
				setState(518);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			}
			setState(532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				setState(519);
				match(WHEN);
				setState(520);
				match(NOT);
				setState(521);
				match(MATCHED);
				setState(524);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(522);
					match(BY);
					setState(523);
					match(TARGET);
					}
				}

				setState(528);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(526);
					match(AND);
					setState(527);
					search_condition();
					}
				}

				setState(530);
				match(THEN);
				setState(531);
				merge_not_matched();
				}
				break;
			}
			setState(547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(534);
				match(WHEN);
				setState(535);
				match(NOT);
				setState(536);
				match(MATCHED);
				setState(537);
				match(BY);
				setState(538);
				match(SOURCE);
				setState(541);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(539);
					match(AND);
					setState(540);
					search_condition();
					}
				}

				setState(543);
				match(THEN);
				setState(544);
				merge_matched();
				}
				}
				setState(549);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(551);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(550);
				output_clause();
				}
			}

			setState(554);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(553);
				option_clause();
				}
			}

			setState(556);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMerge_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMerge_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMerge_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_merge_matched);
		int _la;
		try {
			setState(569);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(558);
				match(UPDATE);
				setState(559);
				match(SET);
				setState(560);
				update_elem();
				setState(565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(561);
					match(COMMA);
					setState(562);
					update_elem();
					}
					}
					setState(567);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(568);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MocaSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMerge_not_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMerge_not_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMerge_not_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(571);
			match(INSERT);
			setState(576);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(572);
				match(LR_BRACKET);
				setState(573);
				column_name_list();
				setState(574);
				match(RR_BRACKET);
				}
			}

			setState(581);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(578);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(579);
				match(DEFAULT);
				setState(580);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<TerminalNode> FROM() { return getTokens(MocaSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MocaSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(584);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(583);
				with_expression();
				}
			}

			setState(586);
			match(DELETE);
			setState(596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				setState(587);
				match(TOP);
				setState(588);
				match(LR_BRACKET);
				setState(589);
				expression(0);
				setState(590);
				match(RR_BRACKET);
				setState(592);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(591);
					match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				setState(594);
				match(TOP);
				setState(595);
				match(DECIMAL);
				}
				break;
			}
			setState(599);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(598);
				match(FROM);
				}
			}

			setState(601);
			delete_statement_from();
			setState(603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				setState(602);
				insert_with_table_hints();
				}
				break;
			}
			setState(606);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(605);
				output_clause();
				}
			}

			setState(610);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(608);
				match(FROM);
				setState(609);
				table_sources();
				}
			}

			setState(625);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(612);
				match(WHERE);
				setState(623);
				switch (_input.LA(1)) {
				case T__0:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_STAR:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(613);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(614);
					match(CURRENT);
					setState(615);
					match(OF);
					setState(621);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
					case 1:
						{
						setState(617);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
						case 1:
							{
							setState(616);
							match(GLOBAL);
							}
							break;
						}
						setState(619);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(620);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(628);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(627);
				for_clause();
				}
			}

			setState(631);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(630);
				option_clause();
				}
			}

			setState(634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(633);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDelete_statement_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDelete_statement_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDelete_statement_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_delete_statement_from);
		try {
			setState(640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(636);
				ddl_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(637);
				table_alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(638);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(639);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MocaSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(643);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(642);
				with_expression();
				}
			}

			setState(645);
			match(INSERT);
			setState(653);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(646);
				match(TOP);
				setState(647);
				match(LR_BRACKET);
				setState(648);
				expression(0);
				setState(649);
				match(RR_BRACKET);
				setState(651);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(650);
					match(PERCENT);
					}
				}

				}
			}

			setState(656);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(655);
				match(INTO);
				}
			}

			setState(660);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(658);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(659);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(662);
				insert_with_table_hints();
				}
				break;
			}
			setState(669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(665);
				match(LR_BRACKET);
				setState(666);
				column_name_list();
				setState(667);
				match(RR_BRACKET);
				}
				break;
			}
			setState(672);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(671);
				output_clause();
				}
			}

			setState(674);
			insert_statement_value();
			setState(676);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(675);
				for_clause();
				}
			}

			setState(679);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(678);
				option_clause();
				}
			}

			setState(682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(681);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterInsert_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitInsert_statement_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitInsert_statement_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_insert_statement_value);
		try {
			setState(689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(684);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(685);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(686);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(687);
				match(DEFAULT);
				setState(688);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(692);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(691);
				with_expression();
				}
			}

			setState(694);
			query_expression();
			setState(696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(695);
				order_by_clause();
				}
				break;
			}
			setState(699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(698);
				for_clause();
				}
				break;
			}
			setState(702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(701);
				option_clause();
				}
				break;
			}
			setState(705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(704);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_condition_listContext search_condition_list() {
			return getRuleContext(Search_condition_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(708);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(707);
				with_expression();
				}
			}

			setState(710);
			match(UPDATE);
			setState(718);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(711);
				match(TOP);
				setState(712);
				match(LR_BRACKET);
				setState(713);
				expression(0);
				setState(714);
				match(RR_BRACKET);
				setState(716);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(715);
					match(PERCENT);
					}
				}

				}
			}

			setState(722);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(720);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(721);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(725);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(724);
				with_table_hints();
				}
			}

			setState(727);
			match(SET);
			setState(728);
			update_elem();
			setState(733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(729);
				match(COMMA);
				setState(730);
				update_elem();
				}
				}
				setState(735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(737);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(736);
				output_clause();
				}
			}

			setState(741);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(739);
				match(FROM);
				setState(740);
				table_sources();
				}
			}

			setState(756);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(743);
				match(WHERE);
				setState(754);
				switch (_input.LA(1)) {
				case T__0:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_STAR:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(744);
					search_condition_list();
					}
					break;
				case CURRENT:
					{
					setState(745);
					match(CURRENT);
					setState(746);
					match(OF);
					setState(752);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
					case 1:
						{
						setState(748);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
						case 1:
							{
							setState(747);
							match(GLOBAL);
							}
							break;
						}
						setState(750);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(751);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(759);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(758);
				for_clause();
				}
			}

			setState(762);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(761);
				option_clause();
				}
			}

			setState(765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				setState(764);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOutput_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOutput_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOutput_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(767);
			match(OUTPUT);
			setState(768);
			output_dml_list_elem();
			setState(773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(769);
				match(COMMA);
				setState(770);
				output_dml_list_elem();
				}
				}
				setState(775);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(787);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(776);
				match(INTO);
				setState(779);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(777);
					match(LOCAL_ID);
					}
					break;
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(778);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(785);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
				case 1:
					{
					setState(781);
					match(LR_BRACKET);
					setState(782);
					column_name_list();
					setState(783);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOutput_dml_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOutput_dml_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOutput_dml_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_output_dml_list_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(789);
				output_column_name();
				}
				break;
			case 2:
				{
				setState(790);
				expression(0);
				}
				break;
			}
			setState(794);
			_la = _input.LA(1);
			if (_la==AS || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0) || _la==STRING) {
				{
				setState(793);
				as_column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_column_nameContext extends ParserRuleContext {
		public TerminalNode DELETED() { return getToken(MocaSqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(MocaSqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(MocaSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOutput_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOutput_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOutput_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_output_column_name);
		try {
			setState(807);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					setState(796);
					match(DELETED);
					}
					break;
				case 2:
					{
					setState(797);
					match(INSERTED);
					}
					break;
				case 3:
					{
					setState(798);
					table_name();
					}
					break;
				}
				setState(801);
				match(DOT);
				setState(804);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(802);
					match(STAR);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(803);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(806);
				match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(MocaSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(809);
			match(CREATE);
			setState(811);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(810);
				match(UNIQUE);
				}
			}

			setState(814);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(813);
				clustered();
				}
			}

			setState(816);
			match(INDEX);
			setState(817);
			id();
			setState(818);
			match(ON);
			setState(819);
			table_name_with_hint();
			setState(820);
			match(LR_BRACKET);
			setState(821);
			column_name_list_with_order();
			setState(822);
			match(RR_BRACKET);
			setState(828);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(823);
				match(INCLUDE);
				setState(824);
				match(LR_BRACKET);
				setState(825);
				column_name_list();
				setState(826);
				match(RR_BRACKET);
				}
			}

			setState(832);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(830);
				match(WHERE);
				setState(831);
				((Create_indexContext)_localctx).where = search_condition();
				}
			}

			setState(835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(834);
				index_options();
				}
				break;
			}
			setState(839);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(837);
				match(ON);
				setState(838);
				id();
				}
			}

			setState(842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(841);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode LOCK() { return getToken(MocaSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MocaSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MocaSqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(MocaSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(844);
			match(CREATE);
			setState(845);
			match(TABLE);
			setState(846);
			table_name();
			setState(847);
			match(LR_BRACKET);
			setState(848);
			column_def_table_constraints();
			setState(850);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(849);
				match(COMMA);
				}
			}

			setState(852);
			match(RR_BRACKET);
			setState(855);
			_la = _input.LA(1);
			if (_la==LOCK) {
				{
				setState(853);
				match(LOCK);
				setState(854);
				simple_id();
				}
			}

			setState(860);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(857);
					table_options();
					}
					} 
				}
				setState(862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,114,_ctx);
			}
			setState(866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(863);
				match(ON);
				setState(864);
				id();
				}
				break;
			case 2:
				{
				setState(865);
				match(DEFAULT);
				}
				break;
			}
			setState(871);
			switch (_input.LA(1)) {
			case TEXTIMAGE_ON:
				{
				setState(868);
				match(TEXTIMAGE_ON);
				setState(869);
				id();
				}
				break;
			case DEFAULT:
				{
				setState(870);
				match(DEFAULT);
				}
				break;
			case EOF:
			case ALTER:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(873);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(876);
			match(WITH);
			setState(896);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(877);
				match(LR_BRACKET);
				setState(878);
				index_option();
				setState(883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(879);
					match(COMMA);
					setState(880);
					index_option();
					}
					}
					setState(885);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(886);
				match(RR_BRACKET);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(888);
				index_option();
				setState(893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(889);
					match(COMMA);
					setState(890);
					index_option();
					}
					}
					setState(895);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MocaSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MocaSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MocaSqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MocaSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(898);
			match(CREATE);
			setState(899);
			match(VIEW);
			setState(900);
			simple_name();
			setState(905);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(901);
				match(LR_BRACKET);
				setState(902);
				column_name_list();
				setState(903);
				match(RR_BRACKET);
				}
			}

			setState(916);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(907);
				match(WITH);
				setState(908);
				view_attribute();
				setState(913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(909);
					match(COMMA);
					setState(910);
					view_attribute();
					}
					}
					setState(915);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(918);
			match(AS);
			setState(919);
			select_statement();
			setState(923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(920);
				match(WITH);
				setState(921);
				match(CHECK);
				setState(922);
				match(OPTION);
				}
				break;
			}
			setState(926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(925);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(MocaSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitView_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitView_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(928);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(MocaSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(MocaSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(MocaSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(MocaSqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(MocaSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return getRuleContext(Column_def_table_constraintContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(930);
			match(ALTER);
			setState(931);
			match(TABLE);
			setState(932);
			table_name();
			setState(976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				setState(933);
				match(SET);
				setState(934);
				match(LR_BRACKET);
				setState(935);
				match(LOCK_ESCALATION);
				setState(936);
				match(EQUAL);
				setState(937);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(938);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(939);
				match(ADD);
				setState(940);
				column_def_table_constraint();
				}
				break;
			case 3:
				{
				setState(941);
				match(ALTER);
				setState(942);
				match(COLUMN);
				setState(943);
				column_definition();
				}
				break;
			case 4:
				{
				setState(944);
				match(DROP);
				setState(945);
				match(COLUMN);
				setState(946);
				id();
				}
				break;
			case 5:
				{
				setState(947);
				match(DROP);
				setState(948);
				match(CONSTRAINT);
				setState(949);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 6:
				{
				setState(950);
				match(WITH);
				setState(951);
				match(CHECK);
				setState(952);
				match(ADD);
				setState(953);
				match(CONSTRAINT);
				setState(954);
				((Alter_tableContext)_localctx).constraint = id();
				setState(955);
				match(FOREIGN);
				setState(956);
				match(KEY);
				setState(957);
				match(LR_BRACKET);
				setState(958);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(959);
				match(RR_BRACKET);
				setState(960);
				match(REFERENCES);
				setState(961);
				table_name();
				setState(962);
				match(LR_BRACKET);
				setState(963);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(964);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(966);
				match(CHECK);
				setState(967);
				match(CONSTRAINT);
				setState(968);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 8:
				{
				setState(969);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(970);
				match(TRIGGER);
				setState(972);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
					{
					setState(971);
					id();
					}
				}

				}
				break;
			case 9:
				{
				setState(974);
				match(REBUILD);
				setState(975);
				table_options();
				}
				break;
			}
			setState(979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(978);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitHost(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitHost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_host);
		try {
			setState(991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(981);
				id();
				setState(982);
				match(DOT);
				setState(983);
				host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(985);
					id();
					setState(986);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(988);
					id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(993);
			match(DROP);
			setState(994);
			match(INDEX);
			setState(997);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(995);
				match(IF);
				setState(996);
				match(EXISTS);
				}
			}

			setState(1015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(999);
				drop_relational_or_xml_or_spatial_index();
				setState(1004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1000);
					match(COMMA);
					setState(1001);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(1006);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1007);
				drop_backward_compatible_index();
				setState(1012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1008);
					match(COMMA);
					setState(1009);
					drop_backward_compatible_index();
					}
					}
					setState(1014);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1017);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1020);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id();
			setState(1021);
			match(ON);
			setState(1022);
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_backward_compatible_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_backward_compatible_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_backward_compatible_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				setState(1024);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id();
				setState(1025);
				match(DOT);
				}
				break;
			}
			setState(1029);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id();
			setState(1030);
			match(DOT);
			setState(1031);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1033);
			match(DROP);
			setState(1034);
			match(TABLE);
			setState(1037);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1035);
				match(IF);
				setState(1036);
				match(EXISTS);
				}
			}

			setState(1039);
			table_name();
			setState(1041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(1040);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MocaSqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1043);
			match(DROP);
			setState(1044);
			match(VIEW);
			setState(1047);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1045);
				match(IF);
				setState(1046);
				match(EXISTS);
				}
			}

			setState(1049);
			simple_name();
			setState(1054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1050);
				match(COMMA);
				setState(1051);
				simple_name();
				}
				}
				setState(1056);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				setState(1057);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRowset_function_limited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRowset_function_limited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRowset_function_limited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_rowset_function_limited);
		try {
			setState(1062);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1060);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1061);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(MocaSqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOpenquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOpenquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOpenquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1064);
			match(OPENQUERY);
			setState(1065);
			match(LR_BRACKET);
			setState(1066);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(1067);
			match(COMMA);
			setState(1068);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(1069);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(MocaSqlParser.OPENDATASOURCE, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOpendatasource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOpendatasource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOpendatasource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1071);
			match(OPENDATASOURCE);
			setState(1072);
			match(LR_BRACKET);
			setState(1073);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(1074);
			match(COMMA);
			setState(1075);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(1076);
			match(RR_BRACKET);
			setState(1077);
			match(DOT);
			setState(1079);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
				{
				setState(1078);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(1081);
			match(DOT);
			setState(1083);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
				{
				setState(1082);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(1085);
			match(DOT);
			{
			setState(1086);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MocaSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_execute_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1088);
			match(EXECUTE);
			setState(1089);
			execute_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_bodyContext extends ParserRuleContext {
		public Token return_status;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_bodyContext execute_body() throws RecognitionException {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_execute_body);
		int _la;
		try {
			setState(1133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(1091);
					((Execute_bodyContext)_localctx).return_status = match(LOCAL_ID);
					setState(1092);
					match(EQUAL);
					}
					break;
				}
				setState(1097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1095);
					func_proc_name_server_database_schema();
					}
					break;
				case 2:
					{
					setState(1096);
					expression(0);
					}
					break;
				}
				setState(1107);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (DEFAULT - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)) | (1L << (NULL - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (LOCAL_ID - 746)) | (1L << (DECIMAL - 746)) | (1L << (ID - 746)))) != 0) || ((((_la - 811)) & ~0x3f) == 0 && ((1L << (_la - 811)) & ((1L << (STRING - 811)) | (1L << (BINARY - 811)) | (1L << (FLOAT - 811)) | (1L << (REAL - 811)) | (1L << (DOLLAR - 811)) | (1L << (PLUS - 811)) | (1L << (MINUS - 811)))) != 0)) {
					{
					setState(1099);
					execute_statement_arg();
					setState(1104);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1100);
						match(COMMA);
						setState(1101);
						execute_statement_arg();
						}
						}
						setState(1106);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1110);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(1109);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1112);
				match(LR_BRACKET);
				setState(1113);
				execute_var_string();
				setState(1118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1114);
					match(PLUS);
					setState(1115);
					execute_var_string();
					}
					}
					setState(1120);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1121);
				match(RR_BRACKET);
				setState(1128);
				_la = _input.LA(1);
				if (_la==AS || _la==USER || _la==LOGIN) {
					{
					setState(1123);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1122);
						match(AS);
						}
					}

					setState(1125);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(1126);
					match(EQUAL);
					setState(1127);
					match(STRING);
					}
				}

				setState(1131);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					setState(1130);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(MocaSqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_statement_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_statement_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_statement_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				setState(1135);
				((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(1136);
				match(EQUAL);
				}
				break;
			}
			setState(1148);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(1141);
				switch (_input.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(1139);
					constant_LOCAL_ID();
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1140);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1144);
				_la = _input.LA(1);
				if (_la==OUT || _la==OUTPUT) {
					{
					setState(1143);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				break;
			case DEFAULT:
				{
				setState(1146);
				match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(1147);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_var_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_var_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_var_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1150);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_def_table_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_def_table_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1152);
			column_def_table_constraint();
			setState(1159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1154);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1153);
						match(COMMA);
						}
					}

					setState(1156);
					column_def_table_constraint();
					}
					} 
				}
				setState(1161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return getRuleContext(Materialized_column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_def_table_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_def_table_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_def_table_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_column_def_table_constraint);
		try {
			setState(1165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1162);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1163);
				materialized_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1164);
				table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext constraint;
		public Token seed;
		public Token increment;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(MocaSqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1167);
			id();
			setState(1171);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case DOUBLE:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(1168);
				data_type();
				}
				break;
			case AS:
				{
				setState(1169);
				match(AS);
				setState(1170);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1175);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(1173);
				match(COLLATE);
				setState(1174);
				id();
				}
			}

			setState(1178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(1177);
				null_notnull();
				}
				break;
			}
			setState(1201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(1182);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1180);
					match(CONSTRAINT);
					setState(1181);
					((Column_definitionContext)_localctx).constraint = id();
					}
				}

				setState(1184);
				null_or_default();
				setState(1186);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
				case 1:
					{
					setState(1185);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1188);
				match(IDENTITY);
				setState(1194);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					setState(1189);
					match(LR_BRACKET);
					setState(1190);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(1191);
					match(COMMA);
					setState(1192);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(1193);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1199);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
				case 1:
					{
					setState(1196);
					match(NOT);
					setState(1197);
					match(FOR);
					setState(1198);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(1204);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(1203);
				match(ROWGUIDCOL);
				}
			}

			setState(1209);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,171,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1206);
					column_constraint();
					}
					} 
				}
				setState(1211);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,171,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Materialized_column_definitionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(MocaSqlParser.COMPUTE, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode MATERIALIZED() { return getToken(MocaSqlParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMaterialized_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMaterialized_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMaterialized_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Materialized_column_definitionContext materialized_column_definition() throws RecognitionException {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_materialized_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1212);
			id();
			setState(1213);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1214);
			expression(0);
			setState(1218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(1215);
				match(MATERIALIZED);
				}
				break;
			case 2:
				{
				setState(1216);
				match(NOT);
				setState(1217);
				match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1222);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1220);
				match(CONSTRAINT);
				setState(1221);
				((Column_constraintContext)_localctx).constraint = id();
				}
			}

			setState(1261);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(1227);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(1224);
					match(PRIMARY);
					setState(1225);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1226);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1230);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(1229);
					clustered();
					}
				}

				setState(1233);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(1232);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(1235);
				match(CHECK);
				setState(1239);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1236);
					match(NOT);
					setState(1237);
					match(FOR);
					setState(1238);
					match(REPLICATION);
					}
				}

				setState(1241);
				match(LR_BRACKET);
				setState(1242);
				search_condition();
				setState(1243);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(1247);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(1245);
					match(FOREIGN);
					setState(1246);
					match(KEY);
					}
				}

				setState(1249);
				match(REFERENCES);
				setState(1250);
				table_name();
				setState(1251);
				match(LR_BRACKET);
				setState(1252);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(1253);
				match(RR_BRACKET);
				setState(1255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					setState(1254);
					on_delete();
					}
					break;
				}
				setState(1258);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1257);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				setState(1260);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(MocaSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(MocaSqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1263);
				match(CONSTRAINT);
				setState(1264);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(1331);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(1270);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(1267);
					match(PRIMARY);
					setState(1268);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(1269);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1273);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(1272);
					clustered();
					}
				}

				setState(1275);
				match(LR_BRACKET);
				setState(1276);
				column_name_list_with_order();
				setState(1277);
				match(RR_BRACKET);
				setState(1279);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					setState(1278);
					index_options();
					}
					break;
				}
				setState(1283);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1281);
					match(ON);
					setState(1282);
					id();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(1285);
				match(CHECK);
				setState(1289);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1286);
					match(NOT);
					setState(1287);
					match(FOR);
					setState(1288);
					match(REPLICATION);
					}
				}

				setState(1291);
				match(LR_BRACKET);
				setState(1292);
				search_condition();
				setState(1293);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(1295);
				match(DEFAULT);
				setState(1297);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1296);
					match(LR_BRACKET);
					}
				}

				setState(1303); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1303);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(1299);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(1300);
						match(PLUS);
						}
						break;
					case CALLED:
					case COALESCE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case EXPIREDATE:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case IDENTITY:
					case IIF:
					case INIT:
					case ISNULL:
					case KEY:
					case LEFT:
					case MASTER:
					case MAX_MEMORY:
					case NULLIF:
					case OFFSETS:
					case PAGE:
					case POLICY:
					case PRECISION:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case RIGHT:
					case ROLE:
					case ROWCOUNT:
					case SAFETY:
					case RULE:
					case SERVER:
					case SESSION_USER:
					case SID:
					case SOURCE:
					case SPLIT:
					case STATE:
					case START:
					case STOP:
					case SYSTEM_USER:
					case TARGET:
					case TRAN:
					case URL:
					case USER:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
						{
						setState(1301);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(1302);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1305); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || _la==COALESCE || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (CONVERT - 70)) | (1L << (CURRENT_TIMESTAMP - 70)) | (1L << (CURRENT_USER - 70)) | (1L << (DATA_COMPRESSION - 70)) | (1L << (EVENTDATA - 70)) | (1L << (EXPIREDATE - 70)) | (1L << (FILENAME - 70)) | (1L << (FILLFACTOR - 70)) | (1L << (FORCESEEK - 70)))) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (IDENTITY - 149)) | (1L << (IIF - 149)) | (1L << (INIT - 149)) | (1L << (ISNULL - 149)) | (1L << (KEY - 149)) | (1L << (LEFT - 149)) | (1L << (MASTER - 149)) | (1L << (MAX_MEMORY - 149)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (NULLIF - 223)) | (1L << (OFFSETS - 223)) | (1L << (PAGE - 223)) | (1L << (POLICY - 223)) | (1L << (PRECISION - 223)) | (1L << (PUBLIC - 223)) | (1L << (R - 223)) | (1L << (RAW - 223)) | (1L << (RETURN - 223)) | (1L << (RETURNS - 223)) | (1L << (RIGHT - 223)))) != 0) || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (ROLE - 288)) | (1L << (ROWCOUNT - 288)) | (1L << (SAFETY - 288)) | (1L << (RULE - 288)) | (1L << (SERVER - 288)) | (1L << (SESSION_USER - 288)) | (1L << (SID - 288)) | (1L << (SOURCE - 288)) | (1L << (SPLIT - 288)) | (1L << (STATE - 288)) | (1L << (START - 288)) | (1L << (STOP - 288)) | (1L << (SYSTEM_USER - 288)) | (1L << (TARGET - 288)) | (1L << (TRAN - 288)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (LOCAL_ID - 746)) | (1L << (DECIMAL - 746)) | (1L << (ID - 746)))) != 0) || _la==STRING || _la==PLUS );
				setState(1308);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(1307);
					match(RR_BRACKET);
					}
				}

				setState(1310);
				match(FOR);
				setState(1311);
				id();
				}
				break;
			case FOREIGN:
				{
				setState(1312);
				match(FOREIGN);
				setState(1313);
				match(KEY);
				setState(1314);
				match(LR_BRACKET);
				setState(1315);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(1316);
				match(RR_BRACKET);
				setState(1317);
				match(REFERENCES);
				setState(1318);
				table_name();
				setState(1323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(1319);
					match(LR_BRACKET);
					setState(1320);
					((Table_constraintContext)_localctx).pk = column_name_list();
					setState(1321);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1326);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					setState(1325);
					on_delete();
					}
					break;
				}
				setState(1329);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(1328);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(MocaSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOn_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOn_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1333);
			match(ON);
			setState(1334);
			match(DELETE);
			setState(1342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(1335);
				match(NO);
				setState(1336);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(1337);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(1338);
				match(SET);
				setState(1339);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(1340);
				match(SET);
				setState(1341);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(MocaSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOn_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOn_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1344);
			match(ON);
			setState(1345);
			match(UPDATE);
			setState(1353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(1346);
				match(NO);
				setState(1347);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(1348);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(1349);
				match(SET);
				setState(1350);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(1351);
				match(SET);
				setState(1352);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIndex_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIndex_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIndex_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1355);
			match(WITH);
			setState(1356);
			match(LR_BRACKET);
			setState(1357);
			index_option();
			setState(1362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1358);
				match(COMMA);
				setState(1359);
				index_option();
				}
				}
				setState(1364);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1365);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIndex_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIndex_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1367);
			simple_id();
			setState(1368);
			match(EQUAL);
			setState(1372);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(1369);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(1370);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(1371);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterConstant_LOCAL_ID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitConstant_LOCAL_ID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitConstant_LOCAL_ID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_constant_LOCAL_ID);
		try {
			setState(1376);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1374);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1375);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public Moca_at_variableContext moca_at_variable() {
			return getRuleContext(Moca_at_variableContext.class,0);
		}
		public Moca_at_minus_variableContext moca_at_minus_variable() {
			return getRuleContext(Moca_at_minus_variableContext.class,0);
		}
		public Moca_environment_variableContext moca_environment_variable() {
			return getRuleContext(Moca_environment_variableContext.class,0);
		}
		public Moca_integration_variableContext moca_integration_variable() {
			return getRuleContext(Moca_integration_variableContext.class,0);
		}
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return getRuleContext(Unary_operator_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 102;
		enterRecursionRule(_localctx, 102, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				setState(1379);
				moca_at_variable();
				}
				break;
			case 2:
				{
				setState(1380);
				moca_at_minus_variable();
				}
				break;
			case 3:
				{
				setState(1381);
				moca_environment_variable();
				}
				break;
			case 4:
				{
				setState(1382);
				moca_integration_variable();
				}
				break;
			case 5:
				{
				setState(1383);
				primitive_expression();
				}
				break;
			case 6:
				{
				setState(1384);
				function_call();
				}
				break;
			case 7:
				{
				setState(1385);
				case_expression();
				}
				break;
			case 8:
				{
				setState(1386);
				full_column_name();
				}
				break;
			case 9:
				{
				setState(1387);
				bracket_expression();
				}
				break;
			case 10:
				{
				setState(1388);
				unary_operator_expression();
				}
				break;
			case 11:
				{
				setState(1389);
				over_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1411);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1409);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1392);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1393);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 841)) & ~0x3f) == 0 && ((1L << (_la - 841)) & ((1L << (STAR - 841)) | (1L << (DIVIDE - 841)) | (1L << (MODULE - 841)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(1394);
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1395);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1396);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 830)) & ~0x3f) == 0 && ((1L << (_la - 830)) & ((1L << (DOUBLE_BAR - 830)) | (1L << (PLUS - 830)) | (1L << (MINUS - 830)) | (1L << (BIT_OR - 830)) | (1L << (BIT_AND - 830)) | (1L << (BIT_XOR - 830)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(1397);
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1398);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1399);
						comparison_operator();
						setState(1400);
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1402);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1403);
						assignment_operator();
						setState(1404);
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(1406);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(1407);
						match(COLLATE);
						setState(1408);
						id();
						}
						break;
					}
					} 
				}
				setState(1413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Moca_at_variableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode MOCA_ONSTACK() { return getToken(MocaSqlParser.MOCA_ONSTACK, 0); }
		public TerminalNode MOCA_IGNORE() { return getToken(MocaSqlParser.MOCA_IGNORE, 0); }
		public Moca_at_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_variableContext moca_at_variable() throws RecognitionException {
		Moca_at_variableContext _localctx = new Moca_at_variableContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_moca_at_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1414);
			match(LOCAL_ID);
			setState(1417);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(1415);
				match(DOT);
				setState(1416);
				simple_id();
				}
				break;
			}
			setState(1429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				{
				setState(1419);
				match(COLON);
				setState(1420);
				simple_id();
				}
				}
				break;
			case 2:
				{
				setState(1427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					{
					setState(1421);
					match(SHARP);
					setState(1422);
					match(KEEP);
					}
					}
					break;
				case 2:
					{
					{
					setState(1423);
					match(SHARP);
					setState(1424);
					match(MOCA_ONSTACK);
					}
					}
					break;
				case 3:
					{
					{
					setState(1425);
					match(SHARP);
					setState(1426);
					match(MOCA_IGNORE);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_environment_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_ENVIRONMENT_VARIABLE() { return getToken(MocaSqlParser.MOCA_ENVIRONMENT_VARIABLE, 0); }
		public Moca_environment_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_environment_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_environment_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_environment_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_environment_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_environment_variableContext moca_environment_variable() throws RecognitionException {
		Moca_environment_variableContext _localctx = new Moca_environment_variableContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_moca_environment_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1431);
			match(MOCA_ENVIRONMENT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_minus_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_MINUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_MINUS_VARIABLE, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode MOCA_ONSTACK() { return getToken(MocaSqlParser.MOCA_ONSTACK, 0); }
		public TerminalNode MOCA_IGNORE() { return getToken(MocaSqlParser.MOCA_IGNORE, 0); }
		public Moca_at_minus_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_minus_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_minus_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_minus_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_minus_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_minus_variableContext moca_at_minus_variable() throws RecognitionException {
		Moca_at_minus_variableContext _localctx = new Moca_at_minus_variableContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_moca_at_minus_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1433);
			match(MOCA_AT_MINUS_VARIABLE);
			setState(1436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(1434);
				match(DOT);
				setState(1435);
				simple_id();
				}
				break;
			}
			setState(1448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				{
				setState(1438);
				match(COLON);
				setState(1439);
				simple_id();
				}
				}
				break;
			case 2:
				{
				setState(1446);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					{
					setState(1440);
					match(SHARP);
					setState(1441);
					match(KEEP);
					}
					}
					break;
				case 2:
					{
					{
					setState(1442);
					match(SHARP);
					setState(1443);
					match(MOCA_ONSTACK);
					}
					}
					break;
				case 3:
					{
					{
					setState(1444);
					match(SHARP);
					setState(1445);
					match(MOCA_IGNORE);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_PLUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_PLUS_VARIABLE, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode BIT_XOR() { return getToken(MocaSqlParser.BIT_XOR, 0); }
		public Moca_at_plus_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_variableContext moca_at_plus_variable() throws RecognitionException {
		Moca_at_plus_variableContext _localctx = new Moca_at_plus_variableContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_moca_at_plus_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1450);
			match(MOCA_AT_PLUS_VARIABLE);
			setState(1453);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(1451);
				match(DOT);
				setState(1452);
				simple_id();
				}
			}

			setState(1459);
			switch (_input.LA(1)) {
			case COLON:
				{
				{
				setState(1455);
				match(COLON);
				setState(1456);
				simple_id();
				}
				}
				break;
			case BIT_XOR:
				{
				{
				setState(1457);
				match(BIT_XOR);
				setState(1458);
				simple_id();
				}
				}
				break;
			case EOF:
			case ALTER:
			case AND:
			case AS:
			case CALLED:
			case CREATE:
			case CROSS:
			case DATA_COMPRESSION:
			case DELETE:
			case DROP:
			case EVENTDATA:
			case EXCEPT:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FOR:
			case FORCESEEK:
			case FULL:
			case GROUP:
			case HAVING:
			case INIT:
			case INNER:
			case INSERT:
			case INTERSECT:
			case JOIN:
			case KEY:
			case LEFT:
			case MASTER:
			case MAX_MEMORY:
			case MERGE:
			case OFFSETS:
			case ON:
			case OPTION:
			case OR:
			case ORDER:
			case OUTER:
			case PAGE:
			case PIVOT:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case RIGHT:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SELECT:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case THEN:
			case TRAN:
			case UNION:
			case UNPIVOT:
			case UPDATE:
			case URL:
			case USER:
			case WHEN:
			case WHERE:
			case WITH:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_starContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_STAR() { return getToken(MocaSqlParser.MOCA_AT_STAR, 0); }
		public Moca_at_starContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_star; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_star(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_star(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_starContext moca_at_star() throws RecognitionException {
		Moca_at_starContext _localctx = new Moca_at_starContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_moca_at_star);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1461);
			match(MOCA_AT_STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_integration_variableContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_integration_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_integration_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_integration_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_integration_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_integration_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_integration_variableContext moca_integration_variable() throws RecognitionException {
		Moca_integration_variableContext _localctx = new Moca_integration_variableContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_moca_integration_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1463);
			match(T__0);
			setState(1464);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPrimitive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPrimitive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_primitive_expression);
		try {
			setState(1470);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466);
				match(DEFAULT);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467);
				match(NULL);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(1468);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(1469);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(MocaSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MocaSqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MocaSqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_case_expression);
		int _la;
		try {
			setState(1497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1472);
				match(CASE);
				setState(1473);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(1475); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1474);
					switch_section();
					}
					}
					setState(1477); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(1481);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(1479);
					match(ELSE);
					setState(1480);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(1483);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1485);
				match(CASE);
				setState(1487); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1486);
					switch_search_condition_section();
					}
					}
					setState(1489); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(1493);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(1491);
					match(ELSE);
					setState(1492);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(1495);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operator_expressionContext extends ParserRuleContext {
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUnary_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUnary_operator_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUnary_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_operator_expressionContext unary_operator_expression() throws RecognitionException {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_unary_operator_expression);
		int _la;
		try {
			setState(1503);
			switch (_input.LA(1)) {
			case BIT_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1499);
				match(BIT_NOT);
				setState(1500);
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1501);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1502);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBracket_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBracket_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_bracket_expression);
		try {
			setState(1513);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1505);
				match(LR_BRACKET);
				setState(1506);
				expression(0);
				setState(1507);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1509);
				match(LR_BRACKET);
				setState(1510);
				subquery();
				setState(1511);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitConstant_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitConstant_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_constant_expression);
		try {
			setState(1523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1515);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1516);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1517);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1518);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1519);
				match(LR_BRACKET);
				setState(1520);
				constant_expression();
				setState(1521);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(MocaSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(MocaSqlParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWith_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWith_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_with_expression);
		int _la;
		try {
			setState(1553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1527);
				match(WITH);
				setState(1530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					setState(1528);
					match(XMLNAMESPACES);
					setState(1529);
					match(COMMA);
					}
					break;
				}
				setState(1532);
				common_table_expression();
				setState(1537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1533);
					match(COMMA);
					setState(1534);
					common_table_expression();
					}
					}
					setState(1539);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1540);
				match(WITH);
				setState(1541);
				match(BLOCKING_HIERARCHY);
				setState(1546);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1542);
					match(LR_BRACKET);
					setState(1543);
					full_column_name_list();
					setState(1544);
					match(RR_BRACKET);
					}
				}

				setState(1548);
				match(AS);
				setState(1549);
				match(LR_BRACKET);
				setState(1550);
				select_statement();
				setState(1551);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCommon_table_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCommon_table_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1555);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(1560);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1556);
				match(LR_BRACKET);
				setState(1557);
				column_name_list();
				setState(1558);
				match(RR_BRACKET);
				}
			}

			setState(1562);
			match(AS);
			setState(1563);
			match(LR_BRACKET);
			setState(1564);
			select_statement();
			setState(1565);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUpdate_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUpdate_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_update_elem);
		try {
			setState(1583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1569);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1567);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(1568);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1573);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(1571);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(1572);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1575);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1576);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(1577);
				match(DOT);
				setState(1578);
				((Update_elemContext)_localctx).method_name = id();
				setState(1579);
				match(LR_BRACKET);
				setState(1580);
				expression_list();
				setState(1581);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_listContext extends ParserRuleContext {
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_listContext search_condition_list() throws RecognitionException {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_search_condition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1585);
			search_condition();
			setState(1590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1586);
				match(COMMA);
				setState(1587);
				search_condition();
				}
				}
				setState(1592);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_andContext> search_condition_and() {
			return getRuleContexts(Search_condition_andContext.class);
		}
		public Search_condition_andContext search_condition_and(int i) {
			return getRuleContext(Search_condition_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(MocaSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(MocaSqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1593);
			search_condition_and();
			setState(1598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1594);
				match(OR);
				setState(1595);
				search_condition_and();
				}
				}
				setState(1600);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_andContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MocaSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MocaSqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_andContext search_condition_and() throws RecognitionException {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_search_condition_and);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1601);
			search_condition_not();
			setState(1606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(1602);
				match(AND);
				setState(1603);
				search_condition_not();
				}
				}
				setState(1608);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1610);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1609);
				match(NOT);
				}
			}

			setState(1612);
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(MocaSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(MocaSqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(MocaSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(MocaSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(MocaSqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(MocaSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Moca_at_plus_variableContext moca_at_plus_variable() {
			return getRuleContext(Moca_at_plus_variableContext.class,0);
		}
		public Moca_at_starContext moca_at_star() {
			return getRuleContext(Moca_at_starContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode MOCA_AT_MINUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_MINUS_VARIABLE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_predicate);
		int _la;
		try {
			setState(1685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1614);
				match(EXISTS);
				setState(1615);
				match(LR_BRACKET);
				setState(1616);
				subquery();
				setState(1617);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1619);
				expression(0);
				setState(1620);
				comparison_operator();
				setState(1621);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1623);
				expression(0);
				setState(1624);
				comparison_operator();
				setState(1625);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1626);
				match(LR_BRACKET);
				setState(1627);
				subquery();
				setState(1628);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1630);
				expression(0);
				setState(1632);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1631);
					match(NOT);
					}
				}

				setState(1634);
				match(BETWEEN);
				setState(1635);
				expression(0);
				setState(1636);
				match(AND);
				setState(1637);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1639);
				expression(0);
				setState(1641);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1640);
					match(NOT);
					}
				}

				setState(1643);
				match(IN);
				setState(1644);
				match(LR_BRACKET);
				setState(1647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					setState(1645);
					subquery();
					}
					break;
				case 2:
					{
					setState(1646);
					expression_list();
					}
					break;
				}
				setState(1649);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1651);
				expression(0);
				setState(1653);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1652);
					match(NOT);
					}
				}

				setState(1655);
				match(LIKE);
				setState(1656);
				expression(0);
				setState(1659);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(1657);
					match(ESCAPE);
					setState(1658);
					expression(0);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1661);
				expression(0);
				setState(1662);
				match(IS);
				setState(1663);
				null_notnull();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1665);
				moca_at_plus_variable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1666);
				moca_at_star();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1667);
				match(LOCAL_ID);
				setState(1670);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1668);
					match(DOT);
					setState(1669);
					simple_id();
					}
				}

				setState(1672);
				match(COLON);
				setState(1673);
				match(RAW);
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1674);
				match(MOCA_AT_MINUS_VARIABLE);
				setState(1677);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1675);
					match(DOT);
					setState(1676);
					simple_id();
					}
				}

				setState(1679);
				match(COLON);
				setState(1680);
				match(RAW);
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1681);
				match(LR_BRACKET);
				setState(1682);
				search_condition();
				setState(1683);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public List<Sql_unionContext> sql_union() {
			return getRuleContexts(Sql_unionContext.class);
		}
		public Sql_unionContext sql_union(int i) {
			return getRuleContext(Sql_unionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_query_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1692);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(1687);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(1688);
				match(LR_BRACKET);
				setState(1689);
				query_expression();
				setState(1690);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1697);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1694);
					sql_union();
					}
					} 
				}
				setState(1699);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_unionContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(MocaSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(MocaSqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(MocaSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public Sql_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSql_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSql_union(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSql_union(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_unionContext sql_union() throws RecognitionException {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_sql_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1706);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(1700);
				match(UNION);
				setState(1702);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1701);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(1704);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(1705);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1713);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(1708);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(1709);
				match(LR_BRACKET);
				setState(1710);
				query_expression();
				setState(1711);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(MocaSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(MocaSqlParser.HAVING, 0); }
		public List<TerminalNode> ALL() { return getTokens(MocaSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(MocaSqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(MocaSqlParser.DISTINCT, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1715);
			match(SELECT);
			setState(1717);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1716);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(1720);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(1719);
				top_clause();
				}
			}

			setState(1722);
			select_list();
			setState(1725);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1723);
				match(INTO);
				setState(1724);
				table_name();
				}
			}

			setState(1729);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1727);
				match(FROM);
				setState(1728);
				table_sources();
				}
			}

			setState(1733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				setState(1731);
				match(WHERE);
				setState(1732);
				((Query_specificationContext)_localctx).where = search_condition();
				}
				break;
			}
			setState(1748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				{
				setState(1735);
				match(GROUP);
				setState(1736);
				match(BY);
				setState(1738);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1737);
					match(ALL);
					}
				}

				setState(1740);
				group_by_item();
				setState(1745);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1741);
						match(COMMA);
						setState(1742);
						group_by_item();
						}
						} 
					}
					setState(1747);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
				}
				}
				break;
			}
			setState(1752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(1750);
				match(HAVING);
				setState(1751);
				((Query_specificationContext)_localctx).having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(MocaSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(TOP);
			setState(1757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				setState(1755);
				top_percent();
				}
				break;
			case 2:
				{
				setState(1756);
				top_count();
				}
				break;
			}
			setState(1761);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1759);
				match(WITH);
				setState(1760);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_percentContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(MocaSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(MocaSqlParser.FLOAT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTop_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTop_percent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTop_percent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_top_percent);
		int _la;
		try {
			setState(1770);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1763);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1764);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1765);
				match(LR_BRACKET);
				setState(1766);
				expression(0);
				setState(1767);
				match(RR_BRACKET);
				setState(1768);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTop_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTop_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTop_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_top_count);
		try {
			setState(1777);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1772);
				match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1773);
				match(LR_BRACKET);
				setState(1774);
				expression(0);
				setState(1775);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MocaSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(MocaSqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(MocaSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(MocaSqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MocaSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MocaSqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(MocaSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(MocaSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1779);
			match(ORDER);
			setState(1780);
			match(BY);
			setState(1781);
			order_by_expression();
			setState(1786);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1782);
					match(COMMA);
					setState(1783);
					order_by_expression();
					}
					} 
				}
				setState(1788);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
			}
			setState(1800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(1789);
				match(OFFSET);
				setState(1790);
				expression(0);
				setState(1791);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1798);
				_la = _input.LA(1);
				if (_la==FETCH) {
					{
					setState(1792);
					match(FETCH);
					setState(1793);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(1794);
					expression(0);
					setState(1795);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(1796);
					match(ONLY);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(MocaSqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode RAW() { return getToken(MocaSqlParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode ELEMENTS() { return getToken(MocaSqlParser.ELEMENTS, 0); }
		public TerminalNode XSINIL() { return getToken(MocaSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(MocaSqlParser.ABSENT, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode XMLDATA() { return getToken(MocaSqlParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(MocaSqlParser.XMLSCHEMA, 0); }
		public TerminalNode EXPLICIT() { return getToken(MocaSqlParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode JSON() { return getToken(MocaSqlParser.JSON, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(MocaSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(MocaSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(1890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1802);
				match(FOR);
				setState(1803);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1804);
				match(FOR);
				setState(1805);
				match(XML);
				setState(1813);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(1806);
					match(RAW);
					setState(1810);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
					case 1:
						{
						setState(1807);
						match(LR_BRACKET);
						setState(1808);
						match(STRING);
						setState(1809);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					setState(1812);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1818);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1815);
						xml_common_directives();
						}
						} 
					}
					setState(1820);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				}
				setState(1831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					setState(1821);
					match(COMMA);
					setState(1829);
					switch (_input.LA(1)) {
					case XMLDATA:
						{
						setState(1822);
						match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						setState(1823);
						match(XMLSCHEMA);
						setState(1827);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
						case 1:
							{
							setState(1824);
							match(LR_BRACKET);
							setState(1825);
							match(STRING);
							setState(1826);
							match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(1836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(1833);
					match(COMMA);
					setState(1834);
					match(ELEMENTS);
					setState(1835);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1838);
				match(FOR);
				setState(1839);
				match(XML);
				setState(1840);
				match(EXPLICIT);
				setState(1844);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1841);
						xml_common_directives();
						}
						} 
					}
					setState(1846);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
				}
				setState(1849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(1847);
					match(COMMA);
					setState(1848);
					match(XMLDATA);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1851);
				match(FOR);
				setState(1852);
				match(XML);
				setState(1853);
				match(PATH);
				setState(1857);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					setState(1854);
					match(LR_BRACKET);
					setState(1855);
					match(STRING);
					setState(1856);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,272,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1859);
						xml_common_directives();
						}
						} 
					}
					setState(1864);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,272,_ctx);
				}
				setState(1868);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
				case 1:
					{
					setState(1865);
					match(COMMA);
					setState(1866);
					match(ELEMENTS);
					setState(1867);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1870);
				match(FOR);
				setState(1871);
				match(JSON);
				setState(1872);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
				case 1:
					{
					setState(1873);
					match(COMMA);
					setState(1874);
					match(ROOT);
					setState(1878);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
					case 1:
						{
						setState(1875);
						match(LR_BRACKET);
						setState(1876);
						match(STRING);
						setState(1877);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(1884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(1882);
					match(COMMA);
					setState(1883);
					match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				setState(1888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(1886);
					match(COMMA);
					setState(1887);
					match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode BINARY_BASE64() { return getToken(MocaSqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXml_common_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXml_common_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXml_common_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_xml_common_directives);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1892);
			match(COMMA);
			setState(1901);
			switch (_input.LA(1)) {
			case BINARY_BASE64:
				{
				setState(1893);
				match(BINARY_BASE64);
				}
				break;
			case TYPE:
				{
				setState(1894);
				match(TYPE);
				}
				break;
			case ROOT:
				{
				setState(1895);
				match(ROOT);
				setState(1899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					setState(1896);
					match(LR_BRACKET);
					setState(1897);
					match(STRING);
					setState(1898);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MocaSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MocaSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOrder_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOrder_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1903);
			expression(0);
			setState(1905);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1904);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1907);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(MocaSqlParser.OPTION, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOption_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOption_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOption_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1909);
			match(OPTION);
			setState(1910);
			match(LR_BRACKET);
			setState(1911);
			option();
			setState(1916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1912);
				match(COMMA);
				setState(1913);
				option();
				}
				}
				setState(1918);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1919);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(MocaSqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(MocaSqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(MocaSqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(MocaSqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(MocaSqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(MocaSqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(MocaSqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(MocaSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(MocaSqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(MocaSqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(MocaSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(MocaSqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MocaSqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(MocaSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(MocaSqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(MocaSqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(MocaSqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_option);
		int _la;
		try {
			setState(1966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1921);
				match(FAST);
				setState(1922);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1923);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1924);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1925);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1926);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1927);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1928);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1929);
				match(EXPAND);
				setState(1930);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1931);
				match(FORCE);
				setState(1932);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1933);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1934);
				match(KEEP);
				setState(1935);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1936);
				match(KEEPFIXED);
				setState(1937);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1938);
				match(MAXDOP);
				setState(1939);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1940);
				match(MAXRECURSION);
				setState(1941);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1942);
				match(OPTIMIZE);
				setState(1943);
				match(FOR);
				setState(1944);
				match(LR_BRACKET);
				setState(1945);
				optimize_for_arg();
				setState(1950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1946);
					match(COMMA);
					setState(1947);
					optimize_for_arg();
					}
					}
					setState(1952);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1953);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1955);
				match(OPTIMIZE);
				setState(1956);
				match(FOR);
				setState(1957);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1958);
				match(PARAMETERIZATION);
				setState(1959);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1960);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1961);
				match(ROBUST);
				setState(1962);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1963);
				match(USE);
				setState(1964);
				match(PLAN);
				setState(1965);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOptimize_for_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOptimize_for_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOptimize_for_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1968);
			match(LOCAL_ID);
			setState(1975);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(1969);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(1970);
				match(EQUAL);
				setState(1973);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(1971);
					constant();
					}
					break;
				case NULL:
					{
					setState(1972);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			select_list_elem();
			setState(1982);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1978);
					match(COMMA);
					setState(1979);
					select_list_elem();
					}
					} 
				}
				setState(1984);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,287,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_method_argumentsContext extends ParserRuleContext {
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_method_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUdt_method_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUdt_method_arguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUdt_method_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udt_method_argumentsContext udt_method_arguments() throws RecognitionException {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_udt_method_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1985);
			match(LR_BRACKET);
			setState(1986);
			execute_var_string();
			setState(1991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1987);
				match(COMMA);
				setState(1988);
				execute_var_string();
				}
				}
				setState(1993);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1994);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public AsteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAsterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAsterisk(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAsterisk(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskContext asterisk() throws RecognitionException {
		AsteriskContext _localctx = new AsteriskContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_asterisk);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1999);
			_la = _input.LA(1);
			if (_la==BLOCKING_HIERARCHY || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
				{
				setState(1996);
				table_name();
				setState(1997);
				match(DOT);
				}
			}

			setState(2001);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_elemContext extends ParserRuleContext {
		public IdContext column_name;
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(MocaSqlParser.ROWGUID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2016);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOLLAR:
				{
				setState(2006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2003);
					table_name();
					setState(2004);
					match(DOT);
					}
					break;
				}
				setState(2013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(2008);
					((Column_elemContext)_localctx).column_name = id();
					}
					break;
				case 2:
					{
					setState(2009);
					match(DOLLAR);
					setState(2010);
					match(IDENTITY);
					}
					break;
				case 3:
					{
					setState(2011);
					match(DOLLAR);
					setState(2012);
					match(ROWGUID);
					}
					break;
				}
				}
				break;
			case NULL:
				{
				setState(2015);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2018);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return getRuleContext(Udt_method_argumentsContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUdt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUdt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUdt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udt_elemContext udt_elem() throws RecognitionException {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_udt_elem);
		try {
			setState(2038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2021);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(2022);
				match(DOT);
				setState(2023);
				((Udt_elemContext)_localctx).non_static_attr = id();
				setState(2024);
				udt_method_arguments();
				setState(2026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(2025);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2028);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(2029);
				match(COLON);
				setState(2030);
				match(COLON);
				setState(2031);
				((Udt_elemContext)_localctx).static_attr = id();
				setState(2033);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(2032);
					udt_method_arguments();
					}
					break;
				}
				setState(2036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2035);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_elemContext extends ParserRuleContext {
		public Token eq;
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExpression_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExpression_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExpression_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_expression_elem);
		try {
			setState(2048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2040);
				column_alias();
				setState(2041);
				((Expression_elemContext)_localctx).eq = match(EQUAL);
				setState(2042);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2044);
				expression(0);
				setState(2046);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2045);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public Udt_elemContext udt_elem() {
			return getRuleContext(Udt_elemContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSelect_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSelect_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_select_list_elem);
		try {
			setState(2054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2050);
				asterisk();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2051);
				column_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2052);
				udt_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2053);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_sources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_sources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_table_sources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2056);
			table_source();
			setState(2061);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,301,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2057);
					match(COMMA);
					setState(2058);
					table_source();
					}
					} 
				}
				setState(2063);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,301,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_table_source);
		try {
			setState(2069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2064);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2065);
				match(LR_BRACKET);
				setState(2066);
				table_source_item_joined();
				setState(2067);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_source_item_joined(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_source_item_joined(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_source_item_joined(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2071);
			table_source_item();
			setState(2075);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2072);
					join_part();
					}
					} 
				}
				setState(2077);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_source_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_source_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_source_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_table_source_item);
		try {
			setState(2127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2078);
				table_name_with_hint();
				setState(2080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					setState(2079);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2082);
				full_table_name();
				setState(2084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2083);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2086);
				rowset_function();
				setState(2088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(2087);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2090);
				derived_table();
				setState(2095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2091);
					as_table_alias();
					setState(2093);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
					case 1:
						{
						setState(2092);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2097);
				change_table();
				setState(2098);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2100);
				function_call();
				setState(2105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(2101);
					as_table_alias();
					setState(2103);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
					case 1:
						{
						setState(2102);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2107);
				match(LOCAL_ID);
				setState(2109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(2108);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2111);
				match(LOCAL_ID);
				setState(2112);
				match(DOT);
				setState(2113);
				function_call();
				setState(2118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(2114);
					as_table_alias();
					setState(2116);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
					case 1:
						{
						setState(2115);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2120);
				open_xml();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2121);
				match(COLON);
				setState(2122);
				match(COLON);
				setState(2123);
				function_call();
				setState(2125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(2124);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(MocaSqlParser.OPENXML, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOpen_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOpen_xml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOpen_xml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2129);
			match(OPENXML);
			setState(2130);
			match(LR_BRACKET);
			setState(2131);
			expression(0);
			setState(2132);
			match(COMMA);
			setState(2133);
			expression(0);
			setState(2136);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2134);
				match(COMMA);
				setState(2135);
				expression(0);
				}
			}

			setState(2138);
			match(RR_BRACKET);
			setState(2144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2139);
				match(WITH);
				setState(2140);
				match(LR_BRACKET);
				setState(2141);
				schema_declaration();
				setState(2142);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSchema_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSchema_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSchema_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2146);
			column_declaration();
			setState(2151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2147);
				match(COMMA);
				setState(2148);
				column_declaration();
				}
				}
				setState(2153);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2154);
			match(ID);
			setState(2155);
			data_type();
			setState(2157);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(2156);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode CHANGETABLE() { return getToken(MocaSqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(MocaSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterChange_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitChange_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitChange_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			match(CHANGETABLE);
			setState(2160);
			match(LR_BRACKET);
			setState(2161);
			match(CHANGES);
			setState(2162);
			table_name();
			setState(2163);
			match(COMMA);
			setState(2164);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2165);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Token join_type;
		public Token join_hint;
		public TerminalNode JOIN() { return getToken(MocaSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MocaSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MocaSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(MocaSqlParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(MocaSqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(MocaSqlParser.OUTER, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode CROSS() { return getToken(MocaSqlParser.CROSS, 0); }
		public TerminalNode APPLY() { return getToken(MocaSqlParser.APPLY, 0); }
		public TerminalNode PIVOT() { return getToken(MocaSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(MocaSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterJoin_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitJoin_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitJoin_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_join_part);
		int _la;
		try {
			setState(2201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2174);
				switch (_input.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					setState(2168);
					_la = _input.LA(1);
					if (_la==INNER) {
						{
						setState(2167);
						match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(2170);
					((Join_partContext)_localctx).join_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						((Join_partContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(2172);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(2171);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2177);
				_la = _input.LA(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					setState(2176);
					((Join_partContext)_localctx).join_hint = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						((Join_partContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(2179);
				match(JOIN);
				setState(2180);
				table_source();
				setState(2181);
				match(ON);
				setState(2182);
				search_condition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2184);
				match(CROSS);
				setState(2185);
				match(JOIN);
				setState(2186);
				table_source();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2187);
				match(CROSS);
				setState(2188);
				match(APPLY);
				setState(2189);
				table_source();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2190);
				match(OUTER);
				setState(2191);
				match(APPLY);
				setState(2192);
				table_source();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2193);
				match(PIVOT);
				setState(2194);
				pivot_clause();
				setState(2195);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2197);
				match(UNPIVOT);
				setState(2198);
				unpivot_clause();
				setState(2199);
				as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2203);
			match(LR_BRACKET);
			setState(2204);
			aggregate_windowed_function();
			setState(2205);
			match(FOR);
			setState(2206);
			full_column_name();
			setState(2207);
			match(IN);
			setState(2208);
			column_alias_list();
			setState(2209);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			match(LR_BRACKET);
			setState(2212);
			expression(0);
			setState(2213);
			match(FOR);
			setState(2214);
			full_column_name();
			setState(2215);
			match(IN);
			setState(2216);
			match(LR_BRACKET);
			setState(2217);
			full_column_name_list();
			setState(2218);
			match(RR_BRACKET);
			setState(2219);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFull_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFull_column_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFull_column_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_full_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2221);
			full_column_name();
			setState(2226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2222);
				match(COMMA);
				setState(2223);
				full_column_name();
				}
				}
				setState(2228);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_name_with_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_name_with_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_name_with_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			table_name();
			setState(2231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(2230);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(MocaSqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(MocaSqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRowset_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRowset_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRowset_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_rowset_function);
		int _la;
		try {
			setState(2259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2233);
				match(OPENROWSET);
				setState(2234);
				match(LR_BRACKET);
				setState(2235);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(2236);
				match(COMMA);
				setState(2237);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(2238);
				match(COMMA);
				setState(2239);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(2240);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2241);
				match(OPENROWSET);
				setState(2242);
				match(LR_BRACKET);
				setState(2243);
				match(BULK);
				setState(2244);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(2245);
				match(COMMA);
				setState(2255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					setState(2246);
					bulk_option();
					setState(2251);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2247);
						match(COMMA);
						setState(2248);
						bulk_option();
						}
						}
						setState(2253);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(2254);
					id();
					}
					break;
				}
				setState(2257);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBulk_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBulk_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBulk_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2261);
			id();
			setState(2262);
			match(EQUAL);
			setState(2263);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDerived_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_derived_table);
		try {
			setState(2275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2265);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2266);
				match(LR_BRACKET);
				setState(2267);
				subquery();
				setState(2268);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2270);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2271);
				match(LR_BRACKET);
				setState(2272);
				table_value_constructor();
				setState(2273);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CURRENT_USERContext extends Function_callContext {
		public TerminalNode CURRENT_USER() { return getToken(MocaSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCURRENT_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCURRENT_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCURRENT_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEADDContext extends Function_callContext {
		public TerminalNode DATEADD() { return getToken(MocaSqlParser.DATEADD, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEADDContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATEADD(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATEADD(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATEADD(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CHECKSUMContext extends Function_callContext {
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCHECKSUM(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCHECKSUM(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CURRENT_TIMESTAMPContext extends Function_callContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MocaSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCURRENT_TIMESTAMP(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCURRENT_TIMESTAMP(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCURRENT_TIMESTAMP(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BINARY_CHECKSUMContext extends Function_callContext {
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBINARY_CHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBINARY_CHECKSUM(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBINARY_CHECKSUM(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IFFContext extends Function_callContext {
		public TerminalNode IIF() { return getToken(MocaSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public IFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SYSTEM_USERContext extends Function_callContext {
		public TerminalNode SYSTEM_USER() { return getToken(MocaSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSYSTEM_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSYSTEM_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSYSTEM_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NULLIFContext extends Function_callContext {
		public TerminalNode NULLIF() { return getToken(MocaSqlParser.NULLIF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NULLIFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNULLIF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNULLIF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNULLIF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SESSION_USERContext extends Function_callContext {
		public TerminalNode SESSION_USER() { return getToken(MocaSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSESSION_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSESSION_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSESSION_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CONVERTContext extends Function_callContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public TerminalNode CONVERT() { return getToken(MocaSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CONVERTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCONVERT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCONVERT(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCONVERT(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class XML_DATA_TYPE_FUNCContext extends Function_callContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public XML_DATA_TYPE_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXML_DATA_TYPE_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class COALESCEContext extends Function_callContext {
		public TerminalNode COALESCE() { return getToken(MocaSqlParser.COALESCE, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public COALESCEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCOALESCE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCOALESCE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCOALESCE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CASTContext extends Function_callContext {
		public TerminalNode CAST() { return getToken(MocaSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public CASTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCAST(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCAST(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCAST(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MIN_ACTIVE_ROWVERSIONContext extends Function_callContext {
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(MocaSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMIN_ACTIVE_ROWVERSION(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SCALAR_FUNCTIONContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSCALAR_FUNCTION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSCALAR_FUNCTION(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSCALAR_FUNCTION(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEPARTContext extends Function_callContext {
		public TerminalNode DATEPART() { return getToken(MocaSqlParser.DATEPART, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATEPARTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATEPART(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATEPART(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATEPART(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class STUFFContext extends Function_callContext {
		public TerminalNode STUFF() { return getToken(MocaSqlParser.STUFF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public STUFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSTUFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSTUFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSTUFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAGGREGATE_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IDENTITYContext extends Function_callContext {
		public Token seed;
		public Token increment;
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIDENTITY(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIDENTITY(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIDENTITY(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RANKING_WINDOWED_FUNCContext extends Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRANKING_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATENAMEContext extends Function_callContext {
		public TerminalNode DATENAME() { return getToken(MocaSqlParser.DATENAME, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATENAMEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATENAME(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATENAME(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATENAME(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GETUTCDATEContext extends Function_callContext {
		public TerminalNode GETUTCDATE() { return getToken(MocaSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGETUTCDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGETUTCDATE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGETUTCDATE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return getRuleContext(Analytic_windowed_functionContext.class,0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitANALYTIC_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ISNULLContext extends Function_callContext {
		public TerminalNode ISNULL() { return getToken(MocaSqlParser.ISNULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ISNULLContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterISNULL(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitISNULL(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitISNULL(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEDIFFContext extends Function_callContext {
		public TerminalNode DATEDIFF() { return getToken(MocaSqlParser.DATEDIFF, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEDIFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATEDIFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATEDIFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATEDIFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GETDATEContext extends Function_callContext {
		public TerminalNode GETDATE() { return getToken(MocaSqlParser.GETDATE, 0); }
		public GETDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGETDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGETDATE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGETDATE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class STRINGAGGContext extends Function_callContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public TerminalNode STRING_AGG() { return getToken(MocaSqlParser.STRING_AGG, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(MocaSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public STRINGAGGContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSTRINGAGG(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSTRINGAGG(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSTRINGAGG(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_function_call);
		int _la;
		try {
			setState(2423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2277);
				match(BINARY_CHECKSUM);
				setState(2278);
				match(LR_BRACKET);
				setState(2279);
				match(STAR);
				setState(2280);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new CASTContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2281);
				match(CAST);
				setState(2282);
				match(LR_BRACKET);
				setState(2283);
				expression(0);
				setState(2284);
				match(AS);
				setState(2285);
				data_type();
				setState(2286);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new CONVERTContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2288);
				match(CONVERT);
				setState(2289);
				match(LR_BRACKET);
				setState(2290);
				((CONVERTContext)_localctx).convert_data_type = data_type();
				setState(2291);
				match(COMMA);
				setState(2292);
				((CONVERTContext)_localctx).convert_expression = expression(0);
				setState(2295);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2293);
					match(COMMA);
					setState(2294);
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				setState(2297);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2299);
				match(CHECKSUM);
				setState(2300);
				match(LR_BRACKET);
				setState(2301);
				match(STAR);
				setState(2302);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new COALESCEContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2303);
				match(COALESCE);
				setState(2304);
				match(LR_BRACKET);
				setState(2305);
				expression_list();
				setState(2306);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2308);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 7:
				_localctx = new CURRENT_USERContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2309);
				match(CURRENT_USER);
				}
				break;
			case 8:
				_localctx = new DATEADDContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2310);
				match(DATEADD);
				setState(2311);
				match(LR_BRACKET);
				setState(2312);
				match(ID);
				setState(2313);
				match(COMMA);
				setState(2314);
				expression(0);
				setState(2315);
				match(COMMA);
				setState(2316);
				expression(0);
				setState(2317);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new DATEDIFFContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2319);
				match(DATEDIFF);
				setState(2320);
				match(LR_BRACKET);
				setState(2321);
				match(ID);
				setState(2322);
				match(COMMA);
				setState(2323);
				expression(0);
				setState(2324);
				match(COMMA);
				setState(2325);
				expression(0);
				setState(2326);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new DATENAMEContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2328);
				match(DATENAME);
				setState(2329);
				match(LR_BRACKET);
				setState(2330);
				match(ID);
				setState(2331);
				match(COMMA);
				setState(2332);
				expression(0);
				setState(2333);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new DATEPARTContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2335);
				match(DATEPART);
				setState(2336);
				match(LR_BRACKET);
				setState(2337);
				match(ID);
				setState(2338);
				match(COMMA);
				setState(2339);
				expression(0);
				setState(2340);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new GETDATEContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2342);
				match(GETDATE);
				setState(2343);
				match(LR_BRACKET);
				setState(2344);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new GETUTCDATEContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2345);
				match(GETUTCDATE);
				setState(2346);
				match(LR_BRACKET);
				setState(2347);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new IDENTITYContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2348);
				match(IDENTITY);
				setState(2349);
				match(LR_BRACKET);
				setState(2350);
				data_type();
				setState(2353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					setState(2351);
					match(COMMA);
					setState(2352);
					((IDENTITYContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(2357);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2355);
					match(COMMA);
					setState(2356);
					((IDENTITYContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(2359);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2361);
				match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 16:
				_localctx = new NULLIFContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2362);
				match(NULLIF);
				setState(2363);
				match(LR_BRACKET);
				setState(2364);
				expression(0);
				setState(2365);
				match(COMMA);
				setState(2366);
				expression(0);
				setState(2367);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new STUFFContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2369);
				match(STUFF);
				setState(2370);
				match(LR_BRACKET);
				setState(2371);
				expression(0);
				setState(2372);
				match(COMMA);
				setState(2373);
				match(DECIMAL);
				setState(2374);
				match(COMMA);
				setState(2375);
				match(DECIMAL);
				setState(2376);
				match(COMMA);
				setState(2377);
				expression(0);
				setState(2378);
				match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new SESSION_USERContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2380);
				match(SESSION_USER);
				}
				break;
			case 19:
				_localctx = new SYSTEM_USERContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2381);
				match(SYSTEM_USER);
				}
				break;
			case 20:
				_localctx = new ISNULLContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2382);
				match(ISNULL);
				setState(2383);
				match(LR_BRACKET);
				setState(2384);
				expression(0);
				setState(2385);
				match(COMMA);
				setState(2386);
				expression(0);
				setState(2387);
				match(RR_BRACKET);
				}
				break;
			case 21:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2389);
				xml_data_type_methods();
				}
				break;
			case 22:
				_localctx = new IFFContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2390);
				match(IIF);
				setState(2391);
				match(LR_BRACKET);
				setState(2392);
				search_condition();
				setState(2393);
				match(COMMA);
				setState(2394);
				expression(0);
				setState(2395);
				match(COMMA);
				setState(2396);
				expression(0);
				setState(2397);
				match(RR_BRACKET);
				}
				break;
			case 23:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2399);
				ranking_windowed_function();
				}
				break;
			case 24:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2400);
				aggregate_windowed_function();
				}
				break;
			case 25:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2401);
				analytic_windowed_function();
				}
				break;
			case 26:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2402);
				scalar_function_name();
				setState(2403);
				match(LR_BRACKET);
				setState(2405);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << BLOCKING_HIERARCHY) | (1L << CALLED) | (1L << CASE) | (1L << COALESCE))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (CONVERT - 70)) | (1L << (CURRENT_TIMESTAMP - 70)) | (1L << (CURRENT_USER - 70)) | (1L << (DATA_COMPRESSION - 70)) | (1L << (DEFAULT - 70)) | (1L << (EVENTDATA - 70)) | (1L << (EXPIREDATE - 70)) | (1L << (FILENAME - 70)) | (1L << (FILLFACTOR - 70)) | (1L << (FORCESEEK - 70)))) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (IDENTITY - 149)) | (1L << (IIF - 149)) | (1L << (INIT - 149)) | (1L << (ISNULL - 149)) | (1L << (KEY - 149)) | (1L << (LEFT - 149)) | (1L << (MASTER - 149)) | (1L << (MAX_MEMORY - 149)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (NULL - 222)) | (1L << (NULLIF - 222)) | (1L << (OFFSETS - 222)) | (1L << (OVER - 222)) | (1L << (PAGE - 222)) | (1L << (POLICY - 222)) | (1L << (PRECISION - 222)) | (1L << (PUBLIC - 222)) | (1L << (R - 222)) | (1L << (RAW - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (RIGHT - 286)) | (1L << (ROLE - 286)) | (1L << (ROWCOUNT - 286)) | (1L << (SAFETY - 286)) | (1L << (RULE - 286)) | (1L << (SERVER - 286)) | (1L << (SESSION_USER - 286)) | (1L << (SID - 286)) | (1L << (SOURCE - 286)) | (1L << (SPLIT - 286)) | (1L << (STATE - 286)) | (1L << (START - 286)) | (1L << (STOP - 286)) | (1L << (SYSTEM_USER - 286)) | (1L << (TARGET - 286)) | (1L << (TRAN - 286)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (LOCAL_ID - 746)) | (1L << (MOCA_ENVIRONMENT_VARIABLE - 746)) | (1L << (MOCA_AT_MINUS_VARIABLE - 746)) | (1L << (DECIMAL - 746)) | (1L << (ID - 746)))) != 0) || ((((_la - 811)) & ~0x3f) == 0 && ((1L << (_la - 811)) & ((1L << (STRING - 811)) | (1L << (BINARY - 811)) | (1L << (FLOAT - 811)) | (1L << (REAL - 811)) | (1L << (DOLLAR - 811)) | (1L << (LR_BRACKET - 811)) | (1L << (PLUS - 811)) | (1L << (MINUS - 811)) | (1L << (BIT_NOT - 811)))) != 0)) {
					{
					setState(2404);
					expression_list();
					}
				}

				setState(2407);
				match(RR_BRACKET);
				}
				break;
			case 27:
				_localctx = new STRINGAGGContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2409);
				match(STRING_AGG);
				setState(2410);
				match(LR_BRACKET);
				setState(2411);
				((STRINGAGGContext)_localctx).expr = expression(0);
				setState(2412);
				match(COMMA);
				setState(2413);
				((STRINGAGGContext)_localctx).separator = expression(0);
				setState(2414);
				match(RR_BRACKET);
				setState(2421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(2415);
					match(WITHIN);
					setState(2416);
					match(GROUP);
					setState(2417);
					match(LR_BRACKET);
					setState(2418);
					order_by_clause();
					setState(2419);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXml_data_type_methods(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXml_data_type_methods(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXml_data_type_methods(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_xml_data_type_methods);
		try {
			setState(2430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2425);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2426);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2427);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2428);
				modify_method();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2429);
				nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_methodContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public TerminalNode VALUE() { return getToken(MocaSqlParser.VALUE, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode EVENTDATA() { return getToken(MocaSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public TerminalNode PARAM_NODE() { return getToken(MocaSqlParser.PARAM_NODE, 0); }
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterValue_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitValue_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitValue_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_value_method);
		try {
			setState(2475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(2432);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2433);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2434);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(2435);
					query_method();
					}
					break;
				}
				setState(2438);
				match(DOT);
				setState(2439);
				match(VALUE);
				setState(2440);
				match(LR_BRACKET);
				setState(2441);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(2442);
				match(COMMA);
				setState(2443);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(2444);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(2445);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2446);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2447);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(2448);
					query_method();
					}
					break;
				}
				setState(2451);
				match(DOT);
				setState(2452);
				match(ROW);
				setState(2453);
				match(DOT);
				setState(2454);
				match(VALUE);
				setState(2455);
				match(LR_BRACKET);
				setState(2456);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(2457);
				match(COMMA);
				setState(2458);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(2459);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(2460);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2461);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2462);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(2463);
					query_method();
					}
					break;
				}
				setState(2466);
				match(DOT);
				setState(2467);
				match(PARAM_NODE);
				setState(2468);
				match(DOT);
				setState(2469);
				match(VALUE);
				setState(2470);
				match(LR_BRACKET);
				setState(2471);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(2472);
				match(COMMA);
				setState(2473);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(2474);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode QUERY() { return getToken(MocaSqlParser.QUERY, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQuery_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQuery_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQuery_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_query_method);
		try {
			setState(2499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2480);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(2477);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2478);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2479);
					full_table_name();
					}
					break;
				}
				setState(2482);
				match(DOT);
				setState(2483);
				match(QUERY);
				setState(2484);
				match(LR_BRACKET);
				setState(2485);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(2486);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(2487);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(2488);
					match(ID);
					}
					break;
				case 3:
					{
					setState(2489);
					full_table_name();
					}
					break;
				}
				setState(2492);
				match(DOT);
				setState(2493);
				match(ROW);
				setState(2494);
				match(DOT);
				setState(2495);
				match(QUERY);
				setState(2496);
				match(LR_BRACKET);
				setState(2497);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(2498);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode EXIST() { return getToken(MocaSqlParser.EXIST, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExist_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExist_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExist_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_exist_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2502);
			match(DOT);
			setState(2503);
			match(EXIST);
			setState(2504);
			match(LR_BRACKET);
			setState(2505);
			((Exist_methodContext)_localctx).xquery = match(STRING);
			setState(2506);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_methodContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterModify_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitModify_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitModify_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_modify_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2508);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2509);
			match(DOT);
			setState(2510);
			match(MODIFY);
			setState(2511);
			match(LR_BRACKET);
			setState(2512);
			((Modify_methodContext)_localctx).xml_dml = match(STRING);
			setState(2513);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nodes_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode NODES() { return getToken(MocaSqlParser.NODES, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNodes_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNodes_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNodes_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_nodes_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2515);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2516);
			match(DOT);
			setState(2517);
			match(NODES);
			setState(2518);
			match(LR_BRACKET);
			setState(2519);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(2520);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MocaSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(MocaSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSwitch_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSwitch_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2522);
			match(WHEN);
			setState(2523);
			expression(0);
			setState(2524);
			match(THEN);
			setState(2525);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MocaSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MocaSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSwitch_search_condition_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSwitch_search_condition_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2527);
			match(WHEN);
			setState(2528);
			search_condition();
			setState(2529);
			match(THEN);
			setState(2530);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_column_aliasContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAs_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAs_column_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAs_column_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_column_aliasContext as_column_alias() throws RecognitionException {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_as_column_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2533);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2532);
				match(AS);
				}
			}

			setState(2535);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAs_table_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAs_table_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAs_table_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2538);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2537);
				match(AS);
				}
			}

			setState(2540);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2542);
			id();
			setState(2544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(2543);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWith_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWith_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWith_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2547);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2546);
				match(WITH);
				}
			}

			setState(2549);
			match(LR_BRACKET);
			setState(2550);
			table_hint();
			setState(2557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (SERIALIZABLE - 719)) | (1L << (SNAPSHOT - 719)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 719)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(2552);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2551);
					match(COMMA);
					}
				}

				setState(2554);
				table_hint();
				}
				}
				setState(2559);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2560);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterInsert_with_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitInsert_with_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitInsert_with_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			match(WITH);
			setState(2563);
			match(LR_BRACKET);
			setState(2564);
			table_hint();
			setState(2571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (SERIALIZABLE - 719)) | (1L << (SNAPSHOT - 719)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 719)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(2566);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2565);
					match(COMMA);
					}
				}

				setState(2568);
				table_hint();
				}
				}
				setState(2573);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2574);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(MocaSqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MocaSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MocaSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(MocaSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<TerminalNode> ID() { return getTokens(MocaSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(MocaSqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(MocaSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_table_hint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2577);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(2576);
				match(NOEXPAND);
				}
			}

			setState(2627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(2579);
				match(INDEX);
				setState(2599);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2580);
					match(LR_BRACKET);
					setState(2581);
					index_value();
					setState(2586);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2582);
						match(COMMA);
						setState(2583);
						index_value();
						}
						}
						setState(2588);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2589);
					match(RR_BRACKET);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					setState(2591);
					index_value();
					setState(2596);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2592);
							match(COMMA);
							setState(2593);
							index_value();
							}
							} 
						}
						setState(2598);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,355,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(2601);
				match(INDEX);
				setState(2602);
				match(EQUAL);
				setState(2603);
				index_value();
				}
				break;
			case 3:
				{
				setState(2604);
				match(FORCESEEK);
				setState(2619);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2605);
					match(LR_BRACKET);
					setState(2606);
					index_value();
					setState(2607);
					match(LR_BRACKET);
					setState(2608);
					match(ID);
					setState(2613);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2609);
						match(COMMA);
						setState(2610);
						match(ID);
						}
						}
						setState(2615);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2616);
					match(RR_BRACKET);
					setState(2617);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(2621);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(2622);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(2623);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(2624);
				match(EQUAL);
				setState(2625);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(2626);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIndex_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIndex_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIndex_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_index_value);
		try {
			setState(2631);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2629);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2630);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_alias_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_alias_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(LR_BRACKET);
			setState(2634);
			column_alias();
			setState(2639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2635);
				match(COMMA);
				setState(2636);
				column_alias();
				}
				}
				setState(2641);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2642);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_column_alias);
		try {
			setState(2646);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2644);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2645);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(VALUES);
			setState(2649);
			match(LR_BRACKET);
			setState(2650);
			expression_list();
			setState(2651);
			match(RR_BRACKET);
			setState(2659);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,363,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2652);
					match(COMMA);
					setState(2653);
					match(LR_BRACKET);
					setState(2654);
					expression_list();
					setState(2655);
					match(RR_BRACKET);
					}
					} 
				}
				setState(2661);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,363,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2662);
			expression(0);
			setState(2667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2663);
				match(COMMA);
				setState(2664);
				expression(0);
				}
				}
				setState(2669);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(MocaSqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MocaSqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MocaSqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(MocaSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRanking_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRanking_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRanking_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(2680);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2670);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2671);
				match(LR_BRACKET);
				setState(2672);
				match(RR_BRACKET);
				setState(2673);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2674);
				match(NTILE);
				setState(2675);
				match(LR_BRACKET);
				setState(2676);
				expression(0);
				setState(2677);
				match(RR_BRACKET);
				setState(2678);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode AVG() { return getToken(MocaSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MocaSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MocaSqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(MocaSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(MocaSqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(MocaSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(MocaSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(MocaSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(MocaSqlParser.COUNT_BIG, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(MocaSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(MocaSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(MocaSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAggregate_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(2714);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(2682);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 737)) & ~0x3f) == 0 && ((1L << (_la - 737)) & ((1L << (STDEV - 737)) | (1L << (STDEVP - 737)) | (1L << (SUM - 737)) | (1L << (VAR - 737)) | (1L << (VARP - 737)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2683);
				match(LR_BRACKET);
				setState(2684);
				all_distinct_expression();
				setState(2685);
				match(RR_BRACKET);
				setState(2687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(2686);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(2689);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2690);
				match(LR_BRACKET);
				setState(2693);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(2691);
					match(STAR);
					}
					break;
				case T__0:
				case ALL:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case DISTINCT:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case TRAN:
				case URL:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(2692);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2695);
				match(RR_BRACKET);
				setState(2697);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(2696);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(2699);
				match(CHECKSUM_AGG);
				setState(2700);
				match(LR_BRACKET);
				setState(2701);
				all_distinct_expression();
				setState(2702);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(2704);
				match(GROUPING);
				setState(2705);
				match(LR_BRACKET);
				setState(2706);
				expression(0);
				setState(2707);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(2709);
				match(GROUPING_ID);
				setState(2710);
				match(LR_BRACKET);
				setState(2711);
				expression_list();
				setState(2712);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_windowed_functionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MocaSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MocaSqlParser.LAST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(MocaSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MocaSqlParser.LEAD, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAnalytic_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAnalytic_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAnalytic_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analytic_windowed_functionContext analytic_windowed_function() throws RecognitionException {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_analytic_windowed_function);
		int _la;
		try {
			setState(2736);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2716);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2717);
				match(LR_BRACKET);
				setState(2718);
				expression(0);
				setState(2719);
				match(RR_BRACKET);
				setState(2720);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(2722);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2723);
				match(LR_BRACKET);
				setState(2724);
				expression(0);
				setState(2731);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2725);
					match(COMMA);
					setState(2726);
					expression(0);
					setState(2729);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2727);
						match(COMMA);
						setState(2728);
						expression(0);
						}
					}

					}
				}

				setState(2733);
				match(RR_BRACKET);
				setState(2734);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MocaSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAll_distinct_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAll_distinct_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAll_distinct_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2738);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(2741);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MocaSqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2743);
			match(OVER);
			setState(2744);
			match(LR_BRACKET);
			setState(2748);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2745);
				match(PARTITION);
				setState(2746);
				match(BY);
				setState(2747);
				expression_list();
				}
			}

			setState(2751);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2750);
				order_by_clause();
				}
			}

			setState(2754);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(2753);
				row_or_range_clause();
				}
			}

			setState(2756);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(MocaSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MocaSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRow_or_range_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRow_or_range_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRow_or_range_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2759);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(MocaSqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_window_frame_extent);
		try {
			setState(2767);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2761);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2762);
				match(BETWEEN);
				setState(2763);
				window_frame_bound();
				setState(2764);
				match(AND);
				setState(2765);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_window_frame_bound);
		try {
			setState(2771);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2769);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2770);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MocaSqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_preceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_preceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_window_frame_preceding);
		try {
			setState(2779);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2773);
				match(UNBOUNDED);
				setState(2774);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2775);
				match(DECIMAL);
				setState(2776);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2777);
				match(CURRENT);
				setState(2778);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(MocaSqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_following(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_following(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_window_frame_following);
		try {
			setState(2785);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(2781);
				match(UNBOUNDED);
				setState(2782);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2783);
				match(DECIMAL);
				setState(2784);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFull_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFull_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFull_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(2787);
				((Full_table_nameContext)_localctx).server = id();
				setState(2788);
				match(DOT);
				setState(2789);
				((Full_table_nameContext)_localctx).database = id();
				setState(2790);
				match(DOT);
				setState(2791);
				((Full_table_nameContext)_localctx).schema = id();
				setState(2792);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(2794);
				((Full_table_nameContext)_localctx).database = id();
				setState(2795);
				match(DOT);
				setState(2797);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
					{
					setState(2796);
					((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(2799);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(2801);
				((Full_table_nameContext)_localctx).schema = id();
				setState(2802);
				match(DOT);
				}
				break;
			}
			setState(2806);
			((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(MocaSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_table_name);
		int _la;
		try {
			setState(2834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(2808);
					((Table_nameContext)_localctx).database = id();
					setState(2809);
					match(DOT);
					setState(2811);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
						{
						setState(2810);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(2813);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(2815);
					((Table_nameContext)_localctx).schema = id();
					setState(2816);
					match(DOT);
					}
					break;
				}
				setState(2820);
				((Table_nameContext)_localctx).table = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(2821);
					((Table_nameContext)_localctx).database = id();
					setState(2822);
					match(DOT);
					setState(2824);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
						{
						setState(2823);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(2826);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(2828);
					((Table_nameContext)_localctx).schema = id();
					setState(2829);
					match(DOT);
					}
					break;
				}
				setState(2833);
				match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSimple_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSimple_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSimple_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(2836);
				((Simple_nameContext)_localctx).schema = id();
				setState(2837);
				match(DOT);
				}
				break;
			}
			setState(2841);
			((Simple_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_schemaContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_proc_name_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_proc_name_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_proc_name_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_name_schemaContext func_proc_name_schema() throws RecognitionException {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_func_proc_name_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				{
				setState(2843);
				((Func_proc_name_schemaContext)_localctx).schema = id();
				}
				setState(2844);
				match(DOT);
				}
				break;
			}
			setState(2848);
			((Func_proc_name_schemaContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_database_schemaContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_database_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_proc_name_database_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_proc_name_database_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_proc_name_database_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_name_database_schemaContext func_proc_name_database_schema() throws RecognitionException {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_func_proc_name_database_schema);
		int _la;
		try {
			setState(2861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2850);
				func_proc_name_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					setState(2851);
					((Func_proc_name_database_schemaContext)_localctx).database = id();
					setState(2852);
					match(DOT);
					setState(2854);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
						{
						setState(2853);
						((Func_proc_name_database_schemaContext)_localctx).schema = id();
						}
					}

					setState(2856);
					match(DOT);
					}
					break;
				}
				setState(2860);
				((Func_proc_name_database_schemaContext)_localctx).procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_server_database_schemaContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_server_database_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_proc_name_server_database_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_proc_name_server_database_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_proc_name_server_database_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() throws RecognitionException {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_func_proc_name_server_database_schema);
		int _la;
		try {
			setState(2876);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2863);
				func_proc_name_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2873);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					setState(2864);
					((Func_proc_name_server_database_schemaContext)_localctx).server = id();
					setState(2865);
					match(DOT);
					setState(2866);
					((Func_proc_name_server_database_schemaContext)_localctx).database = id();
					setState(2867);
					match(DOT);
					setState(2869);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (DOUBLE_QUOTE_ID - 746)) | (1L << (SQUARE_BRACKET_ID - 746)) | (1L << (ID - 746)))) != 0)) {
						{
						setState(2868);
						((Func_proc_name_server_database_schemaContext)_localctx).schema = id();
						}
					}

					setState(2871);
					match(DOT);
					}
					break;
				}
				setState(2875);
				((Func_proc_name_server_database_schemaContext)_localctx).procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDdl_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDdl_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDdl_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_ddl_object);
		try {
			setState(2880);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2878);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2879);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext column_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(MocaSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode STATUS() { return getToken(MocaSqlParser.STATUS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ARITHABORT() { return getToken(MocaSqlParser.ARITHABORT, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFull_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_full_column_name);
		try {
			setState(2930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(2882);
					table_name();
					setState(2883);
					match(DOT);
					}
					break;
				}
				setState(2887);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2891);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(2888);
					table_name();
					setState(2889);
					match(DOT);
					}
					break;
				}
				setState(2893);
				match(COMPATIBILITY_LEVEL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2897);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(2894);
					table_name();
					setState(2895);
					match(DOT);
					}
					break;
				}
				setState(2899);
				match(STATUS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(2900);
					table_name();
					setState(2901);
					match(DOT);
					}
					break;
				}
				setState(2905);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2909);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					setState(2906);
					table_name();
					setState(2907);
					match(DOT);
					}
					break;
				}
				setState(2911);
				match(ARITHABORT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2915);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(2912);
					table_name();
					setState(2913);
					match(DOT);
					}
					break;
				}
				setState(2917);
				match(ANSI_WARNINGS);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(2918);
					table_name();
					setState(2919);
					match(DOT);
					}
					break;
				}
				setState(2923);
				match(ANSI_PADDING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					setState(2924);
					table_name();
					setState(2925);
					match(DOT);
					}
					break;
				}
				setState(2929);
				match(ANSI_NULLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ASC() { return getTokens(MocaSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(MocaSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(MocaSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(MocaSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_name_list_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_name_list_with_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_name_list_with_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2932);
			id();
			setState(2934);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2933);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(2943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2936);
				match(COMMA);
				setState(2937);
				id();
				setState(2939);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(2938);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				}
				setState(2945);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2946);
			id();
			setState(2951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2947);
				match(COMMA);
				setState(2948);
				id();
				}
				}
				setState(2953);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_cursor_name);
		try {
			setState(2956);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2954);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2955);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOn_off(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOn_off(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOn_off(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2958);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(MocaSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(MocaSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClustered(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClustered(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClustered(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNull_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNull_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2963);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2962);
				match(NOT);
				}
			}

			setState(2965);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNull_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNull_or_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNull_or_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_null_or_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2974);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(2967);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(2968);
				match(DEFAULT);
				setState(2969);
				constant_expression();
				setState(2972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(2970);
					match(WITH);
					setState(2971);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(MocaSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(MocaSqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitScalar_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitScalar_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_scalar_function_name);
		try {
			setState(2981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2976);
				func_proc_name_server_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2977);
				match(RIGHT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2978);
				match(LEFT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2979);
				match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2980);
				match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode DOUBLE() { return getToken(MocaSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MocaSqlParser.PRECISION, 0); }
		public TerminalNode INT() { return getToken(MocaSqlParser.INT, 0); }
		public TerminalNode TINYINT() { return getToken(MocaSqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MocaSqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(MocaSqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_data_type);
		int _la;
		try {
			setState(3004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2983);
				id();
				setState(2985);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					setState(2984);
					match(IDENTITY);
					}
					break;
				}
				setState(2994);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(2987);
					match(LR_BRACKET);
					setState(2988);
					_la = _input.LA(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(2991);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2989);
						match(COMMA);
						setState(2990);
						match(DECIMAL);
						}
					}

					setState(2993);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2996);
				match(DOUBLE);
				setState(2998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(2997);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3000);
				match(INT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3001);
				match(TINYINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3002);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3003);
				match(BIGINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(MocaSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(MocaSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_constant);
		int _la;
		try {
			setState(3021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3006);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3007);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3009);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(3008);
					sign();
					}
				}

				setState(3011);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3013);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(3012);
					sign();
					}
				}

				setState(3015);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3017);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(3016);
					sign();
					}
				}

				setState(3019);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(3020);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(MocaSqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(MocaSqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_id);
		try {
			setState(3028);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case URL:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3025);
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3026);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3027);
				match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode ABSOLUTE() { return getToken(MocaSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(MocaSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(MocaSqlParser.ACTIVATION, 0); }
		public TerminalNode ACTIVE() { return getToken(MocaSqlParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(MocaSqlParser.ADDRESS, 0); }
		public TerminalNode AES_128() { return getToken(MocaSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(MocaSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(MocaSqlParser.AES_256, 0); }
		public TerminalNode AFFINITY() { return getToken(MocaSqlParser.AFFINITY, 0); }
		public TerminalNode AFTER() { return getToken(MocaSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MocaSqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(MocaSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ALLOWED() { return getToken(MocaSqlParser.ALLOWED, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(MocaSqlParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(MocaSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode APPLY() { return getToken(MocaSqlParser.APPLY, 0); }
		public TerminalNode ARITHABORT() { return getToken(MocaSqlParser.ARITHABORT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public TerminalNode AUDIT_GUID() { return getToken(MocaSqlParser.AUDIT_GUID, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(MocaSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(MocaSqlParser.AUTO_CLOSE, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(MocaSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(MocaSqlParser.AVG, 0); }
		public TerminalNode BACKUP_PRIORITY() { return getToken(MocaSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(MocaSqlParser.BEGIN_DIALOG, 0); }
		public TerminalNode BIGINT() { return getToken(MocaSqlParser.BIGINT, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(MocaSqlParser.BINARY_BASE64, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode BINDING() { return getToken(MocaSqlParser.BINDING, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(MocaSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode BROKER() { return getToken(MocaSqlParser.BROKER, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(MocaSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(MocaSqlParser.BULK_LOGGED, 0); }
		public TerminalNode CALLED() { return getToken(MocaSqlParser.CALLED, 0); }
		public TerminalNode CALLER() { return getToken(MocaSqlParser.CALLER, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(MocaSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode CAST() { return getToken(MocaSqlParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public TerminalNode CATCH() { return getToken(MocaSqlParser.CATCH, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(MocaSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(MocaSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(MocaSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode CLEANUP() { return getToken(MocaSqlParser.CLEANUP, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(MocaSqlParser.COLUMN_MASTER_KEY, 0); }
		public TerminalNode COMMITTED() { return getToken(MocaSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(MocaSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode CONCAT() { return getToken(MocaSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(MocaSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTENT() { return getToken(MocaSqlParser.CONTENT, 0); }
		public TerminalNode CONTROL() { return getToken(MocaSqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(MocaSqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(MocaSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(MocaSqlParser.COUNT_BIG, 0); }
		public TerminalNode COUNTER() { return getToken(MocaSqlParser.COUNTER, 0); }
		public TerminalNode CPU() { return getToken(MocaSqlParser.CPU, 0); }
		public TerminalNode CREATE_NEW() { return getToken(MocaSqlParser.CREATE_NEW, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(MocaSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(MocaSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(MocaSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(MocaSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode DATA() { return getToken(MocaSqlParser.DATA, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(MocaSqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(MocaSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode DATEADD() { return getToken(MocaSqlParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(MocaSqlParser.DATEDIFF, 0); }
		public TerminalNode DATENAME() { return getToken(MocaSqlParser.DATENAME, 0); }
		public TerminalNode DATEPART() { return getToken(MocaSqlParser.DATEPART, 0); }
		public TerminalNode DAYS() { return getToken(MocaSqlParser.DAYS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(MocaSqlParser.DB_CHAINING, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(MocaSqlParser.DB_FAILOVER, 0); }
		public TerminalNode DECRYPTION() { return getToken(MocaSqlParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(MocaSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode DELAY() { return getToken(MocaSqlParser.DELAY, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(MocaSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DELETED() { return getToken(MocaSqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MocaSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPENDENTS() { return getToken(MocaSqlParser.DEPENDENTS, 0); }
		public TerminalNode DES() { return getToken(MocaSqlParser.DES, 0); }
		public TerminalNode DESCRIPTION() { return getToken(MocaSqlParser.DESCRIPTION, 0); }
		public TerminalNode DESX() { return getToken(MocaSqlParser.DESX, 0); }
		public TerminalNode DHCP() { return getToken(MocaSqlParser.DHCP, 0); }
		public TerminalNode DIALOG() { return getToken(MocaSqlParser.DIALOG, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(MocaSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(MocaSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode DISABLED() { return getToken(MocaSqlParser.DISABLED, 0); }
		public TerminalNode DISK_DRIVE() { return getToken(MocaSqlParser.DISK_DRIVE, 0); }
		public TerminalNode DOCUMENT() { return getToken(MocaSqlParser.DOCUMENT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MocaSqlParser.DYNAMIC, 0); }
		public TerminalNode EMERGENCY() { return getToken(MocaSqlParser.EMERGENCY, 0); }
		public TerminalNode EMPTY() { return getToken(MocaSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(MocaSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(MocaSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode ENDPOINT_URL() { return getToken(MocaSqlParser.ENDPOINT_URL, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(MocaSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode EVENTDATA() { return getToken(MocaSqlParser.EVENTDATA, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MocaSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTABLE() { return getToken(MocaSqlParser.EXECUTABLE, 0); }
		public TerminalNode EXIST() { return getToken(MocaSqlParser.EXIST, 0); }
		public TerminalNode EXPAND() { return getToken(MocaSqlParser.EXPAND, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(MocaSqlParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPLICIT() { return getToken(MocaSqlParser.EXPLICIT, 0); }
		public TerminalNode FAIL_OPERATION() { return getToken(MocaSqlParser.FAIL_OPERATION, 0); }
		public TerminalNode FAILOVER_MODE() { return getToken(MocaSqlParser.FAILOVER_MODE, 0); }
		public TerminalNode FAILURE() { return getToken(MocaSqlParser.FAILURE, 0); }
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(MocaSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode FAST() { return getToken(MocaSqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(MocaSqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILEGROUP() { return getToken(MocaSqlParser.FILEGROUP, 0); }
		public TerminalNode FILEGROWTH() { return getToken(MocaSqlParser.FILEGROWTH, 0); }
		public TerminalNode FILENAME() { return getToken(MocaSqlParser.FILENAME, 0); }
		public TerminalNode FILEPATH() { return getToken(MocaSqlParser.FILEPATH, 0); }
		public TerminalNode FILESTREAM() { return getToken(MocaSqlParser.FILESTREAM, 0); }
		public TerminalNode FILLFACTOR() { return getToken(MocaSqlParser.FILLFACTOR, 0); }
		public TerminalNode FILTER() { return getToken(MocaSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(MocaSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MocaSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(MocaSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(MocaSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public TerminalNode FORCESEEK() { return getToken(MocaSqlParser.FORCESEEK, 0); }
		public TerminalNode FORMAT() { return getToken(MocaSqlParser.FORMAT, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(MocaSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(MocaSqlParser.FULLSCAN, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode GB() { return getToken(MocaSqlParser.GB, 0); }
		public TerminalNode GETDATE() { return getToken(MocaSqlParser.GETDATE, 0); }
		public TerminalNode GETUTCDATE() { return getToken(MocaSqlParser.GETUTCDATE, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(MocaSqlParser.GO, 0); }
		public TerminalNode GROUP_MAX_REQUESTS() { return getToken(MocaSqlParser.GROUP_MAX_REQUESTS, 0); }
		public TerminalNode GROUPING() { return getToken(MocaSqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(MocaSqlParser.GROUPING_ID, 0); }
		public TerminalNode HADR() { return getToken(MocaSqlParser.HADR, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(MocaSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode HIGH() { return getToken(MocaSqlParser.HIGH, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(MocaSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode HOURS() { return getToken(MocaSqlParser.HOURS, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(MocaSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(MocaSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode IMMEDIATE() { return getToken(MocaSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMPERSONATE() { return getToken(MocaSqlParser.IMPERSONATE, 0); }
		public TerminalNode IMPORTANCE() { return getToken(MocaSqlParser.IMPORTANCE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(MocaSqlParser.INCREMENTAL, 0); }
		public TerminalNode INIT() { return getToken(MocaSqlParser.INIT, 0); }
		public TerminalNode INITIATOR() { return getToken(MocaSqlParser.INITIATOR, 0); }
		public TerminalNode INPUT() { return getToken(MocaSqlParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(MocaSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(MocaSqlParser.INSERTED, 0); }
		public TerminalNode INT() { return getToken(MocaSqlParser.INT, 0); }
		public TerminalNode IP() { return getToken(MocaSqlParser.IP, 0); }
		public TerminalNode ISOLATION() { return getToken(MocaSqlParser.ISOLATION, 0); }
		public TerminalNode KB() { return getToken(MocaSqlParser.KB, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(MocaSqlParser.KEEPFIXED, 0); }
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public TerminalNode KEY_SOURCE() { return getToken(MocaSqlParser.KEY_SOURCE, 0); }
		public TerminalNode KEYS() { return getToken(MocaSqlParser.KEYS, 0); }
		public TerminalNode KEYSET() { return getToken(MocaSqlParser.KEYSET, 0); }
		public TerminalNode LAG() { return getToken(MocaSqlParser.LAG, 0); }
		public TerminalNode LAST() { return getToken(MocaSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MocaSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(MocaSqlParser.LEAD, 0); }
		public TerminalNode LEVEL() { return getToken(MocaSqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MocaSqlParser.LIST, 0); }
		public TerminalNode LISTENER() { return getToken(MocaSqlParser.LISTENER, 0); }
		public TerminalNode LISTENER_URL() { return getToken(MocaSqlParser.LISTENER_URL, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(MocaSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode LOCAL() { return getToken(MocaSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(MocaSqlParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(MocaSqlParser.LOCK, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(MocaSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode LOW() { return getToken(MocaSqlParser.LOW, 0); }
		public TerminalNode MANUAL() { return getToken(MocaSqlParser.MANUAL, 0); }
		public TerminalNode MARK() { return getToken(MocaSqlParser.MARK, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(MocaSqlParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(MocaSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode MAX_DOP() { return getToken(MocaSqlParser.MAX_DOP, 0); }
		public TerminalNode MAX_FILES() { return getToken(MocaSqlParser.MAX_FILES, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(MocaSqlParser.MAX_MEMORY, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(MocaSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(MocaSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode MAX_QUEUE_READERS() { return getToken(MocaSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(MocaSqlParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAXDOP() { return getToken(MocaSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(MocaSqlParser.MAXRECURSION, 0); }
		public TerminalNode MAXSIZE() { return getToken(MocaSqlParser.MAXSIZE, 0); }
		public TerminalNode MB() { return getToken(MocaSqlParser.MB, 0); }
		public TerminalNode MEDIUM() { return getToken(MocaSqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(MocaSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode MIN() { return getToken(MocaSqlParser.MIN, 0); }
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(MocaSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode MIN_CPU_PERCENT() { return getToken(MocaSqlParser.MIN_CPU_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(MocaSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MINUTES() { return getToken(MocaSqlParser.MINUTES, 0); }
		public TerminalNode MIRROR_ADDRESS() { return getToken(MocaSqlParser.MIRROR_ADDRESS, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(MocaSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode MODE() { return getToken(MocaSqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode MOVE() { return getToken(MocaSqlParser.MOVE, 0); }
		public TerminalNode MULTI_USER() { return getToken(MocaSqlParser.MULTI_USER, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(MocaSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(MocaSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_BROKER() { return getToken(MocaSqlParser.NEW_BROKER, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(MocaSqlParser.NEW_PASSWORD, 0); }
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode NO_TRUNCATE() { return getToken(MocaSqlParser.NO_TRUNCATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(MocaSqlParser.NO_WAIT, 0); }
		public TerminalNode NOCOUNT() { return getToken(MocaSqlParser.NOCOUNT, 0); }
		public TerminalNode NODES() { return getToken(MocaSqlParser.NODES, 0); }
		public TerminalNode NOEXPAND() { return getToken(MocaSqlParser.NOEXPAND, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(MocaSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(MocaSqlParser.NORECOMPUTE, 0); }
		public TerminalNode NORECOVERY() { return getToken(MocaSqlParser.NORECOVERY, 0); }
		public TerminalNode NOWAIT() { return getToken(MocaSqlParser.NOWAIT, 0); }
		public TerminalNode NTILE() { return getToken(MocaSqlParser.NTILE, 0); }
		public TerminalNode NUMANODE() { return getToken(MocaSqlParser.NUMANODE, 0); }
		public TerminalNode NUMBER() { return getToken(MocaSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(MocaSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public TerminalNode OFFLINE() { return getToken(MocaSqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MocaSqlParser.OFFSET, 0); }
		public TerminalNode OFFSETS() { return getToken(MocaSqlParser.OFFSETS, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(MocaSqlParser.OLD_ACCOUNT, 0); }
		public TerminalNode ONLINE() { return getToken(MocaSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(MocaSqlParser.OPEN_EXISTING, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(MocaSqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MocaSqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(MocaSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public TerminalNode OWNER() { return getToken(MocaSqlParser.OWNER, 0); }
		public TerminalNode PAGE() { return getToken(MocaSqlParser.PAGE, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(MocaSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(MocaSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(MocaSqlParser.PARTITIONS, 0); }
		public TerminalNode PARTNER() { return getToken(MocaSqlParser.PARTNER, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(MocaSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public TerminalNode PORT() { return getToken(MocaSqlParser.PORT, 0); }
		public TerminalNode PRECEDING() { return getToken(MocaSqlParser.PRECEDING, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(MocaSqlParser.PRIMARY_ROLE, 0); }
		public TerminalNode PRIOR() { return getToken(MocaSqlParser.PRIOR, 0); }
		public TerminalNode PRIORITY() { return getToken(MocaSqlParser.PRIORITY, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(MocaSqlParser.PRIORITY_LEVEL, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(MocaSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MocaSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(MocaSqlParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(MocaSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode PUBLIC() { return getToken(MocaSqlParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(MocaSqlParser.QUERY, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public TerminalNode QUEUE_DELAY() { return getToken(MocaSqlParser.QUEUE_DELAY, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public List<TerminalNode> R() { return getTokens(MocaSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(MocaSqlParser.R, i);
		}
		public TerminalNode RANGE() { return getToken(MocaSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(MocaSqlParser.RANK, 0); }
		public List<TerminalNode> RAW() { return getTokens(MocaSqlParser.RAW); }
		public TerminalNode RAW(int i) {
			return getToken(MocaSqlParser.RAW, i);
		}
		public TerminalNode RC2() { return getToken(MocaSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(MocaSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(MocaSqlParser.RC4_128, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(MocaSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode READ_ONLY() { return getToken(MocaSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(MocaSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode READ_WRITE() { return getToken(MocaSqlParser.READ_WRITE, 0); }
		public TerminalNode READONLY() { return getToken(MocaSqlParser.READONLY, 0); }
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public TerminalNode RECEIVE() { return getToken(MocaSqlParser.RECEIVE, 0); }
		public TerminalNode RECOMPILE() { return getToken(MocaSqlParser.RECOMPILE, 0); }
		public TerminalNode RECOVERY() { return getToken(MocaSqlParser.RECOVERY, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(MocaSqlParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode RELATIVE() { return getToken(MocaSqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(MocaSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MocaSqlParser.REORGANIZE, 0); }
		public TerminalNode REPEATABLE() { return getToken(MocaSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(MocaSqlParser.REPLICA, 0); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC() { return getToken(MocaSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getToken(MocaSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getToken(MocaSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(MocaSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode RESERVE_DISK_SPACE() { return getToken(MocaSqlParser.RESERVE_DISK_SPACE, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode RESOURCE_MANAGER_LOCATION() { return getToken(MocaSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(MocaSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode RETENTION() { return getToken(MocaSqlParser.RETENTION, 0); }
		public TerminalNode RETURN() { return getToken(MocaSqlParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(MocaSqlParser.RETURNS, 0); }
		public TerminalNode ROBUST() { return getToken(MocaSqlParser.ROBUST, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode ROUTE() { return getToken(MocaSqlParser.ROUTE, 0); }
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MocaSqlParser.ROW_NUMBER, 0); }
		public TerminalNode ROWCOUNT() { return getToken(MocaSqlParser.ROWCOUNT, 0); }
		public TerminalNode ROWGUID() { return getToken(MocaSqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(MocaSqlParser.ROWS, 0); }
		public TerminalNode SAFETY() { return getToken(MocaSqlParser.SAFETY, 0); }
		public TerminalNode SAMPLE() { return getToken(MocaSqlParser.SAMPLE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCOPED() { return getToken(MocaSqlParser.SCOPED, 0); }
		public TerminalNode SCROLL() { return getToken(MocaSqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(MocaSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SEARCH() { return getToken(MocaSqlParser.SEARCH, 0); }
		public TerminalNode SECONDARY() { return getToken(MocaSqlParser.SECONDARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(MocaSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY_ROLE() { return getToken(MocaSqlParser.SECONDARY_ROLE, 0); }
		public TerminalNode SECONDS() { return getToken(MocaSqlParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(MocaSqlParser.SECRET, 0); }
		public TerminalNode SECURITY() { return getToken(MocaSqlParser.SECURITY, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(MocaSqlParser.SECURITY_LOG, 0); }
		public TerminalNode SEEDING_MODE() { return getToken(MocaSqlParser.SEEDING_MODE, 0); }
		public TerminalNode SELF() { return getToken(MocaSqlParser.SELF, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(MocaSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode SEND() { return getToken(MocaSqlParser.SEND, 0); }
		public TerminalNode SENT() { return getToken(MocaSqlParser.SENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MocaSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(MocaSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode SETERROR() { return getToken(MocaSqlParser.SETERROR, 0); }
		public TerminalNode SHARE() { return getToken(MocaSqlParser.SHARE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(MocaSqlParser.SHOWPLAN, 0); }
		public List<TerminalNode> SID() { return getTokens(MocaSqlParser.SID); }
		public TerminalNode SID(int i) {
			return getToken(MocaSqlParser.SID, i);
		}
		public TerminalNode SIGNATURE() { return getToken(MocaSqlParser.SIGNATURE, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(MocaSqlParser.SINGLE_USER, 0); }
		public TerminalNode SIZE() { return getToken(MocaSqlParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(MocaSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MocaSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOURCE() { return getToken(MocaSqlParser.SOURCE, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(MocaSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode SPLIT() { return getToken(MocaSqlParser.SPLIT, 0); }
		public TerminalNode STANDBY() { return getToken(MocaSqlParser.STANDBY, 0); }
		public TerminalNode START() { return getToken(MocaSqlParser.START, 0); }
		public TerminalNode START_DATE() { return getToken(MocaSqlParser.START_DATE, 0); }
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public TerminalNode STATIC() { return getToken(MocaSqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(MocaSqlParser.STATS_STREAM, 0); }
		public TerminalNode STATUS() { return getToken(MocaSqlParser.STATUS, 0); }
		public TerminalNode STDEV() { return getToken(MocaSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(MocaSqlParser.STDEVP, 0); }
		public TerminalNode STOPLIST() { return getToken(MocaSqlParser.STOPLIST, 0); }
		public TerminalNode STRING_AGG() { return getToken(MocaSqlParser.STRING_AGG, 0); }
		public TerminalNode STUFF() { return getToken(MocaSqlParser.STUFF, 0); }
		public TerminalNode SUBJECT() { return getToken(MocaSqlParser.SUBJECT, 0); }
		public TerminalNode SUM() { return getToken(MocaSqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MocaSqlParser.SUSPEND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode SYNCHRONOUS_COMMIT() { return getToken(MocaSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public TerminalNode SYNONYM() { return getToken(MocaSqlParser.SYNONYM, 0); }
		public TerminalNode SYSTEM() { return getToken(MocaSqlParser.SYSTEM, 0); }
		public TerminalNode TAKE() { return getToken(MocaSqlParser.TAKE, 0); }
		public TerminalNode TARGET() { return getToken(MocaSqlParser.TARGET, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(MocaSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode TB() { return getToken(MocaSqlParser.TB, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(MocaSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(MocaSqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(MocaSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(MocaSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(MocaSqlParser.TIMEOUT, 0); }
		public TerminalNode TIMER() { return getToken(MocaSqlParser.TIMER, 0); }
		public TerminalNode TINYINT() { return getToken(MocaSqlParser.TINYINT, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(MocaSqlParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(MocaSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(MocaSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(MocaSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(MocaSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode TRY() { return getToken(MocaSqlParser.TRY, 0); }
		public TerminalNode TSQL() { return getToken(MocaSqlParser.TSQL, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(MocaSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(MocaSqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MocaSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLIMITED() { return getToken(MocaSqlParser.UNLIMITED, 0); }
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public TerminalNode VALID_XML() { return getToken(MocaSqlParser.VALID_XML, 0); }
		public TerminalNode VALIDATION() { return getToken(MocaSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MocaSqlParser.VALUE, 0); }
		public TerminalNode VAR() { return getToken(MocaSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(MocaSqlParser.VARP, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(MocaSqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(MocaSqlParser.VIEWS, 0); }
		public TerminalNode WAIT() { return getToken(MocaSqlParser.WAIT, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(MocaSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode WORK() { return getToken(MocaSqlParser.WORK, 0); }
		public TerminalNode WORKLOAD() { return getToken(MocaSqlParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(MocaSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode EXPIREDATE() { return getToken(MocaSqlParser.EXPIREDATE, 0); }
		public TerminalNode POLICY() { return getToken(MocaSqlParser.POLICY, 0); }
		public TerminalNode PRECISION() { return getToken(MocaSqlParser.PRECISION, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode RULE() { return getToken(MocaSqlParser.RULE, 0); }
		public TerminalNode STOP() { return getToken(MocaSqlParser.STOP, 0); }
		public TerminalNode TRAN() { return getToken(MocaSqlParser.TRAN, 0); }
		public TerminalNode URL() { return getToken(MocaSqlParser.URL, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSimple_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSimple_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3030);
			_la = _input.LA(1);
			if ( !(_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (EXPIREDATE - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (INIT - 159)) | (1L << (KEY - 159)) | (1L << (MASTER - 159)) | (1L << (MAX_MEMORY - 159)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (OFFSETS - 226)) | (1L << (PAGE - 226)) | (1L << (POLICY - 226)) | (1L << (PRECISION - 226)) | (1L << (PUBLIC - 226)) | (1L << (R - 226)) | (1L << (RAW - 226)) | (1L << (RETURN - 226)) | (1L << (RETURNS - 226)) | (1L << (ROLE - 226)) | (1L << (ROWCOUNT - 226)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (SAFETY - 296)) | (1L << (RULE - 296)) | (1L << (SERVER - 296)) | (1L << (SID - 296)) | (1L << (SOURCE - 296)) | (1L << (SPLIT - 296)) | (1L << (STATE - 296)) | (1L << (START - 296)) | (1L << (STOP - 296)) | (1L << (TARGET - 296)) | (1L << (TRAN - 296)))) != 0) || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & ((1L << (URL - 362)) | (1L << (USER - 362)) | (1L << (ABSOLUTE - 362)) | (1L << (ACCENT_SENSITIVITY - 362)) | (1L << (ACTION - 362)) | (1L << (ACTIVATION - 362)) | (1L << (ACTIVE - 362)) | (1L << (ADDRESS - 362)) | (1L << (AES_128 - 362)) | (1L << (AES_192 - 362)) | (1L << (AES_256 - 362)) | (1L << (AFFINITY - 362)) | (1L << (AFTER - 362)) | (1L << (AGGREGATE - 362)) | (1L << (ALGORITHM - 362)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 362)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 362)) | (1L << (ALLOWED - 362)) | (1L << (ANSI_NULL_DEFAULT - 362)) | (1L << (ANSI_NULLS - 362)) | (1L << (ANSI_PADDING - 362)) | (1L << (ANSI_WARNINGS - 362)) | (1L << (APPLICATION_LOG - 362)) | (1L << (APPLY - 362)) | (1L << (ARITHABORT - 362)) | (1L << (ASSEMBLY - 362)) | (1L << (AUDIT - 362)) | (1L << (AUDIT_GUID - 362)) | (1L << (AUTO - 362)) | (1L << (AUTO_CLEANUP - 362)) | (1L << (AUTO_CLOSE - 362)) | (1L << (AUTO_CREATE_STATISTICS - 362)) | (1L << (AUTO_SHRINK - 362)) | (1L << (AUTO_UPDATE_STATISTICS - 362)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 362)) | (1L << (AVAILABILITY - 362)) | (1L << (AVG - 362)) | (1L << (BACKUP_PRIORITY - 362)) | (1L << (BEGIN_DIALOG - 362)) | (1L << (BIGINT - 362)) | (1L << (BINARY_BASE64 - 362)) | (1L << (BINARY_CHECKSUM - 362)) | (1L << (BINDING - 362)) | (1L << (BLOB_STORAGE - 362)) | (1L << (BROKER - 362)) | (1L << (BROKER_INSTANCE - 362)) | (1L << (BULK_LOGGED - 362)))) != 0) || ((((_la - 426)) & ~0x3f) == 0 && ((1L << (_la - 426)) & ((1L << (CALLER - 426)) | (1L << (CAP_CPU_PERCENT - 426)) | (1L << (CAST - 426)) | (1L << (CATALOG - 426)) | (1L << (CATCH - 426)) | (1L << (CHANGE_RETENTION - 426)) | (1L << (CHANGE_TRACKING - 426)) | (1L << (CHECKSUM - 426)) | (1L << (CHECKSUM_AGG - 426)) | (1L << (CLEANUP - 426)) | (1L << (COLLECTION - 426)) | (1L << (COLUMN_MASTER_KEY - 426)) | (1L << (COMMITTED - 426)) | (1L << (COMPATIBILITY_LEVEL - 426)) | (1L << (CONCAT - 426)) | (1L << (CONCAT_NULL_YIELDS_NULL - 426)) | (1L << (CONTENT - 426)) | (1L << (CONTROL - 426)) | (1L << (COOKIE - 426)) | (1L << (COUNT - 426)) | (1L << (COUNT_BIG - 426)) | (1L << (COUNTER - 426)) | (1L << (CPU - 426)) | (1L << (CREATE_NEW - 426)) | (1L << (CREATION_DISPOSITION - 426)) | (1L << (CREDENTIAL - 426)) | (1L << (CRYPTOGRAPHIC - 426)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 426)) | (1L << (CURSOR_DEFAULT - 426)) | (1L << (DATA - 426)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 426)) | (1L << (DATEADD - 426)) | (1L << (DATEDIFF - 426)) | (1L << (DATENAME - 426)) | (1L << (DATEPART - 426)) | (1L << (DAYS - 426)) | (1L << (DB_CHAINING - 426)) | (1L << (DB_FAILOVER - 426)) | (1L << (DECRYPTION - 426)) | (1L << (DEFAULT_DOUBLE_QUOTE - 426)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 426)) | (1L << (DEFAULT_LANGUAGE - 426)) | (1L << (DELAY - 426)) | (1L << (DELAYED_DURABILITY - 426)) | (1L << (DELETED - 426)) | (1L << (DENSE_RANK - 426)) | (1L << (DEPENDENTS - 426)) | (1L << (DES - 426)) | (1L << (DESCRIPTION - 426)) | (1L << (DESX - 426)) | (1L << (DHCP - 426)) | (1L << (DIALOG - 426)) | (1L << (DIRECTORY_NAME - 426)) | (1L << (DISABLE - 426)) | (1L << (DISABLE_BROKER - 426)) | (1L << (DISABLED - 426)) | (1L << (DISK_DRIVE - 426)) | (1L << (DOCUMENT - 426)) | (1L << (DYNAMIC - 426)) | (1L << (EMERGENCY - 426)) | (1L << (EMPTY - 426)) | (1L << (ENABLE - 426)) | (1L << (ENABLE_BROKER - 426)))) != 0) || ((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (ENCRYPTED_VALUE - 490)) | (1L << (ENCRYPTION - 490)) | (1L << (ENDPOINT_URL - 490)) | (1L << (ERROR_BROKER_CONVERSATIONS - 490)) | (1L << (EXCLUSIVE - 490)) | (1L << (EXECUTABLE - 490)) | (1L << (EXIST - 490)) | (1L << (EXPAND - 490)) | (1L << (EXPIRY_DATE - 490)) | (1L << (EXPLICIT - 490)) | (1L << (FAIL_OPERATION - 490)) | (1L << (FAILOVER_MODE - 490)) | (1L << (FAILURE - 490)) | (1L << (FAILURE_CONDITION_LEVEL - 490)) | (1L << (FAST - 490)) | (1L << (FAST_FORWARD - 490)) | (1L << (FILEGROUP - 490)) | (1L << (FILEGROWTH - 490)) | (1L << (FILEPATH - 490)) | (1L << (FILESTREAM - 490)) | (1L << (FILTER - 490)) | (1L << (FIRST - 490)) | (1L << (FIRST_VALUE - 490)) | (1L << (FOLLOWING - 490)) | (1L << (FORCE - 490)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 490)) | (1L << (FORCED - 490)) | (1L << (FORMAT - 490)) | (1L << (FORWARD_ONLY - 490)) | (1L << (FULLSCAN - 490)) | (1L << (FULLTEXT - 490)) | (1L << (GB - 490)) | (1L << (GETDATE - 490)) | (1L << (GETUTCDATE - 490)) | (1L << (GLOBAL - 490)) | (1L << (GO - 490)) | (1L << (GROUP_MAX_REQUESTS - 490)) | (1L << (GROUPING - 490)) | (1L << (GROUPING_ID - 490)) | (1L << (HADR - 490)) | (1L << (HASH - 490)) | (1L << (HEALTH_CHECK_TIMEOUT - 490)) | (1L << (HIGH - 490)) | (1L << (HONOR_BROKER_PRIORITY - 490)) | (1L << (HOURS - 490)) | (1L << (IDENTITY_VALUE - 490)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 490)) | (1L << (IMMEDIATE - 490)) | (1L << (IMPERSONATE - 490)) | (1L << (IMPORTANCE - 490)) | (1L << (INCREMENTAL - 490)) | (1L << (INITIATOR - 490)) | (1L << (INPUT - 490)) | (1L << (INSENSITIVE - 490)) | (1L << (INSERTED - 490)) | (1L << (INT - 490)) | (1L << (IP - 490)) | (1L << (ISOLATION - 490)) | (1L << (KB - 490)) | (1L << (KEEP - 490)) | (1L << (KEEPFIXED - 490)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (KEY_SOURCE - 554)) | (1L << (KEYS - 554)) | (1L << (KEYSET - 554)) | (1L << (LAG - 554)) | (1L << (LAST - 554)) | (1L << (LAST_VALUE - 554)) | (1L << (LEAD - 554)) | (1L << (LEVEL - 554)) | (1L << (LIST - 554)) | (1L << (LISTENER - 554)) | (1L << (LISTENER_URL - 554)) | (1L << (LOB_COMPACTION - 554)) | (1L << (LOCAL - 554)) | (1L << (LOCATION - 554)) | (1L << (LOCK - 554)) | (1L << (LOCK_ESCALATION - 554)) | (1L << (LOGIN - 554)) | (1L << (LOOP - 554)) | (1L << (LOW - 554)) | (1L << (MANUAL - 554)) | (1L << (MARK - 554)) | (1L << (MATERIALIZED - 554)) | (1L << (MAX - 554)) | (1L << (MAX_CPU_PERCENT - 554)) | (1L << (MAX_DOP - 554)) | (1L << (MAX_FILES - 554)) | (1L << (MAX_IOPS_PER_VOLUME - 554)) | (1L << (MAX_MEMORY_PERCENT - 554)) | (1L << (MAX_PROCESSES - 554)) | (1L << (MAX_QUEUE_READERS - 554)) | (1L << (MAX_ROLLOVER_FILES - 554)) | (1L << (MAXDOP - 554)) | (1L << (MAXRECURSION - 554)) | (1L << (MAXSIZE - 554)) | (1L << (MB - 554)) | (1L << (MEDIUM - 554)) | (1L << (MEMORY_OPTIMIZED_DATA - 554)) | (1L << (MESSAGE - 554)) | (1L << (MIN - 554)) | (1L << (MIN_ACTIVE_ROWVERSION - 554)) | (1L << (MIN_CPU_PERCENT - 554)) | (1L << (MIN_IOPS_PER_VOLUME - 554)) | (1L << (MIN_MEMORY_PERCENT - 554)) | (1L << (MINUTES - 554)) | (1L << (MIRROR_ADDRESS - 554)) | (1L << (MIXED_PAGE_ALLOCATION - 554)) | (1L << (MODE - 554)) | (1L << (MODIFY - 554)) | (1L << (MOVE - 554)) | (1L << (MULTI_USER - 554)) | (1L << (NAME - 554)) | (1L << (NESTED_TRIGGERS - 554)) | (1L << (NEW_ACCOUNT - 554)) | (1L << (NEW_BROKER - 554)) | (1L << (NEW_PASSWORD - 554)) | (1L << (NEXT - 554)) | (1L << (NO - 554)) | (1L << (NO_TRUNCATE - 554)) | (1L << (NO_WAIT - 554)) | (1L << (NOCOUNT - 554)) | (1L << (NODES - 554)) | (1L << (NOEXPAND - 554)) | (1L << (NON_TRANSACTED_ACCESS - 554)) | (1L << (NORECOMPUTE - 554)))) != 0) || ((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (NORECOVERY - 618)) | (1L << (NOWAIT - 618)) | (1L << (NTILE - 618)) | (1L << (NUMANODE - 618)) | (1L << (NUMBER - 618)) | (1L << (NUMERIC_ROUNDABORT - 618)) | (1L << (OBJECT - 618)) | (1L << (OFFLINE - 618)) | (1L << (OFFSET - 618)) | (1L << (OLD_ACCOUNT - 618)) | (1L << (ONLINE - 618)) | (1L << (ONLY - 618)) | (1L << (OPEN_EXISTING - 618)) | (1L << (OPTIMISTIC - 618)) | (1L << (OPTIMIZE - 618)) | (1L << (OUT - 618)) | (1L << (OUTPUT - 618)) | (1L << (OWNER - 618)) | (1L << (PAGE_VERIFY - 618)) | (1L << (PARAMETERIZATION - 618)) | (1L << (PARTITION - 618)) | (1L << (PARTITIONS - 618)) | (1L << (PARTNER - 618)) | (1L << (PATH - 618)) | (1L << (POISON_MESSAGE_HANDLING - 618)) | (1L << (POOL - 618)) | (1L << (PORT - 618)) | (1L << (PRECEDING - 618)) | (1L << (PRIMARY_ROLE - 618)) | (1L << (PRIOR - 618)) | (1L << (PRIORITY - 618)) | (1L << (PRIORITY_LEVEL - 618)) | (1L << (PRIVATE - 618)) | (1L << (PRIVATE_KEY - 618)) | (1L << (PRIVILEGES - 618)) | (1L << (PROCEDURE_NAME - 618)) | (1L << (PROPERTY - 618)) | (1L << (PROVIDER - 618)) | (1L << (PROVIDER_KEY_NAME - 618)) | (1L << (QUERY - 618)) | (1L << (QUEUE - 618)) | (1L << (QUEUE_DELAY - 618)) | (1L << (QUOTED_IDENTIFIER - 618)) | (1L << (RANGE - 618)) | (1L << (RANK - 618)) | (1L << (RC2 - 618)) | (1L << (RC4 - 618)) | (1L << (RC4_128 - 618)) | (1L << (READ_COMMITTED_SNAPSHOT - 618)) | (1L << (READ_ONLY - 618)) | (1L << (READ_ONLY_ROUTING_LIST - 618)) | (1L << (READ_WRITE - 618)) | (1L << (READONLY - 618)) | (1L << (REBUILD - 618)) | (1L << (RECEIVE - 618)) | (1L << (RECOMPILE - 618)) | (1L << (RECOVERY - 618)) | (1L << (RECURSIVE_TRIGGERS - 618)) | (1L << (RELATIVE - 618)) | (1L << (REMOTE - 618)) | (1L << (REMOTE_SERVICE_NAME - 618)) | (1L << (REMOVE - 618)) | (1L << (REORGANIZE - 618)))) != 0) || ((((_la - 682)) & ~0x3f) == 0 && ((1L << (_la - 682)) & ((1L << (REPEATABLE - 682)) | (1L << (REPLICA - 682)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 682)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 682)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 682)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 682)) | (1L << (RESERVE_DISK_SPACE - 682)) | (1L << (RESOURCE - 682)) | (1L << (RESOURCE_MANAGER_LOCATION - 682)) | (1L << (RESTRICTED_USER - 682)) | (1L << (RETENTION - 682)) | (1L << (ROBUST - 682)) | (1L << (ROOT - 682)) | (1L << (ROUTE - 682)) | (1L << (ROW - 682)) | (1L << (ROW_NUMBER - 682)) | (1L << (ROWGUID - 682)) | (1L << (ROWS - 682)) | (1L << (SAMPLE - 682)) | (1L << (SCHEMABINDING - 682)) | (1L << (SCOPED - 682)) | (1L << (SCROLL - 682)) | (1L << (SCROLL_LOCKS - 682)) | (1L << (SEARCH - 682)) | (1L << (SECONDARY - 682)) | (1L << (SECONDARY_ONLY - 682)) | (1L << (SECONDARY_ROLE - 682)) | (1L << (SECONDS - 682)) | (1L << (SECRET - 682)) | (1L << (SECURITY - 682)) | (1L << (SECURITY_LOG - 682)) | (1L << (SEEDING_MODE - 682)) | (1L << (SELF - 682)) | (1L << (SEMI_SENSITIVE - 682)) | (1L << (SEND - 682)) | (1L << (SENT - 682)) | (1L << (SEQUENCE - 682)) | (1L << (SERIALIZABLE - 682)) | (1L << (SESSION_TIMEOUT - 682)) | (1L << (SETERROR - 682)) | (1L << (SHARE - 682)) | (1L << (SHOWPLAN - 682)) | (1L << (SIGNATURE - 682)) | (1L << (SIMPLE - 682)) | (1L << (SINGLE_USER - 682)) | (1L << (SIZE - 682)) | (1L << (SMALLINT - 682)) | (1L << (SNAPSHOT - 682)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 682)) | (1L << (STANDBY - 682)) | (1L << (START_DATE - 682)) | (1L << (STATIC - 682)) | (1L << (STATS_STREAM - 682)) | (1L << (STATUS - 682)) | (1L << (STDEV - 682)) | (1L << (STDEVP - 682)) | (1L << (STOPLIST - 682)) | (1L << (STRING_AGG - 682)) | (1L << (STUFF - 682)) | (1L << (SUBJECT - 682)) | (1L << (SUM - 682)) | (1L << (SUSPEND - 682)))) != 0) || ((((_la - 746)) & ~0x3f) == 0 && ((1L << (_la - 746)) & ((1L << (SYMMETRIC - 746)) | (1L << (SYNCHRONOUS_COMMIT - 746)) | (1L << (SYNONYM - 746)) | (1L << (SYSTEM - 746)) | (1L << (TAKE - 746)) | (1L << (TARGET_RECOVERY_TIME - 746)) | (1L << (TB - 746)) | (1L << (TEXTIMAGE_ON - 746)) | (1L << (THROW - 746)) | (1L << (TIES - 746)) | (1L << (TIME - 746)) | (1L << (TIMEOUT - 746)) | (1L << (TIMER - 746)) | (1L << (TINYINT - 746)) | (1L << (TORN_PAGE_DETECTION - 746)) | (1L << (TRANSFORM_NOISE_WORDS - 746)) | (1L << (TRIPLE_DES - 746)) | (1L << (TRIPLE_DES_3KEY - 746)) | (1L << (TRUSTWORTHY - 746)) | (1L << (TRY - 746)) | (1L << (TSQL - 746)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 746)) | (1L << (TYPE - 746)) | (1L << (TYPE_WARNING - 746)) | (1L << (UNBOUNDED - 746)) | (1L << (UNCOMMITTED - 746)) | (1L << (UNKNOWN - 746)) | (1L << (UNLIMITED - 746)) | (1L << (USING - 746)) | (1L << (VALID_XML - 746)) | (1L << (VALIDATION - 746)) | (1L << (VALUE - 746)) | (1L << (VAR - 746)) | (1L << (VARP - 746)) | (1L << (VIEW_METADATA - 746)) | (1L << (VIEWS - 746)) | (1L << (WAIT - 746)) | (1L << (WELL_FORMED_XML - 746)) | (1L << (WORK - 746)) | (1L << (WORKLOAD - 746)) | (1L << (XML - 746)) | (1L << (XMLNAMESPACES - 746)) | (1L << (ID - 746)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode LESS() { return getToken(MocaSqlParser.LESS, 0); }
		public TerminalNode GREATER() { return getToken(MocaSqlParser.GREATER, 0); }
		public TerminalNode LESS_EQUAL() { return getToken(MocaSqlParser.LESS_EQUAL, 0); }
		public TerminalNode GREATER_EQUAL() { return getToken(MocaSqlParser.GREATER_EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(MocaSqlParser.NOT_EQUAL, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_comparison_operator);
		try {
			setState(3042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3032);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3033);
				match(LESS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3034);
				match(GREATER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3035);
				match(LESS_EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3036);
				match(GREATER_EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3037);
				match(NOT_EQUAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3038);
				match(EXCLAMATION);
				setState(3039);
				match(GREATER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3040);
				match(EXCLAMATION);
				setState(3041);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_ASSIGN() { return getToken(MocaSqlParser.PLUS_ASSIGN, 0); }
		public TerminalNode MINUS_ASSIGN() { return getToken(MocaSqlParser.MINUS_ASSIGN, 0); }
		public TerminalNode MULT_ASSIGN() { return getToken(MocaSqlParser.MULT_ASSIGN, 0); }
		public TerminalNode DIV_ASSIGN() { return getToken(MocaSqlParser.DIV_ASSIGN, 0); }
		public TerminalNode MOD_ASSIGN() { return getToken(MocaSqlParser.MOD_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAssignment_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAssignment_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			_la = _input.LA(1);
			if ( !(((((_la - 822)) & ~0x3f) == 0 && ((1L << (_la - 822)) & ((1L << (PLUS_ASSIGN - 822)) | (1L << (MINUS_ASSIGN - 822)) | (1L << (MULT_ASSIGN - 822)) | (1L << (DIV_ASSIGN - 822)) | (1L << (MOD_ASSIGN - 822)) | (1L << (AND_ASSIGN - 822)) | (1L << (XOR_ASSIGN - 822)) | (1L << (OR_ASSIGN - 822)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 51:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 5);
		case 1:
			return precpred(_ctx, 4);
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 2);
		case 4:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0354\u0be9\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\3\2\3\2\3\3\3"+
		"\3\5\3\u014b\n\3\6\3\u014d\n\3\r\3\16\3\u014e\3\4\3\4\3\4\5\4\u0154\n"+
		"\4\3\5\3\5\3\5\3\5\3\5\5\5\u015b\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\5\6\u0167\n\6\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u016f\n\b\3\b\5\b\u0172"+
		"\n\b\3\b\3\b\3\b\5\b\u0177\n\b\3\b\3\b\3\b\5\b\u017c\n\b\3\b\5\b\u017f"+
		"\n\b\3\t\3\t\3\t\3\t\3\t\5\t\u0186\n\t\3\t\3\t\3\t\3\t\5\t\u018c\n\t\5"+
		"\t\u018e\n\t\3\t\3\t\3\t\5\t\u0193\n\t\3\t\3\t\3\t\3\t\5\t\u0199\n\t\3"+
		"\t\3\t\3\t\3\t\5\t\u019f\n\t\3\t\3\t\3\t\5\t\u01a4\n\t\3\t\3\t\3\t\3\t"+
		"\5\t\u01aa\n\t\3\n\3\n\3\n\3\n\3\n\5\n\u01b1\n\n\3\n\3\n\3\n\5\n\u01b6"+
		"\n\n\3\n\3\n\3\n\5\n\u01bb\n\n\3\n\3\n\3\n\5\n\u01c0\n\n\3\n\5\n\u01c3"+
		"\n\n\3\n\3\n\5\n\u01c7\n\n\3\n\3\n\5\n\u01cb\n\n\3\n\3\n\5\n\u01cf\n\n"+
		"\3\n\3\n\5\n\u01d3\n\n\3\n\3\n\3\n\5\n\u01d8\n\n\3\n\3\n\5\n\u01dc\n\n"+
		"\3\n\3\n\5\n\u01e0\n\n\3\13\5\13\u01e3\n\13\3\13\3\13\3\13\3\13\3\13\3"+
		"\13\5\13\u01eb\n\13\5\13\u01ed\n\13\3\13\5\13\u01f0\n\13\3\13\3\13\5\13"+
		"\u01f4\n\13\3\13\5\13\u01f7\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3"+
		"\13\5\13\u0201\n\13\3\13\3\13\7\13\u0205\n\13\f\13\16\13\u0208\13\13\3"+
		"\13\3\13\3\13\3\13\3\13\5\13\u020f\n\13\3\13\3\13\5\13\u0213\n\13\3\13"+
		"\3\13\5\13\u0217\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0220\n"+
		"\13\3\13\3\13\7\13\u0224\n\13\f\13\16\13\u0227\13\13\3\13\5\13\u022a\n"+
		"\13\3\13\5\13\u022d\n\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\7\f\u0236\n\f\f"+
		"\f\16\f\u0239\13\f\3\f\5\f\u023c\n\f\3\r\3\r\3\r\3\r\3\r\5\r\u0243\n\r"+
		"\3\r\3\r\3\r\5\r\u0248\n\r\3\16\5\16\u024b\n\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\5\16\u0253\n\16\3\16\3\16\5\16\u0257\n\16\3\16\5\16\u025a\n\16"+
		"\3\16\3\16\5\16\u025e\n\16\3\16\5\16\u0261\n\16\3\16\3\16\5\16\u0265\n"+
		"\16\3\16\3\16\3\16\3\16\3\16\5\16\u026c\n\16\3\16\3\16\5\16\u0270\n\16"+
		"\5\16\u0272\n\16\5\16\u0274\n\16\3\16\5\16\u0277\n\16\3\16\5\16\u027a"+
		"\n\16\3\16\5\16\u027d\n\16\3\17\3\17\3\17\3\17\5\17\u0283\n\17\3\20\5"+
		"\20\u0286\n\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u028e\n\20\5\20\u0290"+
		"\n\20\3\20\5\20\u0293\n\20\3\20\3\20\5\20\u0297\n\20\3\20\5\20\u029a\n"+
		"\20\3\20\3\20\3\20\3\20\5\20\u02a0\n\20\3\20\5\20\u02a3\n\20\3\20\3\20"+
		"\5\20\u02a7\n\20\3\20\5\20\u02aa\n\20\3\20\5\20\u02ad\n\20\3\21\3\21\3"+
		"\21\3\21\3\21\5\21\u02b4\n\21\3\22\5\22\u02b7\n\22\3\22\3\22\5\22\u02bb"+
		"\n\22\3\22\5\22\u02be\n\22\3\22\5\22\u02c1\n\22\3\22\5\22\u02c4\n\22\3"+
		"\23\5\23\u02c7\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u02cf\n\23\5\23"+
		"\u02d1\n\23\3\23\3\23\5\23\u02d5\n\23\3\23\5\23\u02d8\n\23\3\23\3\23\3"+
		"\23\3\23\7\23\u02de\n\23\f\23\16\23\u02e1\13\23\3\23\5\23\u02e4\n\23\3"+
		"\23\3\23\5\23\u02e8\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u02ef\n\23\3\23"+
		"\3\23\5\23\u02f3\n\23\5\23\u02f5\n\23\5\23\u02f7\n\23\3\23\5\23\u02fa"+
		"\n\23\3\23\5\23\u02fd\n\23\3\23\5\23\u0300\n\23\3\24\3\24\3\24\3\24\7"+
		"\24\u0306\n\24\f\24\16\24\u0309\13\24\3\24\3\24\3\24\5\24\u030e\n\24\3"+
		"\24\3\24\3\24\3\24\5\24\u0314\n\24\5\24\u0316\n\24\3\25\3\25\5\25\u031a"+
		"\n\25\3\25\5\25\u031d\n\25\3\26\3\26\3\26\5\26\u0322\n\26\3\26\3\26\3"+
		"\26\5\26\u0327\n\26\3\26\5\26\u032a\n\26\3\27\3\27\5\27\u032e\n\27\3\27"+
		"\5\27\u0331\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\3\27\5\27\u033f\n\27\3\27\3\27\5\27\u0343\n\27\3\27\5\27\u0346\n\27\3"+
		"\27\3\27\5\27\u034a\n\27\3\27\5\27\u034d\n\27\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\5\30\u0355\n\30\3\30\3\30\3\30\5\30\u035a\n\30\3\30\7\30\u035d\n"+
		"\30\f\30\16\30\u0360\13\30\3\30\3\30\3\30\5\30\u0365\n\30\3\30\3\30\3"+
		"\30\5\30\u036a\n\30\3\30\5\30\u036d\n\30\3\31\3\31\3\31\3\31\3\31\7\31"+
		"\u0374\n\31\f\31\16\31\u0377\13\31\3\31\3\31\3\31\3\31\3\31\7\31\u037e"+
		"\n\31\f\31\16\31\u0381\13\31\5\31\u0383\n\31\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\5\32\u038c\n\32\3\32\3\32\3\32\3\32\7\32\u0392\n\32\f\32\16"+
		"\32\u0395\13\32\5\32\u0397\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u039e\n"+
		"\32\3\32\5\32\u03a1\n\32\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u03cf\n\34\3\34\3\34\5\34\u03d3"+
		"\n\34\3\34\5\34\u03d6\n\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35"+
		"\u03e0\n\35\5\35\u03e2\n\35\3\36\3\36\3\36\3\36\5\36\u03e8\n\36\3\36\3"+
		"\36\3\36\7\36\u03ed\n\36\f\36\16\36\u03f0\13\36\3\36\3\36\3\36\7\36\u03f5"+
		"\n\36\f\36\16\36\u03f8\13\36\5\36\u03fa\n\36\3\36\5\36\u03fd\n\36\3\37"+
		"\3\37\3\37\3\37\3 \3 \3 \5 \u0406\n \3 \3 \3 \3 \3!\3!\3!\3!\5!\u0410"+
		"\n!\3!\3!\5!\u0414\n!\3\"\3\"\3\"\3\"\5\"\u041a\n\"\3\"\3\"\3\"\7\"\u041f"+
		"\n\"\f\"\16\"\u0422\13\"\3\"\5\"\u0425\n\"\3#\3#\5#\u0429\n#\3$\3$\3$"+
		"\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\5%\u043a\n%\3%\3%\5%\u043e\n%\3%"+
		"\3%\3%\3&\3&\3&\3\'\3\'\5\'\u0448\n\'\3\'\3\'\5\'\u044c\n\'\3\'\3\'\3"+
		"\'\7\'\u0451\n\'\f\'\16\'\u0454\13\'\5\'\u0456\n\'\3\'\5\'\u0459\n\'\3"+
		"\'\3\'\3\'\3\'\7\'\u045f\n\'\f\'\16\'\u0462\13\'\3\'\3\'\5\'\u0466\n\'"+
		"\3\'\3\'\3\'\5\'\u046b\n\'\3\'\5\'\u046e\n\'\5\'\u0470\n\'\3(\3(\5(\u0474"+
		"\n(\3(\3(\5(\u0478\n(\3(\5(\u047b\n(\3(\3(\5(\u047f\n(\3)\3)\3*\3*\5*"+
		"\u0485\n*\3*\7*\u0488\n*\f*\16*\u048b\13*\3+\3+\3+\5+\u0490\n+\3,\3,\3"+
		",\3,\5,\u0496\n,\3,\3,\5,\u049a\n,\3,\5,\u049d\n,\3,\3,\5,\u04a1\n,\3"+
		",\3,\5,\u04a5\n,\3,\3,\3,\3,\3,\3,\5,\u04ad\n,\3,\3,\3,\5,\u04b2\n,\5"+
		",\u04b4\n,\3,\5,\u04b7\n,\3,\7,\u04ba\n,\f,\16,\u04bd\13,\3-\3-\3-\3-"+
		"\3-\3-\5-\u04c5\n-\3.\3.\5.\u04c9\n.\3.\3.\3.\5.\u04ce\n.\3.\5.\u04d1"+
		"\n.\3.\5.\u04d4\n.\3.\3.\3.\3.\5.\u04da\n.\3.\3.\3.\3.\3.\3.\5.\u04e2"+
		"\n.\3.\3.\3.\3.\3.\3.\5.\u04ea\n.\3.\5.\u04ed\n.\3.\5.\u04f0\n.\3/\3/"+
		"\5/\u04f4\n/\3/\3/\3/\5/\u04f9\n/\3/\5/\u04fc\n/\3/\3/\3/\3/\5/\u0502"+
		"\n/\3/\3/\5/\u0506\n/\3/\3/\3/\3/\5/\u050c\n/\3/\3/\3/\3/\3/\3/\5/\u0514"+
		"\n/\3/\3/\3/\3/\6/\u051a\n/\r/\16/\u051b\3/\5/\u051f\n/\3/\3/\3/\3/\3"+
		"/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u052e\n/\3/\5/\u0531\n/\3/\5/\u0534\n/\5"+
		"/\u0536\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0541\n\60"+
		"\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u054c\n\61\3\62\3\62"+
		"\3\62\3\62\3\62\7\62\u0553\n\62\f\62\16\62\u0556\13\62\3\62\3\62\3\63"+
		"\3\63\3\63\3\63\3\63\5\63\u055f\n\63\3\64\3\64\5\64\u0563\n\64\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0571\n\65"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\7\65\u0584\n\65\f\65\16\65\u0587\13\65\3\66\3\66\3\66"+
		"\5\66\u058c\n\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0596\n"+
		"\66\5\66\u0598\n\66\3\67\3\67\38\38\38\58\u059f\n8\38\38\38\38\38\38\3"+
		"8\38\58\u05a9\n8\58\u05ab\n8\39\39\39\59\u05b0\n9\39\39\39\39\59\u05b6"+
		"\n9\3:\3:\3;\3;\3;\3<\3<\3<\3<\5<\u05c1\n<\3=\3=\3=\6=\u05c6\n=\r=\16"+
		"=\u05c7\3=\3=\5=\u05cc\n=\3=\3=\3=\3=\6=\u05d2\n=\r=\16=\u05d3\3=\3=\5"+
		"=\u05d8\n=\3=\3=\5=\u05dc\n=\3>\3>\3>\3>\5>\u05e2\n>\3?\3?\3?\3?\3?\3"+
		"?\3?\3?\5?\u05ec\n?\3@\3@\3@\3@\3@\3@\3@\3@\5@\u05f6\n@\3A\3A\3B\3B\3"+
		"B\5B\u05fd\nB\3B\3B\3B\7B\u0602\nB\fB\16B\u0605\13B\3B\3B\3B\3B\3B\3B"+
		"\5B\u060d\nB\3B\3B\3B\3B\3B\5B\u0614\nB\3C\3C\3C\3C\3C\5C\u061b\nC\3C"+
		"\3C\3C\3C\3C\3D\3D\5D\u0624\nD\3D\3D\5D\u0628\nD\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\5D\u0632\nD\3E\3E\3E\7E\u0637\nE\fE\16E\u063a\13E\3F\3F\3F\7F\u063f"+
		"\nF\fF\16F\u0642\13F\3G\3G\3G\7G\u0647\nG\fG\16G\u064a\13G\3H\5H\u064d"+
		"\nH\3H\3H\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0663"+
		"\nI\3I\3I\3I\3I\3I\3I\3I\5I\u066c\nI\3I\3I\3I\3I\5I\u0672\nI\3I\3I\3I"+
		"\3I\5I\u0678\nI\3I\3I\3I\3I\5I\u067e\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I"+
		"\u0689\nI\3I\3I\3I\3I\3I\5I\u0690\nI\3I\3I\3I\3I\3I\3I\5I\u0698\nI\3J"+
		"\3J\3J\3J\3J\5J\u069f\nJ\3J\7J\u06a2\nJ\fJ\16J\u06a5\13J\3K\3K\5K\u06a9"+
		"\nK\3K\3K\5K\u06ad\nK\3K\3K\3K\3K\3K\5K\u06b4\nK\3L\3L\5L\u06b8\nL\3L"+
		"\5L\u06bb\nL\3L\3L\3L\5L\u06c0\nL\3L\3L\5L\u06c4\nL\3L\3L\5L\u06c8\nL"+
		"\3L\3L\3L\5L\u06cd\nL\3L\3L\3L\7L\u06d2\nL\fL\16L\u06d5\13L\5L\u06d7\n"+
		"L\3L\3L\5L\u06db\nL\3M\3M\3M\5M\u06e0\nM\3M\3M\5M\u06e4\nM\3N\3N\3N\3"+
		"N\3N\3N\3N\5N\u06ed\nN\3O\3O\3O\3O\3O\5O\u06f4\nO\3P\3P\3P\3P\3P\7P\u06fb"+
		"\nP\fP\16P\u06fe\13P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u0709\nP\5P\u070b\n"+
		"P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0715\nQ\3Q\5Q\u0718\nQ\3Q\7Q\u071b\nQ\f"+
		"Q\16Q\u071e\13Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0726\nQ\5Q\u0728\nQ\5Q\u072a\nQ"+
		"\3Q\3Q\3Q\5Q\u072f\nQ\3Q\3Q\3Q\3Q\7Q\u0735\nQ\fQ\16Q\u0738\13Q\3Q\3Q\5"+
		"Q\u073c\nQ\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0744\nQ\3Q\7Q\u0747\nQ\fQ\16Q\u074a\13"+
		"Q\3Q\3Q\3Q\5Q\u074f\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0759\nQ\5Q\u075b\n"+
		"Q\3Q\3Q\5Q\u075f\nQ\3Q\3Q\5Q\u0763\nQ\5Q\u0765\nQ\3R\3R\3R\3R\3R\3R\3"+
		"R\5R\u076e\nR\5R\u0770\nR\3S\3S\5S\u0774\nS\3T\3T\3U\3U\3U\3U\3U\7U\u077d"+
		"\nU\fU\16U\u0780\13U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3"+
		"V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\7V\u079f\nV\fV\16V\u07a2\13V\3V"+
		"\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u07b1\nV\3W\3W\3W\3W\3W\5W\u07b8"+
		"\nW\5W\u07ba\nW\3X\3X\3X\7X\u07bf\nX\fX\16X\u07c2\13X\3Y\3Y\3Y\3Y\7Y\u07c8"+
		"\nY\fY\16Y\u07cb\13Y\3Y\3Y\3Z\3Z\3Z\5Z\u07d2\nZ\3Z\3Z\3[\3[\3[\5[\u07d9"+
		"\n[\3[\3[\3[\3[\3[\5[\u07e0\n[\3[\5[\u07e3\n[\3[\5[\u07e6\n[\3\\\3\\\3"+
		"\\\3\\\3\\\5\\\u07ed\n\\\3\\\3\\\3\\\3\\\3\\\5\\\u07f4\n\\\3\\\5\\\u07f7"+
		"\n\\\5\\\u07f9\n\\\3]\3]\3]\3]\3]\3]\5]\u0801\n]\5]\u0803\n]\3^\3^\3^"+
		"\3^\5^\u0809\n^\3_\3_\3_\7_\u080e\n_\f_\16_\u0811\13_\3`\3`\3`\3`\3`\5"+
		"`\u0818\n`\3a\3a\7a\u081c\na\fa\16a\u081f\13a\3b\3b\5b\u0823\nb\3b\3b"+
		"\5b\u0827\nb\3b\3b\5b\u082b\nb\3b\3b\3b\5b\u0830\nb\5b\u0832\nb\3b\3b"+
		"\3b\3b\3b\3b\5b\u083a\nb\5b\u083c\nb\3b\3b\5b\u0840\nb\3b\3b\3b\3b\3b"+
		"\5b\u0847\nb\5b\u0849\nb\3b\3b\3b\3b\3b\5b\u0850\nb\5b\u0852\nb\3c\3c"+
		"\3c\3c\3c\3c\3c\5c\u085b\nc\3c\3c\3c\3c\3c\3c\5c\u0863\nc\3d\3d\3d\7d"+
		"\u0868\nd\fd\16d\u086b\13d\3e\3e\3e\5e\u0870\ne\3f\3f\3f\3f\3f\3f\3f\3"+
		"f\3g\5g\u087b\ng\3g\3g\5g\u087f\ng\5g\u0881\ng\3g\5g\u0884\ng\3g\3g\3"+
		"g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u089c\n"+
		"g\3h\3h\3h\3h\3h\3h\3h\3h\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3j\3j\3j\7j\u08b3"+
		"\nj\fj\16j\u08b6\13j\3k\3k\5k\u08ba\nk\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3"+
		"l\3l\3l\3l\3l\3l\7l\u08cc\nl\fl\16l\u08cf\13l\3l\5l\u08d2\nl\3l\3l\5l"+
		"\u08d6\nl\3m\3m\3m\3m\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\5n\u08e6\nn\3o\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u08fa\no\3o\3o\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\5o\u0934\no\3o\3o\5o\u0938\no\3o\3o\3o\3o\3o\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u0968\no\3o\3o"+
		"\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\5o\u0978\no\5o\u097a\no\3p\3p\3p"+
		"\3p\3p\5p\u0981\np\3q\3q\3q\3q\5q\u0987\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q"+
		"\3q\3q\5q\u0994\nq\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u09a3\nq"+
		"\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u09ae\nq\3r\3r\3r\5r\u09b3\nr\3r\3r\3r"+
		"\3r\3r\3r\3r\3r\5r\u09bd\nr\3r\3r\3r\3r\3r\3r\3r\5r\u09c6\nr\3s\3s\3s"+
		"\3s\3s\3s\3s\3t\3t\3t\3t\3t\3t\3t\3u\3u\3u\3u\3u\3u\3u\3v\3v\3v\3v\3v"+
		"\3w\3w\3w\3w\3w\3x\5x\u09e8\nx\3x\3x\3y\5y\u09ed\ny\3y\3y\3z\3z\5z\u09f3"+
		"\nz\3{\5{\u09f6\n{\3{\3{\3{\5{\u09fb\n{\3{\7{\u09fe\n{\f{\16{\u0a01\13"+
		"{\3{\3{\3|\3|\3|\3|\5|\u0a09\n|\3|\7|\u0a0c\n|\f|\16|\u0a0f\13|\3|\3|"+
		"\3}\5}\u0a14\n}\3}\3}\3}\3}\3}\7}\u0a1b\n}\f}\16}\u0a1e\13}\3}\3}\3}\3"+
		"}\3}\7}\u0a25\n}\f}\16}\u0a28\13}\5}\u0a2a\n}\3}\3}\3}\3}\3}\3}\3}\3}"+
		"\3}\3}\7}\u0a36\n}\f}\16}\u0a39\13}\3}\3}\3}\5}\u0a3e\n}\3}\3}\3}\3}\3"+
		"}\3}\5}\u0a46\n}\3~\3~\5~\u0a4a\n~\3\177\3\177\3\177\3\177\7\177\u0a50"+
		"\n\177\f\177\16\177\u0a53\13\177\3\177\3\177\3\u0080\3\u0080\5\u0080\u0a59"+
		"\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\7\u0081\u0a64\n\u0081\f\u0081\16\u0081\u0a67\13\u0081\3\u0082"+
		"\3\u0082\3\u0082\7\u0082\u0a6c\n\u0082\f\u0082\16\u0082\u0a6f\13\u0082"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u0a7b\n\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\5\u0084\u0a82\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0a88\n"+
		"\u0084\3\u0084\3\u0084\5\u0084\u0a8c\n\u0084\3\u0084\3\u0084\3\u0084\3"+
		"\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\5\u0084\u0a9d\n\u0084\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\5\u0085\u0aac\n\u0085\5\u0085\u0aae\n\u0085\3\u0085\3\u0085\3"+
		"\u0085\5\u0085\u0ab3\n\u0085\3\u0086\5\u0086\u0ab6\n\u0086\3\u0086\3\u0086"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0abf\n\u0087\3\u0087"+
		"\5\u0087\u0ac2\n\u0087\3\u0087\5\u0087\u0ac5\n\u0087\3\u0087\3\u0087\3"+
		"\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u0ad2\n\u0089\3\u008a\3\u008a\5\u008a\u0ad6\n\u008a\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0ade\n\u008b\3\u008c\3"+
		"\u008c\3\u008c\3\u008c\5\u008c\u0ae4\n\u008c\3\u008d\3\u008d\3\u008d\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0af0\n"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0af7\n\u008d\3"+
		"\u008d\3\u008d\3\u008e\3\u008e\3\u008e\5\u008e\u0afe\n\u008e\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0b05\n\u008e\3\u008e\3\u008e\3"+
		"\u008e\3\u008e\5\u008e\u0b0b\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3"+
		"\u008e\5\u008e\u0b12\n\u008e\3\u008e\5\u008e\u0b15\n\u008e\3\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0b1a\n\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090"+
		"\5\u0090\u0b21\n\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0b29\n\u0091\3\u0091\3\u0091\5\u0091\u0b2d\n\u0091\3\u0091\5"+
		"\u0091\u0b30\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5"+
		"\u0092\u0b38\n\u0092\3\u0092\3\u0092\5\u0092\u0b3c\n\u0092\3\u0092\5\u0092"+
		"\u0b3f\n\u0092\3\u0093\3\u0093\5\u0093\u0b43\n\u0093\3\u0094\3\u0094\3"+
		"\u0094\5\u0094\u0b48\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b4e"+
		"\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b54\n\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0b5a\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0b60\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0b66\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b6c\n\u0094\3"+
		"\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0b72\n\u0094\3\u0094\5\u0094\u0b75"+
		"\n\u0094\3\u0095\3\u0095\5\u0095\u0b79\n\u0095\3\u0095\3\u0095\3\u0095"+
		"\5\u0095\u0b7e\n\u0095\7\u0095\u0b80\n\u0095\f\u0095\16\u0095\u0b83\13"+
		"\u0095\3\u0096\3\u0096\3\u0096\7\u0096\u0b88\n\u0096\f\u0096\16\u0096"+
		"\u0b8b\13\u0096\3\u0097\3\u0097\5\u0097\u0b8f\n\u0097\3\u0098\3\u0098"+
		"\3\u0099\3\u0099\3\u009a\5\u009a\u0b96\n\u009a\3\u009a\3\u009a\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0b9f\n\u009b\5\u009b\u0ba1\n"+
		"\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0ba8\n\u009c\3"+
		"\u009d\3\u009d\5\u009d\u0bac\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5"+
		"\u009d\u0bb2\n\u009d\3\u009d\5\u009d\u0bb5\n\u009d\3\u009d\3\u009d\5\u009d"+
		"\u0bb9\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0bbf\n\u009d\3"+
		"\u009e\3\u009e\3\u009e\5\u009e\u0bc4\n\u009e\3\u009e\3\u009e\5\u009e\u0bc8"+
		"\n\u009e\3\u009e\3\u009e\5\u009e\u0bcc\n\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0bd0\n\u009e\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0bd7\n"+
		"\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0be5\n\u00a2\3\u00a3\3\u00a3"+
		"\3\u00a3\2\3h\u00a4\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60"+
		"\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086"+
		"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e"+
		"\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6"+
		"\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce"+
		"\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6"+
		"\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe"+
		"\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116"+
		"\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e"+
		"\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\2)"+
		"\5\2\u01ed\u01ed\u02bf\u02bf\u030f\u030f\5\2\u0154\u0154\u0199\u0199\u01e1"+
		"\u01e1\4\2\u01e1\u01e1\u01ea\u01ea\4\2\u016f\u016f\u023c\u023c\3\2\u027b"+
		"\u027c\4\2\u0324\u0324\u032d\u032d\4\2\21\21<<\3\2\u034b\u034d\5\2\u0340"+
		"\u0340\u034e\u034f\u0351\u0353\3\2\u034e\u034f\5\2\7\7\16\16\u0142\u0142"+
		"\4\2\7\7cc\3\2\u032f\u0330\4\2\u02ba\u02ba\u02bd\u02bd\4\2\u0201\u0201"+
		"\u0263\u0263\4\2\4\4\u031a\u031a\4\2\u0199\u0199\u0284\u0284\4\2\22\22"+
		"__\4\2\u00ef\u00ef\u0214\u0214\5\2\u00ca\u00ca\u01ba\u01ba\u0214\u0214"+
		"\5\2\u00ca\u00ca\u0214\u0214\u023d\u023d\4\2\u0206\u0206\u02d7\u02d7\5"+
		"\2\u00e0\u00e0\u0324\u0324\u0329\u0329\5\2\u008d\u008d\u00b2\u00b2\u0120"+
		"\u0120\6\2\u00ca\u00ca\u0214\u0214\u023d\u023d\u02a8\u02a8\4\2\u0329\u0329"+
		"\u032d\u032d\4\2\u0324\u0324\u032a\u032a\5\2\u01d9\u01d9\u0299\u0299\u02bb"+
		"\u02bb\b\2\u01a1\u01a1\u0242\u0242\u0252\u0252\u02e3\u02e4\u02ea\u02ea"+
		"\u030d\u030e\3\2\u01bf\u01c0\4\2\u0202\u0202\u0231\u0231\4\2\u022f\u022f"+
		"\u0232\u0232\4\2\u0298\u0298\u02bd\u02bd\4\2\u00e3\u00e3\u00e6\u00e6\4"+
		"\2\66\66\u00d5\u00d5\4\2\u0242\u0242\u0329\u0329\4\2\u0329\u0329\u032f"+
		"\u032f*\2))SSssyy\u0083\u0084\u0087\u0087\u00a1\u00a1\u00ad\u00ad\u00be"+
		"\u00bf\u00e4\u00e4\u00f2\u00f2\u00fe\u00ff\u0106\u0106\u0108\u0108\u010a"+
		"\u010a\u011b\u011c\u0122\u0123\u012a\u012b\u0136\u0136\u013f\u013f\u0143"+
		"\u0143\u0145\u0145\u014a\u014a\u014c\u014c\u014f\u014f\u0157\u0157\u015e"+
		"\u015e\u016c\u016c\u016f\u016f\u017f\u01e6\u01e8\u021d\u021f\u0226\u0229"+
		"\u027c\u027e\u02e1\u02e3\u02e8\u02ea\u0307\u0309\u0312\u0314\u0316\u0318"+
		"\u0318\u032a\u032a\3\2\u0338\u033f\u0db0\2\u0146\3\2\2\2\4\u014c\3\2\2"+
		"\2\6\u0153\3\2\2\2\b\u015a\3\2\2\2\n\u0166\3\2\2\2\f\u0168\3\2\2\2\16"+
		"\u016a\3\2\2\2\20\u0180\3\2\2\2\22\u01ab\3\2\2\2\24\u01e2\3\2\2\2\26\u023b"+
		"\3\2\2\2\30\u023d\3\2\2\2\32\u024a\3\2\2\2\34\u0282\3\2\2\2\36\u0285\3"+
		"\2\2\2 \u02b3\3\2\2\2\"\u02b6\3\2\2\2$\u02c6\3\2\2\2&\u0301\3\2\2\2(\u0319"+
		"\3\2\2\2*\u0329\3\2\2\2,\u032b\3\2\2\2.\u034e\3\2\2\2\60\u036e\3\2\2\2"+
		"\62\u0384\3\2\2\2\64\u03a2\3\2\2\2\66\u03a4\3\2\2\28\u03e1\3\2\2\2:\u03e3"+
		"\3\2\2\2<\u03fe\3\2\2\2>\u0405\3\2\2\2@\u040b\3\2\2\2B\u0415\3\2\2\2D"+
		"\u0428\3\2\2\2F\u042a\3\2\2\2H\u0431\3\2\2\2J\u0442\3\2\2\2L\u046f\3\2"+
		"\2\2N\u0473\3\2\2\2P\u0480\3\2\2\2R\u0482\3\2\2\2T\u048f\3\2\2\2V\u0491"+
		"\3\2\2\2X\u04be\3\2\2\2Z\u04c8\3\2\2\2\\\u04f3\3\2\2\2^\u0537\3\2\2\2"+
		"`\u0542\3\2\2\2b\u054d\3\2\2\2d\u0559\3\2\2\2f\u0562\3\2\2\2h\u0570\3"+
		"\2\2\2j\u0588\3\2\2\2l\u0599\3\2\2\2n\u059b\3\2\2\2p\u05ac\3\2\2\2r\u05b7"+
		"\3\2\2\2t\u05b9\3\2\2\2v\u05c0\3\2\2\2x\u05db\3\2\2\2z\u05e1\3\2\2\2|"+
		"\u05eb\3\2\2\2~\u05f5\3\2\2\2\u0080\u05f7\3\2\2\2\u0082\u0613\3\2\2\2"+
		"\u0084\u0615\3\2\2\2\u0086\u0631\3\2\2\2\u0088\u0633\3\2\2\2\u008a\u063b"+
		"\3\2\2\2\u008c\u0643\3\2\2\2\u008e\u064c\3\2\2\2\u0090\u0697\3\2\2\2\u0092"+
		"\u069e\3\2\2\2\u0094\u06ac\3\2\2\2\u0096\u06b5\3\2\2\2\u0098\u06dc\3\2"+
		"\2\2\u009a\u06ec\3\2\2\2\u009c\u06f3\3\2\2\2\u009e\u06f5\3\2\2\2\u00a0"+
		"\u0764\3\2\2\2\u00a2\u0766\3\2\2\2\u00a4\u0771\3\2\2\2\u00a6\u0775\3\2"+
		"\2\2\u00a8\u0777\3\2\2\2\u00aa\u07b0\3\2\2\2\u00ac\u07b2\3\2\2\2\u00ae"+
		"\u07bb\3\2\2\2\u00b0\u07c3\3\2\2\2\u00b2\u07d1\3\2\2\2\u00b4\u07e2\3\2"+
		"\2\2\u00b6\u07f8\3\2\2\2\u00b8\u0802\3\2\2\2\u00ba\u0808\3\2\2\2\u00bc"+
		"\u080a\3\2\2\2\u00be\u0817\3\2\2\2\u00c0\u0819\3\2\2\2\u00c2\u0851\3\2"+
		"\2\2\u00c4\u0853\3\2\2\2\u00c6\u0864\3\2\2\2\u00c8\u086c\3\2\2\2\u00ca"+
		"\u0871\3\2\2\2\u00cc\u089b\3\2\2\2\u00ce\u089d\3\2\2\2\u00d0\u08a5\3\2"+
		"\2\2\u00d2\u08af\3\2\2\2\u00d4\u08b7\3\2\2\2\u00d6\u08d5\3\2\2\2\u00d8"+
		"\u08d7\3\2\2\2\u00da\u08e5\3\2\2\2\u00dc\u0979\3\2\2\2\u00de\u0980\3\2"+
		"\2\2\u00e0\u09ad\3\2\2\2\u00e2\u09c5\3\2\2\2\u00e4\u09c7\3\2\2\2\u00e6"+
		"\u09ce\3\2\2\2\u00e8\u09d5\3\2\2\2\u00ea\u09dc\3\2\2\2\u00ec\u09e1\3\2"+
		"\2\2\u00ee\u09e7\3\2\2\2\u00f0\u09ec\3\2\2\2\u00f2\u09f0\3\2\2\2\u00f4"+
		"\u09f5\3\2\2\2\u00f6\u0a04\3\2\2\2\u00f8\u0a13\3\2\2\2\u00fa\u0a49\3\2"+
		"\2\2\u00fc\u0a4b\3\2\2\2\u00fe\u0a58\3\2\2\2\u0100\u0a5a\3\2\2\2\u0102"+
		"\u0a68\3\2\2\2\u0104\u0a7a\3\2\2\2\u0106\u0a9c\3\2\2\2\u0108\u0ab2\3\2"+
		"\2\2\u010a\u0ab5\3\2\2\2\u010c\u0ab9\3\2\2\2\u010e\u0ac8\3\2\2\2\u0110"+
		"\u0ad1\3\2\2\2\u0112\u0ad5\3\2\2\2\u0114\u0add\3\2\2\2\u0116\u0ae3\3\2"+
		"\2\2\u0118\u0af6\3\2\2\2\u011a\u0b14\3\2\2\2\u011c\u0b19\3\2\2\2\u011e"+
		"\u0b20\3\2\2\2\u0120\u0b2f\3\2\2\2\u0122\u0b3e\3\2\2\2\u0124\u0b42\3\2"+
		"\2\2\u0126\u0b74\3\2\2\2\u0128\u0b76\3\2\2\2\u012a\u0b84\3\2\2\2\u012c"+
		"\u0b8e\3\2\2\2\u012e\u0b90\3\2\2\2\u0130\u0b92\3\2\2\2\u0132\u0b95\3\2"+
		"\2\2\u0134\u0ba0\3\2\2\2\u0136\u0ba7\3\2\2\2\u0138\u0bbe\3\2\2\2\u013a"+
		"\u0bcf\3\2\2\2\u013c\u0bd1\3\2\2\2\u013e\u0bd6\3\2\2\2\u0140\u0bd8\3\2"+
		"\2\2\u0142\u0be4\3\2\2\2\u0144\u0be6\3\2\2\2\u0146\u0147\5\4\3\2\u0147"+
		"\3\3\2\2\2\u0148\u014a\5\6\4\2\u0149\u014b\7\u0349\2\2\u014a\u0149\3\2"+
		"\2\2\u014a\u014b\3\2\2\2\u014b\u014d\3\2\2\2\u014c\u0148\3\2\2\2\u014d"+
		"\u014e\3\2\2\2\u014e\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f\5\3\2\2\2"+
		"\u0150\u0154\5\b\5\2\u0151\u0154\5\n\6\2\u0152\u0154\5\f\7\2\u0153\u0150"+
		"\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0152\3\2\2\2\u0154\7\3\2\2\2\u0155"+
		"\u015b\5\24\13\2\u0156\u015b\5\32\16\2\u0157\u015b\5\36\20\2\u0158\u015b"+
		"\5\"\22\2\u0159\u015b\5$\23\2\u015a\u0155\3\2\2\2\u015a\u0156\3\2\2\2"+
		"\u015a\u0157\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u0159\3\2\2\2\u015b\t\3"+
		"\2\2\2\u015c\u0167\5\20\t\2\u015d\u0167\5\66\34\2\u015e\u0167\5,\27\2"+
		"\u015f\u0167\5\22\n\2\u0160\u0167\5.\30\2\u0161\u0167\5\62\32\2\u0162"+
		"\u0167\5:\36\2\u0163\u0167\5\16\b\2\u0164\u0167\5@!\2\u0165\u0167\5B\""+
		"\2\u0166\u015c\3\2\2\2\u0166\u015d\3\2\2\2\u0166\u015e\3\2\2\2\u0166\u015f"+
		"\3\2\2\2\u0166\u0160\3\2\2\2\u0166\u0161\3\2\2\2\u0166\u0162\3\2\2\2\u0166"+
		"\u0163\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0165\3\2\2\2\u0167\13\3\2\2"+
		"\2\u0168\u0169\7\u0349\2\2\u0169\r\3\2\2\2\u016a\u016b\7h\2\2\u016b\u016e"+
		"\7\u02d0\2\2\u016c\u016d\7\u009a\2\2\u016d\u016f\7x\2\2\u016e\u016c\3"+
		"\2\2\2\u016e\u016f\3\2\2\2\u016f\u017e\3\2\2\2\u0170\u0172\7\u0348\2\2"+
		"\u0171\u0170\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0176\3\2\2\2\u0173\u0174"+
		"\5\u013e\u00a0\2\u0174\u0175\7\u0341\2\2\u0175\u0177\3\2\2\2\u0176\u0173"+
		"\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u017b\3\2\2\2\u0178\u0179\5\u013e\u00a0"+
		"\2\u0179\u017a\7\u0341\2\2\u017a\u017c\3\2\2\2\u017b\u0178\3\2\2\2\u017b"+
		"\u017c\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017f\5\u013e\u00a0\2\u017e\u0171"+
		"\3\2\2\2\u017e\u017f\3\2\2\2\u017f\17\3\2\2\2\u0180\u0181\7\13\2\2\u0181"+
		"\u0185\7\u02d0\2\2\u0182\u0183\5\u013e\u00a0\2\u0183\u0184\7\u0341\2\2"+
		"\u0184\u0186\3\2\2\2\u0185\u0182\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187"+
		"\3\2\2\2\u0187\u018d\5\u013e\u00a0\2\u0188\u018b\7\u0116\2\2\u0189\u018a"+
		"\7\u017a\2\2\u018a\u018c\7\u0329\2\2\u018b\u0189\3\2\2\2\u018b\u018c\3"+
		"\2\2\2\u018c\u018e\3\2\2\2\u018d\u0188\3\2\2\2\u018d\u018e\3\2\2\2\u018e"+
		"\u0192\3\2\2\2\u018f\u0190\7\u009e\2\2\u0190\u0191\7\'\2\2\u0191\u0193"+
		"\7\u0329\2\2\u0192\u018f\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0198\3\2\2"+
		"\2\u0194\u0195\7\u00cd\2\2\u0195\u0199\7\u0329\2\2\u0196\u0197\7\u0264"+
		"\2\2\u0197\u0199\7\u00cd\2\2\u0198\u0194\3\2\2\2\u0198\u0196\3\2\2\2\u0198"+
		"\u0199\3\2\2\2\u0199\u019e\3\2\2\2\u019a\u019b\7\u00c1\2\2\u019b\u019f"+
		"\7\u0329\2\2\u019c\u019d\7\u0264\2\2\u019d\u019f\7\u00c1\2\2\u019e\u019a"+
		"\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a3\3\2\2\2\u01a0"+
		"\u01a4\7R\2\2\u01a1\u01a2\7\u0264\2\2\u01a2\u01a4\7R\2\2\u01a3\u01a0\3"+
		"\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a9\3\2\2\2\u01a5"+
		"\u01a6\7(\2\2\u01a6\u01aa\7\u0329\2\2\u01a7\u01a8\7\u0264\2\2\u01a8\u01aa"+
		"\7(\2\2\u01a9\u01a5\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa"+
		"\21\3\2\2\2\u01ab\u01ac\7J\2\2\u01ac\u01b0\7\u02d0\2\2\u01ad\u01ae\5\u013e"+
		"\u00a0\2\u01ae\u01af\7\u0341\2\2\u01af\u01b1\3\2\2\2\u01b0\u01ad\3\2\2"+
		"\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b5\5\u013e\u00a0\2"+
		"\u01b3\u01b4\7\21\2\2\u01b4\u01b6\5\u0138\u009d\2\u01b5\u01b3\3\2\2\2"+
		"\u01b5\u01b6\3\2\2\2\u01b6\u01ba\3\2\2\2\u01b7\u01b8\7\u014c\2\2\u01b8"+
		"\u01b9\7\u017a\2\2\u01b9\u01bb\7\u0329\2\2\u01ba\u01b7\3\2\2\2\u01ba\u01bb"+
		"\3\2\2\2\u01bb\u01c2\3\2\2\2\u01bc\u01bd\7\u009e\2\2\u01bd\u01bf\7\'\2"+
		"\2\u01be\u01c0\7\u034f\2\2\u01bf\u01be\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0"+
		"\u01c1\3\2\2\2\u01c1\u01c3\7\u0329\2\2\u01c2\u01bc\3\2\2\2\u01c2\u01c3"+
		"\3\2\2\2\u01c3\u01ca\3\2\2\2\u01c4\u01c6\7\u00cd\2\2\u01c5\u01c7\7\u0329"+
		"\2\2\u01c6\u01c5\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01cb\3\2\2\2\u01c8"+
		"\u01c9\7\u0264\2\2\u01c9\u01cb\7\u00cd\2\2\u01ca\u01c4\3\2\2\2\u01ca\u01c8"+
		"\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01d2\3\2\2\2\u01cc\u01ce\7\u00c1\2"+
		"\2\u01cd\u01cf\7\u0329\2\2\u01ce\u01cd\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf"+
		"\u01d3\3\2\2\2\u01d0\u01d1\7\u0264\2\2\u01d1\u01d3\7\u00c1\2\2\u01d2\u01cc"+
		"\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d7\3\2\2\2\u01d4"+
		"\u01d8\7R\2\2\u01d5\u01d6\7\u0264\2\2\u01d6\u01d8\7R\2\2\u01d7\u01d4\3"+
		"\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01df\3\2\2\2\u01d9"+
		"\u01db\7(\2\2\u01da\u01dc\7\u0329\2\2\u01db\u01da\3\2\2\2\u01db\u01dc"+
		"\3\2\2\2\u01dc\u01e0\3\2\2\2\u01dd\u01de\7\u0264\2\2\u01de\u01e0\7(\2"+
		"\2\u01df\u01d9\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\23"+
		"\3\2\2\2\u01e1\u01e3\5\u0082B\2\u01e2\u01e1\3\2\2\2\u01e2\u01e3\3\2\2"+
		"\2\u01e3\u01e4\3\2\2\2\u01e4\u01ec\7\u00ca\2\2\u01e5\u01e6\7\u015c\2\2"+
		"\u01e6\u01e7\7\u0346\2\2\u01e7\u01e8\5h\65\2\u01e8\u01ea\7\u0347\2\2\u01e9"+
		"\u01eb\7\u00f6\2\2\u01ea\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed"+
		"\3\2\2\2\u01ec\u01e5\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ef\3\2\2\2\u01ee"+
		"\u01f0\7\u00a6\2\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1"+
		"\3\2\2\2\u01f1\u01f3\5\u0124\u0093\2\u01f2\u01f4\5\u00f6|\2\u01f3\u01f2"+
		"\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f6\3\2\2\2\u01f5\u01f7\5\u00f0y"+
		"\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01f9"+
		"\7\u0309\2\2\u01f9\u01fa\5\u00bc_\2\u01fa\u01fb\7\u00e6\2\2\u01fb\u0206"+
		"\5\u008aF\2\u01fc\u01fd\7\u0176\2\2\u01fd\u0200\7\u00bd\2\2\u01fe\u01ff"+
		"\7\f\2\2\u01ff\u0201\5\u008aF\2\u0200\u01fe\3\2\2\2\u0200\u0201\3\2\2"+
		"\2\u0201\u0202\3\2\2\2\u0202\u0203\7\u015a\2\2\u0203\u0205\5\26\f\2\u0204"+
		"\u01fc\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204\3\2\2\2\u0206\u0207\3\2"+
		"\2\2\u0207\u0216\3\2\2\2\u0208\u0206\3\2\2\2\u0209\u020a\7\u0176\2\2\u020a"+
		"\u020b\7\u00dd\2\2\u020b\u020e\7\u00bd\2\2\u020c\u020d\7\'\2\2\u020d\u020f"+
		"\7\u0157\2\2\u020e\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0212\3\2\2"+
		"\2\u0210\u0211\7\f\2\2\u0211\u0213\5\u008aF\2\u0212\u0210\3\2\2\2\u0212"+
		"\u0213\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\7\u015a\2\2\u0215\u0217"+
		"\5\30\r\2\u0216\u0209\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0225\3\2\2\2"+
		"\u0218\u0219\7\u0176\2\2\u0219\u021a\7\u00dd\2\2\u021a\u021b\7\u00bd\2"+
		"\2\u021b\u021c\7\'\2\2\u021c\u021f\7\u0143\2\2\u021d\u021e\7\f\2\2\u021e"+
		"\u0220\5\u008aF\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221"+
		"\3\2\2\2\u0221\u0222\7\u015a\2\2\u0222\u0224\5\26\f\2\u0223\u0218\3\2"+
		"\2\2\u0224\u0227\3\2\2\2\u0225\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u0226"+
		"\u0229\3\2\2\2\u0227\u0225\3\2\2\2\u0228\u022a\5&\24\2\u0229\u0228\3\2"+
		"\2\2\u0229\u022a\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u022d\5\u00a8U\2\u022c"+
		"\u022b\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u022f\7\u0349"+
		"\2\2\u022f\25\3\2\2\2\u0230\u0231\7\u016a\2\2\u0231\u0232\7\u013c\2\2"+
		"\u0232\u0237\5\u0086D\2\u0233\u0234\7\u0348\2\2\u0234\u0236\5\u0086D\2"+
		"\u0235\u0233\3\2\2\2\u0236\u0239\3\2\2\2\u0237\u0235\3\2\2\2\u0237\u0238"+
		"\3\2\2\2\u0238\u023c\3\2\2\2\u0239\u0237\3\2\2\2\u023a\u023c\7]\2\2\u023b"+
		"\u0230\3\2\2\2\u023b\u023a\3\2\2\2\u023c\27\3\2\2\2\u023d\u0242\7\u00a3"+
		"\2\2\u023e\u023f\7\u0346\2\2\u023f\u0240\5\u012a\u0096\2\u0240\u0241\7"+
		"\u0347\2\2\u0241\u0243\3\2\2\2\u0242\u023e\3\2\2\2\u0242\u0243\3\2\2\2"+
		"\u0243\u0247\3\2\2\2\u0244\u0248\5\u0100\u0081\2\u0245\u0246\7Z\2\2\u0246"+
		"\u0248\7\u0170\2\2\u0247\u0244\3\2\2\2\u0247\u0245\3\2\2\2\u0248\31\3"+
		"\2\2\2\u0249\u024b\5\u0082B\2\u024a\u0249\3\2\2\2\u024a\u024b\3\2\2\2"+
		"\u024b\u024c\3\2\2\2\u024c\u0256\7]\2\2\u024d\u024e\7\u015c\2\2\u024e"+
		"\u024f\7\u0346\2\2\u024f\u0250\5h\65\2\u0250\u0252\7\u0347\2\2\u0251\u0253"+
		"\7\u00f6\2\2\u0252\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0257\3\2\2"+
		"\2\u0254\u0255\7\u015c\2\2\u0255\u0257\7\u0329\2\2\u0256\u024d\3\2\2\2"+
		"\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u025a"+
		"\7\u008c\2\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025b\3\2\2"+
		"\2\u025b\u025d\5\34\17\2\u025c\u025e\5\u00f6|\2\u025d\u025c\3\2\2\2\u025d"+
		"\u025e\3\2\2\2\u025e\u0260\3\2\2\2\u025f\u0261\5&\24\2\u0260\u025f\3\2"+
		"\2\2\u0260\u0261\3\2\2\2\u0261\u0264\3\2\2\2\u0262\u0263\7\u008c\2\2\u0263"+
		"\u0265\5\u00bc_\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0273"+
		"\3\2\2\2\u0266\u0271\7\u0177\2\2\u0267\u0272\5\u008aF\2\u0268\u0269\7"+
		"L\2\2\u0269\u026f\7\u00e2\2\2\u026a\u026c\7\u020e\2\2\u026b\u026a\3\2"+
		"\2\2\u026b\u026c\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u0270\5\u012c\u0097"+
		"\2\u026e\u0270\7\u0324\2\2\u026f\u026b\3\2\2\2\u026f\u026e\3\2\2\2\u0270"+
		"\u0272\3\2\2\2\u0271\u0267\3\2\2\2\u0271\u0268\3\2\2\2\u0272\u0274\3\2"+
		"\2\2\u0273\u0266\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0276\3\2\2\2\u0275"+
		"\u0277\5\u00a0Q\2\u0276\u0275\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279"+
		"\3\2\2\2\u0278\u027a\5\u00a8U\2\u0279\u0278\3\2\2\2\u0279\u027a\3\2\2"+
		"\2\u027a\u027c\3\2\2\2\u027b\u027d\7\u0349\2\2\u027c\u027b\3\2\2\2\u027c"+
		"\u027d\3\2\2\2\u027d\33\3\2\2\2\u027e\u0283\5\u0124\u0093\2\u027f\u0283"+
		"\5\u00f2z\2\u0280\u0283\5D#\2\u0281\u0283\7\u0324\2\2\u0282\u027e\3\2"+
		"\2\2\u0282\u027f\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0281\3\2\2\2\u0283"+
		"\35\3\2\2\2\u0284\u0286\5\u0082B\2\u0285\u0284\3\2\2\2\u0285\u0286\3\2"+
		"\2\2\u0286\u0287\3\2\2\2\u0287\u028f\7\u00a3\2\2\u0288\u0289\7\u015c\2"+
		"\2\u0289\u028a\7\u0346\2\2\u028a\u028b\5h\65\2\u028b\u028d\7\u0347\2\2"+
		"\u028c\u028e\7\u00f6\2\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e"+
		"\u0290\3\2\2\2\u028f\u0288\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0292\3\2"+
		"\2\2\u0291\u0293\7\u00a6\2\2\u0292\u0291\3\2\2\2\u0292\u0293\3\2\2\2\u0293"+
		"\u0296\3\2\2\2\u0294\u0297\5\u0124\u0093\2\u0295\u0297\5D#\2\u0296\u0294"+
		"\3\2\2\2\u0296\u0295\3\2\2\2\u0297\u0299\3\2\2\2\u0298\u029a\5\u00f6|"+
		"\2\u0299\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029f\3\2\2\2\u029b\u029c"+
		"\7\u0346\2\2\u029c\u029d\5\u012a\u0096\2\u029d\u029e\7\u0347\2\2\u029e"+
		"\u02a0\3\2\2\2\u029f\u029b\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2\3\2"+
		"\2\2\u02a1\u02a3\5&\24\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3"+
		"\u02a4\3\2\2\2\u02a4\u02a6\5 \21\2\u02a5\u02a7\5\u00a0Q\2\u02a6\u02a5"+
		"\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9\3\2\2\2\u02a8\u02aa\5\u00a8U"+
		"\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ac\3\2\2\2\u02ab\u02ad"+
		"\7\u0349\2\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad\3\2\2\2\u02ad\37\3\2\2\2"+
		"\u02ae\u02b4\5\u0100\u0081\2\u02af\u02b4\5\u00dan\2\u02b0\u02b4\5J&\2"+
		"\u02b1\u02b2\7Z\2\2\u02b2\u02b4\7\u0170\2\2\u02b3\u02ae\3\2\2\2\u02b3"+
		"\u02af\3\2\2\2\u02b3\u02b0\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4!\3\2\2\2"+
		"\u02b5\u02b7\5\u0082B\2\u02b6\u02b5\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7"+
		"\u02b8\3\2\2\2\u02b8\u02ba\5\u0092J\2\u02b9\u02bb\5\u009eP\2\u02ba\u02b9"+
		"\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc\u02be\5\u00a0Q"+
		"\2\u02bd\u02bc\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c0\3\2\2\2\u02bf\u02c1"+
		"\5\u00a8U\2\u02c0\u02bf\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c3\3\2\2"+
		"\2\u02c2\u02c4\7\u0349\2\2\u02c3\u02c2\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4"+
		"#\3\2\2\2\u02c5\u02c7\5\u0082B\2\u02c6\u02c5\3\2\2\2\u02c6\u02c7\3\2\2"+
		"\2\u02c7\u02c8\3\2\2\2\u02c8\u02d0\7\u016a\2\2\u02c9\u02ca\7\u015c\2\2"+
		"\u02ca\u02cb\7\u0346\2\2\u02cb\u02cc\5h\65\2\u02cc\u02ce\7\u0347\2\2\u02cd"+
		"\u02cf\7\u00f6\2\2\u02ce\u02cd\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d1"+
		"\3\2\2\2\u02d0\u02c9\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d4\3\2\2\2\u02d2"+
		"\u02d5\5\u0124\u0093\2\u02d3\u02d5\5D#\2\u02d4\u02d2\3\2\2\2\u02d4\u02d3"+
		"\3\2\2\2\u02d5\u02d7\3\2\2\2\u02d6\u02d8\5\u00f4{\2\u02d7\u02d6\3\2\2"+
		"\2\u02d7\u02d8\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da\7\u013c\2\2\u02da"+
		"\u02df\5\u0086D\2\u02db\u02dc\7\u0348\2\2\u02dc\u02de\5\u0086D\2\u02dd"+
		"\u02db\3\2\2\2\u02de\u02e1\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02e0\3\2"+
		"\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3\2\2\2\u02e2\u02e4\5&\24\2\u02e3"+
		"\u02e2\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e6\7\u008c"+
		"\2\2\u02e6\u02e8\5\u00bc_\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8"+
		"\u02f6\3\2\2\2\u02e9\u02f4\7\u0177\2\2\u02ea\u02f5\5\u0088E\2\u02eb\u02ec"+
		"\7L\2\2\u02ec\u02f2\7\u00e2\2\2\u02ed\u02ef\7\u020e\2\2\u02ee\u02ed\3"+
		"\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f3\5\u012c\u0097"+
		"\2\u02f1\u02f3\7\u0324\2\2\u02f2\u02ee\3\2\2\2\u02f2\u02f1\3\2\2\2\u02f3"+
		"\u02f5\3\2\2\2\u02f4\u02ea\3\2\2\2\u02f4\u02eb\3\2\2\2\u02f5\u02f7\3\2"+
		"\2\2\u02f6\u02e9\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f9\3\2\2\2\u02f8"+
		"\u02fa\5\u00a0Q\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fc"+
		"\3\2\2\2\u02fb\u02fd\5\u00a8U\2\u02fc\u02fb\3\2\2\2\u02fc\u02fd\3\2\2"+
		"\2\u02fd\u02ff\3\2\2\2\u02fe\u0300\7\u0349\2\2\u02ff\u02fe\3\2\2\2\u02ff"+
		"\u0300\3\2\2\2\u0300%\3\2\2\2\u0301\u0302\7\u027c\2\2\u0302\u0307\5(\25"+
		"\2\u0303\u0304\7\u0348\2\2\u0304\u0306\5(\25\2\u0305\u0303\3\2\2\2\u0306"+
		"\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0315\3\2"+
		"\2\2\u0309\u0307\3\2\2\2\u030a\u030d\7\u00a6\2\2\u030b\u030e\7\u0324\2"+
		"\2\u030c\u030e\5\u011a\u008e\2\u030d\u030b\3\2\2\2\u030d\u030c\3\2\2\2"+
		"\u030e\u0313\3\2\2\2\u030f\u0310\7\u0346\2\2\u0310\u0311\5\u012a\u0096"+
		"\2\u0311\u0312\7\u0347\2\2\u0312\u0314\3\2\2\2\u0313\u030f\3\2\2\2\u0313"+
		"\u0314\3\2\2\2\u0314\u0316\3\2\2\2\u0315\u030a\3\2\2\2\u0315\u0316\3\2"+
		"\2\2\u0316\'\3\2\2\2\u0317\u031a\5*\26\2\u0318\u031a\5h\65\2\u0319\u0317"+
		"\3\2\2\2\u0319\u0318\3\2\2\2\u031a\u031c\3\2\2\2\u031b\u031d\5\u00eex"+
		"\2\u031c\u031b\3\2\2\2\u031c\u031d\3\2\2\2\u031d)\3\2\2\2\u031e\u0322"+
		"\7\u01d8\2\2\u031f\u0322\7\u0223\2\2\u0320\u0322\5\u011a\u008e\2\u0321"+
		"\u031e\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0320\3\2\2\2\u0322\u0323\3\2"+
		"\2\2\u0323\u0326\7\u0341\2\2\u0324\u0327\7\u034b\2\2\u0325\u0327\5\u013e"+
		"\u00a0\2\u0326\u0324\3\2\2\2\u0326\u0325\3\2\2\2\u0327\u032a\3\2\2\2\u0328"+
		"\u032a\7\u031b\2\2\u0329\u0321\3\2\2\2\u0329\u0328\3\2\2\2\u032a+\3\2"+
		"\2\2\u032b\u032d\7J\2\2\u032c\u032e\7\u0166\2\2\u032d\u032c\3\2\2\2\u032d"+
		"\u032e\3\2\2\2\u032e\u0330\3\2\2\2\u032f\u0331\5\u0130\u0099\2\u0330\u032f"+
		"\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\7\u009f\2"+
		"\2\u0333\u0334\5\u013e\u00a0\2\u0334\u0335\7\u00e6\2\2\u0335\u0336\5\u00d4"+
		"k\2\u0336\u0337\7\u0346\2\2\u0337\u0338\5\u0128\u0095\2\u0338\u033e\7"+
		"\u0347\2\2\u0339\u033a\7\u009d\2\2\u033a\u033b\7\u0346\2\2\u033b\u033c"+
		"\5\u012a\u0096\2\u033c\u033d\7\u0347\2\2\u033d\u033f\3\2\2\2\u033e\u0339"+
		"\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0342\3\2\2\2\u0340\u0341\7\u0177\2"+
		"\2\u0341\u0343\5\u008aF\2\u0342\u0340\3\2\2\2\u0342\u0343\3\2\2\2\u0343"+
		"\u0345\3\2\2\2\u0344\u0346\5b\62\2\u0345\u0344\3\2\2\2\u0345\u0346\3\2"+
		"\2\2\u0346\u0349\3\2\2\2\u0347\u0348\7\u00e6\2\2\u0348\u034a\5\u013e\u00a0"+
		"\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034c\3\2\2\2\u034b\u034d"+
		"\7\u0349\2\2\u034c\u034b\3\2\2\2\u034c\u034d\3\2\2\2\u034d-\3\2\2\2\u034e"+
		"\u034f\7J\2\2\u034f\u0350\7\u0154\2\2\u0350\u0351\5\u011a\u008e\2\u0351"+
		"\u0352\7\u0346\2\2\u0352\u0354\5R*\2\u0353\u0355\7\u0348\2\2\u0354\u0353"+
		"\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0359\7\u0347\2"+
		"\2\u0357\u0358\7\u023a\2\2\u0358\u035a\5\u0140\u00a1\2\u0359\u0357\3\2"+
		"\2\2\u0359\u035a\3\2\2\2\u035a\u035e\3\2\2\2\u035b\u035d\5\60\31\2\u035c"+
		"\u035b\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3\2"+
		"\2\2\u035f\u0364\3\2\2\2\u0360\u035e\3\2\2\2\u0361\u0362\7\u00e6\2\2\u0362"+
		"\u0365\5\u013e\u00a0\2\u0363\u0365\7Z\2\2\u0364\u0361\3\2\2\2\u0364\u0363"+
		"\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0369\3\2\2\2\u0366\u0367\7\u02f3\2"+
		"\2\u0367\u036a\5\u013e\u00a0\2\u0368\u036a\7Z\2\2\u0369\u0366\3\2\2\2"+
		"\u0369\u0368\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036c\3\2\2\2\u036b\u036d"+
		"\7\u0349\2\2\u036c\u036b\3\2\2\2\u036c\u036d\3\2\2\2\u036d/\3\2\2\2\u036e"+
		"\u0382\7\u017a\2\2\u036f\u0370\7\u0346\2\2\u0370\u0375\5d\63\2\u0371\u0372"+
		"\7\u0348\2\2\u0372\u0374\5d\63\2\u0373\u0371\3\2\2\2\u0374\u0377\3\2\2"+
		"\2\u0375\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0375"+
		"\3\2\2\2\u0378\u0379\7\u0347\2\2\u0379\u0383\3\2\2\2\u037a\u037f\5d\63"+
		"\2\u037b\u037c\7\u0348\2\2\u037c\u037e\5d\63\2\u037d\u037b\3\2\2\2\u037e"+
		"\u0381\3\2\2\2\u037f\u037d\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0383\3\2"+
		"\2\2\u0381\u037f\3\2\2\2\u0382\u036f\3\2\2\2\u0382\u037a\3\2\2\2\u0383"+
		"\61\3\2\2\2\u0384\u0385\7J\2\2\u0385\u0386\7\u0173\2\2\u0386\u038b\5\u011c"+
		"\u008f\2\u0387\u0388\7\u0346\2\2\u0388\u0389\5\u012a\u0096\2\u0389\u038a"+
		"\7\u0347\2\2\u038a\u038c\3\2\2\2\u038b\u0387\3\2\2\2\u038b\u038c\3\2\2"+
		"\2\u038c\u0396\3\2\2\2\u038d\u038e\7\u017a\2\2\u038e\u0393\5\64\33\2\u038f"+
		"\u0390\7\u0348\2\2\u0390\u0392\5\64\33\2\u0391\u038f\3\2\2\2\u0392\u0395"+
		"\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0397\3\2\2\2\u0395"+
		"\u0393\3\2\2\2\u0396\u038d\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2"+
		"\2\2\u0398\u0399\7\21\2\2\u0399\u039d\5\"\22\2\u039a\u039b\7\u017a\2\2"+
		"\u039b\u039c\7/\2\2\u039c\u039e\7\u00ed\2\2\u039d\u039a\3\2\2\2\u039d"+
		"\u039e\3\2\2\2\u039e\u03a0\3\2\2\2\u039f\u03a1\7\u0349\2\2\u03a0\u039f"+
		"\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\63\3\2\2\2\u03a2\u03a3\t\2\2\2\u03a3"+
		"\65\3\2\2\2\u03a4\u03a5\7\13\2\2\u03a5\u03a6\7\u0154\2\2\u03a6\u03d2\5"+
		"\u011a\u008e\2\u03a7\u03a8\7\u013c\2\2\u03a8\u03a9\7\u0346\2\2\u03a9\u03aa"+
		"\7\u023b\2\2\u03aa\u03ab\7\u0331\2\2\u03ab\u03ac\t\3\2\2\u03ac\u03d3\7"+
		"\u0347\2\2\u03ad\u03ae\7\5\2\2\u03ae\u03d3\5T+\2\u03af\u03b0\7\13\2\2"+
		"\u03b0\u03b1\79\2\2\u03b1\u03d3\5V,\2\u03b2\u03b3\7h\2\2\u03b3\u03b4\7"+
		"9\2\2\u03b4\u03d3\5\u013e\u00a0\2\u03b5\u03b6\7h\2\2\u03b6\u03b7\7>\2"+
		"\2\u03b7\u03d3\5\u013e\u00a0\2\u03b8\u03b9\7\u017a\2\2\u03b9\u03ba\7/"+
		"\2\2\u03ba\u03bb\7\5\2\2\u03bb\u03bc\7>\2\2\u03bc\u03bd\5\u013e\u00a0"+
		"\2\u03bd\u03be\7\u0089\2\2\u03be\u03bf\7\u00ad\2\2\u03bf\u03c0\7\u0346"+
		"\2\2\u03c0\u03c1\5\u012a\u0096\2\u03c1\u03c2\7\u0347\2\2\u03c2\u03c3\7"+
		"\u010f\2\2\u03c3\u03c4\5\u011a\u008e\2\u03c4\u03c5\7\u0346\2\2\u03c5\u03c6"+
		"\5\u012a\u0096\2\u03c6\u03c7\7\u0347\2\2\u03c7\u03d3\3\2\2\2\u03c8\u03c9"+
		"\7/\2\2\u03c9\u03ca\7>\2\2\u03ca\u03d3\5\u013e\u00a0\2\u03cb\u03cc\t\4"+
		"\2\2\u03cc\u03ce\7\u0161\2\2\u03cd\u03cf\5\u013e\u00a0\2\u03ce\u03cd\3"+
		"\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d3\3\2\2\2\u03d0\u03d1\7\u02a2\2\2"+
		"\u03d1\u03d3\5\60\31\2\u03d2\u03a7\3\2\2\2\u03d2\u03ad\3\2\2\2\u03d2\u03af"+
		"\3\2\2\2\u03d2\u03b2\3\2\2\2\u03d2\u03b5\3\2\2\2\u03d2\u03b8\3\2\2\2\u03d2"+
		"\u03c8\3\2\2\2\u03d2\u03cb\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d3\u03d5\3\2"+
		"\2\2\u03d4\u03d6\7\u0349\2\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6"+
		"\67\3\2\2\2\u03d7\u03d8\5\u013e\u00a0\2\u03d8\u03d9\7\u0341\2\2\u03d9"+
		"\u03da\58\35\2\u03da\u03e2\3\2\2\2\u03db\u03dc\5\u013e\u00a0\2\u03dc\u03dd"+
		"\7\u0341\2\2\u03dd\u03e0\3\2\2\2\u03de\u03e0\5\u013e\u00a0\2\u03df\u03db"+
		"\3\2\2\2\u03df\u03de\3\2\2\2\u03e0\u03e2\3\2\2\2\u03e1\u03d7\3\2\2\2\u03e1"+
		"\u03df\3\2\2\2\u03e29\3\2\2\2\u03e3\u03e4\7h\2\2\u03e4\u03e7\7\u009f\2"+
		"\2\u03e5\u03e6\7\u009a\2\2\u03e6\u03e8\7x\2\2\u03e7\u03e5\3\2\2\2\u03e7"+
		"\u03e8\3\2\2\2\u03e8\u03f9\3\2\2\2\u03e9\u03ee\5<\37\2\u03ea\u03eb\7\u0348"+
		"\2\2\u03eb\u03ed\5<\37\2\u03ec\u03ea\3\2\2\2\u03ed\u03f0\3\2\2\2\u03ee"+
		"\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03fa\3\2\2\2\u03f0\u03ee\3\2"+
		"\2\2\u03f1\u03f6\5> \2\u03f2\u03f3\7\u0348\2\2\u03f3\u03f5\5> \2\u03f4"+
		"\u03f2\3\2\2\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2"+
		"\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9\u03e9\3\2\2\2\u03f9"+
		"\u03f1\3\2\2\2\u03fa\u03fc\3\2\2\2\u03fb\u03fd\7\u0349\2\2\u03fc\u03fb"+
		"\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd;\3\2\2\2\u03fe\u03ff\5\u013e\u00a0"+
		"\2\u03ff\u0400\7\u00e6\2\2\u0400\u0401\5\u0118\u008d\2\u0401=\3\2\2\2"+
		"\u0402\u0403\5\u013e\u00a0\2\u0403\u0404\7\u0341\2\2\u0404\u0406\3\2\2"+
		"\2\u0405\u0402\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408"+
		"\5\u013e\u00a0\2\u0408\u0409\7\u0341\2\2\u0409\u040a\5\u013e\u00a0\2\u040a"+
		"?\3\2\2\2\u040b\u040c\7h\2\2\u040c\u040f\7\u0154\2\2\u040d\u040e\7\u009a"+
		"\2\2\u040e\u0410\7x\2\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410"+
		"\u0411\3\2\2\2\u0411\u0413\5\u011a\u008e\2\u0412\u0414\7\u0349\2\2\u0413"+
		"\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414A\3\2\2\2\u0415\u0416\7h\2\2\u0416"+
		"\u0419\7\u0173\2\2\u0417\u0418\7\u009a\2\2\u0418\u041a\7x\2\2\u0419\u0417"+
		"\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u0420\5\u011c\u008f"+
		"\2\u041c\u041d\7\u0348\2\2\u041d\u041f\5\u011c\u008f\2\u041e\u041c\3\2"+
		"\2\2\u041f\u0422\3\2\2\2\u0420\u041e\3\2\2\2\u0420\u0421\3\2\2\2\u0421"+
		"\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0423\u0425\7\u0349\2\2\u0424\u0423"+
		"\3\2\2\2\u0424\u0425\3\2\2\2\u0425C\3\2\2\2\u0426\u0429\5F$\2\u0427\u0429"+
		"\5H%\2\u0428\u0426\3\2\2\2\u0428\u0427\3\2\2\2\u0429E\3\2\2\2\u042a\u042b"+
		"\7\u00ea\2\2\u042b\u042c\7\u0346\2\2\u042c\u042d\5\u013e\u00a0\2\u042d"+
		"\u042e\7\u0348\2\2\u042e\u042f\7\u032d\2\2\u042f\u0430\7\u0347\2\2\u0430"+
		"G\3\2\2\2\u0431\u0432\7\u00e9\2\2\u0432\u0433\7\u0346\2\2\u0433\u0434"+
		"\7\u032d\2\2\u0434\u0435\7\u0348\2\2\u0435\u0436\7\u032d\2\2\u0436\u0437"+
		"\7\u0347\2\2\u0437\u0439\7\u0341\2\2\u0438\u043a\5\u013e\u00a0\2\u0439"+
		"\u0438\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043d\7\u0341"+
		"\2\2\u043c\u043e\5\u013e\u00a0\2\u043d\u043c\3\2\2\2\u043d\u043e\3\2\2"+
		"\2\u043e\u043f\3\2\2\2\u043f\u0440\7\u0341\2\2\u0440\u0441\5\u013e\u00a0"+
		"\2\u0441I\3\2\2\2\u0442\u0443\7w\2\2\u0443\u0444\5L\'\2\u0444K\3\2\2\2"+
		"\u0445\u0446\7\u0324\2\2\u0446\u0448\7\u0331\2\2\u0447\u0445\3\2\2\2\u0447"+
		"\u0448\3\2\2\2\u0448\u044b\3\2\2\2\u0449\u044c\5\u0122\u0092\2\u044a\u044c"+
		"\5h\65\2\u044b\u0449\3\2\2\2\u044b\u044a\3\2\2\2\u044c\u0455\3\2\2\2\u044d"+
		"\u0452\5N(\2\u044e\u044f\7\u0348\2\2\u044f\u0451\5N(\2\u0450\u044e\3\2"+
		"\2\2\u0451\u0454\3\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453"+
		"\u0456\3\2\2\2\u0454\u0452\3\2\2\2\u0455\u044d\3\2\2\2\u0455\u0456\3\2"+
		"\2\2\u0456\u0458\3\2\2\2\u0457\u0459\7\u0349\2\2\u0458\u0457\3\2\2\2\u0458"+
		"\u0459\3\2\2\2\u0459\u0470\3\2\2\2\u045a\u045b\7\u0346\2\2\u045b\u0460"+
		"\5P)\2\u045c\u045d\7\u034e\2\2\u045d\u045f\5P)\2\u045e\u045c\3\2\2\2\u045f"+
		"\u0462\3\2\2\2\u0460\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463\3\2"+
		"\2\2\u0462\u0460\3\2\2\2\u0463\u046a\7\u0347\2\2\u0464\u0466\7\21\2\2"+
		"\u0465\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0468"+
		"\t\5\2\2\u0468\u0469\7\u0331\2\2\u0469\u046b\7\u032d\2\2\u046a\u0465\3"+
		"\2\2\2\u046a\u046b\3\2\2\2\u046b\u046d\3\2\2\2\u046c\u046e\7\u0349\2\2"+
		"\u046d\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0470\3\2\2\2\u046f\u0447"+
		"\3\2\2\2\u046f\u045a\3\2\2\2\u0470M\3\2\2\2\u0471\u0472\7\u0324\2\2\u0472"+
		"\u0474\7\u0331\2\2\u0473\u0471\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u047e"+
		"\3\2\2\2\u0475\u0478\5f\64\2\u0476\u0478\5\u013e\u00a0\2\u0477\u0475\3"+
		"\2\2\2\u0477\u0476\3\2\2\2\u0478\u047a\3\2\2\2\u0479\u047b\t\6\2\2\u047a"+
		"\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047f\3\2\2\2\u047c\u047f\7Z"+
		"\2\2\u047d\u047f\7\u00e0\2\2\u047e\u0477\3\2\2\2\u047e\u047c\3\2\2\2\u047e"+
		"\u047d\3\2\2\2\u047fO\3\2\2\2\u0480\u0481\t\7\2\2\u0481Q\3\2\2\2\u0482"+
		"\u0489\5T+\2\u0483\u0485\7\u0348\2\2\u0484\u0483\3\2\2\2\u0484\u0485\3"+
		"\2\2\2\u0485\u0486\3\2\2\2\u0486\u0488\5T+\2\u0487\u0484\3\2\2\2\u0488"+
		"\u048b\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u048a\3\2\2\2\u048aS\3\2\2\2"+
		"\u048b\u0489\3\2\2\2\u048c\u0490\5V,\2\u048d\u0490\5X-\2\u048e\u0490\5"+
		"\\/\2\u048f\u048c\3\2\2\2\u048f\u048d\3\2\2\2\u048f\u048e\3\2\2\2\u0490"+
		"U\3\2\2\2\u0491\u0495\5\u013e\u00a0\2\u0492\u0496\5\u0138\u009d\2\u0493"+
		"\u0494\7\21\2\2\u0494\u0496\5h\65\2\u0495\u0492\3\2\2\2\u0495\u0493\3"+
		"\2\2\2\u0496\u0499\3\2\2\2\u0497\u0498\78\2\2\u0498\u049a\5\u013e\u00a0"+
		"\2\u0499\u0497\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049c\3\2\2\2\u049b\u049d"+
		"\5\u0132\u009a\2\u049c\u049b\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u04b3\3"+
		"\2\2\2\u049e\u049f\7>\2\2\u049f\u04a1\5\u013e\u00a0\2\u04a0\u049e\3\2"+
		"\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a4\5\u0134\u009b"+
		"\2\u04a3\u04a5\5\u0134\u009b\2\u04a4\u04a3\3\2\2\2\u04a4\u04a5\3\2\2\2"+
		"\u04a5\u04b4\3\2\2\2\u04a6\u04ac\7\u0097\2\2\u04a7\u04a8\7\u0346\2\2\u04a8"+
		"\u04a9\7\u0329\2\2\u04a9\u04aa\7\u0348\2\2\u04aa\u04ab\7\u0329\2\2\u04ab"+
		"\u04ad\7\u0347\2\2\u04ac\u04a7\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04b1"+
		"\3\2\2\2\u04ae\u04af\7\u00dd\2\2\u04af\u04b0\7\u0086\2\2\u04b0\u04b2\7"+
		"\u0113\2\2\u04b1\u04ae\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b4\3\2\2\2"+
		"\u04b3\u04a0\3\2\2\2\u04b3\u04a6\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b6"+
		"\3\2\2\2\u04b5\u04b7\7\u0124\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2"+
		"\2\u04b7\u04bb\3\2\2\2\u04b8\u04ba\5Z.\2\u04b9\u04b8\3\2\2\2\u04ba\u04bd"+
		"\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bcW\3\2\2\2\u04bd"+
		"\u04bb\3\2\2\2\u04be\u04bf\5\u013e\u00a0\2\u04bf\u04c0\t\b\2\2\u04c0\u04c4"+
		"\5h\65\2\u04c1\u04c5\7\u0241\2\2\u04c2\u04c3\7\u00dd\2\2\u04c3\u04c5\7"+
		"\u0241\2\2\u04c4\u04c1\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2"+
		"\u04c5Y\3\2\2\2\u04c6\u04c7\7>\2\2\u04c7\u04c9\5\u013e\u00a0\2\u04c8\u04c6"+
		"\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ef\3\2\2\2\u04ca\u04cb\7\u0101\2"+
		"\2\u04cb\u04ce\7\u00ad\2\2\u04cc\u04ce\7\u0166\2\2\u04cd\u04ca\3\2\2\2"+
		"\u04cd\u04cc\3\2\2\2\u04ce\u04d0\3\2\2\2\u04cf\u04d1\5\u0130\u0099\2\u04d0"+
		"\u04cf\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d3\3\2\2\2\u04d2\u04d4\5b"+
		"\62\2\u04d3\u04d2\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04f0\3\2\2\2\u04d5"+
		"\u04d9\7/\2\2\u04d6\u04d7\7\u00dd\2\2\u04d7\u04d8\7\u0086\2\2\u04d8\u04da"+
		"\7\u0113\2\2\u04d9\u04d6\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2"+
		"\2\u04db\u04dc\7\u0346\2\2\u04dc\u04dd\5\u008aF\2\u04dd\u04de\7\u0347"+
		"\2\2\u04de\u04f0\3\2\2\2\u04df\u04e0\7\u0089\2\2\u04e0\u04e2\7\u00ad\2"+
		"\2\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4"+
		"\7\u010f\2\2\u04e4\u04e5\5\u011a\u008e\2\u04e5\u04e6\7\u0346\2\2\u04e6"+
		"\u04e7\5\u012a\u0096\2\u04e7\u04e9\7\u0347\2\2\u04e8\u04ea\5^\60\2\u04e9"+
		"\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04ed\5`"+
		"\61\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04f0\3\2\2\2\u04ee"+
		"\u04f0\5\u0132\u009a\2\u04ef\u04cd\3\2\2\2\u04ef\u04d5\3\2\2\2\u04ef\u04e1"+
		"\3\2\2\2\u04ef\u04ee\3\2\2\2\u04f0[\3\2\2\2\u04f1\u04f2\7>\2\2\u04f2\u04f4"+
		"\5\u013e\u00a0\2\u04f3\u04f1\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u0535\3"+
		"\2\2\2\u04f5\u04f6\7\u0101\2\2\u04f6\u04f9\7\u00ad\2\2\u04f7\u04f9\7\u0166"+
		"\2\2\u04f8\u04f5\3\2\2\2\u04f8\u04f7\3\2\2\2\u04f9\u04fb\3\2\2\2\u04fa"+
		"\u04fc\5\u0130\u0099\2\u04fb\u04fa\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fd"+
		"\3\2\2\2\u04fd\u04fe\7\u0346\2\2\u04fe\u04ff\5\u0128\u0095\2\u04ff\u0501"+
		"\7\u0347\2\2\u0500\u0502\5b\62\2\u0501\u0500\3\2\2\2\u0501\u0502\3\2\2"+
		"\2\u0502\u0505\3\2\2\2\u0503\u0504\7\u00e6\2\2\u0504\u0506\5\u013e\u00a0"+
		"\2\u0505\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0536\3\2\2\2\u0507\u050b"+
		"\7/\2\2\u0508\u0509\7\u00dd\2\2\u0509\u050a\7\u0086\2\2\u050a\u050c\7"+
		"\u0113\2\2\u050b\u0508\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050d\3\2\2\2"+
		"\u050d\u050e\7\u0346\2\2\u050e\u050f\5\u008aF\2\u050f\u0510\7\u0347\2"+
		"\2\u0510\u0536\3\2\2\2\u0511\u0513\7Z\2\2\u0512\u0514\7\u0346\2\2\u0513"+
		"\u0512\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0519\3\2\2\2\u0515\u051a\7\u032d"+
		"\2\2\u0516\u051a\7\u034e\2\2\u0517\u051a\5\u00dco\2\u0518\u051a\7\u0329"+
		"\2\2\u0519\u0515\3\2\2\2\u0519\u0516\3\2\2\2\u0519\u0517\3\2\2\2\u0519"+
		"\u0518\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u0519\3\2\2\2\u051b\u051c\3\2"+
		"\2\2\u051c\u051e\3\2\2\2\u051d\u051f\7\u0347\2\2\u051e\u051d\3\2\2\2\u051e"+
		"\u051f\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0521\7\u0086\2\2\u0521\u0536"+
		"\5\u013e\u00a0\2\u0522\u0523\7\u0089\2\2\u0523\u0524\7\u00ad\2\2\u0524"+
		"\u0525\7\u0346\2\2\u0525\u0526\5\u012a\u0096\2\u0526\u0527\7\u0347\2\2"+
		"\u0527\u0528\7\u010f\2\2\u0528\u052d\5\u011a\u008e\2\u0529\u052a\7\u0346"+
		"\2\2\u052a\u052b\5\u012a\u0096\2\u052b\u052c\7\u0347\2\2\u052c\u052e\3"+
		"\2\2\2\u052d\u0529\3\2\2\2\u052d\u052e\3\2\2\2\u052e\u0530\3\2\2\2\u052f"+
		"\u0531\5^\60\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0533\3\2"+
		"\2\2\u0532\u0534\5`\61\2\u0533\u0532\3\2\2\2\u0533\u0534\3\2\2\2\u0534"+
		"\u0536\3\2\2\2\u0535\u04f8\3\2\2\2\u0535\u0507\3\2\2\2\u0535\u0511\3\2"+
		"\2\2\u0535\u0522\3\2\2\2\u0536]\3\2\2\2\u0537\u0538\7\u00e6\2\2\u0538"+
		"\u0540\7]\2\2\u0539\u053a\7\u0264\2\2\u053a\u0541\7\u0181\2\2\u053b\u0541"+
		"\7*\2\2\u053c\u053d\7\u013c\2\2\u053d\u0541\7\u00e0\2\2\u053e\u053f\7"+
		"\u013c\2\2\u053f\u0541\7Z\2\2\u0540\u0539\3\2\2\2\u0540\u053b\3\2\2\2"+
		"\u0540\u053c\3\2\2\2\u0540\u053e\3\2\2\2\u0541_\3\2\2\2\u0542\u0543\7"+
		"\u00e6\2\2\u0543\u054b\7\u016a\2\2\u0544\u0545\7\u0264\2\2\u0545\u054c"+
		"\7\u0181\2\2\u0546\u054c\7*\2\2\u0547\u0548\7\u013c\2\2\u0548\u054c\7"+
		"\u00e0\2\2\u0549\u054a\7\u013c\2\2\u054a\u054c\7Z\2\2\u054b\u0544\3\2"+
		"\2\2\u054b\u0546\3\2\2\2\u054b\u0547\3\2\2\2\u054b\u0549\3\2\2\2\u054c"+
		"a\3\2\2\2\u054d\u054e\7\u017a\2\2\u054e\u054f\7\u0346\2\2\u054f\u0554"+
		"\5d\63\2\u0550\u0551\7\u0348\2\2\u0551\u0553\5d\63\2\u0552\u0550\3\2\2"+
		"\2\u0553\u0556\3\2\2\2\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0557"+
		"\3\2\2\2\u0556\u0554\3\2\2\2\u0557\u0558\7\u0347\2\2\u0558c\3\2\2\2\u0559"+
		"\u055a\5\u0140\u00a1\2\u055a\u055e\7\u0331\2\2\u055b\u055f\5\u0140\u00a1"+
		"\2\u055c\u055f\5\u012e\u0098\2\u055d\u055f\7\u0329\2\2\u055e\u055b\3\2"+
		"\2\2\u055e\u055c\3\2\2\2\u055e\u055d\3\2\2\2\u055fe\3\2\2\2\u0560\u0563"+
		"\5\u013a\u009e\2\u0561\u0563\7\u0324\2\2\u0562\u0560\3\2\2\2\u0562\u0561"+
		"\3\2\2\2\u0563g\3\2\2\2\u0564\u0565\b\65\1\2\u0565\u0571\5j\66\2\u0566"+
		"\u0571\5n8\2\u0567\u0571\5l\67\2\u0568\u0571\5t;\2\u0569\u0571\5v<\2\u056a"+
		"\u0571\5\u00dco\2\u056b\u0571\5x=\2\u056c\u0571\5\u0126\u0094\2\u056d"+
		"\u0571\5|?\2\u056e\u0571\5z>\2\u056f\u0571\5\u010c\u0087\2\u0570\u0564"+
		"\3\2\2\2\u0570\u0566\3\2\2\2\u0570\u0567\3\2\2\2\u0570\u0568\3\2\2\2\u0570"+
		"\u0569\3\2\2\2\u0570\u056a\3\2\2\2\u0570\u056b\3\2\2\2\u0570\u056c\3\2"+
		"\2\2\u0570\u056d\3\2\2\2\u0570\u056e\3\2\2\2\u0570\u056f\3\2\2\2\u0571"+
		"\u0585\3\2\2\2\u0572\u0573\f\7\2\2\u0573\u0574\t\t\2\2\u0574\u0584\5h"+
		"\65\b\u0575\u0576\f\6\2\2\u0576\u0577\t\n\2\2\u0577\u0584\5h\65\7\u0578"+
		"\u0579\f\5\2\2\u0579\u057a\5\u0142\u00a2\2\u057a\u057b\5h\65\6\u057b\u0584"+
		"\3\2\2\2\u057c\u057d\f\4\2\2\u057d\u057e\5\u0144\u00a3\2\u057e\u057f\5"+
		"h\65\5\u057f\u0584\3\2\2\2\u0580\u0581\f\f\2\2\u0581\u0582\78\2\2\u0582"+
		"\u0584\5\u013e\u00a0\2\u0583\u0572\3\2\2\2\u0583\u0575\3\2\2\2\u0583\u0578"+
		"\3\2\2\2\u0583\u057c\3\2\2\2\u0583\u0580\3\2\2\2\u0584\u0587\3\2\2\2\u0585"+
		"\u0583\3\2\2\2\u0585\u0586\3\2\2\2\u0586i\3\2\2\2\u0587\u0585\3\2\2\2"+
		"\u0588\u058b\7\u0324\2\2\u0589\u058a\7\u0341\2\2\u058a\u058c\5\u0140\u00a1"+
		"\2\u058b\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u0597\3\2\2\2\u058d\u058e"+
		"\7\u034a\2\2\u058e\u0598\5\u0140\u00a1\2\u058f\u0590\7\u0344\2\2\u0590"+
		"\u0596\7\u022a\2\2\u0591\u0592\7\u0344\2\2\u0592\u0596\7\u031c\2\2\u0593"+
		"\u0594\7\u0344\2\2\u0594\u0596\7\u031d\2\2\u0595\u058f\3\2\2\2\u0595\u0591"+
		"\3\2\2\2\u0595\u0593\3\2\2\2\u0596\u0598\3\2\2\2\u0597\u058d\3\2\2\2\u0597"+
		"\u0595\3\2\2\2\u0597\u0598\3\2\2\2\u0598k\3\2\2\2\u0599\u059a\7\u0325"+
		"\2\2\u059am\3\2\2\2\u059b\u059e\7\u0326\2\2\u059c\u059d\7\u0341\2\2\u059d"+
		"\u059f\5\u0140\u00a1\2\u059e\u059c\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05aa"+
		"\3\2\2\2\u05a0\u05a1\7\u034a\2\2\u05a1\u05ab\5\u0140\u00a1\2\u05a2\u05a3"+
		"\7\u0344\2\2\u05a3\u05a9\7\u022a\2\2\u05a4\u05a5\7\u0344\2\2\u05a5\u05a9"+
		"\7\u031c\2\2\u05a6\u05a7\7\u0344\2\2\u05a7\u05a9\7\u031d\2\2\u05a8\u05a2"+
		"\3\2\2\2\u05a8\u05a4\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a9\u05ab\3\2\2\2\u05aa"+
		"\u05a0\3\2\2\2\u05aa\u05a8\3\2\2\2\u05aa\u05ab\3\2\2\2\u05abo\3\2\2\2"+
		"\u05ac\u05af\7\u0327\2\2\u05ad\u05ae\7\u0341\2\2\u05ae\u05b0\5\u0140\u00a1"+
		"\2\u05af\u05ad\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b5\3\2\2\2\u05b1\u05b2"+
		"\7\u034a\2\2\u05b2\u05b6\5\u0140\u00a1\2\u05b3\u05b4\7\u0353\2\2\u05b4"+
		"\u05b6\5\u0140\u00a1\2\u05b5\u05b1\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6"+
		"\3\2\2\2\u05b6q\3\2\2\2\u05b7\u05b8\7\u0328\2\2\u05b8s\3\2\2\2\u05b9\u05ba"+
		"\7\3\2\2\u05ba\u05bb\5\u0140\u00a1\2\u05bbu\3\2\2\2\u05bc\u05c1\7Z\2\2"+
		"\u05bd\u05c1\7\u00e0\2\2\u05be\u05c1\7\u0324\2\2\u05bf\u05c1\5\u013a\u009e"+
		"\2\u05c0\u05bc\3\2\2\2\u05c0\u05bd\3\2\2\2\u05c0\u05be\3\2\2\2\u05c0\u05bf"+
		"\3\2\2\2\u05c1w\3\2\2\2\u05c2\u05c3\7+\2\2\u05c3\u05c5\5h\65\2\u05c4\u05c6"+
		"\5\u00eav\2\u05c5\u05c4\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c5\3\2\2"+
		"\2\u05c7\u05c8\3\2\2\2\u05c8\u05cb\3\2\2\2\u05c9\u05ca\7k\2\2\u05ca\u05cc"+
		"\5h\65\2\u05cb\u05c9\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd"+
		"\u05ce\7m\2\2\u05ce\u05dc\3\2\2\2\u05cf\u05d1\7+\2\2\u05d0\u05d2\5\u00ec"+
		"w\2\u05d1\u05d0\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d1\3\2\2\2\u05d3"+
		"\u05d4\3\2\2\2\u05d4\u05d7\3\2\2\2\u05d5\u05d6\7k\2\2\u05d6\u05d8\5h\65"+
		"\2\u05d7\u05d5\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05da"+
		"\7m\2\2\u05da\u05dc\3\2\2\2\u05db\u05c2\3\2\2\2\u05db\u05cf\3\2\2\2\u05dc"+
		"y\3\2\2\2\u05dd\u05de\7\u0350\2\2\u05de\u05e2\5h\65\2\u05df\u05e0\t\13"+
		"\2\2\u05e0\u05e2\5h\65\2\u05e1\u05dd\3\2\2\2\u05e1\u05df\3\2\2\2\u05e2"+
		"{\3\2\2\2\u05e3\u05e4\7\u0346\2\2\u05e4\u05e5\5h\65\2\u05e5\u05e6\7\u0347"+
		"\2\2\u05e6\u05ec\3\2\2\2\u05e7\u05e8\7\u0346\2\2\u05e8\u05e9\5\u0080A"+
		"\2\u05e9\u05ea\7\u0347\2\2\u05ea\u05ec\3\2\2\2\u05eb\u05e3\3\2\2\2\u05eb"+
		"\u05e7\3\2\2\2\u05ec}\3\2\2\2\u05ed\u05f6\7\u00e0\2\2\u05ee\u05f6\5\u013a"+
		"\u009e\2\u05ef\u05f6\5\u00dco\2\u05f0\u05f6\7\u0324\2\2\u05f1\u05f2\7"+
		"\u0346\2\2\u05f2\u05f3\5~@\2\u05f3\u05f4\7\u0347\2\2\u05f4\u05f6\3\2\2"+
		"\2\u05f5\u05ed\3\2\2\2\u05f5\u05ee\3\2\2\2\u05f5\u05ef\3\2\2\2\u05f5\u05f0"+
		"\3\2\2\2\u05f5\u05f1\3\2\2\2\u05f6\177\3\2\2\2\u05f7\u05f8\5\"\22\2\u05f8"+
		"\u0081\3\2\2\2\u05f9\u05fc\7\u017a\2\2\u05fa\u05fb\7\u0318\2\2\u05fb\u05fd"+
		"\7\u0348\2\2\u05fc\u05fa\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05fe\3\2\2"+
		"\2\u05fe\u0603\5\u0084C\2\u05ff\u0600\7\u0348\2\2\u0600\u0602\5\u0084"+
		"C\2\u0601\u05ff\3\2\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603"+
		"\u0604\3\2\2\2\u0604\u0614\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u0607\7\u017a"+
		"\2\2\u0607\u060c\7!\2\2\u0608\u0609\7\u0346\2\2\u0609\u060a\5\u00d2j\2"+
		"\u060a\u060b\7\u0347\2\2\u060b\u060d\3\2\2\2\u060c\u0608\3\2\2\2\u060c"+
		"\u060d\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u060f\7\21\2\2\u060f\u0610\7"+
		"\u0346\2\2\u0610\u0611\5\"\22\2\u0611\u0612\7\u0347\2\2\u0612\u0614\3"+
		"\2\2\2\u0613\u05f9\3\2\2\2\u0613\u0606\3\2\2\2\u0614\u0083\3\2\2\2\u0615"+
		"\u061a\5\u013e\u00a0\2\u0616\u0617\7\u0346\2\2\u0617\u0618\5\u012a\u0096"+
		"\2\u0618\u0619\7\u0347\2\2\u0619\u061b\3\2\2\2\u061a\u0616\3\2\2\2\u061a"+
		"\u061b\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061d\7\21\2\2\u061d\u061e\7"+
		"\u0346\2\2\u061e\u061f\5\"\22\2\u061f\u0620\7\u0347\2\2\u0620\u0085\3"+
		"\2\2\2\u0621\u0624\5\u0126\u0094\2\u0622\u0624\7\u0324\2\2\u0623\u0621"+
		"\3\2\2\2\u0623\u0622\3\2\2\2\u0624\u0627\3\2\2\2\u0625\u0628\7\u0331\2"+
		"\2\u0626\u0628\5\u0144\u00a3\2\u0627\u0625\3\2\2\2\u0627\u0626\3\2\2\2"+
		"\u0628\u0629\3\2\2\2\u0629\u0632\5h\65\2\u062a\u062b\5\u013e\u00a0\2\u062b"+
		"\u062c\7\u0341\2\2\u062c\u062d\5\u013e\u00a0\2\u062d\u062e\7\u0346\2\2"+
		"\u062e\u062f\5\u0102\u0082\2\u062f\u0630\7\u0347\2\2\u0630\u0632\3\2\2"+
		"\2\u0631\u0623\3\2\2\2\u0631\u062a\3\2\2\2\u0632\u0087\3\2\2\2\u0633\u0638"+
		"\5\u008aF\2\u0634\u0635\7\u0348\2\2\u0635\u0637\5\u008aF\2\u0636\u0634"+
		"\3\2\2\2\u0637\u063a\3\2\2\2\u0638\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639"+
		"\u0089\3\2\2\2\u063a\u0638\3\2\2\2\u063b\u0640\5\u008cG\2\u063c\u063d"+
		"\7\u00ee\2\2\u063d\u063f\5\u008cG\2\u063e\u063c\3\2\2\2\u063f\u0642\3"+
		"\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u008b\3\2\2\2\u0642"+
		"\u0640\3\2\2\2\u0643\u0648\5\u008eH\2\u0644\u0645\7\f\2\2\u0645\u0647"+
		"\5\u008eH\2\u0646\u0644\3\2\2\2\u0647\u064a\3\2\2\2\u0648\u0646\3\2\2"+
		"\2\u0648\u0649\3\2\2\2\u0649\u008d\3\2\2\2\u064a\u0648\3\2\2\2\u064b\u064d"+
		"\7\u00dd\2\2\u064c\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064e\3\2\2"+
		"\2\u064e\u064f\5\u0090I\2\u064f\u008f\3\2\2\2\u0650\u0651\7x\2\2\u0651"+
		"\u0652\7\u0346\2\2\u0652\u0653\5\u0080A\2\u0653\u0654\7\u0347\2\2\u0654"+
		"\u0698\3\2\2\2\u0655\u0656\5h\65\2\u0656\u0657\5\u0142\u00a2\2\u0657\u0658"+
		"\5h\65\2\u0658\u0698\3\2\2\2\u0659\u065a\5h\65\2\u065a\u065b\5\u0142\u00a2"+
		"\2\u065b\u065c\t\f\2\2\u065c\u065d\7\u0346\2\2\u065d\u065e\5\u0080A\2"+
		"\u065e\u065f\7\u0347\2\2\u065f\u0698\3\2\2\2\u0660\u0662\5h\65\2\u0661"+
		"\u0663\7\u00dd\2\2\u0662\u0661\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0664"+
		"\3\2\2\2\u0664\u0665\7\36\2\2\u0665\u0666\5h\65\2\u0666\u0667\7\f\2\2"+
		"\u0667\u0668\5h\65\2\u0668\u0698\3\2\2\2\u0669\u066b\5h\65\2\u066a\u066c"+
		"\7\u00dd\2\2\u066b\u066a\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d\3\2\2"+
		"\2\u066d\u066e\7\u009c\2\2\u066e\u0671\7\u0346\2\2\u066f\u0672\5\u0080"+
		"A\2\u0670\u0672\5\u0102\u0082\2\u0671\u066f\3\2\2\2\u0671\u0670\3\2\2"+
		"\2\u0672\u0673\3\2\2\2\u0673\u0674\7\u0347\2\2\u0674\u0698\3\2\2\2\u0675"+
		"\u0677\5h\65\2\u0676\u0678\7\u00dd\2\2\u0677\u0676\3\2\2\2\u0677\u0678"+
		"\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\7\u00b5\2\2\u067a\u067d\5h\65"+
		"\2\u067b\u067c\7p\2\2\u067c\u067e\5h\65\2\u067d\u067b\3\2\2\2\u067d\u067e"+
		"\3\2\2\2\u067e\u0698\3\2\2\2\u067f\u0680\5h\65\2\u0680\u0681\7\u00a9\2"+
		"\2\u0681\u0682\5\u0132\u009a\2\u0682\u0698\3\2\2\2\u0683\u0698\5p9\2\u0684"+
		"\u0698\5r:\2\u0685\u0688\7\u0324\2\2\u0686\u0687\7\u0341\2\2\u0687\u0689"+
		"\5\u0140\u00a1\2\u0688\u0686\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068a\3"+
		"\2\2\2\u068a\u068b\7\u034a\2\2\u068b\u0698\7\u010a\2\2\u068c\u068f\7\u0326"+
		"\2\2\u068d\u068e\7\u0341\2\2\u068e\u0690\5\u0140\u00a1\2\u068f\u068d\3"+
		"\2\2\2\u068f\u0690\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0692\7\u034a\2\2"+
		"\u0692\u0698\7\u010a\2\2\u0693\u0694\7\u0346\2\2\u0694\u0695\5\u008aF"+
		"\2\u0695\u0696\7\u0347\2\2\u0696\u0698\3\2\2\2\u0697\u0650\3\2\2\2\u0697"+
		"\u0655\3\2\2\2\u0697\u0659\3\2\2\2\u0697\u0660\3\2\2\2\u0697\u0669\3\2"+
		"\2\2\u0697\u0675\3\2\2\2\u0697\u067f\3\2\2\2\u0697\u0683\3\2\2\2\u0697"+
		"\u0684\3\2\2\2\u0697\u0685\3\2\2\2\u0697\u068c\3\2\2\2\u0697\u0693\3\2"+
		"\2\2\u0698\u0091\3\2\2\2\u0699\u069f\5\u0096L\2\u069a\u069b\7\u0346\2"+
		"\2\u069b\u069c\5\u0092J\2\u069c\u069d\7\u0347\2\2\u069d\u069f\3\2\2\2"+
		"\u069e\u0699\3\2\2\2\u069e\u069a\3\2\2\2\u069f\u06a3\3\2\2\2\u06a0\u06a2"+
		"\5\u0094K\2\u06a1\u06a0\3\2\2\2\u06a2\u06a5\3\2\2\2\u06a3\u06a1\3\2\2"+
		"\2\u06a3\u06a4\3\2\2\2\u06a4\u0093\3\2\2\2\u06a5\u06a3\3\2\2\2\u06a6\u06a8"+
		"\7\u0165\2\2\u06a7\u06a9\7\7\2\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9\3\2\2"+
		"\2\u06a9\u06ad\3\2\2\2\u06aa\u06ad\7u\2\2\u06ab\u06ad\7\u00a5\2\2\u06ac"+
		"\u06a6\3\2\2\2\u06ac\u06aa\3\2\2\2\u06ac\u06ab\3\2\2\2\u06ad\u06b3\3\2"+
		"\2\2\u06ae\u06b4\5\u0096L\2\u06af\u06b0\7\u0346\2\2\u06b0\u06b1\5\u0092"+
		"J\2\u06b1\u06b2\7\u0347\2\2\u06b2\u06b4\3\2\2\2\u06b3\u06ae\3\2\2\2\u06b3"+
		"\u06af\3\2\2\2\u06b4\u0095\3\2\2\2\u06b5\u06b7\7\u0132\2\2\u06b6\u06b8"+
		"\t\r\2\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06ba\3\2\2\2\u06b9"+
		"\u06bb\5\u0098M\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc"+
		"\3\2\2\2\u06bc\u06bf\5\u00aeX\2\u06bd\u06be\7\u00a6\2\2\u06be\u06c0\5"+
		"\u011a\u008e\2\u06bf\u06bd\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06c3\3\2"+
		"\2\2\u06c1\u06c2\7\u008c\2\2\u06c2\u06c4\5\u00bc_\2\u06c3\u06c1\3\2\2"+
		"\2\u06c3\u06c4\3\2\2\2\u06c4\u06c7\3\2\2\2\u06c5\u06c6\7\u0177\2\2\u06c6"+
		"\u06c8\5\u008aF\2\u06c7\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06d6"+
		"\3\2\2\2\u06c9\u06ca\7\u0093\2\2\u06ca\u06cc\7\'\2\2\u06cb\u06cd\7\7\2"+
		"\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d3"+
		"\5\u00a6T\2\u06cf\u06d0\7\u0348\2\2\u06d0\u06d2\5\u00a6T\2\u06d1\u06cf"+
		"\3\2\2\2\u06d2\u06d5\3\2\2\2\u06d3\u06d1\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4"+
		"\u06d7\3\2\2\2\u06d5\u06d3\3\2\2\2\u06d6\u06c9\3\2\2\2\u06d6\u06d7\3\2"+
		"\2\2\u06d7\u06da\3\2\2\2\u06d8\u06d9\7\u0094\2\2\u06d9\u06db\5\u008aF"+
		"\2\u06da\u06d8\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u0097\3\2\2\2\u06dc\u06df"+
		"\7\u015c\2\2\u06dd\u06e0\5\u009aN\2\u06de\u06e0\5\u009cO\2\u06df\u06dd"+
		"\3\2\2\2\u06df\u06de\3\2\2\2\u06e0\u06e3\3\2\2\2\u06e1\u06e2\7\u017a\2"+
		"\2\u06e2\u06e4\7\u02f5\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4"+
		"\u0099\3\2\2\2\u06e5\u06e6\t\16\2\2\u06e6\u06ed\7\u00f6\2\2\u06e7\u06e8"+
		"\7\u0346\2\2\u06e8\u06e9\5h\65\2\u06e9\u06ea\7\u0347\2\2\u06ea\u06eb\7"+
		"\u00f6\2\2\u06eb\u06ed\3\2\2\2\u06ec\u06e5\3\2\2\2\u06ec\u06e7\3\2\2\2"+
		"\u06ed\u009b\3\2\2\2\u06ee\u06f4\7\u0329\2\2\u06ef\u06f0\7\u0346\2\2\u06f0"+
		"\u06f1\5h\65\2\u06f1\u06f2\7\u0347\2\2\u06f2\u06f4\3\2\2\2\u06f3\u06ee"+
		"\3\2\2\2\u06f3\u06ef\3\2\2\2\u06f4\u009d\3\2\2\2\u06f5\u06f6\7\u00ef\2"+
		"\2\u06f6\u06f7\7\'\2\2\u06f7\u06fc\5\u00a4S\2\u06f8\u06f9\7\u0348\2\2"+
		"\u06f9\u06fb\5\u00a4S\2\u06fa\u06f8\3\2\2\2\u06fb\u06fe\3\2\2\2\u06fc"+
		"\u06fa\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u070a\3\2\2\2\u06fe\u06fc\3\2"+
		"\2\2\u06ff\u0700\7\u0274\2\2\u0700\u0701\5h\65\2\u0701\u0708\t\17\2\2"+
		"\u0702\u0703\7\u0081\2\2\u0703\u0704\t\20\2\2\u0704\u0705\5h\65\2\u0705"+
		"\u0706\t\17\2\2\u0706\u0707\7\u0277\2\2\u0707\u0709\3\2\2\2\u0708\u0702"+
		"\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070b\3\2\2\2\u070a\u06ff\3\2\2\2\u070a"+
		"\u070b\3\2\2\2\u070b\u009f\3\2\2\2\u070c\u070d\7\u0086\2\2\u070d\u0765"+
		"\7#\2\2\u070e\u070f\7\u0086\2\2\u070f\u0717\7\u0316\2\2\u0710\u0714\7"+
		"\u010a\2\2\u0711\u0712\7\u0346\2\2\u0712\u0713\7\u032d\2\2\u0713\u0715"+
		"\7\u0347\2\2\u0714\u0711\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0718\3\2\2"+
		"\2\u0716\u0718\7\u0199\2\2\u0717\u0710\3\2\2\2\u0717\u0716\3\2\2\2\u0718"+
		"\u071c\3\2\2\2\u0719\u071b\5\u00a2R\2\u071a\u0719\3\2\2\2\u071b\u071e"+
		"\3\2\2\2\u071c\u071a\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u0729\3\2\2\2\u071e"+
		"\u071c\3\2\2\2\u071f\u0727\7\u0348\2\2\u0720\u0728\7\u0317\2\2\u0721\u0725"+
		"\7\u0319\2\2\u0722\u0723\7\u0346\2\2\u0723\u0724\7\u032d\2\2\u0724\u0726"+
		"\7\u0347\2\2\u0725\u0722\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0728\3\2\2"+
		"\2\u0727\u0720\3\2\2\2\u0727\u0721\3\2\2\2\u0728\u072a\3\2\2\2\u0729\u071f"+
		"\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072e\3\2\2\2\u072b\u072c\7\u0348\2"+
		"\2\u072c\u072d\7\u01e7\2\2\u072d\u072f\t\21\2\2\u072e\u072b\3\2\2\2\u072e"+
		"\u072f\3\2\2\2\u072f\u0765\3\2\2\2\u0730\u0731\7\u0086\2\2\u0731\u0732"+
		"\7\u0316\2\2\u0732\u0736\7\u01f5\2\2\u0733\u0735\5\u00a2R\2\u0734\u0733"+
		"\3\2\2\2\u0735\u0738\3\2\2\2\u0736\u0734\3\2\2\2\u0736\u0737\3\2\2\2\u0737"+
		"\u073b\3\2\2\2\u0738\u0736\3\2\2\2\u0739\u073a\7\u0348\2\2\u073a\u073c"+
		"\7\u0317\2\2\u073b\u0739\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u0765\3\2\2"+
		"\2\u073d\u073e\7\u0086\2\2\u073e\u073f\7\u0316\2\2\u073f\u0743\7\u0284"+
		"\2\2\u0740\u0741\7\u0346\2\2\u0741\u0742\7\u032d\2\2\u0742\u0744\7\u0347"+
		"\2\2\u0743\u0740\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0748\3\2\2\2\u0745"+
		"\u0747\5\u00a2R\2\u0746\u0745\3\2\2\2\u0747\u074a\3\2\2\2\u0748\u0746"+
		"\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u074e\3\2\2\2\u074a\u0748\3\2\2\2\u074b"+
		"\u074c\7\u0348\2\2\u074c\u074d\7\u01e7\2\2\u074d\u074f\t\21\2\2\u074e"+
		"\u074b\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0765\3\2\2\2\u0750\u0751\7\u0086"+
		"\2\2\u0751\u0752\7\u0228\2\2\u0752\u075a\t\22\2\2\u0753\u0754\7\u0348"+
		"\2\2\u0754\u0758\7\u02b8\2\2\u0755\u0756\7\u0346\2\2\u0756\u0757\7\u032d"+
		"\2\2\u0757\u0759\7\u0347\2\2\u0758\u0755\3\2\2\2\u0758\u0759\3\2\2\2\u0759"+
		"\u075b\3\2\2\2\u075a\u0753\3\2\2\2\u075a\u075b\3\2\2\2\u075b\u075e\3\2"+
		"\2\2\u075c\u075d\7\u0348\2\2\u075d\u075f\7\u021e\2\2\u075e\u075c\3\2\2"+
		"\2\u075e\u075f\3\2\2\2\u075f\u0762\3\2\2\2\u0760\u0761\7\u0348\2\2\u0761"+
		"\u0763\7\u0313\2\2\u0762\u0760\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0765"+
		"\3\2\2\2\u0764\u070c\3\2\2\2\u0764\u070e\3\2\2\2\u0764\u0730\3\2\2\2\u0764"+
		"\u073d\3\2\2\2\u0764\u0750\3\2\2\2\u0765\u00a1\3\2\2\2\u0766\u076f\7\u0348"+
		"\2\2\u0767\u0770\7\u01a5\2\2\u0768\u0770\7\u0302\2\2\u0769\u076d\7\u02b8"+
		"\2\2\u076a\u076b\7\u0346\2\2\u076b\u076c\7\u032d\2\2\u076c\u076e\7\u0347"+
		"\2\2\u076d\u076a\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0770\3\2\2\2\u076f"+
		"\u0767\3\2\2\2\u076f\u0768\3\2\2\2\u076f\u0769\3\2\2\2\u0770\u00a3\3\2"+
		"\2\2\u0771\u0773\5h\65\2\u0772\u0774\t\23\2\2\u0773\u0772\3\2\2\2\u0773"+
		"\u0774\3\2\2\2\u0774\u00a5\3\2\2\2\u0775\u0776\5h\65\2\u0776\u00a7\3\2"+
		"\2\2\u0777\u0778\7\u00ed\2\2\u0778\u0779\7\u0346\2\2\u0779\u077e\5\u00aa"+
		"V\2\u077a\u077b\7\u0348\2\2\u077b\u077d\5\u00aaV\2\u077c\u077a\3\2\2\2"+
		"\u077d\u0780\3\2\2\2\u077e\u077c\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0781"+
		"\3\2\2\2\u0780\u077e\3\2\2\2\u0781\u0782\7\u0347\2\2\u0782\u00a9\3\2\2"+
		"\2\u0783\u0784\7\u01fa\2\2\u0784\u07b1\7\u0329\2\2\u0785\u0786\t\24\2"+
		"\2\u0786\u07b1\7\u0093\2\2\u0787\u0788\t\25\2\2\u0788\u07b1\7\u0165\2"+
		"\2\u0789\u078a\t\26\2\2\u078a\u07b1\7\u00ab\2\2\u078b\u078c\7\u01f3\2"+
		"\2\u078c\u07b1\7\u0310\2\2\u078d\u078e\7\u0204\2\2\u078e\u07b1\7\u00ef"+
		"\2\2\u078f\u07b1\7\u021a\2\2\u0790\u0791\7\u022a\2\2\u0791\u07b1\7\u00fc"+
		"\2\2\u0792\u0793\7\u022b\2\2\u0793\u07b1\7\u00fc\2\2\u0794\u0795\7\u024b"+
		"\2\2\u0795\u07b1\7\u0329\2\2\u0796\u0797\7\u024c\2\2\u0797\u07b1\7\u0329"+
		"\2\2\u0798\u0799\7\u027a\2\2\u0799\u079a\7\u0086\2\2\u079a\u079b\7\u0346"+
		"\2\2\u079b\u07a0\5\u00acW\2\u079c\u079d\7\u0348\2\2\u079d\u079f\5\u00ac"+
		"W\2\u079e\u079c\3\2\2\2\u079f\u07a2\3\2\2\2\u07a0\u079e\3\2\2\2\u07a0"+
		"\u07a1\3\2\2\2\u07a1\u07a3\3\2\2\2\u07a2\u07a0\3\2\2\2\u07a3\u07a4\7\u0347"+
		"\2\2\u07a4\u07b1\3\2\2\2\u07a5\u07a6\7\u027a\2\2\u07a6\u07a7\7\u0086\2"+
		"\2\u07a7\u07b1\7\u0306\2\2\u07a8\u07a9\7\u0280\2\2\u07a9\u07b1\t\27\2"+
		"\2\u07aa\u07b1\7\u02a4\2\2\u07ab\u07ac\7\u02b7\2\2\u07ac\u07b1\7\u00fc"+
		"\2\2\u07ad\u07ae\7\u016d\2\2\u07ae\u07af\7\u00fc\2\2\u07af\u07b1\7\u032d"+
		"\2\2\u07b0\u0783\3\2\2\2\u07b0\u0785\3\2\2\2\u07b0\u0787\3\2\2\2\u07b0"+
		"\u0789\3\2\2\2\u07b0\u078b\3\2\2\2\u07b0\u078d\3\2\2\2\u07b0\u078f\3\2"+
		"\2\2\u07b0\u0790\3\2\2\2\u07b0\u0792\3\2\2\2\u07b0\u0794\3\2\2\2\u07b0"+
		"\u0796\3\2\2\2\u07b0\u0798\3\2\2\2\u07b0\u07a5\3\2\2\2\u07b0\u07a8\3\2"+
		"\2\2\u07b0\u07aa\3\2\2\2\u07b0\u07ab\3\2\2\2\u07b0\u07ad\3\2\2\2\u07b1"+
		"\u00ab\3\2\2\2\u07b2\u07b9\7\u0324\2\2\u07b3\u07ba\7\u0306\2\2\u07b4\u07b7"+
		"\7\u0331\2\2\u07b5\u07b8\5\u013a\u009e\2\u07b6\u07b8\7\u00e0\2\2\u07b7"+
		"\u07b5\3\2\2\2\u07b7\u07b6\3\2\2\2\u07b8\u07ba\3\2\2\2\u07b9\u07b3\3\2"+
		"\2\2\u07b9\u07b4\3\2\2\2\u07ba\u00ad\3\2\2\2\u07bb\u07c0\5\u00ba^\2\u07bc"+
		"\u07bd\7\u0348\2\2\u07bd\u07bf\5\u00ba^\2\u07be\u07bc\3\2\2\2\u07bf\u07c2"+
		"\3\2\2\2\u07c0\u07be\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u00af\3\2\2\2\u07c2"+
		"\u07c0\3\2\2\2\u07c3\u07c4\7\u0346\2\2\u07c4\u07c9\5P)\2\u07c5\u07c6\7"+
		"\u0348\2\2\u07c6\u07c8\5P)\2\u07c7\u07c5\3\2\2\2\u07c8\u07cb\3\2\2\2\u07c9"+
		"\u07c7\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07c9\3\2"+
		"\2\2\u07cc\u07cd\7\u0347\2\2\u07cd\u00b1\3\2\2\2\u07ce\u07cf\5\u011a\u008e"+
		"\2\u07cf\u07d0\7\u0341\2\2\u07d0\u07d2\3\2\2\2\u07d1\u07ce\3\2\2\2\u07d1"+
		"\u07d2\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d4\7\u034b\2\2\u07d4\u00b3"+
		"\3\2\2\2\u07d5\u07d6\5\u011a\u008e\2\u07d6\u07d7\7\u0341\2\2\u07d7\u07d9"+
		"\3\2\2\2\u07d8\u07d5\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07df\3\2\2\2\u07da"+
		"\u07e0\5\u013e\u00a0\2\u07db\u07dc\7\u0345\2\2\u07dc\u07e0\7\u0097\2\2"+
		"\u07dd\u07de\7\u0345\2\2\u07de\u07e0\7\u02bc\2\2\u07df\u07da\3\2\2\2\u07df"+
		"\u07db\3\2\2\2\u07df\u07dd\3\2\2\2\u07e0\u07e3\3\2\2\2\u07e1\u07e3\7\u00e0"+
		"\2\2\u07e2\u07d8\3\2\2\2\u07e2\u07e1\3\2\2\2\u07e3\u07e5\3\2\2\2\u07e4"+
		"\u07e6\5\u00eex\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u00b5"+
		"\3\2\2\2\u07e7\u07e8\5\u013e\u00a0\2\u07e8\u07e9\7\u0341\2\2\u07e9\u07ea"+
		"\5\u013e\u00a0\2\u07ea\u07ec\5\u00b0Y\2\u07eb\u07ed\5\u00eex\2\u07ec\u07eb"+
		"\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07f9\3\2\2\2\u07ee\u07ef\5\u013e\u00a0"+
		"\2\u07ef\u07f0\7\u034a\2\2\u07f0\u07f1\7\u034a\2\2\u07f1\u07f3\5\u013e"+
		"\u00a0\2\u07f2\u07f4\5\u00b0Y\2\u07f3\u07f2\3\2\2\2\u07f3\u07f4\3\2\2"+
		"\2\u07f4\u07f6\3\2\2\2\u07f5\u07f7\5\u00eex\2\u07f6\u07f5\3\2\2\2\u07f6"+
		"\u07f7\3\2\2\2\u07f7\u07f9\3\2\2\2\u07f8\u07e7\3\2\2\2\u07f8\u07ee\3\2"+
		"\2\2\u07f9\u00b7\3\2\2\2\u07fa\u07fb\5\u00fe\u0080\2\u07fb\u07fc\7\u0331"+
		"\2\2\u07fc\u07fd\5h\65\2\u07fd\u0803\3\2\2\2\u07fe\u0800\5h\65\2\u07ff"+
		"\u0801\5\u00eex\2\u0800\u07ff\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0803"+
		"\3\2\2\2\u0802\u07fa\3\2\2\2\u0802\u07fe\3\2\2\2\u0803\u00b9\3\2\2\2\u0804"+
		"\u0809\5\u00b2Z\2\u0805\u0809\5\u00b4[\2\u0806\u0809\5\u00b6\\\2\u0807"+
		"\u0809\5\u00b8]\2\u0808\u0804\3\2\2\2\u0808\u0805\3\2\2\2\u0808\u0806"+
		"\3\2\2\2\u0808\u0807\3\2\2\2\u0809\u00bb\3\2\2\2\u080a\u080f\5\u00be`"+
		"\2\u080b\u080c\7\u0348\2\2\u080c\u080e\5\u00be`\2\u080d\u080b\3\2\2\2"+
		"\u080e\u0811\3\2\2\2\u080f\u080d\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u00bd"+
		"\3\2\2\2\u0811\u080f\3\2\2\2\u0812\u0818\5\u00c0a\2\u0813\u0814\7\u0346"+
		"\2\2\u0814\u0815\5\u00c0a\2\u0815\u0816\7\u0347\2\2\u0816\u0818\3\2\2"+
		"\2\u0817\u0812\3\2\2\2\u0817\u0813\3\2\2\2\u0818\u00bf\3\2\2\2\u0819\u081d"+
		"\5\u00c2b\2\u081a\u081c\5\u00ccg\2\u081b\u081a\3\2\2\2\u081c\u081f\3\2"+
		"\2\2\u081d\u081b\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u00c1\3\2\2\2\u081f"+
		"\u081d\3\2\2\2\u0820\u0822\5\u00d4k\2\u0821\u0823\5\u00f0y\2\u0822\u0821"+
		"\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0852\3\2\2\2\u0824\u0826\5\u0118\u008d"+
		"\2\u0825\u0827\5\u00f0y\2\u0826\u0825\3\2\2\2\u0826\u0827\3\2\2\2\u0827"+
		"\u0852\3\2\2\2\u0828\u082a\5\u00d6l\2\u0829\u082b\5\u00f0y\2\u082a\u0829"+
		"\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u0852\3\2\2\2\u082c\u0831\5\u00dan"+
		"\2\u082d\u082f\5\u00f0y\2\u082e\u0830\5\u00fc\177\2\u082f\u082e\3\2\2"+
		"\2\u082f\u0830\3\2\2\2\u0830\u0832\3\2\2\2\u0831\u082d\3\2\2\2\u0831\u0832"+
		"\3\2\2\2\u0832\u0852\3\2\2\2\u0833\u0834\5\u00caf\2\u0834\u0835\5\u00f0"+
		"y\2\u0835\u0852\3\2\2\2\u0836\u083b\5\u00dco\2\u0837\u0839\5\u00f0y\2"+
		"\u0838\u083a\5\u00fc\177\2\u0839\u0838\3\2\2\2\u0839\u083a\3\2\2\2\u083a"+
		"\u083c\3\2\2\2\u083b\u0837\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u0852\3\2"+
		"\2\2\u083d\u083f\7\u0324\2\2\u083e\u0840\5\u00f0y\2\u083f\u083e\3\2\2"+
		"\2\u083f\u0840\3\2\2\2\u0840\u0852\3\2\2\2\u0841\u0842\7\u0324\2\2\u0842"+
		"\u0843\7\u0341\2\2\u0843\u0848\5\u00dco\2\u0844\u0846\5\u00f0y\2\u0845"+
		"\u0847\5\u00fc\177\2\u0846\u0845\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u0849"+
		"\3\2\2\2\u0848\u0844\3\2\2\2\u0848\u0849\3\2\2\2\u0849\u0852\3\2\2\2\u084a"+
		"\u0852\5\u00c4c\2\u084b\u084c\7\u034a\2\2\u084c\u084d\7\u034a\2\2\u084d"+
		"\u084f\5\u00dco\2\u084e\u0850\5\u00f0y\2\u084f\u084e\3\2\2\2\u084f\u0850"+
		"\3\2\2\2\u0850\u0852\3\2\2\2\u0851\u0820\3\2\2\2\u0851\u0824\3\2\2\2\u0851"+
		"\u0828\3\2\2\2\u0851\u082c\3\2\2\2\u0851\u0833\3\2\2\2\u0851\u0836\3\2"+
		"\2\2\u0851\u083d\3\2\2\2\u0851\u0841\3\2\2\2\u0851\u084a\3\2\2\2\u0851"+
		"\u084b\3\2\2\2\u0852\u00c3\3\2\2\2\u0853\u0854\7\u00ec\2\2\u0854\u0855"+
		"\7\u0346\2\2\u0855\u0856\5h\65\2\u0856\u0857\7\u0348\2\2\u0857\u085a\5"+
		"h\65\2\u0858\u0859\7\u0348\2\2\u0859\u085b\5h\65\2\u085a\u0858\3\2\2\2"+
		"\u085a\u085b\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u0862\7\u0347\2\2\u085d"+
		"\u085e\7\u017a\2\2\u085e\u085f\7\u0346\2\2\u085f\u0860\5\u00c6d\2\u0860"+
		"\u0861\7\u0347\2\2\u0861\u0863\3\2\2\2\u0862\u085d\3\2\2\2\u0862\u0863"+
		"\3\2\2\2\u0863\u00c5\3\2\2\2\u0864\u0869\5\u00c8e\2\u0865\u0866\7\u0348"+
		"\2\2\u0866\u0868\5\u00c8e\2\u0867\u0865\3\2\2\2\u0868\u086b\3\2\2\2\u0869"+
		"\u0867\3\2\2\2\u0869\u086a\3\2\2\2\u086a\u00c7\3\2\2\2\u086b\u0869\3\2"+
		"\2\2\u086c\u086d\7\u032a\2\2\u086d\u086f\5\u0138\u009d\2\u086e\u0870\7"+
		"\u032d\2\2\u086f\u086e\3\2\2\2\u086f\u0870\3\2\2\2\u0870\u00c9\3\2\2\2"+
		"\u0871\u0872\7-\2\2\u0872\u0873\7\u0346\2\2\u0873\u0874\7.\2\2\u0874\u0875"+
		"\5\u011a\u008e\2\u0875\u0876\7\u0348\2\2\u0876\u0877\t\30\2\2\u0877\u0878"+
		"\7\u0347\2\2\u0878\u00cb\3\2\2\2\u0879\u087b\7\u00a2\2\2\u087a\u0879\3"+
		"\2\2\2\u087a\u087b\3\2\2\2\u087b\u0881\3\2\2\2\u087c\u087e\t\31\2\2\u087d"+
		"\u087f\7\u00f0\2\2\u087e\u087d\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u0881"+
		"\3\2\2\2\u0880\u087a\3\2\2\2\u0880\u087c\3\2\2\2\u0881\u0883\3\2\2\2\u0882"+
		"\u0884\t\32\2\2\u0883\u0882\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u0885\3"+
		"\2\2\2\u0885\u0886\7\u00ab\2\2\u0886\u0887\5\u00be`\2\u0887\u0888\7\u00e6"+
		"\2\2\u0888\u0889\5\u008aF\2\u0889\u089c\3\2\2\2\u088a\u088b\7K\2\2\u088b"+
		"\u088c\7\u00ab\2\2\u088c";
	private static final String _serializedATNSegment1 =
		"\u089c\5\u00be`\2\u088d\u088e\7K\2\2\u088e\u088f\7\u0194\2\2\u088f\u089c"+
		"\5\u00be`\2\u0890\u0891\7\u00f0\2\2\u0891\u0892\7\u0194\2\2\u0892\u089c"+
		"\5\u00be`\2\u0893\u0894\7\u00fb\2\2\u0894\u0895\5\u00ceh\2\u0895\u0896"+
		"\5\u00f0y\2\u0896\u089c\3\2\2\2\u0897\u0898\7\u0168\2\2\u0898\u0899\5"+
		"\u00d0i\2\u0899\u089a\5\u00f0y\2\u089a\u089c\3\2\2\2\u089b\u0880\3\2\2"+
		"\2\u089b\u088a\3\2\2\2\u089b\u088d\3\2\2\2\u089b\u0890\3\2\2\2\u089b\u0893"+
		"\3\2\2\2\u089b\u0897\3\2\2\2\u089c\u00cd\3\2\2\2\u089d\u089e\7\u0346\2"+
		"\2\u089e\u089f\5\u0106\u0084\2\u089f\u08a0\7\u0086\2\2\u08a0\u08a1\5\u0126"+
		"\u0094\2\u08a1\u08a2\7\u009c\2\2\u08a2\u08a3\5\u00fc\177\2\u08a3\u08a4"+
		"\7\u0347\2\2\u08a4\u00cf\3\2\2\2\u08a5\u08a6\7\u0346\2\2\u08a6\u08a7\5"+
		"h\65\2\u08a7\u08a8\7\u0086\2\2\u08a8\u08a9\5\u0126\u0094\2\u08a9\u08aa"+
		"\7\u009c\2\2\u08aa\u08ab\7\u0346\2\2\u08ab\u08ac\5\u00d2j\2\u08ac\u08ad"+
		"\7\u0347\2\2\u08ad\u08ae\7\u0347\2\2\u08ae\u00d1\3\2\2\2\u08af\u08b4\5"+
		"\u0126\u0094\2\u08b0\u08b1\7\u0348\2\2\u08b1\u08b3\5\u0126\u0094\2\u08b2"+
		"\u08b0\3\2\2\2\u08b3\u08b6\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b4\u08b5\3\2"+
		"\2\2\u08b5\u00d3\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b7\u08b9\5\u011a\u008e"+
		"\2\u08b8\u08ba\5\u00f4{\2\u08b9\u08b8\3\2\2\2\u08b9\u08ba\3\2\2\2\u08ba"+
		"\u00d5\3\2\2\2\u08bb\u08bc\7\u00eb\2\2\u08bc\u08bd\7\u0346\2\2\u08bd\u08be"+
		"\7\u032d\2\2\u08be\u08bf\7\u0348\2\2\u08bf\u08c0\7\u032d\2\2\u08c0\u08c1"+
		"\7\u0348\2\2\u08c1\u08c2\7\u032d\2\2\u08c2\u08d6\7\u0347\2\2\u08c3\u08c4"+
		"\7\u00eb\2\2\u08c4\u08c5\7\u0346\2\2\u08c5\u08c6\7&\2\2\u08c6\u08c7\7"+
		"\u032d\2\2\u08c7\u08d1\7\u0348\2\2\u08c8\u08cd\5\u00d8m\2\u08c9\u08ca"+
		"\7\u0348\2\2\u08ca\u08cc\5\u00d8m\2\u08cb\u08c9\3\2\2\2\u08cc\u08cf\3"+
		"\2\2\2\u08cd\u08cb\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d2\3\2\2\2\u08cf"+
		"\u08cd\3\2\2\2\u08d0\u08d2\5\u013e\u00a0\2\u08d1\u08c8\3\2\2\2\u08d1\u08d0"+
		"\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4\7\u0347\2\2\u08d4\u08d6\3\2\2"+
		"\2\u08d5\u08bb\3\2\2\2\u08d5\u08c3\3\2\2\2\u08d6\u00d7\3\2\2\2\u08d7\u08d8"+
		"\5\u013e\u00a0\2\u08d8\u08d9\7\u0331\2\2\u08d9\u08da\t\33\2\2\u08da\u00d9"+
		"\3\2\2\2\u08db\u08e6\5\u0080A\2\u08dc\u08dd\7\u0346\2\2\u08dd\u08de\5"+
		"\u0080A\2\u08de\u08df\7\u0347\2\2\u08df\u08e6\3\2\2\2\u08e0\u08e6\5\u0100"+
		"\u0081\2\u08e1\u08e2\7\u0346\2\2\u08e2\u08e3\5\u0100\u0081\2\u08e3\u08e4"+
		"\7\u0347\2\2\u08e4\u08e6\3\2\2\2\u08e5\u08db\3\2\2\2\u08e5\u08dc\3\2\2"+
		"\2\u08e5\u08e0\3\2\2\2\u08e5\u08e1\3\2\2\2\u08e6\u00db\3\2\2\2\u08e7\u08e8"+
		"\7\u01a6\2\2\u08e8\u08e9\7\u0346\2\2\u08e9\u08ea\7\u034b\2\2\u08ea\u097a"+
		"\7\u0347\2\2\u08eb\u08ec\7\u01ae\2\2\u08ec\u08ed\7\u0346\2\2\u08ed\u08ee"+
		"\5h\65\2\u08ee\u08ef\7\21\2\2\u08ef\u08f0\5\u0138\u009d\2\u08f0\u08f1"+
		"\7\u0347\2\2\u08f1\u097a\3\2\2\2\u08f2\u08f3\7H\2\2\u08f3\u08f4\7\u0346"+
		"\2\2\u08f4\u08f5\5\u0138\u009d\2\u08f5\u08f6\7\u0348\2\2\u08f6\u08f9\5"+
		"h\65\2\u08f7\u08f8\7\u0348\2\2\u08f8\u08fa\5h\65\2\u08f9\u08f7\3\2\2\2"+
		"\u08f9\u08fa\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc\7\u0347\2\2\u08fc"+
		"\u097a\3\2\2\2\u08fd\u08fe\7\u01b3\2\2\u08fe\u08ff\7\u0346\2\2\u08ff\u0900"+
		"\7\u034b\2\2\u0900\u097a\7\u0347\2\2\u0901\u0902\7\67\2\2\u0902\u0903"+
		"\7\u0346\2\2\u0903\u0904\5\u0102\u0082\2\u0904\u0905\7\u0347\2\2\u0905"+
		"\u097a\3\2\2\2\u0906\u097a\7O\2\2\u0907\u097a\7P\2\2\u0908\u0909\7\u01cb"+
		"\2\2\u0909\u090a\7\u0346\2\2\u090a\u090b\7\u032a\2\2\u090b\u090c\7\u0348"+
		"\2\2\u090c\u090d\5h\65\2\u090d\u090e\7\u0348\2\2\u090e\u090f\5h\65\2\u090f"+
		"\u0910\7\u0347\2\2\u0910\u097a\3\2\2\2\u0911\u0912\7\u01cc\2\2\u0912\u0913"+
		"\7\u0346\2\2\u0913\u0914\7\u032a\2\2\u0914\u0915\7\u0348\2\2\u0915\u0916"+
		"\5h\65\2\u0916\u0917\7\u0348\2\2\u0917\u0918\5h\65\2\u0918\u0919\7\u0347"+
		"\2\2\u0919\u097a\3\2\2\2\u091a\u091b\7\u01cd\2\2\u091b\u091c\7\u0346\2"+
		"\2\u091c\u091d\7\u032a\2\2\u091d\u091e\7\u0348\2\2\u091e\u091f\5h\65\2"+
		"\u091f\u0920\7\u0347\2\2\u0920\u097a\3\2\2\2\u0921\u0922\7\u01ce\2\2\u0922"+
		"\u0923\7\u0346\2\2\u0923\u0924\7\u032a\2\2\u0924\u0925\7\u0348\2\2\u0925"+
		"\u0926\5h\65\2\u0926\u0927\7\u0347\2\2\u0927\u097a\3\2\2\2\u0928\u0929"+
		"\7\u020c\2\2\u0929\u092a\7\u0346\2\2\u092a\u097a\7\u0347\2\2\u092b\u092c"+
		"\7\u020d\2\2\u092c\u092d\7\u0346\2\2\u092d\u097a\7\u0347\2\2\u092e\u092f"+
		"\7\u0097\2\2\u092f\u0930\7\u0346\2\2\u0930\u0933\5\u0138\u009d\2\u0931"+
		"\u0932\7\u0348\2\2\u0932\u0934\7\u0329\2\2\u0933\u0931\3\2\2\2\u0933\u0934"+
		"\3\2\2\2\u0934\u0937\3\2\2\2\u0935\u0936\7\u0348\2\2\u0936\u0938\7\u0329"+
		"\2\2\u0937\u0935\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u0939\3\2\2\2\u0939"+
		"\u093a\7\u0347\2\2\u093a\u097a\3\2\2\2\u093b\u097a\7\u0253\2\2\u093c\u093d"+
		"\7\u00e1\2\2\u093d\u093e\7\u0346\2\2\u093e\u093f\5h\65\2\u093f\u0940\7"+
		"\u0348\2\2\u0940\u0941\5h\65\2\u0941\u0942\7\u0347\2\2\u0942\u097a\3\2"+
		"\2\2\u0943\u0944\7\u02e7\2\2\u0944\u0945\7\u0346\2\2\u0945\u0946\5h\65"+
		"\2\u0946\u0947\7\u0348\2\2\u0947\u0948\7\u0329\2\2\u0948\u0949\7\u0348"+
		"\2\2\u0949\u094a\7\u0329\2\2\u094a\u094b\7\u0348\2\2\u094b\u094c\5h\65"+
		"\2\u094c\u094d\7\u0347\2\2\u094d\u097a\3\2\2\2\u094e\u097a\7\u013b\2\2"+
		"\u094f\u097a\7\u0153\2\2\u0950\u0951\7\u00aa\2\2\u0951\u0952\7\u0346\2"+
		"\2\u0952\u0953\5h\65\2\u0953\u0954\7\u0348\2\2\u0954\u0955\5h\65\2\u0955"+
		"\u0956\7\u0347\2\2\u0956\u097a\3\2\2\2\u0957\u097a\5\u00dep\2\u0958\u0959"+
		"\7\u009b\2\2\u0959\u095a\7\u0346\2\2\u095a\u095b\5\u008aF\2\u095b\u095c"+
		"\7\u0348\2\2\u095c\u095d\5h\65\2\u095d\u095e\7\u0348\2\2\u095e\u095f\5"+
		"h\65\2\u095f\u0960\7\u0347\2\2\u0960\u097a\3\2\2\2\u0961\u097a\5\u0104"+
		"\u0083\2\u0962\u097a\5\u0106\u0084\2\u0963\u097a\5\u0108\u0085\2\u0964"+
		"\u0965\5\u0136\u009c\2\u0965\u0967\7\u0346\2\2\u0966\u0968\5\u0102\u0082"+
		"\2\u0967\u0966\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u096a"+
		"\7\u0347\2\2\u096a\u097a\3\2\2\2\u096b\u096c\7\u02e6\2\2\u096c\u096d\7"+
		"\u0346\2\2\u096d\u096e\5h\65\2\u096e\u096f\7\u0348\2\2\u096f\u0970\5h"+
		"\65\2\u0970\u0977\7\u0347\2\2\u0971\u0972\7\u017b\2\2\u0972\u0973\7\u0093"+
		"\2\2\u0973\u0974\7\u0346\2\2\u0974\u0975\5\u009eP\2\u0975\u0976\7\u0347"+
		"\2\2\u0976\u0978\3\2\2\2\u0977\u0971\3\2\2\2\u0977\u0978\3\2\2\2\u0978"+
		"\u097a\3\2\2\2\u0979\u08e7\3\2\2\2\u0979\u08eb\3\2\2\2\u0979\u08f2\3\2"+
		"\2\2\u0979\u08fd\3\2\2\2\u0979\u0901\3\2\2\2\u0979\u0906\3\2\2\2\u0979"+
		"\u0907\3\2\2\2\u0979\u0908\3\2\2\2\u0979\u0911\3\2\2\2\u0979\u091a\3\2"+
		"\2\2\u0979\u0921\3\2\2\2\u0979\u0928\3\2\2\2\u0979\u092b\3\2\2\2\u0979"+
		"\u092e\3\2\2\2\u0979\u093b\3\2\2\2\u0979\u093c\3\2\2\2\u0979\u0943\3\2"+
		"\2\2\u0979\u094e\3\2\2\2\u0979\u094f\3\2\2\2\u0979\u0950\3\2\2\2\u0979"+
		"\u0957\3\2\2\2\u0979\u0958\3\2\2\2\u0979\u0961\3\2\2\2\u0979\u0962\3\2"+
		"\2\2\u0979\u0963\3\2\2\2\u0979\u0964\3\2\2\2\u0979\u096b\3\2\2\2\u097a"+
		"\u00dd\3\2\2\2\u097b\u0981\5\u00e0q\2\u097c\u0981\5\u00e2r\2\u097d\u0981"+
		"\5\u00e4s\2\u097e\u0981\5\u00e6t\2\u097f\u0981\5\u00e8u\2\u0980\u097b"+
		"\3\2\2\2\u0980\u097c\3\2\2\2\u0980\u097d\3\2\2\2\u0980\u097e\3\2\2\2\u0980"+
		"\u097f\3\2\2\2\u0981\u00df\3\2\2\2\u0982\u0987\7\u0324\2\2\u0983\u0987"+
		"\7\u032a\2\2\u0984\u0987\7s\2\2\u0985\u0987\5\u00e2r\2\u0986\u0982\3\2"+
		"\2\2\u0986\u0983\3\2\2\2\u0986\u0984\3\2\2\2\u0986\u0985\3\2\2\2\u0987"+
		"\u0988\3\2\2\2\u0988\u0989\7\u0341\2\2\u0989\u098a\7\u030c\2\2\u098a\u098b"+
		"\7\u0346\2\2\u098b\u098c\7\u032d\2\2\u098c\u098d\7\u0348\2\2\u098d\u098e"+
		"\7\u032d\2\2\u098e\u09ae\7\u0347\2\2\u098f\u0994\7\u0324\2\2\u0990\u0994"+
		"\7\u032a\2\2\u0991\u0994\7s\2\2\u0992\u0994\5\u00e2r\2\u0993\u098f\3\2"+
		"\2\2\u0993\u0990\3\2\2\2\u0993\u0991\3\2\2\2\u0993\u0992\3\2\2\2\u0994"+
		"\u0995\3\2\2\2\u0995\u0996\7\u0341\2\2\u0996\u0997\7\u02ba\2\2\u0997\u0998"+
		"\7\u0341\2\2\u0998\u0999\7\u030c\2\2\u0999\u099a\7\u0346\2\2\u099a\u099b"+
		"\7\u032d\2\2\u099b\u099c\7\u0348\2\2\u099c\u099d\7\u032d\2\2\u099d\u09ae"+
		"\7\u0347\2\2\u099e\u09a3\7\u0324\2\2\u099f\u09a3\7\u032a\2\2\u09a0\u09a3"+
		"\7s\2\2\u09a1\u09a3\5\u00e2r\2\u09a2\u099e\3\2\2\2\u09a2\u099f\3\2\2\2"+
		"\u09a2\u09a0\3\2\2\2\u09a2\u09a1\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5"+
		"\7\u0341\2\2\u09a5\u09a6\7\u00f3\2\2\u09a6\u09a7\7\u0341\2\2\u09a7\u09a8"+
		"\7\u030c\2\2\u09a8\u09a9\7\u0346\2\2\u09a9\u09aa\7\u032d\2\2\u09aa\u09ab"+
		"\7\u0348\2\2\u09ab\u09ac\7\u032d\2\2\u09ac\u09ae\7\u0347\2\2\u09ad\u0986"+
		"\3\2\2\2\u09ad\u0993\3\2\2\2\u09ad\u09a2\3\2\2\2\u09ae\u00e1\3\2\2\2\u09af"+
		"\u09b3\7\u0324\2\2\u09b0\u09b3\7\u032a\2\2\u09b1\u09b3\5\u0118\u008d\2"+
		"\u09b2\u09af\3\2\2\2\u09b2\u09b0\3\2\2\2\u09b2\u09b1\3\2\2\2\u09b3\u09b4"+
		"\3\2\2\2\u09b4\u09b5\7\u0341\2\2\u09b5\u09b6\7\u0294\2\2\u09b6\u09b7\7"+
		"\u0346\2\2\u09b7\u09b8\7\u032d\2\2\u09b8\u09c6\7\u0347\2\2\u09b9\u09bd"+
		"\7\u0324\2\2\u09ba\u09bd\7\u032a\2\2\u09bb\u09bd\5\u0118\u008d\2\u09bc"+
		"\u09b9\3\2\2\2\u09bc\u09ba\3\2\2\2\u09bc\u09bb\3\2\2\2\u09bd\u09be\3\2"+
		"\2\2\u09be\u09bf\7\u0341\2\2\u09bf\u09c0\7\u02ba\2\2\u09c0\u09c1\7\u0341"+
		"\2\2\u09c1\u09c2\7\u0294\2\2\u09c2\u09c3\7\u0346\2\2\u09c3\u09c4\7\u032d"+
		"\2\2\u09c4\u09c6\7\u0347\2\2\u09c5\u09b2\3\2\2\2\u09c5\u09bc\3\2\2\2\u09c6"+
		"\u00e3\3\2\2\2\u09c7\u09c8\t\34\2\2\u09c8\u09c9\7\u0341\2\2\u09c9\u09ca"+
		"\7\u01f2\2\2\u09ca\u09cb\7\u0346\2\2\u09cb\u09cc\7\u032d\2\2\u09cc\u09cd"+
		"\7\u0347\2\2\u09cd\u00e5\3\2\2\2\u09ce\u09cf\t\34\2\2\u09cf\u09d0\7\u0341"+
		"\2\2\u09d0\u09d1\7\u025b\2\2\u09d1\u09d2\7\u0346\2\2\u09d2\u09d3\7\u032d"+
		"\2\2\u09d3\u09d4\7\u0347\2\2\u09d4\u00e7\3\2\2\2\u09d5\u09d6\t\34\2\2"+
		"\u09d6\u09d7\7\u0341\2\2\u09d7\u09d8\7\u0268\2\2\u09d8\u09d9\7\u0346\2"+
		"\2\u09d9\u09da\7\u032d\2\2\u09da\u09db\7\u0347\2\2\u09db\u00e9\3\2\2\2"+
		"\u09dc\u09dd\7\u0176\2\2\u09dd\u09de\5h\65\2\u09de\u09df\7\u015a\2\2\u09df"+
		"\u09e0\5h\65\2\u09e0\u00eb\3\2\2\2\u09e1\u09e2\7\u0176\2\2\u09e2\u09e3"+
		"\5\u008aF\2\u09e3\u09e4\7\u015a\2\2\u09e4\u09e5\5h\65\2\u09e5\u00ed\3"+
		"\2\2\2\u09e6\u09e8\7\21\2\2\u09e7\u09e6\3\2\2\2\u09e7\u09e8\3\2\2\2\u09e8"+
		"\u09e9\3\2\2\2\u09e9\u09ea\5\u00fe\u0080\2\u09ea\u00ef\3\2\2\2\u09eb\u09ed"+
		"\7\21\2\2\u09ec\u09eb\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee\3\2\2\2"+
		"\u09ee\u09ef\5\u00f2z\2\u09ef\u00f1\3\2\2\2\u09f0\u09f2\5\u013e\u00a0"+
		"\2\u09f1\u09f3\5\u00f4{\2\u09f2\u09f1\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3"+
		"\u00f3\3\2\2\2\u09f4\u09f6\7\u017a\2\2\u09f5\u09f4\3\2\2\2\u09f5\u09f6"+
		"\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f8\7\u0346\2\2\u09f8\u09ff\5\u00f8"+
		"}\2\u09f9\u09fb\7\u0348\2\2\u09fa\u09f9\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb"+
		"\u09fc\3\2\2\2\u09fc\u09fe\5\u00f8}\2\u09fd\u09fa\3\2\2\2\u09fe\u0a01"+
		"\3\2\2\2\u09ff\u09fd\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a02\3\2\2\2\u0a01"+
		"\u09ff\3\2\2\2\u0a02\u0a03\7\u0347\2\2\u0a03\u00f5\3\2\2\2\u0a04\u0a05"+
		"\7\u017a\2\2\u0a05\u0a06\7\u0346\2\2\u0a06\u0a0d\5\u00f8}\2\u0a07\u0a09"+
		"\7\u0348\2\2\u0a08\u0a07\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a0a\3\2\2"+
		"\2\u0a0a\u0a0c\5\u00f8}\2\u0a0b\u0a08\3\2\2\2\u0a0c\u0a0f\3\2\2\2\u0a0d"+
		"\u0a0b\3\2\2\2\u0a0d\u0a0e\3\2\2\2\u0a0e\u0a10\3\2\2\2\u0a0f\u0a0d\3\2"+
		"\2\2\u0a10\u0a11\7\u0347\2\2\u0a11\u00f7\3\2\2\2\u0a12\u0a14\7\u0269\2"+
		"\2\u0a13\u0a12\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0a45\3\2\2\2\u0a15\u0a29"+
		"\7\u009f\2\2\u0a16\u0a17\7\u0346\2\2\u0a17\u0a1c\5\u00fa~\2\u0a18\u0a19"+
		"\7\u0348\2\2\u0a19\u0a1b\5\u00fa~\2\u0a1a\u0a18\3\2\2\2\u0a1b\u0a1e\3"+
		"\2\2\2\u0a1c\u0a1a\3\2\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u0a1f\3\2\2\2\u0a1e"+
		"\u0a1c\3\2\2\2\u0a1f\u0a20\7\u0347\2\2\u0a20\u0a2a\3\2\2\2\u0a21\u0a26"+
		"\5\u00fa~\2\u0a22\u0a23\7\u0348\2\2\u0a23\u0a25\5\u00fa~\2\u0a24\u0a22"+
		"\3\2\2\2\u0a25\u0a28\3\2\2\2\u0a26\u0a24\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27"+
		"\u0a2a\3\2\2\2\u0a28\u0a26\3\2\2\2\u0a29\u0a16\3\2\2\2\u0a29\u0a21\3\2"+
		"\2\2\u0a2a\u0a46\3\2\2\2\u0a2b\u0a2c\7\u009f\2\2\u0a2c\u0a2d\7\u0331\2"+
		"\2\u0a2d\u0a46\5\u00fa~\2\u0a2e\u0a3d\7\u0087\2\2\u0a2f\u0a30\7\u0346"+
		"\2\2\u0a30\u0a31\5\u00fa~\2\u0a31\u0a32\7\u0346\2\2\u0a32\u0a37\7\u032a"+
		"\2\2\u0a33\u0a34\7\u0348\2\2\u0a34\u0a36\7\u032a\2\2\u0a35\u0a33\3\2\2"+
		"\2\u0a36\u0a39\3\2\2\2\u0a37\u0a35\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a3a"+
		"\3\2\2\2\u0a39\u0a37\3\2\2\2\u0a3a\u0a3b\7\u0347\2\2\u0a3b\u0a3c\7\u0347"+
		"\2\2\u0a3c\u0a3e\3\2\2\2\u0a3d\u0a2f\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e"+
		"\u0a46\3\2\2\2\u0a3f\u0a46\7\u02d1\2\2\u0a40\u0a46\7\u02db\2\2\u0a41\u0a42"+
		"\7\u02dc\2\2\u0a42\u0a43\7\u0331\2\2\u0a43\u0a46\7\u0329\2\2\u0a44\u0a46"+
		"\7\u032a\2\2\u0a45\u0a15\3\2\2\2\u0a45\u0a2b\3\2\2\2\u0a45\u0a2e\3\2\2"+
		"\2\u0a45\u0a3f\3\2\2\2\u0a45\u0a40\3\2\2\2\u0a45\u0a41\3\2\2\2\u0a45\u0a44"+
		"\3\2\2\2\u0a46\u00f9\3\2\2\2\u0a47\u0a4a\5\u013e\u00a0\2\u0a48\u0a4a\7"+
		"\u0329\2\2\u0a49\u0a47\3\2\2\2\u0a49\u0a48\3\2\2\2\u0a4a\u00fb\3\2\2\2"+
		"\u0a4b\u0a4c\7\u0346\2\2\u0a4c\u0a51\5\u00fe\u0080\2\u0a4d\u0a4e\7\u0348"+
		"\2\2\u0a4e\u0a50\5\u00fe\u0080\2\u0a4f\u0a4d\3\2\2\2\u0a50\u0a53\3\2\2"+
		"\2\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a54\3\2\2\2\u0a53\u0a51"+
		"\3\2\2\2\u0a54\u0a55\7\u0347\2\2\u0a55\u00fd\3\2\2\2\u0a56\u0a59\5\u013e"+
		"\u00a0\2\u0a57\u0a59\7\u032d\2\2\u0a58\u0a56\3\2\2\2\u0a58\u0a57\3\2\2"+
		"\2\u0a59\u00ff\3\2\2\2\u0a5a\u0a5b\7\u0170\2\2\u0a5b\u0a5c\7\u0346\2\2"+
		"\u0a5c\u0a5d\5\u0102\u0082\2\u0a5d\u0a65\7\u0347\2\2\u0a5e\u0a5f\7\u0348"+
		"\2\2\u0a5f\u0a60\7\u0346\2\2\u0a60\u0a61\5\u0102\u0082\2\u0a61\u0a62\7"+
		"\u0347\2\2\u0a62\u0a64\3\2\2\2\u0a63\u0a5e\3\2\2\2\u0a64\u0a67\3\2\2\2"+
		"\u0a65\u0a63\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0101\3\2\2\2\u0a67\u0a65"+
		"\3\2\2\2\u0a68\u0a6d\5h\65\2\u0a69\u0a6a\7\u0348\2\2\u0a6a\u0a6c\5h\65"+
		"\2\u0a6b\u0a69\3\2\2\2\u0a6c\u0a6f\3\2\2\2\u0a6d\u0a6b\3\2\2\2\u0a6d\u0a6e"+
		"\3\2\2\2\u0a6e\u0103\3\2\2\2\u0a6f\u0a6d\3\2\2\2\u0a70\u0a71\t\35\2\2"+
		"\u0a71\u0a72\7\u0346\2\2\u0a72\u0a73\7\u0347\2\2\u0a73\u0a7b\5\u010c\u0087"+
		"\2\u0a74\u0a75\7\u026e\2\2\u0a75\u0a76\7\u0346\2\2\u0a76\u0a77\5h\65\2"+
		"\u0a77\u0a78\7\u0347\2\2\u0a78\u0a79\5\u010c\u0087\2\u0a79\u0a7b\3\2\2"+
		"\2\u0a7a\u0a70\3\2\2\2\u0a7a\u0a74\3\2\2\2\u0a7b\u0105\3\2\2\2\u0a7c\u0a7d"+
		"\t\36\2\2\u0a7d\u0a7e\7\u0346\2\2\u0a7e\u0a7f\5\u010a\u0086\2\u0a7f\u0a81"+
		"\7\u0347\2\2\u0a80\u0a82\5\u010c\u0087\2\u0a81\u0a80\3\2\2\2\u0a81\u0a82"+
		"\3\2\2\2\u0a82\u0a9d\3\2\2\2\u0a83\u0a84\t\37\2\2\u0a84\u0a87\7\u0346"+
		"\2\2\u0a85\u0a88\7\u034b\2\2\u0a86\u0a88\5\u010a\u0086\2\u0a87\u0a85\3"+
		"\2\2\2\u0a87\u0a86\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u0a8b\7\u0347\2\2"+
		"\u0a8a\u0a8c\5\u010c\u0087\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c"+
		"\u0a9d\3\2\2\2\u0a8d\u0a8e\7\u01b4\2\2\u0a8e\u0a8f\7\u0346\2\2\u0a8f\u0a90"+
		"\5\u010a\u0086\2\u0a90\u0a91\7\u0347\2\2\u0a91\u0a9d\3\2\2\2\u0a92\u0a93"+
		"\7\u0211\2\2\u0a93\u0a94\7\u0346\2\2\u0a94\u0a95\5h\65\2\u0a95\u0a96\7"+
		"\u0347\2\2\u0a96\u0a9d\3\2\2\2\u0a97\u0a98\7\u0212\2\2\u0a98\u0a99\7\u0346"+
		"\2\2\u0a99\u0a9a\5\u0102\u0082\2\u0a9a\u0a9b\7\u0347\2\2\u0a9b\u0a9d\3"+
		"\2\2\2\u0a9c\u0a7c\3\2\2\2\u0a9c\u0a83\3\2\2\2\u0a9c\u0a8d\3\2\2\2\u0a9c"+
		"\u0a92\3\2\2\2\u0a9c\u0a97\3\2\2\2\u0a9d\u0107\3\2\2\2\u0a9e\u0a9f\t "+
		"\2\2\u0a9f\u0aa0\7\u0346\2\2\u0aa0\u0aa1\5h\65\2\u0aa1\u0aa2\7\u0347\2"+
		"\2\u0aa2\u0aa3\5\u010c\u0087\2\u0aa3\u0ab3\3\2\2\2\u0aa4\u0aa5\t!\2\2"+
		"\u0aa5\u0aa6\7\u0346\2\2\u0aa6\u0aad\5h\65\2\u0aa7\u0aa8\7\u0348\2\2\u0aa8"+
		"\u0aab\5h\65\2\u0aa9\u0aaa\7\u0348\2\2\u0aaa\u0aac\5h\65\2\u0aab\u0aa9"+
		"\3\2\2\2\u0aab\u0aac\3\2\2\2\u0aac\u0aae\3\2\2\2\u0aad\u0aa7\3\2\2\2\u0aad"+
		"\u0aae\3\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0\7\u0347\2\2\u0ab0\u0ab1"+
		"\5\u010c\u0087\2\u0ab1\u0ab3\3\2\2\2\u0ab2\u0a9e\3\2\2\2\u0ab2\u0aa4\3"+
		"\2\2\2\u0ab3\u0109\3\2\2\2\u0ab4\u0ab6\t\r\2\2\u0ab5\u0ab4\3\2\2\2\u0ab5"+
		"\u0ab6\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0ab8\5h\65\2\u0ab8\u010b\3\2"+
		"\2\2\u0ab9\u0aba\7\u00f1\2\2\u0aba\u0abe\7\u0346\2\2\u0abb\u0abc\7\u0281"+
		"\2\2\u0abc\u0abd\7\'\2\2\u0abd\u0abf\5\u0102\u0082\2\u0abe\u0abb\3\2\2"+
		"\2\u0abe\u0abf\3\2\2\2\u0abf\u0ac1\3\2\2\2\u0ac0\u0ac2\5\u009eP\2\u0ac1"+
		"\u0ac0\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u0ac4\3\2\2\2\u0ac3\u0ac5\5\u010e"+
		"\u0088\2\u0ac4\u0ac3\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6"+
		"\u0ac7\7\u0347\2\2\u0ac7\u010d\3\2\2\2\u0ac8\u0ac9\t\"\2\2\u0ac9\u0aca"+
		"\5\u0110\u0089\2\u0aca\u010f\3\2\2\2\u0acb\u0ad2\5\u0114\u008b\2\u0acc"+
		"\u0acd\7\36\2\2\u0acd\u0ace\5\u0112\u008a\2\u0ace\u0acf\7\f\2\2\u0acf"+
		"\u0ad0\5\u0112\u008a\2\u0ad0\u0ad2\3\2\2\2\u0ad1\u0acb\3\2\2\2\u0ad1\u0acc"+
		"\3\2\2\2\u0ad2\u0111\3\2\2\2\u0ad3\u0ad6\5\u0114\u008b\2\u0ad4\u0ad6\5"+
		"\u0116\u008c\2\u0ad5\u0ad3\3\2\2\2\u0ad5\u0ad4\3\2\2\2\u0ad6\u0113\3\2"+
		"\2\2\u0ad7\u0ad8\7\u0304\2\2\u0ad8\u0ade\7\u0288\2\2\u0ad9\u0ada\7\u0329"+
		"\2\2\u0ada\u0ade\7\u0288\2\2\u0adb\u0adc\7L\2\2\u0adc\u0ade\7\u02ba\2"+
		"\2\u0add\u0ad7\3\2\2\2\u0add\u0ad9\3\2\2\2\u0add\u0adb\3\2\2\2\u0ade\u0115"+
		"\3\2\2\2\u0adf\u0ae0\7\u0304\2\2\u0ae0\u0ae4\7\u0203\2\2\u0ae1\u0ae2\7"+
		"\u0329\2\2\u0ae2\u0ae4\7\u0203\2\2\u0ae3\u0adf\3\2\2\2\u0ae3\u0ae1\3\2"+
		"\2\2\u0ae4\u0117\3\2\2\2\u0ae5\u0ae6\5\u013e\u00a0\2\u0ae6\u0ae7\7\u0341"+
		"\2\2\u0ae7\u0ae8\5\u013e\u00a0\2\u0ae8\u0ae9\7\u0341\2\2\u0ae9\u0aea\5"+
		"\u013e\u00a0\2\u0aea\u0aeb\7\u0341\2\2\u0aeb\u0af7\3\2\2\2\u0aec\u0aed"+
		"\5\u013e\u00a0\2\u0aed\u0aef\7\u0341\2\2\u0aee\u0af0\5\u013e\u00a0\2\u0aef"+
		"\u0aee\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1\u0af2\7\u0341"+
		"\2\2\u0af2\u0af7\3\2\2\2\u0af3\u0af4\5\u013e\u00a0\2\u0af4\u0af5\7\u0341"+
		"\2\2\u0af5\u0af7\3\2\2\2\u0af6\u0ae5\3\2\2\2\u0af6\u0aec\3\2\2\2\u0af6"+
		"\u0af3\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0af9\5\u013e"+
		"\u00a0\2\u0af9\u0119\3\2\2\2\u0afa\u0afb\5\u013e\u00a0\2\u0afb\u0afd\7"+
		"\u0341\2\2\u0afc\u0afe\5\u013e\u00a0\2\u0afd\u0afc\3\2\2\2\u0afd\u0afe"+
		"\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b00\7\u0341\2\2\u0b00\u0b05\3\2\2"+
		"\2\u0b01\u0b02\5\u013e\u00a0\2\u0b02\u0b03\7\u0341\2\2\u0b03\u0b05\3\2"+
		"\2\2\u0b04\u0afa\3\2\2\2\u0b04\u0b01\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05"+
		"\u0b06\3\2\2\2\u0b06\u0b15\5\u013e\u00a0\2\u0b07\u0b08\5\u013e\u00a0\2"+
		"\u0b08\u0b0a\7\u0341\2\2\u0b09\u0b0b\5\u013e\u00a0\2\u0b0a\u0b09\3\2\2"+
		"\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0d\7\u0341\2\2\u0b0d"+
		"\u0b12\3\2\2\2\u0b0e\u0b0f\5\u013e\u00a0\2\u0b0f\u0b10\7\u0341\2\2\u0b10"+
		"\u0b12\3\2\2\2\u0b11\u0b07\3\2\2\2\u0b11\u0b0e\3\2\2\2\u0b11\u0b12\3\2"+
		"\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b15\7!\2\2\u0b14\u0b04\3\2\2\2\u0b14"+
		"\u0b11\3\2\2\2\u0b15\u011b\3\2\2\2\u0b16\u0b17\5\u013e\u00a0\2\u0b17\u0b18"+
		"\7\u0341\2\2\u0b18\u0b1a\3\2\2\2\u0b19\u0b16\3\2\2\2\u0b19\u0b1a\3\2\2"+
		"\2\u0b1a\u0b1b\3\2\2\2\u0b1b\u0b1c\5\u013e\u00a0\2\u0b1c\u011d\3\2\2\2"+
		"\u0b1d\u0b1e\5\u013e\u00a0\2\u0b1e\u0b1f\7\u0341\2\2\u0b1f\u0b21\3\2\2"+
		"\2\u0b20\u0b1d\3\2\2\2\u0b20\u0b21\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b23"+
		"\5\u013e\u00a0\2\u0b23\u011f\3\2\2\2\u0b24\u0b30\5\u011e\u0090\2\u0b25"+
		"\u0b26\5\u013e\u00a0\2\u0b26\u0b28\7\u0341\2\2\u0b27\u0b29\5\u013e\u00a0"+
		"\2\u0b28\u0b27\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b2b"+
		"\7\u0341\2\2\u0b2b\u0b2d\3\2\2\2\u0b2c\u0b25\3\2\2\2\u0b2c\u0b2d\3\2\2"+
		"\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b30\5\u013e\u00a0\2\u0b2f\u0b24\3\2\2\2"+
		"\u0b2f\u0b2c\3\2\2\2\u0b30\u0121\3\2\2\2\u0b31\u0b3f\5\u0120\u0091\2\u0b32"+
		"\u0b33\5\u013e\u00a0\2\u0b33\u0b34\7\u0341\2\2\u0b34\u0b35\5\u013e\u00a0"+
		"\2\u0b35\u0b37\7\u0341\2\2\u0b36\u0b38\5\u013e\u00a0\2\u0b37\u0b36\3\2"+
		"\2\2\u0b37\u0b38\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b3a\7\u0341\2\2\u0b3a"+
		"\u0b3c\3\2\2\2\u0b3b\u0b32\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b3d\3\2"+
		"\2\2\u0b3d\u0b3f\5\u013e\u00a0\2\u0b3e\u0b31\3\2\2\2\u0b3e\u0b3b\3\2\2"+
		"\2\u0b3f\u0123\3\2\2\2\u0b40\u0b43\5\u0118\u008d\2\u0b41\u0b43\7\u0324"+
		"\2\2\u0b42\u0b40\3\2\2\2\u0b42\u0b41\3\2\2\2\u0b43\u0125\3\2\2\2\u0b44"+
		"\u0b45\5\u011a\u008e\2\u0b45\u0b46\7\u0341\2\2\u0b46\u0b48\3\2\2\2\u0b47"+
		"\u0b44\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u0b75\5\u013e"+
		"\u00a0\2\u0b4a\u0b4b\5\u011a\u008e\2\u0b4b\u0b4c\7\u0341\2\2\u0b4c\u0b4e"+
		"\3\2\2\2\u0b4d\u0b4a\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f"+
		"\u0b75\7\u01b9\2\2\u0b50\u0b51\5\u011a\u008e\2\u0b51\u0b52\7\u0341\2\2"+
		"\u0b52\u0b54\3\2\2\2\u0b53\u0b50\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0b55"+
		"\3\2\2\2\u0b55\u0b75\7\u02e1\2\2\u0b56\u0b57\5\u011a\u008e\2\u0b57\u0b58"+
		"\7\u0341\2\2\u0b58\u0b5a\3\2\2\2\u0b59\u0b56\3\2\2\2\u0b59\u0b5a\3\2\2"+
		"\2\u0b5a\u0b5b\3\2\2\2\u0b5b\u0b75\7\u0297\2\2\u0b5c\u0b5d\5\u011a\u008e"+
		"\2\u0b5d\u0b5e\7\u0341\2\2\u0b5e\u0b60\3\2\2\2\u0b5f\u0b5c\3\2\2\2\u0b5f"+
		"\u0b60\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b75\7\u0195\2\2\u0b62\u0b63"+
		"\5\u011a\u008e\2\u0b63\u0b64\7\u0341\2\2\u0b64\u0b66\3\2\2\2\u0b65\u0b62"+
		"\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b75\7\u0192\2"+
		"\2\u0b68\u0b69\5\u011a\u008e\2\u0b69\u0b6a\7\u0341\2\2\u0b6a\u0b6c\3\2"+
		"\2\2\u0b6b\u0b68\3\2\2\2\u0b6b\u0b6c\3\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d"+
		"\u0b75\7\u0191\2\2\u0b6e\u0b6f\5\u011a\u008e\2\u0b6f\u0b70\7\u0341\2\2"+
		"\u0b70\u0b72\3\2\2\2\u0b71\u0b6e\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72\u0b73"+
		"\3\2\2\2\u0b73\u0b75\7\u0190\2\2\u0b74\u0b47\3\2\2\2\u0b74\u0b4d\3\2\2"+
		"\2\u0b74\u0b53\3\2\2\2\u0b74\u0b59\3\2\2\2\u0b74\u0b5f\3\2\2\2\u0b74\u0b65"+
		"\3\2\2\2\u0b74\u0b6b\3\2\2\2\u0b74\u0b71\3\2\2\2\u0b75\u0127\3\2\2\2\u0b76"+
		"\u0b78\5\u013e\u00a0\2\u0b77\u0b79\t\23\2\2\u0b78\u0b77\3\2\2\2\u0b78"+
		"\u0b79\3\2\2\2\u0b79\u0b81\3\2\2\2\u0b7a\u0b7b\7\u0348\2\2\u0b7b\u0b7d"+
		"\5\u013e\u00a0\2\u0b7c\u0b7e\t\23\2\2\u0b7d\u0b7c\3\2\2\2\u0b7d\u0b7e"+
		"\3\2\2\2\u0b7e\u0b80\3\2\2\2\u0b7f\u0b7a\3\2\2\2\u0b80\u0b83\3\2\2\2\u0b81"+
		"\u0b7f\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0129\3\2\2\2\u0b83\u0b81\3\2"+
		"\2\2\u0b84\u0b89\5\u013e\u00a0\2\u0b85\u0b86\7\u0348\2\2\u0b86\u0b88\5"+
		"\u013e\u00a0\2\u0b87\u0b85\3\2\2\2\u0b88\u0b8b\3\2\2\2\u0b89\u0b87\3\2"+
		"\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u012b\3\2\2\2\u0b8b\u0b89\3\2\2\2\u0b8c"+
		"\u0b8f\5\u013e\u00a0\2\u0b8d\u0b8f\7\u0324\2\2\u0b8e\u0b8c\3\2\2\2\u0b8e"+
		"\u0b8d\3\2\2\2\u0b8f\u012d\3\2\2\2\u0b90\u0b91\t#\2\2\u0b91\u012f\3\2"+
		"\2\2\u0b92\u0b93\t$\2\2\u0b93\u0131\3\2\2\2\u0b94\u0b96\7\u00dd\2\2\u0b95"+
		"\u0b94\3\2\2\2\u0b95\u0b96\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b98\7\u00e0"+
		"\2\2\u0b98\u0133\3\2\2\2\u0b99\u0ba1\5\u0132\u009a\2\u0b9a\u0b9b\7Z\2"+
		"\2\u0b9b\u0b9e\5~@\2\u0b9c\u0b9d\7\u017a\2\2\u0b9d\u0b9f\7\u0170\2\2\u0b9e"+
		"\u0b9c\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0ba1\3\2\2\2\u0ba0\u0b99\3\2"+
		"\2\2\u0ba0\u0b9a\3\2\2\2\u0ba1\u0135\3\2\2\2\u0ba2\u0ba8\5\u0122\u0092"+
		"\2\u0ba3\u0ba8\7\u0120\2\2\u0ba4\u0ba8\7\u00b2\2\2\u0ba5\u0ba8\7\u01a6"+
		"\2\2\u0ba6\u0ba8\7\u01b3\2\2\u0ba7\u0ba2\3\2\2\2\u0ba7\u0ba3\3\2\2\2\u0ba7"+
		"\u0ba4\3\2\2\2\u0ba7\u0ba5\3\2\2\2\u0ba7\u0ba6\3\2\2\2\u0ba8\u0137\3\2"+
		"\2\2\u0ba9\u0bab\5\u013e\u00a0\2\u0baa\u0bac\7\u0097\2\2\u0bab\u0baa\3"+
		"\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bb4\3\2\2\2\u0bad\u0bae\7\u0346\2\2"+
		"\u0bae\u0bb1\t%\2\2\u0baf\u0bb0\7\u0348\2\2\u0bb0\u0bb2\7\u0329\2\2\u0bb1"+
		"\u0baf\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb5\7\u0347"+
		"\2\2\u0bb4\u0bad\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bbf\3\2\2\2\u0bb6"+
		"\u0bb8\7e\2\2\u0bb7\u0bb9\7\u00ff\2\2\u0bb8\u0bb7\3\2\2\2\u0bb8\u0bb9"+
		"\3\2\2\2\u0bb9\u0bbf\3\2\2\2\u0bba\u0bbf\7\u0224\2\2\u0bbb\u0bbf\7\u02f9"+
		"\2\2\u0bbc\u0bbf\7\u02da\2\2\u0bbd\u0bbf\7\u01a4\2\2\u0bbe\u0ba9\3\2\2"+
		"\2\u0bbe\u0bb6\3\2\2\2\u0bbe\u0bba\3\2\2\2\u0bbe\u0bbb\3\2\2\2\u0bbe\u0bbc"+
		"\3\2\2\2\u0bbe\u0bbd\3\2\2\2\u0bbf\u0139\3\2\2\2\u0bc0\u0bd0\7\u032d\2"+
		"\2\u0bc1\u0bd0\7\u032e\2\2\u0bc2\u0bc4\5\u013c\u009f\2\u0bc3\u0bc2\3\2"+
		"\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bd0\7\u0329\2\2\u0bc6"+
		"\u0bc8\5\u013c\u009f\2\u0bc7\u0bc6\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bc9"+
		"\3\2\2\2\u0bc9\u0bd0\t\16\2\2\u0bca\u0bcc\5\u013c\u009f\2\u0bcb\u0bca"+
		"\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bcd\3\2\2\2\u0bcd\u0bce\7\u0345\2"+
		"\2\u0bce\u0bd0\t&\2\2\u0bcf\u0bc0\3\2\2\2\u0bcf\u0bc1\3\2\2\2\u0bcf\u0bc3"+
		"\3\2\2\2\u0bcf\u0bc7\3\2\2\2\u0bcf\u0bcb\3\2\2\2\u0bd0\u013b\3\2\2\2\u0bd1"+
		"\u0bd2\t\13\2\2\u0bd2\u013d\3\2\2\2\u0bd3\u0bd7\5\u0140\u00a1\2\u0bd4"+
		"\u0bd7\7\u0321\2\2\u0bd5\u0bd7\7\u0323\2\2\u0bd6\u0bd3\3\2\2\2\u0bd6\u0bd4"+
		"\3\2\2\2\u0bd6\u0bd5\3\2\2\2\u0bd7\u013f\3\2\2\2\u0bd8\u0bd9\t\'\2\2\u0bd9"+
		"\u0141\3\2\2\2\u0bda\u0be5\7\u0331\2\2\u0bdb\u0be5\7\u0334\2\2\u0bdc\u0be5"+
		"\7\u0333\2\2\u0bdd\u0be5\7\u0336\2\2\u0bde\u0be5\7\u0335\2\2\u0bdf\u0be5"+
		"\7\u0332\2\2\u0be0\u0be1\7\u0337\2\2\u0be1\u0be5\7\u0333\2\2\u0be2\u0be3"+
		"\7\u0337\2\2\u0be3\u0be5\7\u0334\2\2\u0be4\u0bda\3\2\2\2\u0be4\u0bdb\3"+
		"\2\2\2\u0be4\u0bdc\3\2\2\2\u0be4\u0bdd\3\2\2\2\u0be4\u0bde\3\2\2\2\u0be4"+
		"\u0bdf\3\2\2\2\u0be4\u0be0\3\2\2\2\u0be4\u0be2\3\2\2\2\u0be5\u0143\3\2"+
		"\2\2\u0be6\u0be7\t(\2\2\u0be7\u0145\3\2\2\2\u01ac\u014a\u014e\u0153\u015a"+
		"\u0166\u016e\u0171\u0176\u017b\u017e\u0185\u018b\u018d\u0192\u0198\u019e"+
		"\u01a3\u01a9\u01b0\u01b5\u01ba\u01bf\u01c2\u01c6\u01ca\u01ce\u01d2\u01d7"+
		"\u01db\u01df\u01e2\u01ea\u01ec\u01ef\u01f3\u01f6\u0200\u0206\u020e\u0212"+
		"\u0216\u021f\u0225\u0229\u022c\u0237\u023b\u0242\u0247\u024a\u0252\u0256"+
		"\u0259\u025d\u0260\u0264\u026b\u026f\u0271\u0273\u0276\u0279\u027c\u0282"+
		"\u0285\u028d\u028f\u0292\u0296\u0299\u029f\u02a2\u02a6\u02a9\u02ac\u02b3"+
		"\u02b6\u02ba\u02bd\u02c0\u02c3\u02c6\u02ce\u02d0\u02d4\u02d7\u02df\u02e3"+
		"\u02e7\u02ee\u02f2\u02f4\u02f6\u02f9\u02fc\u02ff\u0307\u030d\u0313\u0315"+
		"\u0319\u031c\u0321\u0326\u0329\u032d\u0330\u033e\u0342\u0345\u0349\u034c"+
		"\u0354\u0359\u035e\u0364\u0369\u036c\u0375\u037f\u0382\u038b\u0393\u0396"+
		"\u039d\u03a0\u03ce\u03d2\u03d5\u03df\u03e1\u03e7\u03ee\u03f6\u03f9\u03fc"+
		"\u0405\u040f\u0413\u0419\u0420\u0424\u0428\u0439\u043d\u0447\u044b\u0452"+
		"\u0455\u0458\u0460\u0465\u046a\u046d\u046f\u0473\u0477\u047a\u047e\u0484"+
		"\u0489\u048f\u0495\u0499\u049c\u04a0\u04a4\u04ac\u04b1\u04b3\u04b6\u04bb"+
		"\u04c4\u04c8\u04cd\u04d0\u04d3\u04d9\u04e1\u04e9\u04ec\u04ef\u04f3\u04f8"+
		"\u04fb\u0501\u0505\u050b\u0513\u0519\u051b\u051e\u052d\u0530\u0533\u0535"+
		"\u0540\u054b\u0554\u055e\u0562\u0570\u0583\u0585\u058b\u0595\u0597\u059e"+
		"\u05a8\u05aa\u05af\u05b5\u05c0\u05c7\u05cb\u05d3\u05d7\u05db\u05e1\u05eb"+
		"\u05f5\u05fc\u0603\u060c\u0613\u061a\u0623\u0627\u0631\u0638\u0640\u0648"+
		"\u064c\u0662\u066b\u0671\u0677\u067d\u0688\u068f\u0697\u069e\u06a3\u06a8"+
		"\u06ac\u06b3\u06b7\u06ba\u06bf\u06c3\u06c7\u06cc\u06d3\u06d6\u06da\u06df"+
		"\u06e3\u06ec\u06f3\u06fc\u0708\u070a\u0714\u0717\u071c\u0725\u0727\u0729"+
		"\u072e\u0736\u073b\u0743\u0748\u074e\u0758\u075a\u075e\u0762\u0764\u076d"+
		"\u076f\u0773\u077e\u07a0\u07b0\u07b7\u07b9\u07c0\u07c9\u07d1\u07d8\u07df"+
		"\u07e2\u07e5\u07ec\u07f3\u07f6\u07f8\u0800\u0802\u0808\u080f\u0817\u081d"+
		"\u0822\u0826\u082a\u082f\u0831\u0839\u083b\u083f\u0846\u0848\u084f\u0851"+
		"\u085a\u0862\u0869\u086f\u087a\u087e\u0880\u0883\u089b\u08b4\u08b9\u08cd"+
		"\u08d1\u08d5\u08e5\u08f9\u0933\u0937\u0967\u0977\u0979\u0980\u0986\u0993"+
		"\u09a2\u09ad\u09b2\u09bc\u09c5\u09e7\u09ec\u09f2\u09f5\u09fa\u09ff\u0a08"+
		"\u0a0d\u0a13\u0a1c\u0a26\u0a29\u0a37\u0a3d\u0a45\u0a49\u0a51\u0a58\u0a65"+
		"\u0a6d\u0a7a\u0a81\u0a87\u0a8b\u0a9c\u0aab\u0aad\u0ab2\u0ab5\u0abe\u0ac1"+
		"\u0ac4\u0ad1\u0ad5\u0add\u0ae3\u0aef\u0af6\u0afd\u0b04\u0b0a\u0b11\u0b14"+
		"\u0b19\u0b20\u0b28\u0b2c\u0b2f\u0b37\u0b3b\u0b3e\u0b42\u0b47\u0b4d\u0b53"+
		"\u0b59\u0b5f\u0b65\u0b6b\u0b71\u0b74\u0b78\u0b7d\u0b81\u0b89\u0b8e\u0b95"+
		"\u0b9e\u0ba0\u0ba7\u0bab\u0bb1\u0bb4\u0bb8\u0bbe\u0bc3\u0bc7\u0bcb\u0bcf"+
		"\u0bd6\u0be4";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}