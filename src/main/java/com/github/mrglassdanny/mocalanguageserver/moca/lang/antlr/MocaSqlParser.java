// Generated from MocaSql.g4 by ANTLR 4.5.3

package com.github.mrglassdanny.mocalanguageserver.moca.lang.antlr;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MocaSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, ABSENT=3, ADD=4, AES=5, ALL=6, ALLOW_CONNECTIONS=7, ALLOW_MULTIPLE_EVENT_LOSS=8, 
		ALLOW_SINGLE_EVENT_LOSS=9, ALTER=10, AND=11, ANONYMOUS=12, ANY=13, APPEND=14, 
		APPLICATION=15, AS=16, ASC=17, ASYMMETRIC=18, ASYNCHRONOUS_COMMIT=19, 
		AUTHORIZATION=20, AUTHENTICATION=21, AUTOMATED_BACKUP_PREFERENCE=22, AUTOMATIC=23, 
		AVAILABILITY_MODE=24, BACKSLASH=25, BACKUP=26, BEFORE=27, BEGIN=28, BETWEEN=29, 
		BLOCK=30, BLOCKSIZE=31, BLOCKING_HIERARCHY=32, BREAK=33, BROWSE=34, BUFFER=35, 
		BUFFERCOUNT=36, BULK=37, BY=38, CACHE=39, CALLED=40, CASCADE=41, CASE=42, 
		CERTIFICATE=43, CHANGETABLE=44, CHANGES=45, CHECK=46, CHECKPOINT=47, CHECK_POLICY=48, 
		CHECK_EXPIRATION=49, CLASSIFIER_FUNCTION=50, CLOSE=51, CLUSTER=52, CLUSTERED=53, 
		COALESCE=54, COLLATE=55, COLUMN=56, COMPRESSION=57, COMMIT=58, COMPUTE=59, 
		CONFIGURATION=60, CONSTRAINT=61, CONTAINMENT=62, CONTAINS=63, CONTAINSTABLE=64, 
		CONTEXT=65, CONTINUE=66, CONTINUE_AFTER_ERROR=67, CONTRACT=68, CONTRACT_NAME=69, 
		CONVERSATION=70, CONVERT=71, COPY_ONLY=72, CREATE=73, CROSS=74, CURRENT=75, 
		CURRENT_DATE=76, CURRENT_TIME=77, CURRENT_TIMESTAMP=78, CURRENT_USER=79, 
		CURSOR=80, CYCLE=81, DATA_COMPRESSION=82, DATA_SOURCE=83, DATABASE=84, 
		DATABASE_MIRRORING=85, DBCC=86, DEALLOCATE=87, DECLARE=88, DEFAULT=89, 
		DEFAULT_DATABASE=90, DEFAULT_SCHEMA=91, DELETE=92, DENY=93, DESC=94, DIAGNOSTICS=95, 
		DIFFERENTIAL=96, DISK=97, DISTINCT=98, DISTRIBUTED=99, DOUBLE=100, DOUBLE_BACK_SLASH=101, 
		DOUBLE_FORWARD_SLASH=102, DROP=103, DTC_SUPPORT=104, DUMP=105, ELSE=106, 
		ENABLED=107, END=108, ENDPOINT=109, ERRLVL=110, ESCAPE=111, ERROR=112, 
		EVENT=113, EVENTDATA=114, EVENT_RETENTION_MODE=115, EXCEPT=116, EXECUTABLE_FILE=117, 
		EXECUTE=118, EXISTS=119, EXPIREDATE=120, EXIT=121, EXTENSION=122, EXTERNAL=123, 
		EXTERNAL_ACCESS=124, FAILOVER=125, FAILURECONDITIONLEVEL=126, FAN_IN=127, 
		FETCH=128, FILE=129, FILENAME=130, FILLFACTOR=131, FILE_SNAPSHOT=132, 
		FOR=133, FORCESEEK=134, FORCE_SERVICE_ALLOW_DATA_LOSS=135, FOREIGN=136, 
		FREETEXT=137, FREETEXTTABLE=138, FROM=139, FULL=140, FUNCTION=141, GET=142, 
		GOTO=143, GOVERNOR=144, GRANT=145, GROUP=146, HAVING=147, HASHED=148, 
		HEALTHCHECKTIMEOUT=149, IDENTITY=150, IDENTITYCOL=151, IDENTITY_INSERT=152, 
		IF=153, IIF=154, IN=155, INCLUDE=156, INCREMENT=157, INDEX=158, INFINITE=159, 
		INIT=160, INNER=161, INSERT=162, INSTEAD=163, INTERSECT=164, INTO=165, 
		IPV4_ADDR=166, IPV6_ADDR=167, IS=168, ISNULL=169, JOIN=170, KERBEROS=171, 
		KEY=172, KEY_PATH=173, KEY_STORE_PROVIDER_NAME=174, KILL=175, LANGUAGE=176, 
		LEFT=177, LIBRARY=178, LIFETIME=179, LIKE=180, LINENO=181, LINUX=182, 
		LISTENER_IP=183, LISTENER_PORT=184, LOAD=185, LOCAL_SERVICE_NAME=186, 
		LOG=187, MATCHED=188, MASTER=189, MAX_MEMORY=190, MAXTRANSFER=191, MAXVALUE=192, 
		MAX_DISPATCH_LATENCY=193, MAX_EVENT_SIZE=194, MAX_SIZE=195, MAX_OUTSTANDING_IO_PER_VOLUME=196, 
		MEDIADESCRIPTION=197, MEDIANAME=198, MEMBER=199, MEMORY_PARTITION_MODE=200, 
		MERGE=201, MESSAGE_FORWARDING=202, MESSAGE_FORWARD_SIZE=203, MINVALUE=204, 
		MIRROR=205, MUST_CHANGE=206, NATIONAL=207, NEGOTIATE=208, NOCHECK=209, 
		NOFORMAT=210, NOINIT=211, NONCLUSTERED=212, NONE=213, NOREWIND=214, NOSKIP=215, 
		NOUNLOAD=216, NO_CHECKSUM=217, NO_COMPRESSION=218, NO_EVENT_LOSS=219, 
		NOT=220, NOTIFICATION=221, NTLM=222, NULL=223, NULLIF=224, OF=225, OFF=226, 
		OFFSETS=227, OLD_PASSWORD=228, ON=229, ON_FAILURE=230, OPEN=231, OPENDATASOURCE=232, 
		OPENQUERY=233, OPENROWSET=234, OPENXML=235, OPTION=236, OR=237, ORDER=238, 
		OUTER=239, OVER=240, PAGE=241, PARAM_NODE=242, PARTIAL=243, PASSWORD=244, 
		PERCENT=245, PERMISSION_SET=246, PER_CPU=247, PER_DB=248, PER_NODE=249, 
		PIVOT=250, PLAN=251, PLATFORM=252, POLICY=253, PRECISION=254, PREDICATE=255, 
		PRIMARY=256, PRINT=257, PROC=258, PROCEDURE=259, PROCESS=260, PUBLIC=261, 
		PYTHON=262, R=263, RAISERROR=264, RAW=265, READ=266, READTEXT=267, READ_WRITE_FILEGROUPS=268, 
		RECONFIGURE=269, REFERENCES=270, REGENERATE=271, RELATED_CONVERSATION=272, 
		RELATED_CONVERSATION_GROUP=273, REPLICATION=274, REQUIRED=275, RESET=276, 
		RESTART=277, RESTORE=278, RESTRICT=279, RESUME=280, RETAINDAYS=281, RETURN=282, 
		RETURNS=283, REVERT=284, REVOKE=285, REWIND=286, RIGHT=287, ROLLBACK=288, 
		ROLE=289, ROWCOUNT=290, ROWGUIDCOL=291, RSA_512=292, RSA_1024=293, RSA_2048=294, 
		RSA_3072=295, RSA_4096=296, SAFETY=297, RULE=298, SAFE=299, SAVE=300, 
		SCHEDULER=301, SCHEMA=302, SCHEME=303, SECURITYAUDIT=304, SELECT=305, 
		SEMANTICKEYPHRASETABLE=306, SEMANTICSIMILARITYDETAILSTABLE=307, SEMANTICSIMILARITYTABLE=308, 
		SERVER=309, SERVICE=310, SERVICE_BROKER=311, SERVICE_NAME=312, SESSION=313, 
		SESSION_USER=314, SET=315, SETUSER=316, SHUTDOWN=317, SID=318, SKIP_KEYWORD=319, 
		SOFTNUMA=320, SOME=321, SOURCE=322, SPECIFICATION=323, SPLIT=324, SQLDUMPERFLAGS=325, 
		SQLDUMPERPATH=326, SQLDUMPERTIMEOUT=327, STATISTICS=328, STATE=329, STATS=330, 
		START=331, STARTED=332, STARTUP_STATE=333, STOP=334, STOPPED=335, STOP_ON_ERROR=336, 
		SUPPORTED=337, SYSTEM_USER=338, TABLE=339, TABLESAMPLE=340, TAPE=341, 
		TARGET=342, TCP=343, TEXTSIZE=344, THEN=345, TO=346, TOP=347, TRACK_CAUSALITY=348, 
		TRAN=349, TRANSACTION=350, TRANSFER=351, TRIGGER=352, TRUNCATE=353, TSEQUAL=354, 
		UNCHECKED=355, UNION=356, UNIQUE=357, UNLOCK=358, UNPIVOT=359, UNSAFE=360, 
		UPDATE=361, UPDATETEXT=362, RL=363, USE=364, USED=365, USER=366, VALUES=367, 
		VARYING=368, VERBOSELOGGING=369, VIEW=370, VISIBILITY=371, WAITFOR=372, 
		WHEN=373, WHERE=374, WHILE=375, WINDOWS=376, WITH=377, WITHIN=378, WITHOUT=379, 
		WITNESS=380, WRITETEXT=381, ABSOLUTE=382, ACCENT_SENSITIVITY=383, ACTION=384, 
		ACTIVATION=385, ACTIVE=386, ADDRESS=387, AES_128=388, AES_192=389, AES_256=390, 
		AFFINITY=391, AFTER=392, AGGREGATE=393, ALGORITHM=394, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=395, 
		ALLOW_SNAPSHOT_ISOLATION=396, ALLOWED=397, ANSI_NULL_DEFAULT=398, ANSI_NULLS=399, 
		ANSI_PADDING=400, ANSI_WARNINGS=401, APPLICATION_LOG=402, APPLY=403, ARITHABORT=404, 
		ASSEMBLY=405, AUDIT=406, AUDIT_GUID=407, AUTO=408, AUTO_CLEANUP=409, AUTO_CLOSE=410, 
		AUTO_CREATE_STATISTICS=411, AUTO_SHRINK=412, AUTO_UPDATE_STATISTICS=413, 
		AUTO_UPDATE_STATISTICS_ASYNC=414, AVAILABILITY=415, AVG=416, BACKUP_PRIORITY=417, 
		BEGIN_DIALOG=418, BIGINT=419, BINARY_BASE64=420, BINARY_CHECKSUM=421, 
		BINDING=422, BLOB_STORAGE=423, BROKER=424, BROKER_INSTANCE=425, BULK_LOGGED=426, 
		CALLER=427, CAP_CPU_PERCENT=428, CAST=429, CATALOG=430, CATCH=431, CHANGE_RETENTION=432, 
		CHANGE_TRACKING=433, CHECKSUM=434, CHECKSUM_AGG=435, CLEANUP=436, COLLECTION=437, 
		COLUMN_MASTER_KEY=438, COMMITTED=439, COMPATIBILITY_LEVEL=440, CONCAT=441, 
		CONCAT_NULL_YIELDS_NULL=442, CONTENT=443, CONTROL=444, COOKIE=445, COUNT=446, 
		COUNT_BIG=447, COUNTER=448, CPU=449, CREATE_NEW=450, CREATION_DISPOSITION=451, 
		CREDENTIAL=452, CRYPTOGRAPHIC=453, CURSOR_CLOSE_ON_COMMIT=454, CURSOR_DEFAULT=455, 
		DATA=456, DATE_CORRELATION_OPTIMIZATION=457, DATEADD=458, DATEDIFF=459, 
		DATENAME=460, DATEPART=461, DAYS=462, DB_CHAINING=463, DB_FAILOVER=464, 
		DECRYPTION=465, DEFAULT_DOUBLE_QUOTE=466, DEFAULT_FULLTEXT_LANGUAGE=467, 
		DEFAULT_LANGUAGE=468, DELAY=469, DELAYED_DURABILITY=470, DELETED=471, 
		DENSE_RANK=472, DEPENDENTS=473, DES=474, DESCRIPTION=475, DESX=476, DHCP=477, 
		DIALOG=478, DIRECTORY_NAME=479, DISABLE=480, DISABLE_BROKER=481, DISABLED=482, 
		DISK_DRIVE=483, DOCUMENT=484, DYNAMIC=485, ELEMENTS=486, EMERGENCY=487, 
		EMPTY=488, ENABLE=489, ENABLE_BROKER=490, ENCRYPTED_VALUE=491, ENCRYPTION=492, 
		ENDPOINT_URL=493, ERROR_BROKER_CONVERSATIONS=494, EXCLUSIVE=495, EXECUTABLE=496, 
		EXIST=497, EXPAND=498, EXPIRY_DATE=499, EXPLICIT=500, FAIL_OPERATION=501, 
		FAILOVER_MODE=502, FAILURE=503, FAILURE_CONDITION_LEVEL=504, FAST=505, 
		FAST_FORWARD=506, FILEGROUP=507, FILEGROWTH=508, FILEPATH=509, FILESTREAM=510, 
		FILTER=511, FIRST=512, FIRST_VALUE=513, FOLLOWING=514, FORCE=515, FORCE_FAILOVER_ALLOW_DATA_LOSS=516, 
		FORCED=517, FORMAT=518, FORWARD_ONLY=519, FULLSCAN=520, FULLTEXT=521, 
		GB=522, GETDATE=523, GETUTCDATE=524, GLOBAL=525, GO=526, GROUP_MAX_REQUESTS=527, 
		GROUPING=528, GROUPING_ID=529, HADR=530, HASH=531, HEALTH_CHECK_TIMEOUT=532, 
		HIGH=533, HONOR_BROKER_PRIORITY=534, HOURS=535, IDENTITY_VALUE=536, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=537, 
		IMMEDIATE=538, IMPERSONATE=539, IMPORTANCE=540, INCLUDE_NULL_VALUES=541, 
		INCREMENTAL=542, INITIATOR=543, INPUT=544, INSENSITIVE=545, INSERTED=546, 
		INT=547, IP=548, ISOLATION=549, JOB=550, JSON=551, KB=552, KEEP=553, KEEPFIXED=554, 
		KEY_SOURCE=555, KEYS=556, KEYSET=557, LAG=558, LAST=559, LAST_VALUE=560, 
		LEAD=561, LEVEL=562, LIST=563, LISTENER=564, LISTENER_URL=565, LOB_COMPACTION=566, 
		LOCAL=567, LOCATION=568, LOCK=569, LOCK_ESCALATION=570, LOGIN=571, LOOP=572, 
		LOW=573, MANUAL=574, MARK=575, MATERIALIZED=576, MAX=577, MAX_CPU_PERCENT=578, 
		MAX_DOP=579, MAX_FILES=580, MAX_IOPS_PER_VOLUME=581, MAX_MEMORY_PERCENT=582, 
		MAX_PROCESSES=583, MAX_QUEUE_READERS=584, MAX_ROLLOVER_FILES=585, MAXDOP=586, 
		MAXRECURSION=587, MAXSIZE=588, MB=589, MEDIUM=590, MEMORY_OPTIMIZED_DATA=591, 
		MESSAGE=592, MIN=593, MIN_ACTIVE_ROWVERSION=594, MIN_CPU_PERCENT=595, 
		MIN_IOPS_PER_VOLUME=596, MIN_MEMORY_PERCENT=597, MINUTES=598, MIRROR_ADDRESS=599, 
		MIXED_PAGE_ALLOCATION=600, MODE=601, MODIFY=602, MOVE=603, MULTI_USER=604, 
		NAME=605, NESTED_TRIGGERS=606, NEW_ACCOUNT=607, NEW_BROKER=608, NEW_PASSWORD=609, 
		NEXT=610, NO=611, NO_TRUNCATE=612, NO_WAIT=613, NOCOUNT=614, NODES=615, 
		NOEXPAND=616, NON_TRANSACTED_ACCESS=617, NORECOMPUTE=618, NORECOVERY=619, 
		NOWAIT=620, NTILE=621, NUMANODE=622, NUMBER=623, NUMERIC_ROUNDABORT=624, 
		OBJECT=625, OFFLINE=626, OFFSET=627, OLD_ACCOUNT=628, ONLINE=629, ONLY=630, 
		OPEN_EXISTING=631, OPTIMISTIC=632, OPTIMIZE=633, OUT=634, OUTPUT=635, 
		OVERRIDE=636, OWNER=637, PAGE_VERIFY=638, PARAMETERIZATION=639, PARTITION=640, 
		PARTITIONS=641, PARTNER=642, PATH=643, POISON_MESSAGE_HANDLING=644, POOL=645, 
		PORT=646, PRECEDING=647, PRIMARY_ROLE=648, PRIOR=649, PRIORITY=650, PRIORITY_LEVEL=651, 
		PRIVATE=652, PRIVATE_KEY=653, PRIVILEGES=654, PROCEDURE_NAME=655, PROPERTY=656, 
		PROVIDER=657, PROVIDER_KEY_NAME=658, QUERY=659, QUEUE=660, QUEUE_DELAY=661, 
		QUOTED_IDENTIFIER=662, RANGE=663, RANK=664, RC2=665, RC4=666, RC4_128=667, 
		READ_COMMITTED_SNAPSHOT=668, READ_ONLY=669, READ_ONLY_ROUTING_LIST=670, 
		READ_WRITE=671, READONLY=672, REBUILD=673, RECEIVE=674, RECOMPILE=675, 
		RECOVERY=676, RECURSIVE_TRIGGERS=677, RELATIVE=678, REMOTE=679, REMOTE_SERVICE_NAME=680, 
		REMOVE=681, REORGANIZE=682, REPEATABLE=683, REPLICA=684, REQUEST_MAX_CPU_TIME_SEC=685, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=686, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=687, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=688, RESERVE_DISK_SPACE=689, 
		RESOURCE=690, RESOURCE_MANAGER_LOCATION=691, RESTRICTED_USER=692, RETENTION=693, 
		ROBUST=694, ROOT=695, ROUTE=696, ROW=697, ROW_NUMBER=698, ROWGUID=699, 
		ROWS=700, SAMPLE=701, SCHEMABINDING=702, SCOPED=703, SCROLL=704, SCROLL_LOCKS=705, 
		SEARCH=706, SECONDARY=707, SECONDARY_ONLY=708, SECONDARY_ROLE=709, SECONDS=710, 
		SECRET=711, SECURITY=712, SECURITY_LOG=713, SEEDING_MODE=714, SELF=715, 
		SEMI_SENSITIVE=716, SEND=717, SENT=718, SEQUENCE=719, SERIALIZABLE=720, 
		SESSION_TIMEOUT=721, SETERROR=722, SHARE=723, SHOWPLAN=724, SIGNATURE=725, 
		SIMPLE=726, SINGLE_USER=727, SIZE=728, SMALLINT=729, SNAPSHOT=730, SPATIAL_WINDOW_MAX_CELLS=731, 
		STANDBY=732, START_DATE=733, STATIC=734, STATS_STREAM=735, STATUS=736, 
		STATUSONLY=737, STDEV=738, STDEVP=739, STOPLIST=740, STRING_AGG=741, STUFF=742, 
		SUBJECT=743, SUBSCRIPTION=744, SUM=745, SUSPEND=746, SYMMETRIC=747, SYNCHRONOUS_COMMIT=748, 
		SYNONYM=749, SYSTEM=750, TAKE=751, TARGET_RECOVERY_TIME=752, TB=753, TEXTIMAGE_ON=754, 
		THROW=755, TIES=756, TIME=757, TIMEOUT=758, TIMER=759, TINYINT=760, TORN_PAGE_DETECTION=761, 
		TRANSFORM_NOISE_WORDS=762, TRIPLE_DES=763, TRIPLE_DES_3KEY=764, TRUSTWORTHY=765, 
		TRY=766, TSQL=767, TWO_DIGIT_YEAR_CUTOFF=768, TYPE=769, TYPE_WARNING=770, 
		UNBOUNDED=771, UNCOMMITTED=772, UNKNOWN=773, UNLIMITED=774, UOW=775, USING=776, 
		VALID_XML=777, VALIDATION=778, VALUE=779, VAR=780, VARP=781, VIEW_METADATA=782, 
		VIEWS=783, WAIT=784, WELL_FORMED_XML=785, WITHOUT_ARRAY_WRAPPER=786, WORK=787, 
		WORKLOAD=788, XML=789, XMLDATA=790, XMLNAMESPACES=791, XMLSCHEMA=792, 
		XSINIL=793, DOLLAR_ACTION=794, MOCA_KEEP=795, MOCA_ONSTACK=796, MOCA_IGNORE=797, 
		SPACE=798, COMMENT=799, LINE_COMMENT=800, DOUBLE_QUOTE_ID=801, SINGLE_QUOTE=802, 
		SQUARE_BRACKET_ID=803, LOCAL_ID=804, MOCA_ENVIRONMENT_VARIABLE=805, MOCA_AT_MINUS_VARIABLE=806, 
		MOCA_AT_PLUS_VARIABLE=807, MOCA_AT_MOD_VARIABLE=808, DECIMAL=809, ID=810, 
		QUOTED_URL=811, QUOTED_HOST_AND_PORT=812, STRING=813, BINARY=814, FLOAT=815, 
		REAL=816, EQUAL=817, GREATER=818, LESS=819, EXCLAMATION=820, PLUS_ASSIGN=821, 
		MINUS_ASSIGN=822, MULT_ASSIGN=823, DIV_ASSIGN=824, MOD_ASSIGN=825, AND_ASSIGN=826, 
		XOR_ASSIGN=827, OR_ASSIGN=828, DOUBLE_BAR=829, DOT=830, UNDERLINE=831, 
		AT=832, SHARP=833, DOLLAR=834, LR_BRACKET=835, RR_BRACKET=836, COMMA=837, 
		SEMI=838, COLON=839, STAR=840, DIVIDE=841, MODULE=842, PLUS=843, MINUS=844, 
		BIT_NOT=845, BIT_OR=846, BIT_AND=847, BIT_XOR=848, IPV4_OCTECT=849, URL=850;
	public static final int
		RULE_moca_sql_script = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_drop_availability_group = 77, 
		RULE_alter_availability_group = 78, RULE_alter_availability_group_start = 79, 
		RULE_alter_availability_group_options = 80, RULE_create_or_alter_broker_priority = 81, 
		RULE_drop_broker_priority = 82, RULE_alter_certificate = 83, RULE_alter_column_encryption_key = 84, 
		RULE_create_column_encryption_key = 85, RULE_drop_certificate = 86, RULE_drop_column_encryption_key = 87, 
		RULE_drop_column_master_key = 88, RULE_drop_contract = 89, RULE_drop_credential = 90, 
		RULE_drop_cryptograhic_provider = 91, RULE_drop_database = 92, RULE_drop_database_audit_specification = 93, 
		RULE_drop_database_scoped_credential = 94, RULE_drop_default = 95, RULE_drop_endpoint = 96, 
		RULE_drop_external_data_source = 97, RULE_drop_external_file_format = 98, 
		RULE_drop_external_library = 99, RULE_drop_external_resource_pool = 100, 
		RULE_drop_external_table = 101, RULE_drop_event_notifications = 102, RULE_drop_event_session = 103, 
		RULE_drop_fulltext_catalog = 104, RULE_drop_fulltext_index = 105, RULE_drop_fulltext_stoplist = 106, 
		RULE_drop_login = 107, RULE_drop_master_key = 108, RULE_drop_message_type = 109, 
		RULE_drop_partition_function = 110, RULE_drop_partition_scheme = 111, 
		RULE_drop_queue = 112, RULE_drop_remote_service_binding = 113, RULE_drop_resource_pool = 114, 
		RULE_drop_db_role = 115, RULE_drop_route = 116, RULE_drop_rule = 117, 
		RULE_drop_schema = 118, RULE_drop_search_property_list = 119, RULE_drop_security_policy = 120, 
		RULE_drop_sequence = 121, RULE_drop_server_audit = 122, RULE_drop_server_audit_specification = 123, 
		RULE_drop_server_role = 124, RULE_drop_service = 125, RULE_drop_signature = 126, 
		RULE_drop_statistics_name_azure_dw_and_pdw = 127, RULE_drop_symmetric_key = 128, 
		RULE_drop_synonym = 129, RULE_drop_user = 130, RULE_drop_workload_group = 131, 
		RULE_drop_xml_schema_collection = 132, RULE_disable_trigger = 133, RULE_enable_trigger = 134, 
		RULE_lock_table = 135, RULE_truncate_table = 136, RULE_create_column_master_key = 137, 
		RULE_alter_credential = 138, RULE_create_credential = 139, RULE_alter_cryptographic_provider = 140, 
		RULE_create_cryptographic_provider = 141, RULE_create_event_notification = 142, 
		RULE_create_or_alter_event_session = 143, RULE_event_session_predicate_expression = 144, 
		RULE_event_session_predicate_factor = 145, RULE_event_session_predicate_leaf = 146, 
		RULE_alter_external_data_source = 147, RULE_alter_external_library = 148, 
		RULE_create_external_library = 149, RULE_alter_external_resource_pool = 150, 
		RULE_create_external_resource_pool = 151, RULE_alter_fulltext_catalog = 152, 
		RULE_create_fulltext_catalog = 153, RULE_alter_fulltext_stoplist = 154, 
		RULE_create_fulltext_stoplist = 155, RULE_alter_login_sql_server = 156, 
		RULE_create_login_sql_server = 157, RULE_alter_login_azure_sql = 158, 
		RULE_create_login_azure_sql = 159, RULE_alter_login_azure_sql_dw_and_pdw = 160, 
		RULE_create_login_pdw = 161, RULE_alter_master_key_sql_server = 162, RULE_create_master_key_sql_server = 163, 
		RULE_alter_master_key_azure_sql = 164, RULE_create_master_key_azure_sql = 165, 
		RULE_alter_message_type = 166, RULE_alter_partition_function = 167, RULE_alter_partition_scheme = 168, 
		RULE_alter_remote_service_binding = 169, RULE_create_remote_service_binding = 170, 
		RULE_create_resource_pool = 171, RULE_alter_resource_governor = 172, RULE_alter_db_role = 173, 
		RULE_create_db_role = 174, RULE_create_route = 175, RULE_create_rule = 176, 
		RULE_alter_schema_sql = 177, RULE_create_schema = 178, RULE_create_schema_azure_sql_dw_and_pdw = 179, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 180, RULE_create_search_property_list = 181, 
		RULE_create_security_policy = 182, RULE_alter_sequence = 183, RULE_create_sequence = 184, 
		RULE_alter_server_audit = 185, RULE_create_server_audit = 186, RULE_alter_server_audit_specification = 187, 
		RULE_create_server_audit_specification = 188, RULE_alter_server_configuration = 189, 
		RULE_alter_server_role = 190, RULE_create_server_role = 191, RULE_alter_server_role_pdw = 192, 
		RULE_alter_service = 193, RULE_create_service = 194, RULE_alter_service_master_key = 195, 
		RULE_alter_symmetric_key = 196, RULE_create_symmetric_key = 197, RULE_create_synonym = 198, 
		RULE_alter_user = 199, RULE_create_user = 200, RULE_create_user_azure_sql_dw = 201, 
		RULE_alter_user_azure_sql = 202, RULE_alter_workload_group = 203, RULE_create_workload_group = 204, 
		RULE_create_xml_schema_collection = 205, RULE_create_queue = 206, RULE_queue_settings = 207, 
		RULE_alter_queue = 208, RULE_queue_action = 209, RULE_queue_rebuild_options = 210, 
		RULE_create_contract = 211, RULE_conversation_statement = 212, RULE_message_statement = 213, 
		RULE_merge_statement = 214, RULE_merge_matched = 215, RULE_merge_not_matched = 216, 
		RULE_delete_statement = 217, RULE_delete_statement_from = 218, RULE_insert_statement = 219, 
		RULE_insert_statement_value = 220, RULE_receive_statement = 221, RULE_select_statement = 222, 
		RULE_time = 223, RULE_update_statement = 224, RULE_output_clause = 225, 
		RULE_output_dml_list_elem = 226, RULE_output_column_name = 227, RULE_create_database = 228, 
		RULE_create_index = 229, RULE_create_or_alter_procedure = 230, RULE_create_or_alter_trigger = 231, 
		RULE_create_or_alter_dml_trigger = 232, RULE_dml_trigger_option = 233, 
		RULE_dml_trigger_operation = 234, RULE_create_or_alter_ddl_trigger = 235, 
		RULE_ddl_trigger_operation = 236, RULE_create_or_alter_function = 237, 
		RULE_func_body_returns_select = 238, RULE_func_body_returns_table = 239, 
		RULE_func_body_returns_scalar = 240, RULE_procedure_param = 241, RULE_procedure_option = 242, 
		RULE_function_option = 243, RULE_create_statistics = 244, RULE_update_statistics = 245, 
		RULE_create_table = 246, RULE_table_options = 247, RULE_create_view = 248, 
		RULE_view_attribute = 249, RULE_alter_table = 250, RULE_alter_database = 251, 
		RULE_database_optionspec = 252, RULE_auto_option = 253, RULE_change_tracking_option = 254, 
		RULE_change_tracking_option_list = 255, RULE_containment_option = 256, 
		RULE_cursor_option = 257, RULE_alter_endpoint = 258, RULE_database_mirroring_option = 259, 
		RULE_mirroring_set_option = 260, RULE_mirroring_partner = 261, RULE_mirroring_witness = 262, 
		RULE_witness_partner_equal = 263, RULE_partner_option = 264, RULE_witness_option = 265, 
		RULE_witness_server = 266, RULE_partner_server = 267, RULE_mirroring_host_port_seperator = 268, 
		RULE_partner_server_tcp_prefix = 269, RULE_port_number = 270, RULE_host = 271, 
		RULE_date_correlation_optimization_option = 272, RULE_db_encryption_option = 273, 
		RULE_db_state_option = 274, RULE_db_update_option = 275, RULE_db_user_access_option = 276, 
		RULE_delayed_durability_option = 277, RULE_external_access_option = 278, 
		RULE_hadr_options = 279, RULE_mixed_page_allocation_option = 280, RULE_parameterization_option = 281, 
		RULE_recovery_option = 282, RULE_service_broker_option = 283, RULE_snapshot_option = 284, 
		RULE_sql_option = 285, RULE_target_recovery_time_option = 286, RULE_termination = 287, 
		RULE_drop_index = 288, RULE_drop_relational_or_xml_or_spatial_index = 289, 
		RULE_drop_backward_compatible_index = 290, RULE_drop_procedure = 291, 
		RULE_drop_trigger = 292, RULE_drop_dml_trigger = 293, RULE_drop_ddl_trigger = 294, 
		RULE_drop_function = 295, RULE_drop_statistics = 296, RULE_drop_table = 297, 
		RULE_drop_view = 298, RULE_create_type = 299, RULE_drop_type = 300, RULE_rowset_function_limited = 301, 
		RULE_openquery = 302, RULE_opendatasource = 303, RULE_declare_statement = 304, 
		RULE_cursor_statement = 305, RULE_backup_database = 306, RULE_backup_log = 307, 
		RULE_backup_certificate = 308, RULE_backup_master_key = 309, RULE_backup_service_master_key = 310, 
		RULE_kill_statement = 311, RULE_kill_process = 312, RULE_kill_query_notification = 313, 
		RULE_kill_stats_job = 314, RULE_execute_statement = 315, RULE_execute_body = 316, 
		RULE_execute_statement_arg = 317, RULE_execute_var_string = 318, RULE_security_statement = 319, 
		RULE_create_certificate = 320, RULE_existing_keys = 321, RULE_private_key_options = 322, 
		RULE_generate_new_keys = 323, RULE_date_options = 324, RULE_open_key = 325, 
		RULE_close_key = 326, RULE_create_key = 327, RULE_key_options = 328, RULE_algorithm = 329, 
		RULE_encryption_mechanism = 330, RULE_decryption_mechanism = 331, RULE_grant_permission = 332, 
		RULE_set_statement = 333, RULE_transaction_statement = 334, RULE_go_statement = 335, 
		RULE_use_statement = 336, RULE_setuser_statement = 337, RULE_reconfigure_statement = 338, 
		RULE_shutdown_statement = 339, RULE_dbcc_clause = 340, RULE_dbcc_options = 341, 
		RULE_execute_clause = 342, RULE_declare_local = 343, RULE_table_type_definition = 344, 
		RULE_xml_type_definition = 345, RULE_xml_schema_collection = 346, RULE_column_def_table_constraints = 347, 
		RULE_column_def_table_constraint = 348, RULE_column_definition = 349, 
		RULE_materialized_column_definition = 350, RULE_column_constraint = 351, 
		RULE_table_constraint = 352, RULE_on_delete = 353, RULE_on_update = 354, 
		RULE_index_options = 355, RULE_index_option = 356, RULE_declare_cursor = 357, 
		RULE_declare_set_cursor_common = 358, RULE_declare_set_cursor_common_partial = 359, 
		RULE_fetch_cursor = 360, RULE_set_special = 361, RULE_constant_LOCAL_ID = 362, 
		RULE_expression = 363, RULE_moca_at_variables = 364, RULE_moca_at_plus_variables = 365, 
		RULE_moca_at_variable = 366, RULE_moca_environment_variable = 367, RULE_moca_at_minus_variable = 368, 
		RULE_moca_at_plus_variable = 369, RULE_moca_at_mod_variable = 370, RULE_moca_at_star = 371, 
		RULE_moca_at_keep_directives = 372, RULE_moca_at_keep_directive = 373, 
		RULE_moca_at_minus_keep_directive = 374, RULE_moca_at_plus_keep_directive = 375, 
		RULE_moca_at_mod_keep_directive = 376, RULE_moca_at_onstack_directive = 377, 
		RULE_moca_at_ignore_directive = 378, RULE_moca_at_plus_oldvar_directives = 379, 
		RULE_moca_at_plus_oldvar_directive = 380, RULE_moca_at_mod_oldvar_directive = 381, 
		RULE_moca_at_type_cast_variable = 382, RULE_moca_at_plus_type_cast_variable = 383, 
		RULE_moca_at_plus_database_qualifier_variable = 384, RULE_moca_at_mod_database_qualifier_variable = 385, 
		RULE_moca_integration_variable = 386, RULE_primitive_expression = 387, 
		RULE_case_expression = 388, RULE_unary_operator_expression = 389, RULE_bracket_expression = 390, 
		RULE_constant_expression = 391, RULE_subquery = 392, RULE_with_expression = 393, 
		RULE_common_table_expression = 394, RULE_update_elem = 395, RULE_search_condition_list = 396, 
		RULE_search_condition = 397, RULE_search_condition_and = 398, RULE_search_condition_not = 399, 
		RULE_predicate = 400, RULE_query_expression = 401, RULE_sql_union = 402, 
		RULE_query_specification = 403, RULE_top_clause = 404, RULE_top_percent = 405, 
		RULE_top_count = 406, RULE_order_by_clause = 407, RULE_for_clause = 408, 
		RULE_xml_common_directives = 409, RULE_order_by_expression = 410, RULE_group_by_item = 411, 
		RULE_option_clause = 412, RULE_option = 413, RULE_optimize_for_arg = 414, 
		RULE_select_list = 415, RULE_udt_method_arguments = 416, RULE_asterisk = 417, 
		RULE_column_elem = 418, RULE_udt_elem = 419, RULE_expression_elem = 420, 
		RULE_select_list_elem = 421, RULE_table_sources = 422, RULE_table_source = 423, 
		RULE_table_source_item_joined = 424, RULE_table_source_item = 425, RULE_open_xml = 426, 
		RULE_schema_declaration = 427, RULE_column_declaration = 428, RULE_change_table = 429, 
		RULE_join_part = 430, RULE_pivot_clause = 431, RULE_unpivot_clause = 432, 
		RULE_full_column_name_list = 433, RULE_table_name_with_hint = 434, RULE_rowset_function = 435, 
		RULE_bulk_option = 436, RULE_derived_table = 437, RULE_function_call = 438, 
		RULE_xml_data_type_methods = 439, RULE_value_method = 440, RULE_query_method = 441, 
		RULE_exist_method = 442, RULE_modify_method = 443, RULE_nodes_method = 444, 
		RULE_switch_section = 445, RULE_switch_search_condition_section = 446, 
		RULE_as_column_alias = 447, RULE_as_table_alias = 448, RULE_table_alias = 449, 
		RULE_with_table_hints = 450, RULE_insert_with_table_hints = 451, RULE_table_hint = 452, 
		RULE_index_value = 453, RULE_column_alias_list = 454, RULE_column_alias = 455, 
		RULE_table_value_constructor = 456, RULE_expression_list = 457, RULE_ranking_windowed_function = 458, 
		RULE_aggregate_windowed_function = 459, RULE_analytic_windowed_function = 460, 
		RULE_all_distinct_expression = 461, RULE_over_clause = 462, RULE_row_or_range_clause = 463, 
		RULE_window_frame_extent = 464, RULE_window_frame_bound = 465, RULE_window_frame_preceding = 466, 
		RULE_window_frame_following = 467, RULE_create_database_option = 468, 
		RULE_database_filestream_option = 469, RULE_database_file_spec = 470, 
		RULE_file_group = 471, RULE_file_spec = 472, RULE_entity_name = 473, RULE_entity_name_for_azure_dw = 474, 
		RULE_entity_name_for_parallel_dw = 475, RULE_full_table_name = 476, RULE_table_name = 477, 
		RULE_simple_name = 478, RULE_func_proc_name_schema = 479, RULE_func_proc_name_database_schema = 480, 
		RULE_func_proc_name_server_database_schema = 481, RULE_ddl_object = 482, 
		RULE_full_column_name = 483, RULE_column_name_list_with_order = 484, RULE_column_name_list = 485, 
		RULE_cursor_name = 486, RULE_on_off = 487, RULE_clustered = 488, RULE_null_notnull = 489, 
		RULE_null_or_default = 490, RULE_scalar_function_name = 491, RULE_begin_conversation_timer = 492, 
		RULE_begin_conversation_dialog = 493, RULE_contract_name = 494, RULE_service_name = 495, 
		RULE_end_conversation = 496, RULE_waitfor_conversation = 497, RULE_get_conversation = 498, 
		RULE_queue_id = 499, RULE_send_conversation = 500, RULE_data_type = 501, 
		RULE_default_value = 502, RULE_constant = 503, RULE_sign = 504, RULE_id = 505, 
		RULE_simple_id = 506, RULE_comparison_operator = 507, RULE_assignment_operator = 508, 
		RULE_file_size = 509;
	public static final String[] ruleNames = {
		"moca_sql_script", "batch", "sql_clauses", "sql_clause", "dml_clause", 
		"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
		"break_statement", "continue_statement", "goto_statement", "return_statement", 
		"if_statement", "throw_statement", "throw_error_number", "throw_message", 
		"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
		"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
		"alter_application_role", "create_application_role", "drop_aggregate", 
		"drop_application_role", "alter_assembly", "alter_assembly_start", "alter_assembly_clause", 
		"alter_assembly_from_clause", "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
		"alter_assembly_drop_multiple_files", "alter_assembly_drop", "alter_assembly_add_clause", 
		"alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
		"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
		"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
		"assembly_option", "network_file_share", "network_computer", "network_file_start", 
		"file_path", "file_directory_path_separator", "local_file", "local_drive", 
		"multiple_local_files", "multiple_local_file_start", "create_assembly", 
		"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
		"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
		"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
		"drop_external_table", "drop_event_notifications", "drop_event_session", 
		"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
		"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
		"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
		"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
		"drop_search_property_list", "drop_security_policy", "drop_sequence", 
		"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
		"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
		"create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
		"alter_external_library", "create_external_library", "alter_external_resource_pool", 
		"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
		"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
		"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
		"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
		"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
		"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
		"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
		"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_queue", 
		"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
		"create_contract", "conversation_statement", "message_statement", "merge_statement", 
		"merge_matched", "merge_not_matched", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "receive_statement", "select_statement", 
		"time", "update_statement", "output_clause", "output_dml_list_elem", "output_column_name", 
		"create_database", "create_index", "create_or_alter_procedure", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "create_table", "table_options", "create_view", "view_attribute", 
		"alter_table", "alter_database", "database_optionspec", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
		"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
		"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
		"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "hadr_options", 
		"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
		"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
		"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
		"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
		"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
		"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
		"opendatasource", "declare_statement", "cursor_statement", "backup_database", 
		"backup_log", "backup_certificate", "backup_master_key", "backup_service_master_key", 
		"kill_statement", "kill_process", "kill_query_notification", "kill_stats_job", 
		"execute_statement", "execute_body", "execute_statement_arg", "execute_var_string", 
		"security_statement", "create_certificate", "existing_keys", "private_key_options", 
		"generate_new_keys", "date_options", "open_key", "close_key", "create_key", 
		"key_options", "algorithm", "encryption_mechanism", "decryption_mechanism", 
		"grant_permission", "set_statement", "transaction_statement", "go_statement", 
		"use_statement", "setuser_statement", "reconfigure_statement", "shutdown_statement", 
		"dbcc_clause", "dbcc_options", "execute_clause", "declare_local", "table_type_definition", 
		"xml_type_definition", "xml_schema_collection", "column_def_table_constraints", 
		"column_def_table_constraint", "column_definition", "materialized_column_definition", 
		"column_constraint", "table_constraint", "on_delete", "on_update", "index_options", 
		"index_option", "declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial", 
		"fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", "moca_at_variables", 
		"moca_at_plus_variables", "moca_at_variable", "moca_environment_variable", 
		"moca_at_minus_variable", "moca_at_plus_variable", "moca_at_mod_variable", 
		"moca_at_star", "moca_at_keep_directives", "moca_at_keep_directive", "moca_at_minus_keep_directive", 
		"moca_at_plus_keep_directive", "moca_at_mod_keep_directive", "moca_at_onstack_directive", 
		"moca_at_ignore_directive", "moca_at_plus_oldvar_directives", "moca_at_plus_oldvar_directive", 
		"moca_at_mod_oldvar_directive", "moca_at_type_cast_variable", "moca_at_plus_type_cast_variable", 
		"moca_at_plus_database_qualifier_variable", "moca_at_mod_database_qualifier_variable", 
		"moca_integration_variable", "primitive_expression", "case_expression", 
		"unary_operator_expression", "bracket_expression", "constant_expression", 
		"subquery", "with_expression", "common_table_expression", "update_elem", 
		"search_condition_list", "search_condition", "search_condition_and", "search_condition_not", 
		"predicate", "query_expression", "sql_union", "query_specification", "top_clause", 
		"top_percent", "top_count", "order_by_clause", "for_clause", "xml_common_directives", 
		"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg", 
		"select_list", "udt_method_arguments", "asterisk", "column_elem", "udt_elem", 
		"expression_elem", "select_list_elem", "table_sources", "table_source", 
		"table_source_item_joined", "table_source_item", "open_xml", "schema_declaration", 
		"column_declaration", "change_table", "join_part", "pivot_clause", "unpivot_clause", 
		"full_column_name_list", "table_name_with_hint", "rowset_function", "bulk_option", 
		"derived_table", "function_call", "xml_data_type_methods", "value_method", 
		"query_method", "exist_method", "modify_method", "nodes_method", "switch_section", 
		"switch_search_condition_section", "as_column_alias", "as_table_alias", 
		"table_alias", "with_table_hints", "insert_with_table_hints", "table_hint", 
		"index_value", "column_alias_list", "column_alias", "table_value_constructor", 
		"expression_list", "ranking_windowed_function", "aggregate_windowed_function", 
		"analytic_windowed_function", "all_distinct_expression", "over_clause", 
		"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding", 
		"window_frame_following", "create_database_option", "database_filestream_option", 
		"database_file_spec", "file_group", "file_spec", "entity_name", "entity_name_for_azure_dw", 
		"entity_name_for_parallel_dw", "full_table_name", "table_name", "simple_name", 
		"func_proc_name_schema", "func_proc_name_database_schema", "func_proc_name_server_database_schema", 
		"ddl_object", "full_column_name", "column_name_list_with_order", "column_name_list", 
		"cursor_name", "on_off", "clustered", "null_notnull", "null_or_default", 
		"scalar_function_name", "begin_conversation_timer", "begin_conversation_dialog", 
		"contract_name", "service_name", "end_conversation", "waitfor_conversation", 
		"get_conversation", "queue_id", "send_conversation", "data_type", "default_value", 
		"constant", "sign", "id", "simple_id", "comparison_operator", "assignment_operator", 
		"file_size"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "':i_'", "':I_'", "'ABSENT'", "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", 
		"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", 
		"'AND'", "'ANONYMOUS'", "'ANY'", "'APPEND'", "'APPLICATION'", "'AS'", 
		"'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", "'AUTHORIZATION'", "'AUTHENTICATION'", 
		"'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", "'AVAILABILITY_MODE'", 
		"'\\'", "'BACKUP'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", 
		"'BLOCKING_HIERARCHY'", "'BREAK'", "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", 
		"'BULK'", "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", "'CASE'", "'CERTIFICATE'", 
		"'CHANGETABLE'", "'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", 
		"'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", "'CLOSE'", "'CLUSTER'", 
		"'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMPRESSION'", 
		"'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", "'CONSTRAINT'", "'CONTAINMENT'", 
		"'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", "'CONTINUE'", "'CONTINUE_AFTER_ERROR'", 
		"'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", null, "'COPY_ONLY'", 
		"'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'CYCLE'", "'DATA_COMPRESSION'", 
		"'DATA_SOURCE'", "'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", 
		"'DECLARE'", "'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DELETE'", 
		"'DENY'", "'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", "'DISK'", "'DISTINCT'", 
		"'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", 
		"'DUMP'", "'ELSE'", "'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", "'ESCAPE'", 
		"'ERROR'", "'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXECUTABLE_FILE'", 
		null, "'EXISTS'", "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
		"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
		"'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", "'FILE_SNAPSHOT'", 
		"'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GET'", 
		"'GOTO'", "'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", 
		"'HEALTHCHECKTIMEOUT'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
		"'IF'", "'IIF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INFINITE'", 
		"'INIT'", "'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", 
		null, null, "'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", 
		"'KEY_STORE_PROVIDER_NAME'", "'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", 
		"'LIFETIME'", "'LIKE'", "'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
		"'LOAD'", "'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
		"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", 
		"'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
		"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MERGE'", "'MESSAGE_FORWARDING'", 
		"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", 
		"'NEGOTIATE'", "'NOCHECK'", "'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", 
		"'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", 
		"'NO_EVENT_LOSS'", "'NOT'", "'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", 
		"'OF'", "'OFF'", "'OFFSETS'", "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", 
		"'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", 
		"'OPTION'", "'OR'", "'ORDER'", "'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", 
		"'PARTIAL'", "'PASSWORD'", "'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", 
		"'PER_DB'", "'PER_NODE'", "'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", 
		"'PRECISION'", "'PREDICATE'", "'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", 
		"'PROCESS'", "'PUBLIC'", "'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", 
		"'READTEXT'", "'READ_WRITE_FILEGROUPS'", "'RECONFIGURE'", "'REFERENCES'", 
		"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
		"'REPLICATION'", "'REQUIRED'", "'RESET'", "'RESTART'", "'RESTORE'", "'RESTRICT'", 
		"'RESUME'", "'RETAINDAYS'", "'RETURN'", "'RETURNS'", "'REVERT'", "'REVOKE'", 
		"'REWIND'", "'RIGHT'", "'ROLLBACK'", "'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", 
		"'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", "'RSA_4096'", "'SAFETY'", 
		"'RULE'", "'SAFE'", "'SAVE'", "'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITYAUDIT'", 
		"'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
		"'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", "'SETUSER'", 
		"'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", "'SOME'", "'SOURCE'", "'SPECIFICATION'", 
		"'SPLIT'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
		"'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
		"'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", 
		"'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", 
		"'UNIQUE'", "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", 
		"'VIEW'", "'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
		"'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", 
		"'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
		"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", 
		"'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
		"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
		"'CALLER'", "'CAP_CPU_PERCENT'", null, "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
		"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
		"'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'DATA'", "'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", "'DATEDIFF'", 
		"'DATENAME'", "'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", 
		"'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", 
		"'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", "'DEPENDENTS'", 
		"'DES'", "'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", 
		"'DISABLE'", "'DISABLE_BROKER'", "'DISABLED'", null, "'DOCUMENT'", "'DYNAMIC'", 
		"'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'", 
		"'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", 
		"'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", 
		"'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
		"'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILEPATH'", 
		"'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", 
		"'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCED'", "'FORMAT'", 
		"'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", 
		"'GLOBAL'", "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", "'GROUPING_ID'", 
		"'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
		"'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JOB'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", "'NODES'", 
		"'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OVERRIDE'", "'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", 
		"'PARTITIONS'", "'PARTNER'", "'PATH'", "'POISON_MESSAGE_HANDLING'", "'POOL'", 
		"'PORT'", "'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
		"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
		"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
		"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
		"'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
		"'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", "'REQUEST_MAX_CPU_TIME_SEC'", 
		"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURITY'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", 
		"'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SERIALIZABLE'", 
		"'SESSION_TIMEOUT'", "'SETERROR'", "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", 
		"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
		"'STANDBY'", "'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", 
		"'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOPLIST'", "'STRING_AGG'", "'STUFF'", 
		"'SUBJECT'", "'SUBSCRIPTION'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", 
		"'SYNONYM'", "'SYSTEM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", "'TB'", "'TEXTIMAGE_ON'", 
		"'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", "'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", 
		"'TRANSFORM_NOISE_WORDS'", "'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", 
		"'TRY'", "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", 
		"'UNBOUNDED'", "'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'UOW'", "'USING'", 
		"'VALID_XML'", "'VALIDATION'", "'VALUE'", "'VAR'", "'VARP'", "'VIEW_METADATA'", 
		"'VIEWS'", "'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", "'WORK'", 
		"'WORKLOAD'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", 
		"'XSINIL'", "'$ACTION'", "'keep'", "'onstack'", "'ignore'", null, null, 
		null, null, "'''", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", 
		"'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", 
		"ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", 
		"ANONYMOUS", "ANY", "APPEND", "APPLICATION", "AS", "ASC", "ASYMMETRIC", 
		"ASYNCHRONOUS_COMMIT", "AUTHORIZATION", "AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", 
		"AUTOMATIC", "AVAILABILITY_MODE", "BACKSLASH", "BACKUP", "BEFORE", "BEGIN", 
		"BETWEEN", "BLOCK", "BLOCKSIZE", "BLOCKING_HIERARCHY", "BREAK", "BROWSE", 
		"BUFFER", "BUFFERCOUNT", "BULK", "BY", "CACHE", "CALLED", "CASCADE", "CASE", 
		"CERTIFICATE", "CHANGETABLE", "CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", 
		"CHECK_EXPIRATION", "CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", 
		"COALESCE", "COLLATE", "COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", 
		"CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", 
		"CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", 
		"COPY_ONLY", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE", "DATA_COMPRESSION", 
		"DATA_SOURCE", "DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", 
		"DECLARE", "DEFAULT", "DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", 
		"DENY", "DESC", "DIAGNOSTICS", "DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", 
		"DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", 
		"DUMP", "ELSE", "ENABLED", "END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", 
		"EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", 
		"EXECUTE", "EXISTS", "EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", 
		"FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", 
		"FILLFACTOR", "FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
		"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
		"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IIF", "IN", "INCLUDE", 
		"INCREMENT", "INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", 
		"INTERSECT", "INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", 
		"KERBEROS", "KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", 
		"LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", 
		"LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", 
		"MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", 
		"MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", 
		"MEMBER", "MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", "NOCHECK", 
		"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
		"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
		"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
		"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", "R", "RAISERROR", 
		"RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", "RECONFIGURE", "REFERENCES", 
		"REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REPLICATION", 
		"REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAINDAYS", 
		"RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT", "ROLLBACK", 
		"ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
		"RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", "SCHEMA", "SCHEME", 
		"SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SERVER", "SERVICE", "SERVICE_BROKER", "SERVICE_NAME", 
		"SESSION", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", 
		"SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", "SPLIT", "SQLDUMPERFLAGS", 
		"SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATISTICS", "STATE", "STATS", "START", 
		"STARTED", "STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", "SUPPORTED", 
		"SYSTEM_USER", "TABLE", "TABLESAMPLE", "TAPE", "TARGET", "TCP", "TEXTSIZE", 
		"THEN", "TO", "TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER", 
		"TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", "UNIQUE", "UNLOCK", 
		"UNPIVOT", "UNSAFE", "UPDATE", "UPDATETEXT", "RL", "USE", "USED", "USER", 
		"VALUES", "VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", "WAITFOR", 
		"WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITNESS", 
		"WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", 
		"ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", "AFTER", 
		"AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_SNAPSHOT_ISOLATION", 
		"ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", 
		"APPLICATION_LOG", "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
		"AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
		"AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", "AVAILABILITY", 
		"AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", 
		"BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", 
		"CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", "CHANGE_RETENTION", 
		"CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", 
		"COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
		"CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "COUNTER", "CPU", 
		"CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", 
		"CURSOR_DEFAULT", "DATA", "DATE_CORRELATION_OPTIMIZATION", "DATEADD", 
		"DATEDIFF", "DATENAME", "DATEPART", "DAYS", "DB_CHAINING", "DB_FAILOVER", 
		"DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", 
		"DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", "DEPENDENTS", 
		"DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", "DISABLE", 
		"DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", "ELEMENTS", 
		"EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", "ENCRYPTION", 
		"ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", "EXECUTABLE", 
		"EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", "FAILOVER_MODE", 
		"FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", "FILEGROUP", 
		"FILEGROWTH", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", "FIRST_VALUE", 
		"FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORCED", "FORMAT", 
		"FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", "GETUTCDATE", 
		"GLOBAL", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", "HADR", 
		"HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", "HOURS", 
		"IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JOB", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", "NOEXPAND", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOWAIT", "NTILE", 
		"NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
		"OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", 
		"OUT", "OUTPUT", "OVERRIDE", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
		"PARTITION", "PARTITIONS", "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", 
		"POOL", "PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
		"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
		"PROVIDER", "PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", "RECEIVE", 
		"RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEMI_SENSITIVE", "SEND", "SENT", "SEQUENCE", "SERIALIZABLE", 
		"SESSION_TIMEOUT", "SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", 
		"SINGLE_USER", "SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", 
		"STANDBY", "START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STATUSONLY", 
		"STDEV", "STDEVP", "STOPLIST", "STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIPTION", 
		"SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", 
		"TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", "TIES", 
		"TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
		"TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", 
		"TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", 
		"UOW", "USING", "VALID_XML", "VALIDATION", "VALUE", "VAR", "VARP", "VIEW_METADATA", 
		"VIEWS", "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", 
		"XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", 
		"MOCA_KEEP", "MOCA_ONSTACK", "MOCA_IGNORE", "SPACE", "COMMENT", "LINE_COMMENT", 
		"DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "MOCA_ENVIRONMENT_VARIABLE", 
		"MOCA_AT_MINUS_VARIABLE", "MOCA_AT_PLUS_VARIABLE", "MOCA_AT_MOD_VARIABLE", 
		"DECIMAL", "ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", 
		"FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", 
		"MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
		"XOR_ASSIGN", "OR_ASSIGN", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", 
		"DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
		"IPV4_OCTECT", "URL"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MocaSql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MocaSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Moca_sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MocaSqlParser.EOF, 0); }
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Moca_sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_sql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_sql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_sql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_sql_scriptContext moca_sql_script() throws RecognitionException {
		Moca_sql_scriptContext _localctx = new Moca_sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_moca_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << ALTER) | (1L << BACKUP) | (1L << BEGIN) | (1L << BLOCKING_HIERARCHY) | (1L << BREAK) | (1L << CALLED) | (1L << CASE) | (1L << CLOSE) | (1L << COALESCE) | (1L << COMMIT))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CREATE - 66)) | (1L << (CURRENT_TIMESTAMP - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (DATA_COMPRESSION - 66)) | (1L << (DBCC - 66)) | (1L << (DEALLOCATE - 66)) | (1L << (DECLARE - 66)) | (1L << (DEFAULT - 66)) | (1L << (DELETE - 66)) | (1L << (DROP - 66)) | (1L << (END - 66)) | (1L << (EVENTDATA - 66)) | (1L << (EXECUTE - 66)) | (1L << (EXPIREDATE - 66)) | (1L << (FETCH - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (FILENAME - 130)) | (1L << (FILLFACTOR - 130)) | (1L << (FORCESEEK - 130)) | (1L << (GET - 130)) | (1L << (GOTO - 130)) | (1L << (GRANT - 130)) | (1L << (IDENTITY - 130)) | (1L << (IF - 130)) | (1L << (IIF - 130)) | (1L << (INIT - 130)) | (1L << (INSERT - 130)) | (1L << (ISNULL - 130)) | (1L << (KEY - 130)) | (1L << (KILL - 130)) | (1L << (LEFT - 130)) | (1L << (MASTER - 130)) | (1L << (MAX_MEMORY - 130)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (MERGE - 201)) | (1L << (NULL - 201)) | (1L << (NULLIF - 201)) | (1L << (OFFSETS - 201)) | (1L << (OPEN - 201)) | (1L << (OVER - 201)) | (1L << (PAGE - 201)) | (1L << (POLICY - 201)) | (1L << (PRECISION - 201)) | (1L << (PRINT - 201)) | (1L << (PUBLIC - 201)) | (1L << (R - 201)) | (1L << (RAISERROR - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (RAW - 265)) | (1L << (RECONFIGURE - 265)) | (1L << (RETURN - 265)) | (1L << (RETURNS - 265)) | (1L << (REVERT - 265)) | (1L << (RIGHT - 265)) | (1L << (ROLLBACK - 265)) | (1L << (ROLE - 265)) | (1L << (ROWCOUNT - 265)) | (1L << (SAFETY - 265)) | (1L << (RULE - 265)) | (1L << (SAVE - 265)) | (1L << (SELECT - 265)) | (1L << (SERVER - 265)) | (1L << (SESSION_USER - 265)) | (1L << (SET - 265)) | (1L << (SETUSER - 265)) | (1L << (SHUTDOWN - 265)) | (1L << (SID - 265)) | (1L << (SOURCE - 265)) | (1L << (SPLIT - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (STATE - 329)) | (1L << (START - 329)) | (1L << (STOP - 329)) | (1L << (SYSTEM_USER - 329)) | (1L << (TARGET - 329)) | (1L << (TRAN - 329)) | (1L << (TRUNCATE - 329)) | (1L << (UPDATE - 329)) | (1L << (USE - 329)) | (1L << (USER - 329)) | (1L << (WAITFOR - 329)) | (1L << (WHILE - 329)) | (1L << (WITH - 329)) | (1L << (ABSOLUTE - 329)) | (1L << (ACCENT_SENSITIVITY - 329)) | (1L << (ACTION - 329)) | (1L << (ACTIVATION - 329)) | (1L << (ACTIVE - 329)) | (1L << (ADDRESS - 329)) | (1L << (AES_128 - 329)) | (1L << (AES_192 - 329)) | (1L << (AES_256 - 329)) | (1L << (AFFINITY - 329)) | (1L << (AFTER - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (AGGREGATE - 393)) | (1L << (ALGORITHM - 393)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 393)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 393)) | (1L << (ALLOWED - 393)) | (1L << (ANSI_NULL_DEFAULT - 393)) | (1L << (ANSI_NULLS - 393)) | (1L << (ANSI_PADDING - 393)) | (1L << (ANSI_WARNINGS - 393)) | (1L << (APPLICATION_LOG - 393)) | (1L << (APPLY - 393)) | (1L << (ARITHABORT - 393)) | (1L << (ASSEMBLY - 393)) | (1L << (AUDIT - 393)) | (1L << (AUDIT_GUID - 393)) | (1L << (AUTO - 393)) | (1L << (AUTO_CLEANUP - 393)) | (1L << (AUTO_CLOSE - 393)) | (1L << (AUTO_CREATE_STATISTICS - 393)) | (1L << (AUTO_SHRINK - 393)) | (1L << (AUTO_UPDATE_STATISTICS - 393)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 393)) | (1L << (AVAILABILITY - 393)) | (1L << (AVG - 393)) | (1L << (BACKUP_PRIORITY - 393)) | (1L << (BEGIN_DIALOG - 393)) | (1L << (BIGINT - 393)) | (1L << (BINARY_BASE64 - 393)) | (1L << (BINARY_CHECKSUM - 393)) | (1L << (BINDING - 393)) | (1L << (BLOB_STORAGE - 393)) | (1L << (BROKER - 393)) | (1L << (BROKER_INSTANCE - 393)) | (1L << (BULK_LOGGED - 393)) | (1L << (CALLER - 393)) | (1L << (CAP_CPU_PERCENT - 393)) | (1L << (CAST - 393)) | (1L << (CATALOG - 393)) | (1L << (CATCH - 393)) | (1L << (CHANGE_RETENTION - 393)) | (1L << (CHANGE_TRACKING - 393)) | (1L << (CHECKSUM - 393)) | (1L << (CHECKSUM_AGG - 393)) | (1L << (CLEANUP - 393)) | (1L << (COLLECTION - 393)) | (1L << (COLUMN_MASTER_KEY - 393)) | (1L << (COMMITTED - 393)) | (1L << (COMPATIBILITY_LEVEL - 393)) | (1L << (CONCAT - 393)) | (1L << (CONCAT_NULL_YIELDS_NULL - 393)) | (1L << (CONTENT - 393)) | (1L << (CONTROL - 393)) | (1L << (COOKIE - 393)) | (1L << (COUNT - 393)) | (1L << (COUNT_BIG - 393)) | (1L << (COUNTER - 393)) | (1L << (CPU - 393)) | (1L << (CREATE_NEW - 393)) | (1L << (CREATION_DISPOSITION - 393)) | (1L << (CREDENTIAL - 393)) | (1L << (CRYPTOGRAPHIC - 393)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 393)) | (1L << (CURSOR_DEFAULT - 393)) | (1L << (DATA - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (DATE_CORRELATION_OPTIMIZATION - 457)) | (1L << (DATEADD - 457)) | (1L << (DATEDIFF - 457)) | (1L << (DATENAME - 457)) | (1L << (DATEPART - 457)) | (1L << (DAYS - 457)) | (1L << (DB_CHAINING - 457)) | (1L << (DB_FAILOVER - 457)) | (1L << (DECRYPTION - 457)) | (1L << (DEFAULT_DOUBLE_QUOTE - 457)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 457)) | (1L << (DEFAULT_LANGUAGE - 457)) | (1L << (DELAY - 457)) | (1L << (DELAYED_DURABILITY - 457)) | (1L << (DELETED - 457)) | (1L << (DENSE_RANK - 457)) | (1L << (DEPENDENTS - 457)) | (1L << (DES - 457)) | (1L << (DESCRIPTION - 457)) | (1L << (DESX - 457)) | (1L << (DHCP - 457)) | (1L << (DIALOG - 457)) | (1L << (DIRECTORY_NAME - 457)) | (1L << (DISABLE - 457)) | (1L << (DISABLE_BROKER - 457)) | (1L << (DISABLED - 457)) | (1L << (DISK_DRIVE - 457)) | (1L << (DOCUMENT - 457)) | (1L << (DYNAMIC - 457)) | (1L << (EMERGENCY - 457)) | (1L << (EMPTY - 457)) | (1L << (ENABLE - 457)) | (1L << (ENABLE_BROKER - 457)) | (1L << (ENCRYPTED_VALUE - 457)) | (1L << (ENCRYPTION - 457)) | (1L << (ENDPOINT_URL - 457)) | (1L << (ERROR_BROKER_CONVERSATIONS - 457)) | (1L << (EXCLUSIVE - 457)) | (1L << (EXECUTABLE - 457)) | (1L << (EXIST - 457)) | (1L << (EXPAND - 457)) | (1L << (EXPIRY_DATE - 457)) | (1L << (EXPLICIT - 457)) | (1L << (FAIL_OPERATION - 457)) | (1L << (FAILOVER_MODE - 457)) | (1L << (FAILURE - 457)) | (1L << (FAILURE_CONDITION_LEVEL - 457)) | (1L << (FAST - 457)) | (1L << (FAST_FORWARD - 457)) | (1L << (FILEGROUP - 457)) | (1L << (FILEGROWTH - 457)) | (1L << (FILEPATH - 457)) | (1L << (FILESTREAM - 457)) | (1L << (FILTER - 457)) | (1L << (FIRST - 457)) | (1L << (FIRST_VALUE - 457)) | (1L << (FOLLOWING - 457)) | (1L << (FORCE - 457)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 457)) | (1L << (FORCED - 457)) | (1L << (FORMAT - 457)) | (1L << (FORWARD_ONLY - 457)) | (1L << (FULLSCAN - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (FULLTEXT - 521)) | (1L << (GB - 521)) | (1L << (GETDATE - 521)) | (1L << (GETUTCDATE - 521)) | (1L << (GLOBAL - 521)) | (1L << (GO - 521)) | (1L << (GROUP_MAX_REQUESTS - 521)) | (1L << (GROUPING - 521)) | (1L << (GROUPING_ID - 521)) | (1L << (HADR - 521)) | (1L << (HASH - 521)) | (1L << (HEALTH_CHECK_TIMEOUT - 521)) | (1L << (HIGH - 521)) | (1L << (HONOR_BROKER_PRIORITY - 521)) | (1L << (HOURS - 521)) | (1L << (IDENTITY_VALUE - 521)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 521)) | (1L << (IMMEDIATE - 521)) | (1L << (IMPERSONATE - 521)) | (1L << (IMPORTANCE - 521)) | (1L << (INCREMENTAL - 521)) | (1L << (INITIATOR - 521)) | (1L << (INPUT - 521)) | (1L << (INSENSITIVE - 521)) | (1L << (INSERTED - 521)) | (1L << (INT - 521)) | (1L << (IP - 521)) | (1L << (ISOLATION - 521)) | (1L << (KB - 521)) | (1L << (KEEP - 521)) | (1L << (KEEPFIXED - 521)) | (1L << (KEY_SOURCE - 521)) | (1L << (KEYS - 521)) | (1L << (KEYSET - 521)) | (1L << (LAG - 521)) | (1L << (LAST - 521)) | (1L << (LAST_VALUE - 521)) | (1L << (LEAD - 521)) | (1L << (LEVEL - 521)) | (1L << (LIST - 521)) | (1L << (LISTENER - 521)) | (1L << (LISTENER_URL - 521)) | (1L << (LOB_COMPACTION - 521)) | (1L << (LOCAL - 521)) | (1L << (LOCATION - 521)) | (1L << (LOCK - 521)) | (1L << (LOCK_ESCALATION - 521)) | (1L << (LOGIN - 521)) | (1L << (LOOP - 521)) | (1L << (LOW - 521)) | (1L << (MANUAL - 521)) | (1L << (MARK - 521)) | (1L << (MATERIALIZED - 521)) | (1L << (MAX - 521)) | (1L << (MAX_CPU_PERCENT - 521)) | (1L << (MAX_DOP - 521)) | (1L << (MAX_FILES - 521)) | (1L << (MAX_IOPS_PER_VOLUME - 521)) | (1L << (MAX_MEMORY_PERCENT - 521)) | (1L << (MAX_PROCESSES - 521)) | (1L << (MAX_QUEUE_READERS - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (MAX_ROLLOVER_FILES - 585)) | (1L << (MAXDOP - 585)) | (1L << (MAXRECURSION - 585)) | (1L << (MAXSIZE - 585)) | (1L << (MB - 585)) | (1L << (MEDIUM - 585)) | (1L << (MEMORY_OPTIMIZED_DATA - 585)) | (1L << (MESSAGE - 585)) | (1L << (MIN - 585)) | (1L << (MIN_ACTIVE_ROWVERSION - 585)) | (1L << (MIN_CPU_PERCENT - 585)) | (1L << (MIN_IOPS_PER_VOLUME - 585)) | (1L << (MIN_MEMORY_PERCENT - 585)) | (1L << (MINUTES - 585)) | (1L << (MIRROR_ADDRESS - 585)) | (1L << (MIXED_PAGE_ALLOCATION - 585)) | (1L << (MODE - 585)) | (1L << (MODIFY - 585)) | (1L << (MOVE - 585)) | (1L << (MULTI_USER - 585)) | (1L << (NAME - 585)) | (1L << (NESTED_TRIGGERS - 585)) | (1L << (NEW_ACCOUNT - 585)) | (1L << (NEW_BROKER - 585)) | (1L << (NEW_PASSWORD - 585)) | (1L << (NEXT - 585)) | (1L << (NO - 585)) | (1L << (NO_TRUNCATE - 585)) | (1L << (NO_WAIT - 585)) | (1L << (NOCOUNT - 585)) | (1L << (NODES - 585)) | (1L << (NOEXPAND - 585)) | (1L << (NON_TRANSACTED_ACCESS - 585)) | (1L << (NORECOMPUTE - 585)) | (1L << (NORECOVERY - 585)) | (1L << (NOWAIT - 585)) | (1L << (NTILE - 585)) | (1L << (NUMANODE - 585)) | (1L << (NUMBER - 585)) | (1L << (NUMERIC_ROUNDABORT - 585)) | (1L << (OBJECT - 585)) | (1L << (OFFLINE - 585)) | (1L << (OFFSET - 585)) | (1L << (OLD_ACCOUNT - 585)) | (1L << (ONLINE - 585)) | (1L << (ONLY - 585)) | (1L << (OPEN_EXISTING - 585)) | (1L << (OPTIMISTIC - 585)) | (1L << (OPTIMIZE - 585)) | (1L << (OUT - 585)) | (1L << (OUTPUT - 585)) | (1L << (OWNER - 585)) | (1L << (PAGE_VERIFY - 585)) | (1L << (PARAMETERIZATION - 585)) | (1L << (PARTITION - 585)) | (1L << (PARTITIONS - 585)) | (1L << (PARTNER - 585)) | (1L << (PATH - 585)) | (1L << (POISON_MESSAGE_HANDLING - 585)) | (1L << (POOL - 585)) | (1L << (PORT - 585)) | (1L << (PRECEDING - 585)) | (1L << (PRIMARY_ROLE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (PRIOR - 649)) | (1L << (PRIORITY - 649)) | (1L << (PRIORITY_LEVEL - 649)) | (1L << (PRIVATE - 649)) | (1L << (PRIVATE_KEY - 649)) | (1L << (PRIVILEGES - 649)) | (1L << (PROCEDURE_NAME - 649)) | (1L << (PROPERTY - 649)) | (1L << (PROVIDER - 649)) | (1L << (PROVIDER_KEY_NAME - 649)) | (1L << (QUERY - 649)) | (1L << (QUEUE - 649)) | (1L << (QUEUE_DELAY - 649)) | (1L << (QUOTED_IDENTIFIER - 649)) | (1L << (RANGE - 649)) | (1L << (RANK - 649)) | (1L << (RC2 - 649)) | (1L << (RC4 - 649)) | (1L << (RC4_128 - 649)) | (1L << (READ_COMMITTED_SNAPSHOT - 649)) | (1L << (READ_ONLY - 649)) | (1L << (READ_ONLY_ROUTING_LIST - 649)) | (1L << (READ_WRITE - 649)) | (1L << (READONLY - 649)) | (1L << (REBUILD - 649)) | (1L << (RECEIVE - 649)) | (1L << (RECOMPILE - 649)) | (1L << (RECOVERY - 649)) | (1L << (RECURSIVE_TRIGGERS - 649)) | (1L << (RELATIVE - 649)) | (1L << (REMOTE - 649)) | (1L << (REMOTE_SERVICE_NAME - 649)) | (1L << (REMOVE - 649)) | (1L << (REORGANIZE - 649)) | (1L << (REPEATABLE - 649)) | (1L << (REPLICA - 649)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 649)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 649)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 649)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 649)) | (1L << (RESERVE_DISK_SPACE - 649)) | (1L << (RESOURCE - 649)) | (1L << (RESOURCE_MANAGER_LOCATION - 649)) | (1L << (RESTRICTED_USER - 649)) | (1L << (RETENTION - 649)) | (1L << (ROBUST - 649)) | (1L << (ROOT - 649)) | (1L << (ROUTE - 649)) | (1L << (ROW - 649)) | (1L << (ROW_NUMBER - 649)) | (1L << (ROWGUID - 649)) | (1L << (ROWS - 649)) | (1L << (SAMPLE - 649)) | (1L << (SCHEMABINDING - 649)) | (1L << (SCOPED - 649)) | (1L << (SCROLL - 649)) | (1L << (SCROLL_LOCKS - 649)) | (1L << (SEARCH - 649)) | (1L << (SECONDARY - 649)) | (1L << (SECONDARY_ONLY - 649)) | (1L << (SECONDARY_ROLE - 649)) | (1L << (SECONDS - 649)) | (1L << (SECRET - 649)) | (1L << (SECURITY - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (SECURITY_LOG - 713)) | (1L << (SEEDING_MODE - 713)) | (1L << (SELF - 713)) | (1L << (SEMI_SENSITIVE - 713)) | (1L << (SEND - 713)) | (1L << (SENT - 713)) | (1L << (SEQUENCE - 713)) | (1L << (SERIALIZABLE - 713)) | (1L << (SESSION_TIMEOUT - 713)) | (1L << (SETERROR - 713)) | (1L << (SHARE - 713)) | (1L << (SHOWPLAN - 713)) | (1L << (SIGNATURE - 713)) | (1L << (SIMPLE - 713)) | (1L << (SINGLE_USER - 713)) | (1L << (SIZE - 713)) | (1L << (SMALLINT - 713)) | (1L << (SNAPSHOT - 713)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 713)) | (1L << (STANDBY - 713)) | (1L << (START_DATE - 713)) | (1L << (STATIC - 713)) | (1L << (STATS_STREAM - 713)) | (1L << (STATUS - 713)) | (1L << (STDEV - 713)) | (1L << (STDEVP - 713)) | (1L << (STOPLIST - 713)) | (1L << (STRING_AGG - 713)) | (1L << (STUFF - 713)) | (1L << (SUBJECT - 713)) | (1L << (SUM - 713)) | (1L << (SUSPEND - 713)) | (1L << (SYMMETRIC - 713)) | (1L << (SYNCHRONOUS_COMMIT - 713)) | (1L << (SYNONYM - 713)) | (1L << (SYSTEM - 713)) | (1L << (TAKE - 713)) | (1L << (TARGET_RECOVERY_TIME - 713)) | (1L << (TB - 713)) | (1L << (TEXTIMAGE_ON - 713)) | (1L << (THROW - 713)) | (1L << (TIES - 713)) | (1L << (TIME - 713)) | (1L << (TIMEOUT - 713)) | (1L << (TIMER - 713)) | (1L << (TINYINT - 713)) | (1L << (TORN_PAGE_DETECTION - 713)) | (1L << (TRANSFORM_NOISE_WORDS - 713)) | (1L << (TRIPLE_DES - 713)) | (1L << (TRIPLE_DES_3KEY - 713)) | (1L << (TRUSTWORTHY - 713)) | (1L << (TRY - 713)) | (1L << (TSQL - 713)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 713)) | (1L << (TYPE - 713)) | (1L << (TYPE_WARNING - 713)) | (1L << (UNBOUNDED - 713)) | (1L << (UNCOMMITTED - 713)) | (1L << (UNKNOWN - 713)) | (1L << (UNLIMITED - 713)) | (1L << (USING - 713)))) != 0) || ((((_la - 777)) & ~0x3f) == 0 && ((1L << (_la - 777)) & ((1L << (VALID_XML - 777)) | (1L << (VALIDATION - 777)) | (1L << (VALUE - 777)) | (1L << (VAR - 777)) | (1L << (VARP - 777)) | (1L << (VIEW_METADATA - 777)) | (1L << (VIEWS - 777)) | (1L << (WAIT - 777)) | (1L << (WELL_FORMED_XML - 777)) | (1L << (WORK - 777)) | (1L << (WORKLOAD - 777)) | (1L << (XML - 777)) | (1L << (XMLNAMESPACES - 777)) | (1L << (DOUBLE_QUOTE_ID - 777)) | (1L << (SQUARE_BRACKET_ID - 777)) | (1L << (LOCAL_ID - 777)) | (1L << (MOCA_ENVIRONMENT_VARIABLE - 777)) | (1L << (MOCA_AT_MINUS_VARIABLE - 777)) | (1L << (MOCA_AT_PLUS_VARIABLE - 777)) | (1L << (MOCA_AT_MOD_VARIABLE - 777)) | (1L << (DECIMAL - 777)) | (1L << (ID - 777)) | (1L << (STRING - 777)) | (1L << (BINARY - 777)) | (1L << (FLOAT - 777)) | (1L << (REAL - 777)) | (1L << (AT - 777)) | (1L << (DOLLAR - 777)) | (1L << (LR_BRACKET - 777)) | (1L << (SEMI - 777)))) != 0) || ((((_la - 843)) & ~0x3f) == 0 && ((1L << (_la - 843)) & ((1L << (PLUS - 843)) | (1L << (MINUS - 843)) | (1L << (BIT_NOT - 843)) | (1L << (URL - 843)))) != 0)) {
				{
				{
				setState(1020);
				batch();
				}
				}
				setState(1025);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1026);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BatchContext extends ParserRuleContext {
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			setState(1045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1028);
				execute_body();
				setState(1032);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1029);
						go_statement();
						}
						} 
					}
					setState(1034);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					setState(1035);
					execute_body();
					}
					break;
				}
				setState(1038);
				sql_clauses();
				setState(1042);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1039);
						go_statement();
						}
						} 
					}
					setState(1044);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MocaSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MocaSqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSql_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSql_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSql_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1051); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1047);
					sql_clause();
					setState(1049);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						setState(1048);
						match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1053); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clauseContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return getRuleContext(Dbcc_clauseContext.class,0);
		}
		public Empty_statementContext empty_statement() {
			return getRuleContext(Empty_statementContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Backup_statementContext backup_statement() {
			return getRuleContext(Backup_statementContext.class,0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSql_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSql_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSql_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clauseContext sql_clause() throws RecognitionException {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_clause);
		try {
			setState(1062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1055);
				dml_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1056);
				ddl_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1057);
				cfl_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1058);
				dbcc_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1059);
				empty_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1060);
				another_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1061);
				backup_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDml_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDml_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDml_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_clause);
		try {
			setState(1069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1064);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1065);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1066);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1067);
				select_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1068);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return getRuleContext(Alter_application_roleContext.class,0);
		}
		public Alter_assemblyContext alter_assembly() {
			return getRuleContext(Alter_assemblyContext.class,0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return getRuleContext(Alter_asymmetric_keyContext.class,0);
		}
		public Alter_authorizationContext alter_authorization() {
			return getRuleContext(Alter_authorizationContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return getRuleContext(Alter_authorization_for_azure_dwContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return getRuleContext(Alter_authorization_for_parallel_dwContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return getRuleContext(Alter_authorization_for_sql_databaseContext.class,0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return getRuleContext(Alter_availability_groupContext.class,0);
		}
		public Alter_certificateContext alter_certificate() {
			return getRuleContext(Alter_certificateContext.class,0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return getRuleContext(Alter_column_encryption_keyContext.class,0);
		}
		public Alter_credentialContext alter_credential() {
			return getRuleContext(Alter_credentialContext.class,0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return getRuleContext(Alter_cryptographic_providerContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_db_roleContext alter_db_role() {
			return getRuleContext(Alter_db_roleContext.class,0);
		}
		public Alter_endpointContext alter_endpoint() {
			return getRuleContext(Alter_endpointContext.class,0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return getRuleContext(Create_or_alter_event_sessionContext.class,0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return getRuleContext(Alter_external_data_sourceContext.class,0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return getRuleContext(Alter_external_libraryContext.class,0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return getRuleContext(Alter_external_resource_poolContext.class,0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return getRuleContext(Alter_fulltext_catalogContext.class,0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return getRuleContext(Alter_fulltext_stoplistContext.class,0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return getRuleContext(Alter_login_azure_sqlContext.class,0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_login_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return getRuleContext(Alter_login_sql_serverContext.class,0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return getRuleContext(Alter_master_key_azure_sqlContext.class,0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return getRuleContext(Alter_master_key_sql_serverContext.class,0);
		}
		public Alter_message_typeContext alter_message_type() {
			return getRuleContext(Alter_message_typeContext.class,0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return getRuleContext(Alter_partition_functionContext.class,0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return getRuleContext(Alter_partition_schemeContext.class,0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return getRuleContext(Alter_remote_service_bindingContext.class,0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return getRuleContext(Alter_resource_governorContext.class,0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return getRuleContext(Alter_schema_sqlContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return getRuleContext(Alter_server_auditContext.class,0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return getRuleContext(Alter_server_audit_specificationContext.class,0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return getRuleContext(Alter_server_configurationContext.class,0);
		}
		public Alter_server_roleContext alter_server_role() {
			return getRuleContext(Alter_server_roleContext.class,0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return getRuleContext(Alter_server_role_pdwContext.class,0);
		}
		public Alter_serviceContext alter_service() {
			return getRuleContext(Alter_serviceContext.class,0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return getRuleContext(Alter_service_master_keyContext.class,0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return getRuleContext(Alter_symmetric_keyContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return getRuleContext(Alter_user_azure_sqlContext.class,0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return getRuleContext(Alter_workload_groupContext.class,0);
		}
		public Create_application_roleContext create_application_role() {
			return getRuleContext(Create_application_roleContext.class,0);
		}
		public Create_assemblyContext create_assembly() {
			return getRuleContext(Create_assemblyContext.class,0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return getRuleContext(Create_asymmetric_keyContext.class,0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return getRuleContext(Create_column_encryption_keyContext.class,0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return getRuleContext(Create_column_master_keyContext.class,0);
		}
		public Create_credentialContext create_credential() {
			return getRuleContext(Create_credentialContext.class,0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return getRuleContext(Create_cryptographic_providerContext.class,0);
		}
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_db_roleContext create_db_role() {
			return getRuleContext(Create_db_roleContext.class,0);
		}
		public Create_event_notificationContext create_event_notification() {
			return getRuleContext(Create_event_notificationContext.class,0);
		}
		public Create_external_libraryContext create_external_library() {
			return getRuleContext(Create_external_libraryContext.class,0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return getRuleContext(Create_external_resource_poolContext.class,0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return getRuleContext(Create_fulltext_catalogContext.class,0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return getRuleContext(Create_fulltext_stoplistContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return getRuleContext(Create_login_azure_sqlContext.class,0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return getRuleContext(Create_login_pdwContext.class,0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return getRuleContext(Create_login_sql_serverContext.class,0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return getRuleContext(Create_master_key_azure_sqlContext.class,0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return getRuleContext(Create_master_key_sql_serverContext.class,0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return getRuleContext(Create_or_alter_broker_priorityContext.class,0);
		}
		public Create_or_alter_functionContext create_or_alter_function() {
			return getRuleContext(Create_or_alter_functionContext.class,0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return getRuleContext(Create_or_alter_procedureContext.class,0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return getRuleContext(Create_or_alter_triggerContext.class,0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return getRuleContext(Create_remote_service_bindingContext.class,0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return getRuleContext(Create_resource_poolContext.class,0);
		}
		public Create_routeContext create_route() {
			return getRuleContext(Create_routeContext.class,0);
		}
		public Create_ruleContext create_rule() {
			return getRuleContext(Create_ruleContext.class,0);
		}
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Create_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return getRuleContext(Create_search_property_listContext.class,0);
		}
		public Create_security_policyContext create_security_policy() {
			return getRuleContext(Create_security_policyContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_server_auditContext create_server_audit() {
			return getRuleContext(Create_server_auditContext.class,0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return getRuleContext(Create_server_audit_specificationContext.class,0);
		}
		public Create_server_roleContext create_server_role() {
			return getRuleContext(Create_server_roleContext.class,0);
		}
		public Create_serviceContext create_service() {
			return getRuleContext(Create_serviceContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_symmetric_keyContext create_symmetric_key() {
			return getRuleContext(Create_symmetric_keyContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return getRuleContext(Create_user_azure_sql_dwContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_workload_groupContext create_workload_group() {
			return getRuleContext(Create_workload_groupContext.class,0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return getRuleContext(Create_xml_schema_collectionContext.class,0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return getRuleContext(Drop_aggregateContext.class,0);
		}
		public Drop_application_roleContext drop_application_role() {
			return getRuleContext(Drop_application_roleContext.class,0);
		}
		public Drop_assemblyContext drop_assembly() {
			return getRuleContext(Drop_assemblyContext.class,0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return getRuleContext(Drop_asymmetric_keyContext.class,0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return getRuleContext(Drop_availability_groupContext.class,0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return getRuleContext(Drop_broker_priorityContext.class,0);
		}
		public Drop_certificateContext drop_certificate() {
			return getRuleContext(Drop_certificateContext.class,0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return getRuleContext(Drop_column_encryption_keyContext.class,0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return getRuleContext(Drop_column_master_keyContext.class,0);
		}
		public Drop_contractContext drop_contract() {
			return getRuleContext(Drop_contractContext.class,0);
		}
		public Drop_credentialContext drop_credential() {
			return getRuleContext(Drop_credentialContext.class,0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return getRuleContext(Drop_cryptograhic_providerContext.class,0);
		}
		public Drop_databaseContext drop_database() {
			return getRuleContext(Drop_databaseContext.class,0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return getRuleContext(Drop_database_audit_specificationContext.class,0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return getRuleContext(Drop_database_scoped_credentialContext.class,0);
		}
		public Drop_db_roleContext drop_db_role() {
			return getRuleContext(Drop_db_roleContext.class,0);
		}
		public Drop_defaultContext drop_default() {
			return getRuleContext(Drop_defaultContext.class,0);
		}
		public Drop_endpointContext drop_endpoint() {
			return getRuleContext(Drop_endpointContext.class,0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return getRuleContext(Drop_event_notificationsContext.class,0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return getRuleContext(Drop_event_sessionContext.class,0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return getRuleContext(Drop_external_data_sourceContext.class,0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return getRuleContext(Drop_external_file_formatContext.class,0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return getRuleContext(Drop_external_libraryContext.class,0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return getRuleContext(Drop_external_resource_poolContext.class,0);
		}
		public Drop_external_tableContext drop_external_table() {
			return getRuleContext(Drop_external_tableContext.class,0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return getRuleContext(Drop_fulltext_catalogContext.class,0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return getRuleContext(Drop_fulltext_indexContext.class,0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return getRuleContext(Drop_fulltext_stoplistContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_loginContext drop_login() {
			return getRuleContext(Drop_loginContext.class,0);
		}
		public Drop_master_keyContext drop_master_key() {
			return getRuleContext(Drop_master_keyContext.class,0);
		}
		public Drop_message_typeContext drop_message_type() {
			return getRuleContext(Drop_message_typeContext.class,0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return getRuleContext(Drop_partition_functionContext.class,0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return getRuleContext(Drop_partition_schemeContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_queueContext drop_queue() {
			return getRuleContext(Drop_queueContext.class,0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return getRuleContext(Drop_remote_service_bindingContext.class,0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return getRuleContext(Drop_resource_poolContext.class,0);
		}
		public Drop_routeContext drop_route() {
			return getRuleContext(Drop_routeContext.class,0);
		}
		public Drop_ruleContext drop_rule() {
			return getRuleContext(Drop_ruleContext.class,0);
		}
		public Drop_schemaContext drop_schema() {
			return getRuleContext(Drop_schemaContext.class,0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return getRuleContext(Drop_search_property_listContext.class,0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return getRuleContext(Drop_security_policyContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return getRuleContext(Drop_server_auditContext.class,0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return getRuleContext(Drop_server_audit_specificationContext.class,0);
		}
		public Drop_server_roleContext drop_server_role() {
			return getRuleContext(Drop_server_roleContext.class,0);
		}
		public Drop_serviceContext drop_service() {
			return getRuleContext(Drop_serviceContext.class,0);
		}
		public Drop_signatureContext drop_signature() {
			return getRuleContext(Drop_signatureContext.class,0);
		}
		public Drop_statisticsContext drop_statistics() {
			return getRuleContext(Drop_statisticsContext.class,0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return getRuleContext(Drop_statistics_name_azure_dw_and_pdwContext.class,0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return getRuleContext(Drop_symmetric_keyContext.class,0);
		}
		public Drop_synonymContext drop_synonym() {
			return getRuleContext(Drop_synonymContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Drop_userContext drop_user() {
			return getRuleContext(Drop_userContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return getRuleContext(Drop_workload_groupContext.class,0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return getRuleContext(Drop_xml_schema_collectionContext.class,0);
		}
		public Disable_triggerContext disable_trigger() {
			return getRuleContext(Disable_triggerContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public Lock_tableContext lock_table() {
			return getRuleContext(Lock_tableContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Update_statisticsContext update_statistics() {
			return getRuleContext(Update_statisticsContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ddl_clause);
		try {
			setState(1230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1071);
				alter_application_role();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1072);
				alter_assembly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1073);
				alter_asymmetric_key();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1074);
				alter_authorization();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1075);
				alter_authorization_for_azure_dw();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1076);
				alter_authorization_for_parallel_dw();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1077);
				alter_authorization_for_sql_database();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1078);
				alter_availability_group();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1079);
				alter_certificate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1080);
				alter_column_encryption_key();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1081);
				alter_credential();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1082);
				alter_cryptographic_provider();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1083);
				alter_database();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1084);
				alter_db_role();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1085);
				alter_endpoint();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1086);
				create_or_alter_event_session();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1087);
				alter_external_data_source();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1088);
				alter_external_library();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1089);
				alter_external_resource_pool();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1090);
				alter_fulltext_catalog();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1091);
				alter_fulltext_stoplist();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1092);
				alter_login_azure_sql();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1093);
				alter_login_azure_sql_dw_and_pdw();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1094);
				alter_login_sql_server();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1095);
				alter_master_key_azure_sql();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1096);
				alter_master_key_sql_server();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1097);
				alter_message_type();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1098);
				alter_partition_function();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1099);
				alter_partition_scheme();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1100);
				alter_remote_service_binding();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1101);
				alter_resource_governor();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1102);
				alter_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1103);
				alter_schema_sql();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1104);
				alter_sequence();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1105);
				alter_server_audit();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1106);
				alter_server_audit_specification();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1107);
				alter_server_configuration();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1108);
				alter_server_role();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1109);
				alter_server_role_pdw();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1110);
				alter_service();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1111);
				alter_service_master_key();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1112);
				alter_symmetric_key();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1113);
				alter_table();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1114);
				alter_user();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1115);
				alter_user_azure_sql();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1116);
				alter_workload_group();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1117);
				create_application_role();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1118);
				create_assembly();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1119);
				create_asymmetric_key();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1120);
				create_column_encryption_key();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1121);
				create_column_master_key();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1122);
				create_credential();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1123);
				create_cryptographic_provider();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1124);
				create_database();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1125);
				create_db_role();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1126);
				create_event_notification();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1127);
				create_external_library();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1128);
				create_external_resource_pool();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1129);
				create_fulltext_catalog();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1130);
				create_fulltext_stoplist();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1131);
				create_index();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1132);
				create_login_azure_sql();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1133);
				create_login_pdw();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1134);
				create_login_sql_server();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1135);
				create_master_key_azure_sql();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1136);
				create_master_key_sql_server();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1137);
				create_or_alter_broker_priority();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1138);
				create_or_alter_function();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1139);
				create_or_alter_procedure();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1140);
				create_or_alter_trigger();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1141);
				create_remote_service_binding();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1142);
				create_resource_pool();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1143);
				create_route();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1144);
				create_rule();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1145);
				create_schema();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1146);
				create_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1147);
				create_search_property_list();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1148);
				create_security_policy();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1149);
				create_sequence();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1150);
				create_server_audit();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1151);
				create_server_audit_specification();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1152);
				create_server_role();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1153);
				create_service();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1154);
				create_statistics();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1155);
				create_symmetric_key();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1156);
				create_synonym();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1157);
				create_table();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1158);
				create_type();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1159);
				create_user();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1160);
				create_user_azure_sql_dw();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1161);
				create_view();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1162);
				create_workload_group();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1163);
				create_xml_schema_collection();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1164);
				drop_aggregate();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1165);
				drop_application_role();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1166);
				drop_assembly();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1167);
				drop_asymmetric_key();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1168);
				drop_availability_group();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1169);
				drop_broker_priority();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1170);
				drop_certificate();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1171);
				drop_column_encryption_key();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1172);
				drop_column_master_key();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1173);
				drop_contract();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1174);
				drop_credential();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1175);
				drop_cryptograhic_provider();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1176);
				drop_database();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1177);
				drop_database_audit_specification();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1178);
				drop_database_scoped_credential();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1179);
				drop_db_role();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1180);
				drop_default();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1181);
				drop_endpoint();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1182);
				drop_event_notifications();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1183);
				drop_event_session();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1184);
				drop_external_data_source();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1185);
				drop_external_file_format();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1186);
				drop_external_library();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1187);
				drop_external_resource_pool();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1188);
				drop_external_table();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1189);
				drop_fulltext_catalog();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1190);
				drop_fulltext_index();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1191);
				drop_fulltext_stoplist();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1192);
				drop_function();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1193);
				drop_index();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1194);
				drop_login();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1195);
				drop_master_key();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(1196);
				drop_message_type();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(1197);
				drop_partition_function();
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(1198);
				drop_partition_scheme();
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(1199);
				drop_procedure();
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(1200);
				drop_queue();
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(1201);
				drop_remote_service_binding();
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(1202);
				drop_resource_pool();
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(1203);
				drop_route();
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(1204);
				drop_rule();
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(1205);
				drop_schema();
				}
				break;
			case 136:
				enterOuterAlt(_localctx, 136);
				{
				setState(1206);
				drop_search_property_list();
				}
				break;
			case 137:
				enterOuterAlt(_localctx, 137);
				{
				setState(1207);
				drop_security_policy();
				}
				break;
			case 138:
				enterOuterAlt(_localctx, 138);
				{
				setState(1208);
				drop_sequence();
				}
				break;
			case 139:
				enterOuterAlt(_localctx, 139);
				{
				setState(1209);
				drop_server_audit();
				}
				break;
			case 140:
				enterOuterAlt(_localctx, 140);
				{
				setState(1210);
				drop_server_audit_specification();
				}
				break;
			case 141:
				enterOuterAlt(_localctx, 141);
				{
				setState(1211);
				drop_server_role();
				}
				break;
			case 142:
				enterOuterAlt(_localctx, 142);
				{
				setState(1212);
				drop_service();
				}
				break;
			case 143:
				enterOuterAlt(_localctx, 143);
				{
				setState(1213);
				drop_signature();
				}
				break;
			case 144:
				enterOuterAlt(_localctx, 144);
				{
				setState(1214);
				drop_statistics();
				}
				break;
			case 145:
				enterOuterAlt(_localctx, 145);
				{
				setState(1215);
				drop_statistics_name_azure_dw_and_pdw();
				}
				break;
			case 146:
				enterOuterAlt(_localctx, 146);
				{
				setState(1216);
				drop_symmetric_key();
				}
				break;
			case 147:
				enterOuterAlt(_localctx, 147);
				{
				setState(1217);
				drop_synonym();
				}
				break;
			case 148:
				enterOuterAlt(_localctx, 148);
				{
				setState(1218);
				drop_table();
				}
				break;
			case 149:
				enterOuterAlt(_localctx, 149);
				{
				setState(1219);
				drop_trigger();
				}
				break;
			case 150:
				enterOuterAlt(_localctx, 150);
				{
				setState(1220);
				drop_type();
				}
				break;
			case 151:
				enterOuterAlt(_localctx, 151);
				{
				setState(1221);
				drop_user();
				}
				break;
			case 152:
				enterOuterAlt(_localctx, 152);
				{
				setState(1222);
				drop_view();
				}
				break;
			case 153:
				enterOuterAlt(_localctx, 153);
				{
				setState(1223);
				drop_workload_group();
				}
				break;
			case 154:
				enterOuterAlt(_localctx, 154);
				{
				setState(1224);
				drop_xml_schema_collection();
				}
				break;
			case 155:
				enterOuterAlt(_localctx, 155);
				{
				setState(1225);
				disable_trigger();
				}
				break;
			case 156:
				enterOuterAlt(_localctx, 156);
				{
				setState(1226);
				enable_trigger();
				}
				break;
			case 157:
				enterOuterAlt(_localctx, 157);
				{
				setState(1227);
				lock_table();
				}
				break;
			case 158:
				enterOuterAlt(_localctx, 158);
				{
				setState(1228);
				truncate_table();
				}
				break;
			case 159:
				enterOuterAlt(_localctx, 159);
				{
				setState(1229);
				update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_statementContext extends ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return getRuleContext(Backup_databaseContext.class,0);
		}
		public Backup_logContext backup_log() {
			return getRuleContext(Backup_logContext.class,0);
		}
		public Backup_certificateContext backup_certificate() {
			return getRuleContext(Backup_certificateContext.class,0);
		}
		public Backup_master_keyContext backup_master_key() {
			return getRuleContext(Backup_master_keyContext.class,0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return getRuleContext(Backup_service_master_keyContext.class,0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBackup_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBackup_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBackup_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_statementContext backup_statement() throws RecognitionException {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_backup_statement);
		try {
			setState(1237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1232);
				backup_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1233);
				backup_log();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1234);
				backup_certificate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1235);
				backup_master_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1236);
				backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Throw_statementContext throw_statement() {
			return getRuleContext(Throw_statementContext.class,0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return getRuleContext(Try_catch_statementContext.class,0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return getRuleContext(Waitfor_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Print_statementContext print_statement() {
			return getRuleContext(Print_statementContext.class,0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return getRuleContext(Raiseerror_statementContext.class,0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCfl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCfl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCfl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_cfl_statement);
		try {
			setState(1251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1239);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1240);
				break_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1241);
				continue_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1242);
				goto_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1243);
				if_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1244);
				return_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1245);
				throw_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1246);
				try_catch_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1247);
				waitfor_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1248);
				while_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1249);
				print_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1250);
				raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MocaSqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MocaSqlParser.END, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBlock_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBlock_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_block_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1253);
			match(BEGIN);
			setState(1255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1254);
				match(SEMI);
				}
				break;
			}
			setState(1258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1257);
				sql_clauses();
				}
				break;
			}
			setState(1260);
			match(END);
			setState(1262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(1261);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(MocaSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBreak_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBreak_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1264);
			match(BREAK);
			setState(1266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(1265);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(MocaSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1268);
			match(CONTINUE);
			setState(1270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(1269);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(MocaSqlParser.GOTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_goto_statement);
		try {
			setState(1282);
			switch (_input.LA(1)) {
			case GOTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1272);
				match(GOTO);
				setState(1273);
				id();
				setState(1275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					setState(1274);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1277);
				id();
				setState(1278);
				match(COLON);
				setState(1280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					setState(1279);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MocaSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1284);
			match(RETURN);
			setState(1286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(1285);
				expression(0);
				}
				break;
			}
			setState(1289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(1288);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MocaSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_if_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1291);
			match(IF);
			setState(1292);
			search_condition();
			setState(1293);
			sql_clause();
			setState(1296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1294);
				match(ELSE);
				setState(1295);
				sql_clause();
				}
				break;
			}
			setState(1299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1298);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_statementContext extends ParserRuleContext {
		public TerminalNode THROW() { return getToken(MocaSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return getRuleContext(Throw_error_numberContext.class,0);
		}
		public Throw_messageContext throw_message() {
			return getRuleContext(Throw_messageContext.class,0);
		}
		public Throw_stateContext throw_state() {
			return getRuleContext(Throw_stateContext.class,0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterThrow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitThrow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitThrow_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_statementContext throw_statement() throws RecognitionException {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_throw_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1301);
			match(THROW);
			setState(1308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1302);
				throw_error_number();
				setState(1303);
				match(COMMA);
				setState(1304);
				throw_message();
				setState(1305);
				match(COMMA);
				setState(1306);
				throw_state();
				}
				break;
			}
			setState(1311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1310);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_error_numberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_error_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterThrow_error_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitThrow_error_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitThrow_error_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_error_numberContext throw_error_number() throws RecognitionException {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1313);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_messageContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterThrow_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitThrow_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitThrow_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_messageContext throw_message() throws RecognitionException {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1315);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_stateContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterThrow_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitThrow_state(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitThrow_state(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_stateContext throw_state() throws RecognitionException {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1317);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Try_catch_statementContext extends ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public List<TerminalNode> BEGIN() { return getTokens(MocaSqlParser.BEGIN); }
		public TerminalNode BEGIN(int i) {
			return getToken(MocaSqlParser.BEGIN, i);
		}
		public List<TerminalNode> TRY() { return getTokens(MocaSqlParser.TRY); }
		public TerminalNode TRY(int i) {
			return getToken(MocaSqlParser.TRY, i);
		}
		public List<TerminalNode> END() { return getTokens(MocaSqlParser.END); }
		public TerminalNode END(int i) {
			return getToken(MocaSqlParser.END, i);
		}
		public List<TerminalNode> CATCH() { return getTokens(MocaSqlParser.CATCH); }
		public TerminalNode CATCH(int i) {
			return getToken(MocaSqlParser.CATCH, i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_catch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTry_catch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTry_catch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTry_catch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Try_catch_statementContext try_catch_statement() throws RecognitionException {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_try_catch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1319);
			match(BEGIN);
			setState(1320);
			match(TRY);
			setState(1322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1321);
				match(SEMI);
				}
				break;
			}
			setState(1325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1324);
				((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
				}
				break;
			}
			setState(1327);
			match(END);
			setState(1328);
			match(TRY);
			setState(1330);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1329);
				match(SEMI);
				}
			}

			setState(1332);
			match(BEGIN);
			setState(1333);
			match(CATCH);
			setState(1335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1334);
				match(SEMI);
				}
				break;
			}
			setState(1338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1337);
				((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
				}
				break;
			}
			setState(1340);
			match(END);
			setState(1341);
			match(CATCH);
			setState(1343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1342);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_statementContext extends ParserRuleContext {
		public TerminalNode WAITFOR() { return getToken(MocaSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DELAY() { return getToken(MocaSqlParser.DELAY, 0); }
		public TerminalNode TIME() { return getToken(MocaSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(MocaSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWaitfor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWaitfor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWaitfor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_statementContext waitfor_statement() throws RecognitionException {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1345);
			match(WAITFOR);
			setState(1347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1346);
				receive_statement();
				}
				break;
			}
			setState(1350);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1349);
				match(COMMA);
				}
			}

			setState(1354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				setState(1352);
				_la = _input.LA(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1353);
				time();
				}
				break;
			}
			setState(1357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(1356);
				expression(0);
				}
				break;
			}
			setState(1360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				setState(1359);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(MocaSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(MocaSqlParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(MocaSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWhile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWhile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362);
			match(WHILE);
			setState(1363);
			search_condition();
			setState(1373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(1364);
				sql_clause();
				}
				break;
			case 2:
				{
				setState(1365);
				match(BREAK);
				setState(1367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(1366);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(1369);
				match(CONTINUE);
				setState(1371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1370);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Print_statementContext extends ParserRuleContext {
		public TerminalNode PRINT() { return getToken(MocaSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(MocaSqlParser.DOUBLE_QUOTE_ID, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(MocaSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MocaSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_print_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPrint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPrint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPrint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Print_statementContext print_statement() throws RecognitionException {
		Print_statementContext _localctx = new Print_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_print_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1375);
			match(PRINT);
			setState(1378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				setState(1376);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1377);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			setState(1384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1380);
				match(COMMA);
				setState(1381);
				match(LOCAL_ID);
				}
				}
				setState(1386);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(1387);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raiseerror_statementContext extends ParserRuleContext {
		public Token msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public Token formatstring;
		public Token argument;
		public TerminalNode RAISERROR() { return getToken(MocaSqlParser.RAISERROR, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(MocaSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MocaSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LOG() { return getToken(MocaSqlParser.LOG, 0); }
		public TerminalNode SETERROR() { return getToken(MocaSqlParser.SETERROR, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(MocaSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseerror_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRaiseerror_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRaiseerror_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRaiseerror_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raiseerror_statementContext raiseerror_statement() throws RecognitionException {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			setState(1422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1390);
				match(RAISERROR);
				setState(1391);
				match(LR_BRACKET);
				setState(1392);
				((Raiseerror_statementContext)_localctx).msg = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (LOCAL_ID - 804)) | (1L << (DECIMAL - 804)) | (1L << (STRING - 804)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1393);
				match(COMMA);
				setState(1394);
				((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
				setState(1395);
				match(COMMA);
				setState(1396);
				((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
				setState(1401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1397);
					match(COMMA);
					setState(1398);
					constant_LOCAL_ID();
					}
					}
					setState(1403);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1404);
				match(RR_BRACKET);
				setState(1407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(1405);
					match(WITH);
					setState(1406);
					_la = _input.LA(1);
					if ( !(_la==LOG || _la==SETERROR) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(1410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1409);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1412);
				match(RAISERROR);
				setState(1413);
				match(DECIMAL);
				setState(1414);
				((Raiseerror_statementContext)_localctx).formatstring = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 801)) & ~0x3f) == 0 && ((1L << (_la - 801)) & ((1L << (DOUBLE_QUOTE_ID - 801)) | (1L << (LOCAL_ID - 801)) | (1L << (STRING - 801)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).formatstring = (Token)_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1415);
					match(COMMA);
					setState(1416);
					((Raiseerror_statementContext)_localctx).argument = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (LOCAL_ID - 804)) | (1L << (DECIMAL - 804)) | (1L << (STRING - 804)))) != 0)) ) {
						((Raiseerror_statementContext)_localctx).argument = (Token)_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					}
					setState(1421);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEmpty_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEmpty_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1424);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Conversation_statementContext conversation_statement() {
			return getRuleContext(Conversation_statementContext.class,0);
		}
		public Create_contractContext create_contract() {
			return getRuleContext(Create_contractContext.class,0);
		}
		public Create_queueContext create_queue() {
			return getRuleContext(Create_queueContext.class,0);
		}
		public Alter_queueContext alter_queue() {
			return getRuleContext(Alter_queueContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Kill_statementContext kill_statement() {
			return getRuleContext(Kill_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Security_statementContext security_statement() {
			return getRuleContext(Security_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Setuser_statementContext setuser_statement() {
			return getRuleContext(Setuser_statementContext.class,0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return getRuleContext(Reconfigure_statementContext.class,0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return getRuleContext(Shutdown_statementContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAnother_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAnother_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAnother_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_another_statement);
		try {
			setState(1442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1426);
				declare_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1427);
				cursor_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1428);
				conversation_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1429);
				create_contract();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1430);
				create_queue();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1431);
				alter_queue();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1432);
				execute_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1433);
				kill_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1434);
				message_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1435);
				security_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1436);
				set_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1437);
				transaction_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1438);
				use_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1439);
				setuser_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1440);
				reconfigure_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1441);
				shutdown_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public IdContext new_application_role_name;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode APPLICATION() { return getToken(MocaSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(MocaSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_application_roleContext alter_application_role() throws RecognitionException {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1444);
			match(ALTER);
			setState(1445);
			match(APPLICATION);
			setState(1446);
			match(ROLE);
			setState(1447);
			((Alter_application_roleContext)_localctx).appliction_role = id();
			setState(1448);
			match(WITH);
			setState(1455);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(1450);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1449);
					match(COMMA);
					}
				}

				setState(1452);
				match(NAME);
				setState(1453);
				match(EQUAL);
				setState(1454);
				((Alter_application_roleContext)_localctx).new_application_role_name = id();
				}
				break;
			}
			setState(1463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1458);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1457);
					match(COMMA);
					}
				}

				setState(1460);
				match(PASSWORD);
				setState(1461);
				match(EQUAL);
				setState(1462);
				((Alter_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1471);
			_la = _input.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				setState(1466);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1465);
					match(COMMA);
					}
				}

				setState(1468);
				match(DEFAULT_SCHEMA);
				setState(1469);
				match(EQUAL);
				setState(1470);
				((Alter_application_roleContext)_localctx).app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode APPLICATION() { return getToken(MocaSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_SCHEMA() { return getToken(MocaSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_application_roleContext create_application_role() throws RecognitionException {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_create_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			match(CREATE);
			setState(1474);
			match(APPLICATION);
			setState(1475);
			match(ROLE);
			setState(1476);
			((Create_application_roleContext)_localctx).appliction_role = id();
			setState(1477);
			match(WITH);
			setState(1484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(1479);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1478);
					match(COMMA);
					}
				}

				setState(1481);
				match(PASSWORD);
				setState(1482);
				match(EQUAL);
				setState(1483);
				((Create_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1492);
			_la = _input.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				setState(1487);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1486);
					match(COMMA);
					}
				}

				setState(1489);
				match(DEFAULT_SCHEMA);
				setState(1490);
				match(EQUAL);
				setState(1491);
				((Create_application_roleContext)_localctx).app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregateContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext aggregate_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(MocaSqlParser.AGGREGATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_aggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_aggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_aggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_aggregateContext drop_aggregate() throws RecognitionException {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_drop_aggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1494);
			match(DROP);
			setState(1495);
			match(AGGREGATE);
			setState(1498);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1496);
				match(IF);
				setState(1497);
				match(EXISTS);
				}
			}

			setState(1503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1500);
				((Drop_aggregateContext)_localctx).schema_name = id();
				setState(1501);
				match(DOT);
				}
				break;
			}
			setState(1505);
			((Drop_aggregateContext)_localctx).aggregate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_application_roleContext extends ParserRuleContext {
		public IdContext rolename;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode APPLICATION() { return getToken(MocaSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_application_roleContext drop_application_role() throws RecognitionException {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_drop_application_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1507);
			match(DROP);
			setState(1508);
			match(APPLICATION);
			setState(1509);
			match(ROLE);
			setState(1510);
			((Drop_application_roleContext)_localctx).rolename = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return getRuleContext(Alter_assembly_startContext.class,0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return getRuleContext(Alter_assembly_clauseContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assemblyContext alter_assembly() throws RecognitionException {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_assembly);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1512);
			alter_assembly_start();
			setState(1513);
			((Alter_assemblyContext)_localctx).assembly_name = id();
			setState(1514);
			alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_startContext alter_assembly_start() throws RecognitionException {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1516);
			match(ALTER);
			setState(1517);
			match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return getRuleContext(Alter_assembly_from_clauseContext.class,0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return getRuleContext(Alter_assembly_with_clauseContext.class,0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return getRuleContext(Alter_assembly_drop_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return getRuleContext(Alter_assembly_add_clauseContext.class,0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_clauseContext alter_assembly_clause() throws RecognitionException {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_assembly_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1520);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1519);
				alter_assembly_from_clause();
				}
			}

			setState(1523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(1522);
				alter_assembly_with_clause();
				}
				break;
			}
			setState(1526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1525);
				alter_assembly_drop_clause();
				}
				break;
			}
			setState(1529);
			_la = _input.LA(1);
			if (_la==ADD) {
				{
				setState(1528);
				alter_assembly_add_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return getRuleContext(Alter_assembly_from_clause_startContext.class,0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return getRuleContext(Client_assembly_specifierContext.class,0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return getRuleContext(Alter_assembly_file_bitsContext.class,0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_from_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_from_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_from_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_from_clauseContext alter_assembly_from_clause() throws RecognitionException {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1531);
			alter_assembly_from_clause_start();
			setState(1534);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				setState(1532);
				client_assembly_specifier();
				}
				break;
			case AS:
				{
				setState(1533);
				alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clause_startContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_from_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_from_clause_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_from_clause_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() throws RecognitionException {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1536);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_clauseContext extends ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return getRuleContext(Alter_assembly_dropContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return getRuleContext(Alter_assembly_drop_multiple_filesContext.class,0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_drop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_drop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_drop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_drop_clauseContext alter_assembly_drop_clause() throws RecognitionException {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1538);
			alter_assembly_drop();
			setState(1539);
			alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_multiple_filesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return getRuleContext(Multiple_local_filesContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_multiple_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_drop_multiple_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_drop_multiple_files(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_drop_multiple_files(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() throws RecognitionException {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			setState(1543);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1541);
				match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1542);
				multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_dropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_dropContext alter_assembly_drop() throws RecognitionException {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1545);
			match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_add_clauseContext extends ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return getRuleContext(Alter_asssembly_add_clause_startContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return getRuleContext(Alter_assembly_client_file_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_add_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_add_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_add_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_add_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_add_clauseContext alter_assembly_add_clause() throws RecognitionException {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1547);
			alter_asssembly_add_clause_start();
			setState(1548);
			alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asssembly_add_clause_startContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asssembly_add_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_asssembly_add_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_asssembly_add_clause_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_asssembly_add_clause_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() throws RecognitionException {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1550);
			match(ADD);
			setState(1551);
			match(FILE);
			setState(1552);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_client_file_clauseContext extends ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return getRuleContext(Alter_assembly_file_nameContext.class,0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_client_file_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_client_file_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_client_file_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_client_file_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() throws RecognitionException {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1554);
			alter_assembly_file_name();
			setState(1558);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1555);
				alter_assembly_as();
				setState(1556);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_nameContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_file_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_file_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_file_nameContext alter_assembly_file_name() throws RecognitionException {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1560);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_bitsContext extends ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_bits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_file_bits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_file_bits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_file_bits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_file_bitsContext alter_assembly_file_bits() throws RecognitionException {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1562);
			alter_assembly_as();
			setState(1563);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_asContext alter_assembly_as() throws RecognitionException {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1565);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_with_clauseContext extends ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return getRuleContext(Alter_assembly_withContext.class,0);
		}
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_with_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_with_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_with_clauseContext alter_assembly_with_clause() throws RecognitionException {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			alter_assembly_with();
			setState(1568);
			assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_assembly_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_assembly_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_assembly_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assembly_withContext alter_assembly_with() throws RecognitionException {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1570);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Client_assembly_specifierContext extends ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return getRuleContext(Network_file_shareContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_client_assembly_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClient_assembly_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClient_assembly_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClient_assembly_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Client_assembly_specifierContext client_assembly_specifier() throws RecognitionException {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			setState(1575);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1572);
				network_file_share();
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1573);
				local_file();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1574);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_optionContext extends ParserRuleContext {
		public TerminalNode PERMISSION_SET() { return getToken(MocaSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode SAFE() { return getToken(MocaSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(MocaSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(MocaSqlParser.UNSAFE, 0); }
		public TerminalNode VISIBILITY() { return getToken(MocaSqlParser.VISIBILITY, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode UNCHECKED() { return getToken(MocaSqlParser.UNCHECKED, 0); }
		public TerminalNode DATA() { return getToken(MocaSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAssembly_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAssembly_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAssembly_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assembly_optionContext assembly_option() throws RecognitionException {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		enterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			switch (_input.LA(1)) {
			case PERMISSION_SET:
				{
				setState(1578);
				match(PERMISSION_SET);
				setState(1579);
				match(EQUAL);
				setState(1580);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case VISIBILITY:
				{
				setState(1581);
				match(VISIBILITY);
				setState(1582);
				match(EQUAL);
				setState(1583);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case UNCHECKED:
				{
				setState(1584);
				match(UNCHECKED);
				setState(1585);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1592);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					setState(1588);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1589);
					match(COMMA);
					}
					} 
				}
				setState(1594);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Network_file_shareContext extends ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return getRuleContext(Network_file_startContext.class,0);
		}
		public Network_computerContext network_computer() {
			return getRuleContext(Network_computerContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNetwork_file_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNetwork_file_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNetwork_file_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_file_shareContext network_file_share() throws RecognitionException {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_network_file_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1595);
			network_file_start();
			setState(1596);
			network_computer();
			setState(1597);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_computerContext extends ParserRuleContext {
		public IdContext computer_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_computer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNetwork_computer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNetwork_computer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNetwork_computer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_computerContext network_computer() throws RecognitionException {
		Network_computerContext _localctx = new Network_computerContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_network_computer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1599);
			((Network_computerContext)_localctx).computer_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_file_startContext extends ParserRuleContext {
		public TerminalNode DOUBLE_BACK_SLASH() { return getToken(MocaSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNetwork_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNetwork_file_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNetwork_file_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_file_startContext network_file_start() throws RecognitionException {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_network_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1601);
			match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_pathContext extends ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return getRuleContext(File_directory_path_separatorContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFile_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFile_path(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFile_path(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_pathContext file_path() throws RecognitionException {
		File_pathContext _localctx = new File_pathContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_file_path);
		try {
			setState(1607);
			switch (_input.LA(1)) {
			case BACKSLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1603);
				file_directory_path_separator();
				setState(1604);
				file_path();
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1606);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_directory_path_separatorContext extends ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_directory_path_separator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFile_directory_path_separator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFile_directory_path_separator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFile_directory_path_separator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_directory_path_separatorContext file_directory_path_separator() throws RecognitionException {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_fileContext extends ParserRuleContext {
		public Local_driveContext local_drive() {
			return getRuleContext(Local_driveContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterLocal_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitLocal_file(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitLocal_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_fileContext local_file() throws RecognitionException {
		Local_fileContext _localctx = new Local_fileContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_local_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1611);
			local_drive();
			setState(1612);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_driveContext extends ParserRuleContext {
		public TerminalNode DISK_DRIVE() { return getToken(MocaSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_drive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterLocal_drive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitLocal_drive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitLocal_drive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_driveContext local_drive() throws RecognitionException {
		Local_driveContext _localctx = new Local_driveContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_local_drive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1614);
			match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_filesContext extends ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return getRuleContext(Multiple_local_file_startContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode SINGLE_QUOTE() { return getToken(MocaSqlParser.SINGLE_QUOTE, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMultiple_local_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMultiple_local_files(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMultiple_local_files(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_local_filesContext multiple_local_files() throws RecognitionException {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			setState(1622);
			switch (_input.LA(1)) {
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1616);
				multiple_local_file_start();
				setState(1617);
				local_file();
				setState(1618);
				match(SINGLE_QUOTE);
				setState(1619);
				match(COMMA);
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1621);
				local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_file_startContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE() { return getToken(MocaSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMultiple_local_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMultiple_local_file_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMultiple_local_file_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiple_local_file_startContext multiple_local_file_start() throws RecognitionException {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1624);
			match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(MocaSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(MocaSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MocaSqlParser.BINARY, i);
		}
		public TerminalNode SAFE() { return getToken(MocaSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(MocaSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(MocaSqlParser.UNSAFE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_assemblyContext create_assembly() throws RecognitionException {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1626);
			match(CREATE);
			setState(1627);
			match(ASSEMBLY);
			setState(1628);
			((Create_assemblyContext)_localctx).assembly_name = id();
			setState(1631);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1629);
				match(AUTHORIZATION);
				setState(1630);
				((Create_assemblyContext)_localctx).owner_name = id();
				}
			}

			setState(1633);
			match(FROM);
			setState(1638); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1635);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1634);
						match(COMMA);
						}
					}

					setState(1637);
					_la = _input.LA(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1640); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1642);
				match(WITH);
				setState(1643);
				match(PERMISSION_SET);
				setState(1644);
				match(EQUAL);
				setState(1645);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode DEPENDENTS() { return getToken(MocaSqlParser.DEPENDENTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_assemblyContext drop_assembly() throws RecognitionException {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1648);
			match(DROP);
			setState(1649);
			match(ASSEMBLY);
			setState(1652);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1650);
				match(IF);
				setState(1651);
				match(EXISTS);
				}
			}

			setState(1658); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1655);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1654);
						match(COMMA);
						}
					}

					setState(1657);
					((Drop_assemblyContext)_localctx).assembly_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1660); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1662);
				match(WITH);
				setState(1663);
				match(NO);
				setState(1664);
				match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return getRuleContext(Alter_asymmetric_key_startContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return getRuleContext(Asymmetric_key_optionContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_asymmetric_keyContext alter_asymmetric_key() throws RecognitionException {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1667);
			alter_asymmetric_key_start();
			setState(1668);
			((Alter_asymmetric_keyContext)_localctx).Asym_Key_Name = id();
			setState(1673);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(1669);
				asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				setState(1670);
				match(REMOVE);
				setState(1671);
				match(PRIVATE);
				setState(1672);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_key_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_asymmetric_key_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_asymmetric_key_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_asymmetric_key_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_asymmetric_key_startContext alter_asymmetric_key_start() throws RecognitionException {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1675);
			match(ALTER);
			setState(1676);
			match(ASYMMETRIC);
			setState(1677);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_optionContext extends ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return getRuleContext(Asymmetric_key_option_startContext.class,0);
		}
		public List<Asymmetric_key_password_change_optionContext> asymmetric_key_password_change_option() {
			return getRuleContexts(Asymmetric_key_password_change_optionContext.class);
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return getRuleContext(Asymmetric_key_password_change_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAsymmetric_key_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAsymmetric_key_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAsymmetric_key_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_optionContext asymmetric_key_option() throws RecognitionException {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_asymmetric_key_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1679);
			asymmetric_key_option_start();
			setState(1680);
			asymmetric_key_password_change_option();
			setState(1683);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1681);
				match(COMMA);
				setState(1682);
				asymmetric_key_password_change_option();
				}
			}

			setState(1685);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_option_startContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAsymmetric_key_option_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAsymmetric_key_option_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAsymmetric_key_option_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_option_startContext asymmetric_key_option_start() throws RecognitionException {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1687);
			match(WITH);
			setState(1688);
			match(PRIVATE);
			setState(1689);
			match(KEY);
			setState(1690);
			match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
		public TerminalNode DECRYPTION() { return getToken(MocaSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_password_change_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAsymmetric_key_password_change_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAsymmetric_key_password_change_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAsymmetric_key_password_change_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() throws RecognitionException {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			setState(1702);
			switch (_input.LA(1)) {
			case DECRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1692);
				match(DECRYPTION);
				setState(1693);
				match(BY);
				setState(1694);
				match(PASSWORD);
				setState(1695);
				match(EQUAL);
				setState(1696);
				match(STRING);
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1697);
				match(ENCRYPTION);
				setState(1698);
				match(BY);
				setState(1699);
				match(PASSWORD);
				setState(1700);
				match(EQUAL);
				setState(1701);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Nam;
		public IdContext database_principal_name;
		public IdContext Assembly_Name;
		public IdContext Provider_Name;
		public Token provider_key_name;
		public Token asymmetric_key_password;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(MocaSqlParser.EXECUTABLE_FILE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(MocaSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(MocaSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode RSA_4096() { return getToken(MocaSqlParser.RSA_4096, 0); }
		public TerminalNode RSA_3072() { return getToken(MocaSqlParser.RSA_3072, 0); }
		public TerminalNode RSA_2048() { return getToken(MocaSqlParser.RSA_2048, 0); }
		public TerminalNode RSA_1024() { return getToken(MocaSqlParser.RSA_1024, 0); }
		public TerminalNode RSA_512() { return getToken(MocaSqlParser.RSA_512, 0); }
		public TerminalNode CREATE_NEW() { return getToken(MocaSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(MocaSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_asymmetric_keyContext create_asymmetric_key() throws RecognitionException {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			match(CREATE);
			setState(1705);
			match(ASYMMETRIC);
			setState(1706);
			match(KEY);
			setState(1707);
			((Create_asymmetric_keyContext)_localctx).Asym_Key_Nam = id();
			setState(1710);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1708);
				match(AUTHORIZATION);
				setState(1709);
				((Create_asymmetric_keyContext)_localctx).database_principal_name = id();
				}
			}

			setState(1725);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1712);
				match(FROM);
				setState(1723);
				switch (_input.LA(1)) {
				case FILE:
					{
					setState(1713);
					match(FILE);
					setState(1714);
					match(EQUAL);
					setState(1715);
					match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					setState(1716);
					match(EXECUTABLE_FILE);
					setState(1717);
					match(EQUAL);
					setState(1718);
					match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					setState(1719);
					match(ASSEMBLY);
					setState(1720);
					((Create_asymmetric_keyContext)_localctx).Assembly_Name = id();
					}
					break;
				case PROVIDER:
					{
					setState(1721);
					match(PROVIDER);
					setState(1722);
					((Create_asymmetric_keyContext)_localctx).Provider_Name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1727);
				match(WITH);
				setState(1737);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(1728);
					match(ALGORITHM);
					setState(1729);
					match(EQUAL);
					setState(1730);
					_la = _input.LA(1);
					if ( !(((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (RSA_512 - 292)) | (1L << (RSA_1024 - 292)) | (1L << (RSA_2048 - 292)) | (1L << (RSA_3072 - 292)) | (1L << (RSA_4096 - 292)))) != 0)) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(1731);
					match(PROVIDER_KEY_NAME);
					setState(1732);
					match(EQUAL);
					setState(1733);
					((Create_asymmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(1734);
					match(CREATION_DISPOSITION);
					setState(1735);
					match(EQUAL);
					setState(1736);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1741);
				match(ENCRYPTION);
				setState(1742);
				match(BY);
				setState(1743);
				match(PASSWORD);
				setState(1744);
				match(EQUAL);
				setState(1745);
				((Create_asymmetric_keyContext)_localctx).asymmetric_key_password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_asymmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_asymmetric_keyContext drop_asymmetric_key() throws RecognitionException {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1748);
			match(DROP);
			setState(1749);
			match(ASYMMETRIC);
			setState(1750);
			match(KEY);
			setState(1751);
			((Drop_asymmetric_keyContext)_localctx).key_name = id();
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1752);
				match(REMOVE);
				setState(1753);
				match(PROVIDER);
				setState(1754);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorizationContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_authorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_authorization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_authorization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorizationContext alter_authorization() throws RecognitionException {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alter_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1757);
			alter_authorization_start();
			setState(1761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1758);
				class_type();
				setState(1759);
				colon_colon();
				}
				break;
			}
			setState(1763);
			((Alter_authorizationContext)_localctx).entity = entity_name();
			setState(1764);
			entity_to();
			setState(1765);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_granteeContext extends ParserRuleContext {
		public IdContext principal_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(MocaSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAuthorization_grantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAuthorization_grantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAuthorization_grantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Authorization_granteeContext authorization_grantee() throws RecognitionException {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			setState(1770);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1767);
				((Authorization_granteeContext)_localctx).principal_name = id();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1768);
				match(SCHEMA);
				setState(1769);
				match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_toContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_to; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEntity_to(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEntity_to(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEntity_to(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_toContext entity_to() throws RecognitionException {
		Entity_toContext _localctx = new Entity_toContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_entity_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1772);
			match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Colon_colonContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(MocaSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(MocaSqlParser.COLON, i);
		}
		public Colon_colonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colon_colon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColon_colon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColon_colon(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColon_colon(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Colon_colonContext colon_colon() throws RecognitionException {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_colon_colon);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1774);
			match(COLON);
			setState(1775);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_authorization_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_authorization_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_authorization_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_startContext alter_authorization_start() throws RecognitionException {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1777);
			match(ALTER);
			setState(1778);
			match(AUTHORIZATION);
			setState(1779);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_sql_databaseContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return getRuleContext(Class_type_for_sql_databaseContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_authorization_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_authorization_for_sql_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_authorization_for_sql_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() throws RecognitionException {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1781);
			alter_authorization_start();
			setState(1785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1782);
				class_type_for_sql_database();
				setState(1783);
				colon_colon();
				}
				break;
			}
			setState(1787);
			((Alter_authorization_for_sql_databaseContext)_localctx).entity = entity_name();
			setState(1788);
			entity_to();
			setState(1789);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_azure_dwContext extends ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return getRuleContext(Entity_name_for_azure_dwContext.class,0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return getRuleContext(Class_type_for_azure_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_authorization_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_authorization_for_azure_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_authorization_for_azure_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() throws RecognitionException {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1791);
			alter_authorization_start();
			setState(1795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				setState(1792);
				class_type_for_azure_dw();
				setState(1793);
				colon_colon();
				}
				break;
			}
			setState(1797);
			((Alter_authorization_for_azure_dwContext)_localctx).entity = entity_name_for_azure_dw();
			setState(1798);
			entity_to();
			setState(1799);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_parallel_dwContext extends ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return getRuleContext(Entity_name_for_parallel_dwContext.class,0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return getRuleContext(Class_type_for_parallel_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_authorization_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_authorization_for_parallel_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_authorization_for_parallel_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() throws RecognitionException {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			alter_authorization_start();
			setState(1805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				setState(1802);
				class_type_for_parallel_dw();
				setState(1803);
				colon_colon();
				}
				break;
			}
			setState(1807);
			((Alter_authorization_for_parallel_dwContext)_localctx).entity = entity_name_for_parallel_dw();
			setState(1808);
			entity_to();
			setState(1809);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode CONTRACT() { return getToken(MocaSqlParser.CONTRACT, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode ENDPOINT() { return getToken(MocaSqlParser.ENDPOINT, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(MocaSqlParser.STOPLIST, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(MocaSqlParser.BINDING, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode ROUTE() { return getToken(MocaSqlParser.ROUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(MocaSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(MocaSqlParser.LIST, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClass_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClass_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClass_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_class_type);
		try {
			setState(1845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1811);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1812);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1813);
				match(ASYMMETRIC);
				setState(1814);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1815);
				match(AVAILABILITY);
				setState(1816);
				match(GROUP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1817);
				match(CERTIFICATE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1818);
				match(CONTRACT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1819);
				match(TYPE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1820);
				match(DATABASE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1821);
				match(ENDPOINT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1822);
				match(FULLTEXT);
				setState(1823);
				match(CATALOG);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1824);
				match(FULLTEXT);
				setState(1825);
				match(STOPLIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1826);
				match(MESSAGE);
				setState(1827);
				match(TYPE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1828);
				match(REMOTE);
				setState(1829);
				match(SERVICE);
				setState(1830);
				match(BINDING);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1831);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1832);
				match(ROUTE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1833);
				match(SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1834);
				match(SEARCH);
				setState(1835);
				match(PROPERTY);
				setState(1836);
				match(LIST);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1837);
				match(SERVER);
				setState(1838);
				match(ROLE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1839);
				match(SERVICE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1840);
				match(SYMMETRIC);
				setState(1841);
				match(KEY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1842);
				match(XML);
				setState(1843);
				match(SCHEMA);
				setState(1844);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_sql_databaseContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(MocaSqlParser.STOPLIST, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(MocaSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(MocaSqlParser.LIST, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClass_type_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClass_type_for_sql_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClass_type_for_sql_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_type_for_sql_databaseContext class_type_for_sql_database() throws RecognitionException {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			setState(1868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1847);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1848);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1849);
				match(ASYMMETRIC);
				setState(1850);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1851);
				match(CERTIFICATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1852);
				match(TYPE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1853);
				match(DATABASE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1854);
				match(FULLTEXT);
				setState(1855);
				match(CATALOG);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1856);
				match(FULLTEXT);
				setState(1857);
				match(STOPLIST);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1858);
				match(ROLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1859);
				match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1860);
				match(SEARCH);
				setState(1861);
				match(PROPERTY);
				setState(1862);
				match(LIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1863);
				match(SYMMETRIC);
				setState(1864);
				match(KEY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1865);
				match(XML);
				setState(1866);
				match(SCHEMA);
				setState(1867);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_azure_dwContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClass_type_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClass_type_for_azure_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClass_type_for_azure_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_type_for_azure_dwContext class_type_for_azure_dw() throws RecognitionException {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_parallel_dwContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClass_type_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClass_type_for_parallel_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClass_type_for_parallel_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_type_for_parallel_dwContext class_type_for_parallel_dw() throws RecognitionException {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1872);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_availability_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_availability_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_availability_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_availability_groupContext drop_availability_group() throws RecognitionException {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_drop_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874);
			match(DROP);
			setState(1875);
			match(AVAILABILITY);
			setState(1876);
			match(GROUP);
			setState(1877);
			((Drop_availability_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_groupContext extends ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return getRuleContext(Alter_availability_group_startContext.class,0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return getRuleContext(Alter_availability_group_optionsContext.class,0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_availability_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_availability_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_groupContext alter_availability_group() throws RecognitionException {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alter_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1879);
			alter_availability_group_start();
			setState(1880);
			alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_startContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_availability_group_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_availability_group_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_availability_group_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_group_startContext alter_availability_group_start() throws RecognitionException {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alter_availability_group_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1882);
			match(ALTER);
			setState(1883);
			match(AVAILABILITY);
			setState(1884);
			match(GROUP);
			setState(1885);
			((Alter_availability_group_startContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_optionsContext extends ParserRuleContext {
		public Token milliseconds;
		public IdContext database_name;
		public Token server_instance;
		public Token session_timeout;
		public Token ag_name;
		public Token ag_name_modified;
		public Token listener_name;
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(MocaSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(MocaSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(MocaSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(MocaSqlParser.DB_FAILOVER, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(MocaSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(MocaSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY() { return getToken(MocaSqlParser.SECONDARY, 0); }
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode REPLICA() { return getToken(MocaSqlParser.REPLICA, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> WITH() { return getTokens(MocaSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MocaSqlParser.WITH, i);
		}
		public TerminalNode ENDPOINT_URL() { return getToken(MocaSqlParser.ENDPOINT_URL, 0); }
		public List<TerminalNode> AVAILABILITY_MODE() { return getTokens(MocaSqlParser.AVAILABILITY_MODE); }
		public TerminalNode AVAILABILITY_MODE(int i) {
			return getToken(MocaSqlParser.AVAILABILITY_MODE, i);
		}
		public List<TerminalNode> FAILOVER_MODE() { return getTokens(MocaSqlParser.FAILOVER_MODE); }
		public TerminalNode FAILOVER_MODE(int i) {
			return getToken(MocaSqlParser.FAILOVER_MODE, i);
		}
		public List<TerminalNode> SEEDING_MODE() { return getTokens(MocaSqlParser.SEEDING_MODE); }
		public TerminalNode SEEDING_MODE(int i) {
			return getToken(MocaSqlParser.SEEDING_MODE, i);
		}
		public TerminalNode BACKUP_PRIORITY() { return getToken(MocaSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(MocaSqlParser.PRIMARY_ROLE, 0); }
		public List<TerminalNode> ALLOW_CONNECTIONS() { return getTokens(MocaSqlParser.ALLOW_CONNECTIONS); }
		public TerminalNode ALLOW_CONNECTIONS(int i) {
			return getToken(MocaSqlParser.ALLOW_CONNECTIONS, i);
		}
		public TerminalNode SECONDARY_ROLE() { return getToken(MocaSqlParser.SECONDARY_ROLE, 0); }
		public List<TerminalNode> SYNCHRONOUS_COMMIT() { return getTokens(MocaSqlParser.SYNCHRONOUS_COMMIT); }
		public TerminalNode SYNCHRONOUS_COMMIT(int i) {
			return getToken(MocaSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> ASYNCHRONOUS_COMMIT() { return getTokens(MocaSqlParser.ASYNCHRONOUS_COMMIT); }
		public TerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return getToken(MocaSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> AUTOMATIC() { return getTokens(MocaSqlParser.AUTOMATIC); }
		public TerminalNode AUTOMATIC(int i) {
			return getToken(MocaSqlParser.AUTOMATIC, i);
		}
		public List<TerminalNode> MANUAL() { return getTokens(MocaSqlParser.MANUAL); }
		public TerminalNode MANUAL(int i) {
			return getToken(MocaSqlParser.MANUAL, i);
		}
		public TerminalNode READ_WRITE() { return getToken(MocaSqlParser.READ_WRITE, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode READ_ONLY() { return getToken(MocaSqlParser.READ_ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(MocaSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(MocaSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode JOIN() { return getToken(MocaSqlParser.JOIN, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public List<TerminalNode> LISTENER_URL() { return getTokens(MocaSqlParser.LISTENER_URL); }
		public TerminalNode LISTENER_URL(int i) {
			return getToken(MocaSqlParser.LISTENER_URL, i);
		}
		public TerminalNode GRANT() { return getToken(MocaSqlParser.GRANT, 0); }
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode ANY() { return getToken(MocaSqlParser.ANY, 0); }
		public TerminalNode DENY() { return getToken(MocaSqlParser.DENY, 0); }
		public TerminalNode FAILOVER() { return getToken(MocaSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(MocaSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode LISTENER() { return getToken(MocaSqlParser.LISTENER, 0); }
		public TerminalNode DHCP() { return getToken(MocaSqlParser.DHCP, 0); }
		public TerminalNode IP() { return getToken(MocaSqlParser.IP, 0); }
		public List<TerminalNode> IPV4_ADDR() { return getTokens(MocaSqlParser.IPV4_ADDR); }
		public TerminalNode IPV4_ADDR(int i) {
			return getToken(MocaSqlParser.IPV4_ADDR, i);
		}
		public TerminalNode PORT() { return getToken(MocaSqlParser.PORT, 0); }
		public List<TerminalNode> IPV6_ADDR() { return getTokens(MocaSqlParser.IPV6_ADDR); }
		public TerminalNode IPV6_ADDR(int i) {
			return getToken(MocaSqlParser.IPV6_ADDR, i);
		}
		public TerminalNode RESTART() { return getToken(MocaSqlParser.RESTART, 0); }
		public TerminalNode OFFLINE() { return getToken(MocaSqlParser.OFFLINE, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(MocaSqlParser.DTC_SUPPORT, 0); }
		public TerminalNode PER_DB() { return getToken(MocaSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_availability_group_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_availability_group_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_availability_group_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_group_optionsContext alter_availability_group_options() throws RecognitionException {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			setState(2237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1887);
				match(SET);
				setState(1888);
				match(LR_BRACKET);
				{
				setState(1904);
				switch (_input.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					setState(1889);
					match(AUTOMATED_BACKUP_PREFERENCE);
					setState(1890);
					match(EQUAL);
					setState(1891);
					_la = _input.LA(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					setState(1892);
					match(FAILURE_CONDITION_LEVEL);
					setState(1893);
					match(EQUAL);
					setState(1894);
					match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					setState(1895);
					match(HEALTH_CHECK_TIMEOUT);
					setState(1896);
					match(EQUAL);
					setState(1897);
					((Alter_availability_group_optionsContext)_localctx).milliseconds = match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					setState(1898);
					match(DB_FAILOVER);
					setState(1899);
					match(EQUAL);
					setState(1900);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					setState(1901);
					match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					setState(1902);
					match(EQUAL);
					setState(1903);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1906);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1907);
				match(ADD);
				setState(1908);
				match(DATABASE);
				setState(1909);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1910);
				match(REMOVE);
				setState(1911);
				match(DATABASE);
				setState(1912);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1913);
				match(ADD);
				setState(1914);
				match(REPLICA);
				setState(1915);
				match(ON);
				setState(1916);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				{
				setState(1917);
				match(WITH);
				setState(1918);
				match(LR_BRACKET);
				{
				setState(1922);
				_la = _input.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					setState(1919);
					match(ENDPOINT_URL);
					setState(1920);
					match(EQUAL);
					setState(1921);
					match(STRING);
					}
				}

				setState(1930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(1925);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1924);
						match(COMMA);
						}
					}

					setState(1927);
					match(AVAILABILITY_MODE);
					setState(1928);
					match(EQUAL);
					setState(1929);
					_la = _input.LA(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(1938);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(1933);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1932);
						match(COMMA);
						}
					}

					setState(1935);
					match(FAILOVER_MODE);
					setState(1936);
					match(EQUAL);
					setState(1937);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(1946);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1941);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1940);
						match(COMMA);
						}
					}

					setState(1943);
					match(SEEDING_MODE);
					setState(1944);
					match(EQUAL);
					setState(1945);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(1954);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					setState(1949);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1948);
						match(COMMA);
						}
					}

					setState(1951);
					match(BACKUP_PRIORITY);
					setState(1952);
					match(EQUAL);
					setState(1953);
					match(DECIMAL);
					}
					break;
				}
				setState(1965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
				case 1:
					{
					setState(1957);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1956);
						match(COMMA);
						}
					}

					setState(1959);
					match(PRIMARY_ROLE);
					setState(1960);
					match(LR_BRACKET);
					setState(1961);
					match(ALLOW_CONNECTIONS);
					setState(1962);
					match(EQUAL);
					setState(1963);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(1964);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1976);
				_la = _input.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					setState(1968);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1967);
						match(COMMA);
						}
					}

					setState(1970);
					match(SECONDARY_ROLE);
					setState(1971);
					match(LR_BRACKET);
					setState(1972);
					match(ALLOW_CONNECTIONS);
					setState(1973);
					match(EQUAL);
					{
					setState(1974);
					match(READ_ONLY);
					}
					setState(1975);
					match(RR_BRACKET);
					}
				}

				}
				}
				setState(1978);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1979);
				match(SECONDARY_ROLE);
				setState(1980);
				match(LR_BRACKET);
				setState(1989);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1981);
					match(ALLOW_CONNECTIONS);
					setState(1982);
					match(EQUAL);
					setState(1983);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1984);
					match(READ_ONLY_ROUTING_LIST);
					setState(1985);
					match(EQUAL);
					{
					setState(1986);
					match(LR_BRACKET);
					{
					{
					setState(1987);
					match(STRING);
					}
					}
					setState(1988);
					match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1991);
				match(PRIMARY_ROLE);
				setState(1992);
				match(LR_BRACKET);
				setState(2015);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1993);
					match(ALLOW_CONNECTIONS);
					setState(1994);
					match(EQUAL);
					setState(1995);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1996);
					match(READ_ONLY_ROUTING_LIST);
					setState(1997);
					match(EQUAL);
					{
					setState(1998);
					match(LR_BRACKET);
					setState(2009);
					switch (_input.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						setState(2005);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							setState(2000);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1999);
								match(COMMA);
								}
							}

							setState(2002);
							match(STRING);
							}
							}
							setState(2007);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case NONE:
						{
						setState(2008);
						match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2011);
					match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					setState(2012);
					match(SESSION_TIMEOUT);
					setState(2013);
					match(EQUAL);
					setState(2014);
					((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2017);
				match(MODIFY);
				setState(2018);
				match(REPLICA);
				setState(2019);
				match(ON);
				setState(2020);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				setState(2078);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(2021);
					match(WITH);
					setState(2022);
					match(LR_BRACKET);
					setState(2038);
					switch (_input.LA(1)) {
					case ENDPOINT_URL:
						{
						setState(2023);
						match(ENDPOINT_URL);
						setState(2024);
						match(EQUAL);
						setState(2025);
						match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						setState(2026);
						match(AVAILABILITY_MODE);
						setState(2027);
						match(EQUAL);
						setState(2028);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						setState(2029);
						match(FAILOVER_MODE);
						setState(2030);
						match(EQUAL);
						setState(2031);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						setState(2032);
						match(SEEDING_MODE);
						setState(2033);
						match(EQUAL);
						setState(2034);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						setState(2035);
						match(BACKUP_PRIORITY);
						setState(2036);
						match(EQUAL);
						setState(2037);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					setState(2040);
					match(SECONDARY_ROLE);
					setState(2041);
					match(LR_BRACKET);
					setState(2050);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(2042);
						match(ALLOW_CONNECTIONS);
						setState(2043);
						match(EQUAL);
						setState(2044);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(2045);
						match(READ_ONLY_ROUTING_LIST);
						setState(2046);
						match(EQUAL);
						{
						setState(2047);
						match(LR_BRACKET);
						{
						{
						setState(2048);
						match(STRING);
						}
						}
						setState(2049);
						match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					setState(2052);
					match(PRIMARY_ROLE);
					setState(2053);
					match(LR_BRACKET);
					setState(2076);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(2054);
						match(ALLOW_CONNECTIONS);
						setState(2055);
						match(EQUAL);
						setState(2056);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(2057);
						match(READ_ONLY_ROUTING_LIST);
						setState(2058);
						match(EQUAL);
						{
						setState(2059);
						match(LR_BRACKET);
						setState(2070);
						switch (_input.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							setState(2066);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								setState(2061);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(2060);
									match(COMMA);
									}
								}

								setState(2063);
								match(STRING);
								}
								}
								setState(2068);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						case NONE:
							{
							setState(2069);
							match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2072);
						match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						setState(2073);
						match(SESSION_TIMEOUT);
						setState(2074);
						match(EQUAL);
						setState(2075);
						((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2080);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2081);
				match(REMOVE);
				setState(2082);
				match(REPLICA);
				setState(2083);
				match(ON);
				setState(2084);
				match(STRING);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2085);
				match(JOIN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2086);
				match(JOIN);
				setState(2087);
				match(AVAILABILITY);
				setState(2088);
				match(GROUP);
				setState(2089);
				match(ON);
				setState(2112); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2091);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2090);
							match(COMMA);
							}
						}

						setState(2093);
						((Alter_availability_group_optionsContext)_localctx).ag_name = match(STRING);
						setState(2094);
						match(WITH);
						setState(2095);
						match(LR_BRACKET);
						{
						setState(2096);
						match(LISTENER_URL);
						setState(2097);
						match(EQUAL);
						setState(2098);
						match(STRING);
						setState(2099);
						match(COMMA);
						setState(2100);
						match(AVAILABILITY_MODE);
						setState(2101);
						match(EQUAL);
						setState(2102);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(2103);
						match(COMMA);
						setState(2104);
						match(FAILOVER_MODE);
						setState(2105);
						match(EQUAL);
						setState(2106);
						match(MANUAL);
						setState(2107);
						match(COMMA);
						setState(2108);
						match(SEEDING_MODE);
						setState(2109);
						match(EQUAL);
						setState(2110);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(2111);
						match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2114); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,125,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2116);
				match(MODIFY);
				setState(2117);
				match(AVAILABILITY);
				setState(2118);
				match(GROUP);
				setState(2119);
				match(ON);
				setState(2154); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2121);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2120);
							match(COMMA);
							}
						}

						setState(2123);
						((Alter_availability_group_optionsContext)_localctx).ag_name_modified = match(STRING);
						setState(2124);
						match(WITH);
						setState(2125);
						match(LR_BRACKET);
						{
						setState(2126);
						match(LISTENER_URL);
						setState(2127);
						match(EQUAL);
						setState(2128);
						match(STRING);
						setState(2135);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
						case 1:
							{
							setState(2130);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2129);
								match(COMMA);
								}
							}

							setState(2132);
							match(AVAILABILITY_MODE);
							setState(2133);
							match(EQUAL);
							setState(2134);
							_la = _input.LA(1);
							if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						}
						setState(2143);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
						case 1:
							{
							setState(2138);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2137);
								match(COMMA);
								}
							}

							setState(2140);
							match(FAILOVER_MODE);
							setState(2141);
							match(EQUAL);
							setState(2142);
							match(MANUAL);
							}
							break;
						}
						setState(2151);
						_la = _input.LA(1);
						if (_la==SEEDING_MODE || _la==COMMA) {
							{
							setState(2146);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2145);
								match(COMMA);
								}
							}

							setState(2148);
							match(SEEDING_MODE);
							setState(2149);
							match(EQUAL);
							setState(2150);
							_la = _input.LA(1);
							if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
						}

						setState(2153);
						match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2156); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2158);
				match(GRANT);
				setState(2159);
				match(CREATE);
				setState(2160);
				match(ANY);
				setState(2161);
				match(DATABASE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2162);
				match(DENY);
				setState(2163);
				match(CREATE);
				setState(2164);
				match(ANY);
				setState(2165);
				match(DATABASE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2166);
				match(FAILOVER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2167);
				match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2168);
				match(ADD);
				setState(2169);
				match(LISTENER);
				setState(2170);
				((Alter_availability_group_optionsContext)_localctx).listener_name = match(STRING);
				setState(2171);
				match(LR_BRACKET);
				setState(2205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(2172);
					match(WITH);
					setState(2173);
					match(DHCP);
					{
					setState(2174);
					match(ON);
					setState(2175);
					match(LR_BRACKET);
					{
					setState(2176);
					match(IPV4_ADDR);
					setState(2177);
					match(IPV4_ADDR);
					}
					setState(2179);
					match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					setState(2180);
					match(WITH);
					setState(2181);
					match(IP);
					setState(2182);
					match(LR_BRACKET);
					{
					setState(2194); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2184);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2183);
							match(COMMA);
							}
						}

						setState(2186);
						match(LR_BRACKET);
						setState(2191);
						switch (_input.LA(1)) {
						case IPV4_ADDR:
							{
							setState(2187);
							match(IPV4_ADDR);
							setState(2188);
							match(COMMA);
							setState(2189);
							match(IPV4_ADDR);
							}
							break;
						case IPV6_ADDR:
							{
							setState(2190);
							match(IPV6_ADDR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2193);
						match(RR_BRACKET);
						}
						}
						setState(2196); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					setState(2198);
					match(RR_BRACKET);
					setState(2203);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2199);
						match(COMMA);
						setState(2200);
						match(PORT);
						setState(2201);
						match(EQUAL);
						setState(2202);
						match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				setState(2207);
				match(RR_BRACKET);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2208);
				match(MODIFY);
				setState(2209);
				match(LISTENER);
				setState(2222);
				switch (_input.LA(1)) {
				case ADD:
					{
					setState(2210);
					match(ADD);
					setState(2211);
					match(IP);
					setState(2212);
					match(LR_BRACKET);
					setState(2216);
					switch (_input.LA(1)) {
					case IPV4_ADDR:
						{
						setState(2213);
						match(IPV4_ADDR);
						setState(2214);
						match(IPV4_ADDR);
						}
						break;
					case IPV6_ADDR:
						{
						setState(2215);
						match(IPV6_ADDR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2218);
					match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					setState(2219);
					match(PORT);
					setState(2220);
					match(EQUAL);
					setState(2221);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2224);
				match(RESTART);
				setState(2225);
				match(LISTENER);
				setState(2226);
				match(STRING);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2227);
				match(REMOVE);
				setState(2228);
				match(LISTENER);
				setState(2229);
				match(STRING);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2230);
				match(OFFLINE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2231);
				match(WITH);
				setState(2232);
				match(LR_BRACKET);
				setState(2233);
				match(DTC_SUPPORT);
				setState(2234);
				match(EQUAL);
				setState(2235);
				match(PER_DB);
				setState(2236);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public Token RemoteServiceName;
		public Token PriorityValue;
		public TerminalNode BROKER() { return getToken(MocaSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(MocaSqlParser.PRIORITY, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode CONVERSATION() { return getToken(MocaSqlParser.CONVERSATION, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTRACT_NAME() { return getToken(MocaSqlParser.CONTRACT_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(MocaSqlParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(MocaSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(MocaSqlParser.PRIORITY_LEVEL, 0); }
		public List<TerminalNode> ANY() { return getTokens(MocaSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(MocaSqlParser.ANY, i);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(MocaSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_or_alter_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_or_alter_broker_priority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_or_alter_broker_priority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_broker_priorityContext create_or_alter_broker_priority() throws RecognitionException {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2240);
			match(BROKER);
			setState(2241);
			match(PRIORITY);
			setState(2242);
			((Create_or_alter_broker_priorityContext)_localctx).ConversationPriorityName = id();
			setState(2243);
			match(FOR);
			setState(2244);
			match(CONVERSATION);
			setState(2245);
			match(SET);
			setState(2246);
			match(LR_BRACKET);
			setState(2256);
			_la = _input.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				setState(2247);
				match(CONTRACT_NAME);
				setState(2248);
				match(EQUAL);
				setState(2251);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					{
					setState(2249);
					id();
					}
					}
					break;
				case ANY:
					{
					setState(2250);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2254);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2253);
					match(COMMA);
					}
				}

				}
			}

			setState(2270);
			_la = _input.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				setState(2258);
				match(LOCAL_SERVICE_NAME);
				setState(2259);
				match(EQUAL);
				setState(2265);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case DOUBLE_FORWARD_SLASH:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(2261);
					_la = _input.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						setState(2260);
						match(DOUBLE_FORWARD_SLASH);
						}
					}

					setState(2263);
					id();
					}
					break;
				case ANY:
					{
					setState(2264);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2268);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2267);
					match(COMMA);
					}
				}

				}
			}

			setState(2281);
			_la = _input.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				setState(2272);
				match(REMOTE_SERVICE_NAME);
				setState(2273);
				match(EQUAL);
				setState(2276);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(2274);
					((Create_or_alter_broker_priorityContext)_localctx).RemoteServiceName = match(STRING);
					}
					break;
				case ANY:
					{
					setState(2275);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2279);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2278);
					match(COMMA);
					}
				}

				}
			}

			setState(2289);
			_la = _input.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				setState(2283);
				match(PRIORITY_LEVEL);
				setState(2284);
				match(EQUAL);
				setState(2287);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(2285);
					((Create_or_alter_broker_priorityContext)_localctx).PriorityValue = match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					setState(2286);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2291);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode BROKER() { return getToken(MocaSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(MocaSqlParser.PRIORITY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_broker_priority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_broker_priority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_broker_priorityContext drop_broker_priority() throws RecognitionException {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_drop_broker_priority);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2293);
			match(DROP);
			setState(2294);
			match(BROKER);
			setState(2295);
			match(PRIORITY);
			setState(2296);
			((Drop_broker_priorityContext)_localctx).ConversationPriorityName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(MocaSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode ACTIVE() { return getToken(MocaSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(MocaSqlParser.BEGIN_DIALOG, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public List<TerminalNode> FILE() { return getTokens(MocaSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(MocaSqlParser.FILE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(MocaSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(MocaSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(MocaSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MocaSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(MocaSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(MocaSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(MocaSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(MocaSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_certificateContext alter_certificate() throws RecognitionException {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_alter_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2298);
			match(ALTER);
			setState(2299);
			match(CERTIFICATE);
			setState(2300);
			((Alter_certificateContext)_localctx).certificate_name = id();
			setState(2340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(2301);
				match(REMOVE);
				setState(2302);
				match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				setState(2303);
				match(WITH);
				setState(2304);
				match(PRIVATE);
				setState(2305);
				match(KEY);
				setState(2306);
				match(LR_BRACKET);
				setState(2329); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2329);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(2307);
						match(FILE);
						setState(2308);
						match(EQUAL);
						setState(2309);
						match(STRING);
						setState(2311);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2310);
							match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						setState(2313);
						match(DECRYPTION);
						setState(2314);
						match(BY);
						setState(2315);
						match(PASSWORD);
						setState(2316);
						match(EQUAL);
						setState(2317);
						match(STRING);
						setState(2319);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2318);
							match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						setState(2321);
						match(ENCRYPTION);
						setState(2322);
						match(BY);
						setState(2323);
						match(PASSWORD);
						setState(2324);
						match(EQUAL);
						setState(2325);
						match(STRING);
						setState(2327);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2326);
							match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2331); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				setState(2333);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(2334);
				match(WITH);
				setState(2335);
				match(ACTIVE);
				setState(2336);
				match(FOR);
				setState(2337);
				match(BEGIN_DIALOG);
				setState(2338);
				match(EQUAL);
				setState(2339);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode VALUE() { return getToken(MocaSqlParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(MocaSqlParser.COLUMN_MASTER_KEY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(MocaSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_encryption_keyContext alter_column_encryption_key() throws RecognitionException {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_alter_column_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			match(ALTER);
			setState(2343);
			match(COLUMN);
			setState(2344);
			match(ENCRYPTION);
			setState(2345);
			match(KEY);
			setState(2346);
			((Alter_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2347);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2348);
			match(VALUE);
			setState(2349);
			match(LR_BRACKET);
			setState(2350);
			match(COLUMN_MASTER_KEY);
			setState(2351);
			match(EQUAL);
			setState(2352);
			((Alter_column_encryption_keyContext)_localctx).column_master_key_name = id();
			setState(2361);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2353);
				match(COMMA);
				setState(2354);
				match(ALGORITHM);
				setState(2355);
				match(EQUAL);
				setState(2356);
				((Alter_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
				setState(2357);
				match(COMMA);
				setState(2358);
				match(ENCRYPTED_VALUE);
				setState(2359);
				match(EQUAL);
				setState(2360);
				match(BINARY);
				}
			}

			setState(2363);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public Token encrypted_value;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COLUMN_MASTER_KEY() { return getTokens(MocaSqlParser.COLUMN_MASTER_KEY); }
		public TerminalNode COLUMN_MASTER_KEY(int i) {
			return getToken(MocaSqlParser.COLUMN_MASTER_KEY, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MocaSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MocaSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> ENCRYPTED_VALUE() { return getTokens(MocaSqlParser.ENCRYPTED_VALUE); }
		public TerminalNode ENCRYPTED_VALUE(int i) {
			return getToken(MocaSqlParser.ENCRYPTED_VALUE, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(MocaSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MocaSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_column_encryption_keyContext create_column_encryption_key() throws RecognitionException {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2365);
			match(CREATE);
			setState(2366);
			match(COLUMN);
			setState(2367);
			match(ENCRYPTION);
			setState(2368);
			match(KEY);
			setState(2369);
			((Create_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2370);
			match(WITH);
			setState(2371);
			match(VALUES);
			setState(2391); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2372);
					match(LR_BRACKET);
					setState(2374);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2373);
						match(COMMA);
						}
					}

					setState(2376);
					match(COLUMN_MASTER_KEY);
					setState(2377);
					match(EQUAL);
					setState(2378);
					((Create_column_encryption_keyContext)_localctx).column_master_key_name = id();
					setState(2379);
					match(COMMA);
					setState(2380);
					match(ALGORITHM);
					setState(2381);
					match(EQUAL);
					setState(2382);
					((Create_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
					setState(2383);
					match(COMMA);
					setState(2384);
					match(ENCRYPTED_VALUE);
					setState(2385);
					match(EQUAL);
					setState(2386);
					((Create_column_encryption_keyContext)_localctx).encrypted_value = match(BINARY);
					setState(2387);
					match(RR_BRACKET);
					setState(2389);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2388);
						match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2393); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,163,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_certificateContext drop_certificate() throws RecognitionException {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_drop_certificate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2395);
			match(DROP);
			setState(2396);
			match(CERTIFICATE);
			setState(2397);
			((Drop_certificateContext)_localctx).certificate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_encryption_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_encryption_keyContext drop_column_encryption_key() throws RecognitionException {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_drop_column_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2399);
			match(DROP);
			setState(2400);
			match(COLUMN);
			setState(2401);
			match(ENCRYPTION);
			setState(2402);
			match(KEY);
			setState(2403);
			((Drop_column_encryption_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_column_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_column_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_column_master_keyContext drop_column_master_key() throws RecognitionException {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_drop_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2405);
			match(DROP);
			setState(2406);
			match(COLUMN);
			setState(2407);
			match(MASTER);
			setState(2408);
			match(KEY);
			setState(2409);
			((Drop_column_master_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_contractContext extends ParserRuleContext {
		public IdContext dropped_contract_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode CONTRACT() { return getToken(MocaSqlParser.CONTRACT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_contract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_contract(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_contractContext drop_contract() throws RecognitionException {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_drop_contract);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411);
			match(DROP);
			setState(2412);
			match(CONTRACT);
			setState(2413);
			((Drop_contractContext)_localctx).dropped_contract_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_credentialContext drop_credential() throws RecognitionException {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_drop_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2415);
			match(DROP);
			setState(2416);
			match(CREDENTIAL);
			setState(2417);
			((Drop_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_cryptograhic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(MocaSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cryptograhic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_cryptograhic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_cryptograhic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_cryptograhic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_cryptograhic_providerContext drop_cryptograhic_provider() throws RecognitionException {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_drop_cryptograhic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2419);
			match(DROP);
			setState(2420);
			match(CRYPTOGRAPHIC);
			setState(2421);
			match(PROVIDER);
			setState(2422);
			((Drop_cryptograhic_providerContext)_localctx).provider_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_databaseContext extends ParserRuleContext {
		public IdContext database_name_or_database_snapshot_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_databaseContext drop_database() throws RecognitionException {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_drop_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2424);
			match(DROP);
			setState(2425);
			match(DATABASE);
			setState(2428);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2426);
				match(IF);
				setState(2427);
				match(EXISTS);
				}
			}

			setState(2434); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2431);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2430);
						match(COMMA);
						}
					}

					setState(2433);
					((Drop_databaseContext)_localctx).database_name_or_database_snapshot_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2436); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(MocaSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_database_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_database_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_database_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_database_audit_specificationContext drop_database_audit_specification() throws RecognitionException {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_drop_database_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2438);
			match(DROP);
			setState(2439);
			match(DATABASE);
			setState(2440);
			match(AUDIT);
			setState(2441);
			match(SPECIFICATION);
			setState(2442);
			((Drop_database_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_scoped_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(MocaSqlParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_scoped_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_database_scoped_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_database_scoped_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_database_scoped_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_database_scoped_credentialContext drop_database_scoped_credential() throws RecognitionException {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_drop_database_scoped_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2444);
			match(DROP);
			setState(2445);
			match(DATABASE);
			setState(2446);
			match(SCOPED);
			setState(2447);
			match(CREDENTIAL);
			setState(2448);
			((Drop_database_scoped_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_defaultContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext default_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_defaultContext drop_default() throws RecognitionException {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_drop_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2450);
			match(DROP);
			setState(2451);
			match(DEFAULT);
			setState(2454);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2452);
				match(IF);
				setState(2453);
				match(EXISTS);
				}
			}

			{
			setState(2457);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2456);
				match(COMMA);
				}
			}

			setState(2462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2459);
				((Drop_defaultContext)_localctx).schema_name = id();
				setState(2460);
				match(DOT);
				}
				break;
			}
			setState(2464);
			((Drop_defaultContext)_localctx).default_name = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_endpointContext extends ParserRuleContext {
		public IdContext endPointName;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode ENDPOINT() { return getToken(MocaSqlParser.ENDPOINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_endpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_endpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_endpointContext drop_endpoint() throws RecognitionException {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_drop_endpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466);
			match(DROP);
			setState(2467);
			match(ENDPOINT);
			setState(2468);
			((Drop_endpointContext)_localctx).endPointName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_data_sourceContext extends ParserRuleContext {
		public IdContext external_data_source_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(MocaSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(MocaSqlParser.SOURCE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_external_data_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_external_data_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_data_sourceContext drop_external_data_source() throws RecognitionException {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_drop_external_data_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2470);
			match(DROP);
			setState(2471);
			match(EXTERNAL);
			setState(2472);
			match(DATA);
			setState(2473);
			match(SOURCE);
			setState(2474);
			((Drop_external_data_sourceContext)_localctx).external_data_source_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_file_formatContext extends ParserRuleContext {
		public IdContext external_file_format_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(MocaSqlParser.FORMAT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_external_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_external_file_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_external_file_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_file_formatContext drop_external_file_format() throws RecognitionException {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_drop_external_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2476);
			match(DROP);
			setState(2477);
			match(EXTERNAL);
			setState(2478);
			match(FILE);
			setState(2479);
			match(FORMAT);
			setState(2480);
			((Drop_external_file_formatContext)_localctx).external_file_format_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(MocaSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_libraryContext drop_external_library() throws RecognitionException {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_drop_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2482);
			match(DROP);
			setState(2483);
			match(EXTERNAL);
			setState(2484);
			match(LIBRARY);
			setState(2485);
			((Drop_external_libraryContext)_localctx).library_name = id();
			setState(2488);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2486);
				match(AUTHORIZATION);
				setState(2487);
				((Drop_external_libraryContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_resource_poolContext drop_external_resource_pool() throws RecognitionException {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_drop_external_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2490);
			match(DROP);
			setState(2491);
			match(EXTERNAL);
			setState(2492);
			match(RESOURCE);
			setState(2493);
			match(POOL);
			setState(2494);
			((Drop_external_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_tableContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext table;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_external_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_external_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_tableContext drop_external_table() throws RecognitionException {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_drop_external_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2496);
			match(DROP);
			setState(2497);
			match(EXTERNAL);
			setState(2498);
			match(TABLE);
			setState(2502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2499);
				((Drop_external_tableContext)_localctx).database_name = id();
				setState(2500);
				match(DOT);
				}
				break;
			}
			setState(2507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2504);
				((Drop_external_tableContext)_localctx).schema_name = id();
				setState(2505);
				match(DOT);
				}
				break;
			}
			setState(2509);
			((Drop_external_tableContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_notificationsContext extends ParserRuleContext {
		public IdContext notification_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MocaSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(MocaSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_notifications; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_event_notifications(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_event_notifications(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_event_notifications(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_event_notificationsContext drop_event_notifications() throws RecognitionException {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_drop_event_notifications);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			match(DROP);
			setState(2512);
			match(EVENT);
			setState(2513);
			match(NOTIFICATION);
			setState(2518); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2515);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2514);
					match(COMMA);
					}
				}

				setState(2517);
				((Drop_event_notificationsContext)_localctx).notification_name = id();
				}
				}
				setState(2520); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
			setState(2522);
			match(ON);
			setState(2527);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2523);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2524);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2525);
				match(QUEUE);
				setState(2526);
				((Drop_event_notificationsContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MocaSqlParser.EVENT, 0); }
		public TerminalNode SESSION() { return getToken(MocaSqlParser.SESSION, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_event_session(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_event_session(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_event_sessionContext drop_event_session() throws RecognitionException {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_drop_event_session);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2529);
			match(DROP);
			setState(2530);
			match(EVENT);
			setState(2531);
			match(SESSION);
			setState(2532);
			((Drop_event_sessionContext)_localctx).event_session_name = id();
			setState(2533);
			match(ON);
			setState(2534);
			match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fulltext_catalogContext drop_fulltext_catalog() throws RecognitionException {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_drop_fulltext_catalog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2536);
			match(DROP);
			setState(2537);
			match(FULLTEXT);
			setState(2538);
			match(CATALOG);
			setState(2539);
			((Drop_fulltext_catalogContext)_localctx).catalog_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_indexContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext table;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_fulltext_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_fulltext_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_fulltext_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fulltext_indexContext drop_fulltext_index() throws RecognitionException {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_drop_fulltext_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2541);
			match(DROP);
			setState(2542);
			match(FULLTEXT);
			setState(2543);
			match(INDEX);
			setState(2544);
			match(ON);
			setState(2548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(2545);
				((Drop_fulltext_indexContext)_localctx).schema = id();
				setState(2546);
				match(DOT);
				}
				break;
			}
			setState(2550);
			((Drop_fulltext_indexContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(MocaSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fulltext_stoplistContext drop_fulltext_stoplist() throws RecognitionException {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_fulltext_stoplist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2552);
			match(DROP);
			setState(2553);
			match(FULLTEXT);
			setState(2554);
			match(STOPLIST);
			setState(2555);
			((Drop_fulltext_stoplistContext)_localctx).stoplist_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_loginContext extends ParserRuleContext {
		public IdContext login_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_login; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_login(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_login(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_login(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_loginContext drop_login() throws RecognitionException {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_login);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2557);
			match(DROP);
			setState(2558);
			match(LOGIN);
			setState(2559);
			((Drop_loginContext)_localctx).login_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_master_keyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_master_keyContext drop_master_key() throws RecognitionException {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2561);
			match(DROP);
			setState(2562);
			match(MASTER);
			setState(2563);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_message_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_message_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_message_typeContext drop_message_type() throws RecognitionException {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2565);
			match(DROP);
			setState(2566);
			match(MESSAGE);
			setState(2567);
			match(TYPE);
			setState(2568);
			((Drop_message_typeContext)_localctx).message_type_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(MocaSqlParser.FUNCTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_partition_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_partition_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_partition_functionContext drop_partition_function() throws RecognitionException {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_partition_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2570);
			match(DROP);
			setState(2571);
			match(PARTITION);
			setState(2572);
			match(FUNCTION);
			setState(2573);
			((Drop_partition_functionContext)_localctx).partition_function_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(MocaSqlParser.SCHEME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_partition_scheme(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_partition_scheme(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_partition_schemeContext drop_partition_scheme() throws RecognitionException {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2575);
			match(DROP);
			setState(2576);
			match(PARTITION);
			setState(2577);
			match(SCHEME);
			setState(2578);
			((Drop_partition_schemeContext)_localctx).partition_scheme_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_queueContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_queueContext drop_queue() throws RecognitionException {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2580);
			match(DROP);
			setState(2581);
			match(QUEUE);
			setState(2585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				setState(2582);
				((Drop_queueContext)_localctx).database_name = id();
				setState(2583);
				match(DOT);
				}
				break;
			}
			setState(2590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2587);
				((Drop_queueContext)_localctx).schema_name = id();
				setState(2588);
				match(DOT);
				}
				break;
			}
			setState(2592);
			((Drop_queueContext)_localctx).queue_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(MocaSqlParser.BINDING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_remote_service_bindingContext drop_remote_service_binding() throws RecognitionException {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_remote_service_binding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			match(DROP);
			setState(2595);
			match(REMOTE);
			setState(2596);
			match(SERVICE);
			setState(2597);
			match(BINDING);
			setState(2598);
			((Drop_remote_service_bindingContext)_localctx).binding_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_resource_poolContext drop_resource_pool() throws RecognitionException {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2600);
			match(DROP);
			setState(2601);
			match(RESOURCE);
			setState(2602);
			match(POOL);
			setState(2603);
			((Drop_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_db_roleContext drop_db_role() throws RecognitionException {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			match(DROP);
			setState(2606);
			match(ROLE);
			setState(2609);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2607);
				match(IF);
				setState(2608);
				match(EXISTS);
				}
			}

			setState(2611);
			((Drop_db_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode ROUTE() { return getToken(MocaSqlParser.ROUTE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_route(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_route(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_routeContext drop_route() throws RecognitionException {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_route);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2613);
			match(DROP);
			setState(2614);
			match(ROUTE);
			setState(2615);
			((Drop_routeContext)_localctx).route_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(MocaSqlParser.RULE, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_ruleContext drop_rule() throws RecognitionException {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2617);
			match(DROP);
			setState(2618);
			match(RULE);
			setState(2621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2619);
				match(IF);
				setState(2620);
				match(EXISTS);
				}
				break;
			}
			setState(2632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(2624);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2623);
					match(COMMA);
					}
				}

				setState(2629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(2626);
					((Drop_ruleContext)_localctx).schema_name = id();
					setState(2627);
					match(DOT);
					}
					break;
				}
				setState(2631);
				((Drop_ruleContext)_localctx).rule_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schemaContext drop_schema() throws RecognitionException {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2634);
			match(DROP);
			setState(2635);
			match(SCHEMA);
			setState(2638);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2636);
				match(IF);
				setState(2637);
				match(EXISTS);
				}
			}

			setState(2640);
			((Drop_schemaContext)_localctx).schema_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_search_property_listContext extends ParserRuleContext {
		public IdContext property_list_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SEARCH() { return getToken(MocaSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(MocaSqlParser.LIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_search_property_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_search_property_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_search_property_listContext drop_search_property_list() throws RecognitionException {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_search_property_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2642);
			match(DROP);
			setState(2643);
			match(SEARCH);
			setState(2644);
			match(PROPERTY);
			setState(2645);
			match(LIST);
			setState(2646);
			((Drop_search_property_listContext)_localctx).property_list_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SECURITY() { return getToken(MocaSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(MocaSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_security_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_security_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_security_policyContext drop_security_policy() throws RecognitionException {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_security_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(DROP);
			setState(2649);
			match(SECURITY);
			setState(2650);
			match(POLICY);
			setState(2653);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2651);
				match(IF);
				setState(2652);
				match(EXISTS);
				}
			}

			setState(2658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2655);
				((Drop_security_policyContext)_localctx).schema_name = id();
				setState(2656);
				match(DOT);
				}
				break;
			}
			setState(2660);
			((Drop_security_policyContext)_localctx).security_policy_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2662);
			match(DROP);
			setState(2663);
			match(SEQUENCE);
			setState(2666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(2664);
				match(IF);
				setState(2665);
				match(EXISTS);
				}
				break;
			}
			setState(2682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				setState(2669);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2668);
					match(COMMA);
					}
				}

				setState(2674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(2671);
					((Drop_sequenceContext)_localctx).database_name = id();
					setState(2672);
					match(DOT);
					}
					break;
				}
				setState(2679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2676);
					((Drop_sequenceContext)_localctx).schema_name = id();
					setState(2677);
					match(DOT);
					}
					break;
				}
				setState(2681);
				((Drop_sequenceContext)_localctx).sequence_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_auditContext drop_server_audit() throws RecognitionException {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_server_audit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(DROP);
			setState(2685);
			match(SERVER);
			setState(2686);
			match(AUDIT);
			setState(2687);
			((Drop_server_auditContext)_localctx).audit_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(MocaSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_audit_specificationContext drop_server_audit_specification() throws RecognitionException {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_server_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2689);
			match(DROP);
			setState(2690);
			match(SERVER);
			setState(2691);
			match(AUDIT);
			setState(2692);
			match(SPECIFICATION);
			setState(2693);
			((Drop_server_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_roleContext drop_server_role() throws RecognitionException {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_server_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2695);
			match(DROP);
			setState(2696);
			match(SERVER);
			setState(2697);
			match(ROLE);
			setState(2698);
			((Drop_server_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_serviceContext extends ParserRuleContext {
		public IdContext dropped_service_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_serviceContext drop_service() throws RecognitionException {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_service);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			match(DROP);
			setState(2701);
			match(SERVICE);
			setState(2702);
			((Drop_serviceContext)_localctx).dropped_service_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_signatureContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext module_name;
		public IdContext cert_name;
		public IdContext Asym_key_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SIGNATURE() { return getToken(MocaSqlParser.SIGNATURE, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COUNTER() { return getToken(MocaSqlParser.COUNTER, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<TerminalNode> CERTIFICATE() { return getTokens(MocaSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(MocaSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(MocaSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(MocaSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_signatureContext drop_signature() throws RecognitionException {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			match(DROP);
			setState(2706);
			_la = _input.LA(1);
			if (_la==COUNTER) {
				{
				setState(2705);
				match(COUNTER);
				}
			}

			setState(2708);
			match(SIGNATURE);
			setState(2709);
			match(FROM);
			setState(2713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2710);
				((Drop_signatureContext)_localctx).schema_name = id();
				setState(2711);
				match(DOT);
				}
				break;
			}
			setState(2715);
			((Drop_signatureContext)_localctx).module_name = id();
			setState(2716);
			match(BY);
			setState(2728); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2728);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(2718);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2717);
						match(COMMA);
						}
					}

					setState(2720);
					match(CERTIFICATE);
					setState(2721);
					((Drop_signatureContext)_localctx).cert_name = id();
					}
					break;
				case 2:
					{
					setState(2723);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2722);
						match(COMMA);
						}
					}

					setState(2725);
					match(ASYMMETRIC);
					setState(2726);
					match(KEY);
					setState(2727);
					((Drop_signatureContext)_localctx).Asym_key_name = id();
					}
					break;
				}
				}
				setState(2730); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ASYMMETRIC || _la==CERTIFICATE || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statistics_name_azure_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext object_name;
		public IdContext statistics_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(MocaSqlParser.STATISTICS, 0); }
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_name_azure_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_statistics_name_azure_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_statistics_name_azure_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() throws RecognitionException {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2732);
			match(DROP);
			setState(2733);
			match(STATISTICS);
			setState(2737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2734);
				((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).schema_name = id();
				setState(2735);
				match(DOT);
				}
				break;
			}
			setState(2739);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).object_name = id();
			setState(2740);
			match(DOT);
			setState(2741);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).statistics_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_symmetric_keyContext extends ParserRuleContext {
		public IdContext symmetric_key_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_symmetric_keyContext drop_symmetric_key() throws RecognitionException {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_symmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2743);
			match(DROP);
			setState(2744);
			match(SYMMETRIC);
			setState(2745);
			match(KEY);
			setState(2746);
			((Drop_symmetric_keyContext)_localctx).symmetric_key_name = id();
			setState(2750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2747);
				match(REMOVE);
				setState(2748);
				match(PROVIDER);
				setState(2749);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_synonymContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext synonym_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SYNONYM() { return getToken(MocaSqlParser.SYNONYM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_synonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_synonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_synonymContext drop_synonym() throws RecognitionException {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_synonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2752);
			match(DROP);
			setState(2753);
			match(SYNONYM);
			setState(2756);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2754);
				match(IF);
				setState(2755);
				match(EXISTS);
				}
			}

			setState(2761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				setState(2758);
				((Drop_synonymContext)_localctx).schema = id();
				setState(2759);
				match(DOT);
				}
				break;
			}
			setState(2763);
			((Drop_synonymContext)_localctx).synonym_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_userContext extends ParserRuleContext {
		public IdContext user_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_userContext drop_user() throws RecognitionException {
		Drop_userContext _localctx = new Drop_userContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2765);
			match(DROP);
			setState(2766);
			match(USER);
			setState(2769);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2767);
				match(IF);
				setState(2768);
				match(EXISTS);
				}
			}

			setState(2771);
			((Drop_userContext)_localctx).user_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_workload_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode WORKLOAD() { return getToken(MocaSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_workload_groupContext drop_workload_group() throws RecognitionException {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_workload_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2773);
			match(DROP);
			setState(2774);
			match(WORKLOAD);
			setState(2775);
			match(GROUP);
			setState(2776);
			((Drop_workload_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_xml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_xml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_xml_schema_collectionContext drop_xml_schema_collection() throws RecognitionException {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2778);
			match(DROP);
			setState(2779);
			match(XML);
			setState(2780);
			match(SCHEMA);
			setState(2781);
			match(COLLECTION);
			setState(2785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2782);
				((Drop_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(2783);
				match(DOT);
				}
				break;
			}
			setState(2787);
			((Drop_xml_schema_collectionContext)_localctx).sql_identifier = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(MocaSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(MocaSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDisable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDisable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDisable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disable_triggerContext disable_trigger() throws RecognitionException {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_disable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			match(DISABLE);
			setState(2790);
			match(TRIGGER);
			setState(2805);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
			case URL:
				{
				setState(2800); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2792);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2791);
						match(COMMA);
						}
					}

					setState(2797);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
					case 1:
						{
						setState(2794);
						((Disable_triggerContext)_localctx).schema_name = id();
						setState(2795);
						match(DOT);
						}
						break;
					}
					setState(2799);
					((Disable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2802); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
				}
				break;
			case ALL:
				{
				setState(2804);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2807);
			match(ON);
			setState(2817);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				{
				setState(2811);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					setState(2808);
					((Disable_triggerContext)_localctx).schema_id = id();
					setState(2809);
					match(DOT);
					}
					break;
				}
				setState(2813);
				((Disable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2814);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2815);
				match(ALL);
				setState(2816);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(MocaSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(MocaSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEnable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEnable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_enable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			match(ENABLE);
			setState(2820);
			match(TRIGGER);
			setState(2835);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
			case URL:
				{
				setState(2830); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2822);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2821);
						match(COMMA);
						}
					}

					setState(2827);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
					case 1:
						{
						setState(2824);
						((Enable_triggerContext)_localctx).schema_name = id();
						setState(2825);
						match(DOT);
						}
						break;
					}
					setState(2829);
					((Enable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2832); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
				}
				break;
			case ALL:
				{
				setState(2834);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2837);
			match(ON);
			setState(2847);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				{
				setState(2841);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
				case 1:
					{
					setState(2838);
					((Enable_triggerContext)_localctx).schema_id = id();
					setState(2839);
					match(DOT);
					}
					break;
				}
				setState(2843);
				((Enable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2844);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2845);
				match(ALL);
				setState(2846);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tableContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode LOCK() { return getToken(MocaSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public TerminalNode MODE() { return getToken(MocaSqlParser.MODE, 0); }
		public TerminalNode SHARE() { return getToken(MocaSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MocaSqlParser.EXCLUSIVE, 0); }
		public TerminalNode WAIT() { return getToken(MocaSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(MocaSqlParser.NOWAIT, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterLock_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitLock_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitLock_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_tableContext lock_table() throws RecognitionException {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_lock_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2849);
			match(LOCK);
			setState(2850);
			match(TABLE);
			setState(2851);
			table_name();
			setState(2852);
			match(IN);
			setState(2853);
			_la = _input.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2854);
			match(MODE);
			setState(2858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2855);
				match(WAIT);
				setState(2856);
				((Lock_tableContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(2857);
				match(NOWAIT);
				}
				break;
			}
			setState(2861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				setState(2860);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MocaSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public TerminalNode PARTITIONS() { return getToken(MocaSqlParser.PARTITIONS, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTruncate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTruncate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			match(TRUNCATE);
			setState(2864);
			match(TABLE);
			setState(2865);
			table_name();
			setState(2885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(2866);
				match(WITH);
				setState(2867);
				match(LR_BRACKET);
				setState(2868);
				match(PARTITIONS);
				setState(2869);
				match(LR_BRACKET);
				setState(2879); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2871);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2870);
						match(COMMA);
						}
					}

					setState(2877);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
					case 1:
						{
						setState(2873);
						match(DECIMAL);
						}
						break;
					case 2:
						{
						setState(2874);
						match(DECIMAL);
						setState(2875);
						match(TO);
						setState(2876);
						match(DECIMAL);
						}
						break;
					}
					}
					}
					setState(2881); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				setState(2883);
				match(RR_BRACKET);
				setState(2884);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token key_store_provider_name;
		public Token key_path;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(MocaSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode KEY_PATH() { return getToken(MocaSqlParser.KEY_PATH, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_column_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_column_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_column_master_keyContext create_column_master_key() throws RecognitionException {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_create_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2887);
			match(CREATE);
			setState(2888);
			match(COLUMN);
			setState(2889);
			match(MASTER);
			setState(2890);
			match(KEY);
			setState(2891);
			((Create_column_master_keyContext)_localctx).key_name = id();
			setState(2892);
			match(WITH);
			setState(2893);
			match(LR_BRACKET);
			setState(2894);
			match(KEY_STORE_PROVIDER_NAME);
			setState(2895);
			match(EQUAL);
			setState(2896);
			((Create_column_master_keyContext)_localctx).key_store_provider_name = match(STRING);
			setState(2897);
			match(COMMA);
			setState(2898);
			match(KEY_PATH);
			setState(2899);
			match(EQUAL);
			setState(2900);
			((Create_column_master_keyContext)_localctx).key_path = match(STRING);
			setState(2901);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(MocaSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_credentialContext alter_credential() throws RecognitionException {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_alter_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2903);
			match(ALTER);
			setState(2904);
			match(CREDENTIAL);
			setState(2905);
			((Alter_credentialContext)_localctx).credential_name = id();
			setState(2906);
			match(WITH);
			setState(2907);
			match(IDENTITY);
			setState(2908);
			match(EQUAL);
			setState(2909);
			((Alter_credentialContext)_localctx).identity_name = match(STRING);
			setState(2914);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2910);
				match(COMMA);
				setState(2911);
				match(SECRET);
				setState(2912);
				match(EQUAL);
				setState(2913);
				((Alter_credentialContext)_localctx).secret = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public IdContext cryptographic_provider_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(MocaSqlParser.SECRET, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(MocaSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_credentialContext create_credential() throws RecognitionException {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_create_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2916);
			match(CREATE);
			setState(2917);
			match(CREDENTIAL);
			setState(2918);
			((Create_credentialContext)_localctx).credential_name = id();
			setState(2919);
			match(WITH);
			setState(2920);
			match(IDENTITY);
			setState(2921);
			match(EQUAL);
			setState(2922);
			((Create_credentialContext)_localctx).identity_name = match(STRING);
			setState(2927);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2923);
				match(COMMA);
				setState(2924);
				match(SECRET);
				setState(2925);
				match(EQUAL);
				setState(2926);
				((Create_credentialContext)_localctx).secret = match(STRING);
				}
			}

			setState(2933);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2929);
				match(FOR);
				setState(2930);
				match(CRYPTOGRAPHIC);
				setState(2931);
				match(PROVIDER);
				setState(2932);
				((Create_credentialContext)_localctx).cryptographic_provider_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token crypto_provider_ddl_file;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(MocaSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_cryptographic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_cryptographic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_cryptographic_providerContext alter_cryptographic_provider() throws RecognitionException {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alter_cryptographic_provider);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2935);
			match(ALTER);
			setState(2936);
			match(CRYPTOGRAPHIC);
			setState(2937);
			match(PROVIDER);
			setState(2938);
			((Alter_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2943);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2939);
				match(FROM);
				setState(2940);
				match(FILE);
				setState(2941);
				match(EQUAL);
				setState(2942);
				((Alter_cryptographic_providerContext)_localctx).crypto_provider_ddl_file = match(STRING);
				}
			}

			setState(2946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2945);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token path_of_DLL;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(MocaSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_cryptographic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_cryptographic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_cryptographic_providerContext create_cryptographic_provider() throws RecognitionException {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_create_cryptographic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948);
			match(CREATE);
			setState(2949);
			match(CRYPTOGRAPHIC);
			setState(2950);
			match(PROVIDER);
			setState(2951);
			((Create_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2952);
			match(FROM);
			setState(2953);
			match(FILE);
			setState(2954);
			match(EQUAL);
			setState(2955);
			((Create_cryptographic_providerContext)_localctx).path_of_DLL = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_notificationContext extends ParserRuleContext {
		public IdContext event_notification_name;
		public IdContext queue_name;
		public IdContext event_type_or_group;
		public Token broker_service;
		public Token broker_service_specifier_or_current_database;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MocaSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(MocaSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode FAN_IN() { return getToken(MocaSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_notification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_event_notification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_event_notification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_event_notification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_notificationContext create_event_notification() throws RecognitionException {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_create_event_notification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(CREATE);
			setState(2958);
			match(EVENT);
			setState(2959);
			match(NOTIFICATION);
			setState(2960);
			((Create_event_notificationContext)_localctx).event_notification_name = id();
			setState(2961);
			match(ON);
			setState(2966);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2962);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2963);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2964);
				match(QUEUE);
				setState(2965);
				((Create_event_notificationContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2970);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2968);
				match(WITH);
				setState(2969);
				match(FAN_IN);
				}
			}

			setState(2972);
			match(FOR);
			setState(2977); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2974);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2973);
					match(COMMA);
					}
				}

				setState(2976);
				((Create_event_notificationContext)_localctx).event_type_or_group = id();
				}
				}
				setState(2979); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
			setState(2981);
			match(TO);
			setState(2982);
			match(SERVICE);
			setState(2983);
			((Create_event_notificationContext)_localctx).broker_service = match(STRING);
			setState(2984);
			match(COMMA);
			setState(2985);
			((Create_event_notificationContext)_localctx).broker_service_specifier_or_current_database = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext event_name;
		public IdContext event_customizable_attributue;
		public IdContext action_name;
		public IdContext target_name;
		public IdContext target_parameter_name;
		public Token max_memory;
		public Token max_dispatch_latency_seconds;
		public Token max_event_size;
		public List<TerminalNode> EVENT() { return getTokens(MocaSqlParser.EVENT); }
		public TerminalNode EVENT(int i) {
			return getToken(MocaSqlParser.EVENT, i);
		}
		public TerminalNode SESSION() { return getToken(MocaSqlParser.SESSION, 0); }
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ADD() { return getTokens(MocaSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(MocaSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(MocaSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(MocaSqlParser.DROP, i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(MocaSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(MocaSqlParser.TARGET, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode START() { return getToken(MocaSqlParser.START, 0); }
		public TerminalNode STOP() { return getToken(MocaSqlParser.STOP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> SET() { return getTokens(MocaSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MocaSqlParser.SET, i);
		}
		public TerminalNode MAX_MEMORY() { return getToken(MocaSqlParser.MAX_MEMORY, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(MocaSqlParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(MocaSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(MocaSqlParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(MocaSqlParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(MocaSqlParser.TRACK_CAUSALITY, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(MocaSqlParser.STARTUP_STATE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> KB() { return getTokens(MocaSqlParser.KB); }
		public TerminalNode KB(int i) {
			return getToken(MocaSqlParser.KB, i);
		}
		public List<TerminalNode> MB() { return getTokens(MocaSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(MocaSqlParser.MB, i);
		}
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(MocaSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(MocaSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(MocaSqlParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public TerminalNode PER_NODE() { return getToken(MocaSqlParser.PER_NODE, 0); }
		public TerminalNode PER_CPU() { return getToken(MocaSqlParser.PER_CPU, 0); }
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public TerminalNode SECONDS() { return getToken(MocaSqlParser.SECONDS, 0); }
		public TerminalNode INFINITE() { return getToken(MocaSqlParser.INFINITE, 0); }
		public List<TerminalNode> ACTION() { return getTokens(MocaSqlParser.ACTION); }
		public TerminalNode ACTION(int i) {
			return getToken(MocaSqlParser.ACTION, i);
		}
		public List<TerminalNode> WHERE() { return getTokens(MocaSqlParser.WHERE); }
		public TerminalNode WHERE(int i) {
			return getToken(MocaSqlParser.WHERE, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_or_alter_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_or_alter_event_session(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_or_alter_event_session(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_event_sessionContext create_or_alter_event_session() throws RecognitionException {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2987);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2988);
			match(EVENT);
			setState(2989);
			match(SESSION);
			setState(2990);
			((Create_or_alter_event_sessionContext)_localctx).event_session_name = id();
			setState(2991);
			match(ON);
			setState(2992);
			match(SERVER);
			setState(3060);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2994);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2993);
						match(COMMA);
						}
					}

					setState(2996);
					match(ADD);
					setState(2997);
					match(EVENT);
					{
					setState(3001);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
					case 1:
						{
						setState(2998);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(2999);
						match(DOT);
						}
						break;
					}
					setState(3003);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3004);
					match(DOT);
					setState(3005);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					setState(3055);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3007);
							match(LR_BRACKET);
							setState(3021);
							_la = _input.LA(1);
							if (_la==SET) {
								{
								setState(3008);
								match(SET);
								setState(3018);
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
								while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
									if ( _alt==1 ) {
										{
										{
										setState(3010);
										_la = _input.LA(1);
										if (_la==COMMA) {
											{
											setState(3009);
											match(COMMA);
											}
										}

										setState(3012);
										((Create_or_alter_event_sessionContext)_localctx).event_customizable_attributue = id();
										setState(3013);
										match(EQUAL);
										setState(3014);
										_la = _input.LA(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.recoverInline(this);
										} else {
											consume();
										}
										}
										} 
									}
									setState(3020);
									_errHandler.sync(this);
									_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
								}
								}
							}

							setState(3043); 
							_errHandler.sync(this);
							_la = _input.LA(1);
							do {
								{
								{
								setState(3023);
								match(ACTION);
								setState(3024);
								match(LR_BRACKET);
								setState(3037); 
								_errHandler.sync(this);
								_la = _input.LA(1);
								do {
									{
									{
									setState(3026);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(3025);
										match(COMMA);
										}
									}

									setState(3031);
									_errHandler.sync(this);
									switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
									case 1:
										{
										setState(3028);
										((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
										setState(3029);
										match(DOT);
										}
										break;
									}
									setState(3033);
									((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
									setState(3034);
									match(DOT);
									setState(3035);
									((Create_or_alter_event_sessionContext)_localctx).action_name = id();
									}
									}
									setState(3039); 
									_errHandler.sync(this);
									_la = _input.LA(1);
								} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
								setState(3041);
								match(RR_BRACKET);
								}
								}
								setState(3045); 
								_errHandler.sync(this);
								_la = _input.LA(1);
							} while ( _la==ACTION );
							setState(3049);
							_la = _input.LA(1);
							if (_la==WHERE) {
								{
								setState(3047);
								match(WHERE);
								setState(3048);
								event_session_predicate_expression();
								}
							}

							setState(3051);
							match(RR_BRACKET);
							}
							} 
						}
						setState(3057);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
					}
					}
					} 
				}
				setState(3062);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			}
			setState(3079);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,245,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3064);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3063);
						match(COMMA);
						}
					}

					setState(3066);
					match(DROP);
					setState(3067);
					match(EVENT);
					setState(3071);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
					case 1:
						{
						setState(3068);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(3069);
						match(DOT);
						}
						break;
					}
					setState(3073);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3074);
					match(DOT);
					setState(3075);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					} 
				}
				setState(3081);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,245,_ctx);
			}
			setState(3123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				{
				setState(3082);
				match(ADD);
				setState(3083);
				match(TARGET);
				setState(3087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(3084);
					((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
					setState(3085);
					match(DOT);
					}
					break;
				}
				setState(3089);
				((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
				setState(3090);
				match(DOT);
				setState(3091);
				((Create_or_alter_event_sessionContext)_localctx).target_name = id();
				}
				setState(3118);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3093);
						match(LR_BRACKET);
						setState(3094);
						match(SET);
						setState(3110); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3096);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3095);
								match(COMMA);
								}
							}

							setState(3098);
							((Create_or_alter_event_sessionContext)_localctx).target_parameter_name = id();
							setState(3099);
							match(EQUAL);
							setState(3108);
							switch (_input.LA(1)) {
							case DECIMAL:
							case LR_BRACKET:
								{
								setState(3101);
								_la = _input.LA(1);
								if (_la==LR_BRACKET) {
									{
									setState(3100);
									match(LR_BRACKET);
									}
								}

								setState(3103);
								match(DECIMAL);
								setState(3105);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
								case 1:
									{
									setState(3104);
									match(RR_BRACKET);
									}
									break;
								}
								}
								break;
							case STRING:
								{
								setState(3107);
								match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							setState(3112); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
						setState(3114);
						match(RR_BRACKET);
						}
						} 
					}
					setState(3120);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
				}
				}
				}
				setState(3125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3139);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3126);
					match(DROP);
					setState(3127);
					match(TARGET);
					setState(3131);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
					case 1:
						{
						setState(3128);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(3129);
						match(DOT);
						}
						break;
					}
					setState(3133);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3134);
					match(DOT);
					setState(3135);
					((Create_or_alter_event_sessionContext)_localctx).target_name = id();
					}
					} 
				}
				setState(3141);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			}
			setState(3207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(3142);
				match(WITH);
				setState(3143);
				match(LR_BRACKET);
				setState(3151);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(3145);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3144);
						match(COMMA);
						}
					}

					setState(3147);
					match(MAX_MEMORY);
					setState(3148);
					match(EQUAL);
					setState(3149);
					((Create_or_alter_event_sessionContext)_localctx).max_memory = match(DECIMAL);
					setState(3150);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(3154);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3153);
						match(COMMA);
						}
					}

					setState(3156);
					match(EVENT_RETENTION_MODE);
					setState(3157);
					match(EQUAL);
					setState(3158);
					_la = _input.LA(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3171);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(3162);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3161);
						match(COMMA);
						}
					}

					setState(3164);
					match(MAX_DISPATCH_LATENCY);
					setState(3165);
					match(EQUAL);
					setState(3169);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(3166);
						((Create_or_alter_event_sessionContext)_localctx).max_dispatch_latency_seconds = match(DECIMAL);
						setState(3167);
						match(SECONDS);
						}
						break;
					case INFINITE:
						{
						setState(3168);
						match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(3180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(3174);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3173);
						match(COMMA);
						}
					}

					setState(3176);
					match(MAX_EVENT_SIZE);
					setState(3177);
					match(EQUAL);
					setState(3178);
					((Create_or_alter_event_sessionContext)_localctx).max_event_size = match(DECIMAL);
					setState(3179);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(3183);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3182);
						match(COMMA);
						}
					}

					setState(3185);
					match(MEMORY_PARTITION_MODE);
					setState(3186);
					match(EQUAL);
					setState(3187);
					_la = _input.LA(1);
					if ( !(((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (NONE - 213)) | (1L << (PER_CPU - 213)) | (1L << (PER_NODE - 213)))) != 0)) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3196);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(3191);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3190);
						match(COMMA);
						}
					}

					setState(3193);
					match(TRACK_CAUSALITY);
					setState(3194);
					match(EQUAL);
					setState(3195);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3204);
				_la = _input.LA(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					setState(3199);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3198);
						match(COMMA);
						}
					}

					setState(3201);
					match(STARTUP_STATE);
					setState(3202);
					match(EQUAL);
					setState(3203);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(3206);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(3209);
				match(STATE);
				setState(3210);
				match(EQUAL);
				setState(3211);
				_la = _input.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_expressionContext extends ParserRuleContext {
		public List<Event_session_predicate_factorContext> event_session_predicate_factor() {
			return getRuleContexts(Event_session_predicate_factorContext.class);
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return getRuleContext(Event_session_predicate_factorContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> NOT() { return getTokens(MocaSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(MocaSqlParser.NOT, i);
		}
		public List<TerminalNode> AND() { return getTokens(MocaSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MocaSqlParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(MocaSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(MocaSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEvent_session_predicate_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEvent_session_predicate_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEvent_session_predicate_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_expressionContext event_session_predicate_expression() throws RecognitionException {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_event_session_predicate_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3230); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3215);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3214);
					match(COMMA);
					}
				}

				setState(3218);
				_la = _input.LA(1);
				if (_la==AND || _la==OR) {
					{
					setState(3217);
					_la = _input.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(3221);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3220);
					match(NOT);
					}
				}

				setState(3228);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(3223);
					event_session_predicate_factor();
					}
					break;
				case 2:
					{
					setState(3224);
					match(LR_BRACKET);
					setState(3225);
					event_session_predicate_expression();
					setState(3226);
					match(RR_BRACKET);
					}
					break;
				}
				}
				}
				setState(3232); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AND || _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)) | (1L << (NOT - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (OR - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || ((((_la - 835)) & ~0x3f) == 0 && ((1L << (_la - 835)) & ((1L << (LR_BRACKET - 835)) | (1L << (COMMA - 835)) | (1L << (URL - 835)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_factorContext extends ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return getRuleContext(Event_session_predicate_leafContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return getRuleContext(Event_session_predicate_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEvent_session_predicate_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEvent_session_predicate_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEvent_session_predicate_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_factorContext event_session_predicate_factor() throws RecognitionException {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_event_session_predicate_factor);
		try {
			setState(3239);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3234);
				event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3235);
				match(LR_BRACKET);
				setState(3236);
				event_session_predicate_expression();
				setState(3237);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_leafContext extends ParserRuleContext {
		public IdContext event_field_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext predicate_source_name;
		public IdContext predicate_compare_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode GREATER() { return getToken(MocaSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(MocaSqlParser.LESS, 0); }
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public TerminalNode EXCLAMATION() { return getToken(MocaSqlParser.EXCLAMATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_leaf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEvent_session_predicate_leaf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEvent_session_predicate_leaf(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEvent_session_predicate_leaf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_leafContext event_session_predicate_leaf() throws RecognitionException {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_event_session_predicate_leaf);
		int _la;
		try {
			setState(3297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(3241);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					setState(3252);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
					case 1:
						{
						setState(3242);
						((Event_session_predicate_leafContext)_localctx).event_field_name = id();
						}
						break;
					case 2:
						{
						{
						setState(3246);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
						case 1:
							{
							setState(3243);
							((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
							setState(3244);
							match(DOT);
							}
							break;
						}
						setState(3248);
						((Event_session_predicate_leafContext)_localctx).event_package_name = id();
						setState(3249);
						match(DOT);
						setState(3250);
						((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
						}
						}
						break;
					}
					setState(3265);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
					case 1:
						{
						setState(3254);
						match(EQUAL);
						}
						break;
					case 2:
						{
						{
						setState(3255);
						match(LESS);
						setState(3256);
						match(GREATER);
						}
						}
						break;
					case 3:
						{
						{
						setState(3257);
						match(EXCLAMATION);
						setState(3258);
						match(EQUAL);
						}
						}
						break;
					case 4:
						{
						setState(3259);
						match(GREATER);
						}
						break;
					case 5:
						{
						{
						setState(3260);
						match(GREATER);
						setState(3261);
						match(EQUAL);
						}
						}
						break;
					case 6:
						{
						setState(3262);
						match(LESS);
						}
						break;
					case 7:
						{
						setState(3263);
						match(LESS);
						setState(3264);
						match(EQUAL);
						}
						break;
					}
					setState(3267);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3274);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(3271);
					((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
					setState(3272);
					match(DOT);
					}
					break;
				}
				setState(3276);
				((Event_session_predicate_leafContext)_localctx).event_package_name = id();
				setState(3277);
				match(DOT);
				setState(3278);
				((Event_session_predicate_leafContext)_localctx).predicate_compare_name = id();
				setState(3279);
				match(LR_BRACKET);
				setState(3293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(3280);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					{
					setState(3284);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
					case 1:
						{
						setState(3281);
						((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
						setState(3282);
						match(DOT);
						}
						break;
					}
					setState(3286);
					((Event_session_predicate_leafContext)_localctx).event_package_name = id();
					setState(3287);
					match(DOT);
					setState(3288);
					((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
					}
					setState(3290);
					match(COMMA);
					setState(3291);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3295);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_data_sourceContext extends ParserRuleContext {
		public IdContext data_source_name;
		public Token location;
		public Token resource_manager_location;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(MocaSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(MocaSqlParser.SOURCE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LOCATION() { return getTokens(MocaSqlParser.LOCATION); }
		public TerminalNode LOCATION(int i) {
			return getToken(MocaSqlParser.LOCATION, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RESOURCE_MANAGER_LOCATION() { return getTokens(MocaSqlParser.RESOURCE_MANAGER_LOCATION); }
		public TerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return getToken(MocaSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(MocaSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(MocaSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> QUOTED_URL() { return getTokens(MocaSqlParser.QUOTED_URL); }
		public TerminalNode QUOTED_URL(int i) {
			return getToken(MocaSqlParser.QUOTED_URL, i);
		}
		public List<TerminalNode> QUOTED_HOST_AND_PORT() { return getTokens(MocaSqlParser.QUOTED_HOST_AND_PORT); }
		public TerminalNode QUOTED_HOST_AND_PORT(int i) {
			return getToken(MocaSqlParser.QUOTED_HOST_AND_PORT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(MocaSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_external_data_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_external_data_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_data_sourceContext alter_external_data_source() throws RecognitionException {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			setState(3346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3299);
				match(ALTER);
				setState(3300);
				match(EXTERNAL);
				setState(3301);
				match(DATA);
				setState(3302);
				match(SOURCE);
				setState(3303);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3304);
				match(SET);
				setState(3320); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3320);
						switch (_input.LA(1)) {
						case LOCATION:
							{
							setState(3305);
							match(LOCATION);
							setState(3306);
							match(EQUAL);
							setState(3307);
							((Alter_external_data_sourceContext)_localctx).location = _input.LT(1);
							_la = _input.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								((Alter_external_data_sourceContext)_localctx).location = (Token)_errHandler.recoverInline(this);
							} else {
								consume();
							}
							setState(3309);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3308);
								match(COMMA);
								}
							}

							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							setState(3311);
							match(RESOURCE_MANAGER_LOCATION);
							setState(3312);
							match(EQUAL);
							setState(3313);
							((Alter_external_data_sourceContext)_localctx).resource_manager_location = _input.LT(1);
							_la = _input.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								((Alter_external_data_sourceContext)_localctx).resource_manager_location = (Token)_errHandler.recoverInline(this);
							} else {
								consume();
							}
							setState(3315);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3314);
								match(COMMA);
								}
							}

							}
							break;
						case CREDENTIAL:
							{
							setState(3317);
							match(CREDENTIAL);
							setState(3318);
							match(EQUAL);
							setState(3319);
							((Alter_external_data_sourceContext)_localctx).credential_name = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3322); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,290,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3324);
				match(ALTER);
				setState(3325);
				match(EXTERNAL);
				setState(3326);
				match(DATA);
				setState(3327);
				match(SOURCE);
				setState(3328);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3329);
				match(WITH);
				setState(3330);
				match(LR_BRACKET);
				setState(3331);
				match(TYPE);
				setState(3332);
				match(EQUAL);
				setState(3333);
				match(BLOB_STORAGE);
				setState(3334);
				match(COMMA);
				setState(3335);
				match(LOCATION);
				setState(3336);
				match(EQUAL);
				setState(3337);
				((Alter_external_data_sourceContext)_localctx).location = match(STRING);
				setState(3342);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3338);
					match(COMMA);
					setState(3339);
					match(CREDENTIAL);
					setState(3340);
					match(EQUAL);
					setState(3341);
					((Alter_external_data_sourceContext)_localctx).credential_name = id();
					}
				}

				setState(3344);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(MocaSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(MocaSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode PLATFORM() { return getToken(MocaSqlParser.PLATFORM, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(MocaSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(MocaSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(MocaSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(MocaSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(MocaSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(MocaSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(MocaSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(MocaSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(MocaSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(MocaSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_libraryContext alter_external_library() throws RecognitionException {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alter_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3348);
			match(ALTER);
			setState(3349);
			match(EXTERNAL);
			setState(3350);
			match(LIBRARY);
			setState(3351);
			((Alter_external_libraryContext)_localctx).library_name = id();
			setState(3354);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3352);
				match(AUTHORIZATION);
				setState(3353);
				((Alter_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3356);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			{
			setState(3357);
			match(LR_BRACKET);
			setState(3358);
			match(CONTENT);
			setState(3359);
			match(EQUAL);
			setState(3363);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3360);
				((Alter_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3361);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3362);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			setState(3365);
			match(COMMA);
			setState(3366);
			match(PLATFORM);
			setState(3367);
			match(EQUAL);
			setState(3369);
			_la = _input.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				setState(3368);
				_la = _input.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3371);
			match(RR_BRACKET);
			}
			setState(3373);
			match(WITH);
			setState(3383); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3383);
				switch (_input.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					setState(3375);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3374);
						match(COMMA);
						}
					}

					setState(3377);
					match(LANGUAGE);
					setState(3378);
					match(EQUAL);
					setState(3379);
					_la = _input.LA(1);
					if ( !(_la==PYTHON || _la==R) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					setState(3380);
					match(DATA_SOURCE);
					setState(3381);
					match(EQUAL);
					setState(3382);
					((Alter_external_libraryContext)_localctx).external_data_source_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3385); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			setState(3387);
			match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(MocaSqlParser.LIBRARY, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(MocaSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode PLATFORM() { return getToken(MocaSqlParser.PLATFORM, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(MocaSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(MocaSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(MocaSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(MocaSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(MocaSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(MocaSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(MocaSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(MocaSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(MocaSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(MocaSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_libraryContext create_external_library() throws RecognitionException {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_create_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3389);
			match(CREATE);
			setState(3390);
			match(EXTERNAL);
			setState(3391);
			match(LIBRARY);
			setState(3392);
			((Create_external_libraryContext)_localctx).library_name = id();
			setState(3395);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3393);
				match(AUTHORIZATION);
				setState(3394);
				((Create_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3397);
			match(FROM);
			{
			setState(3399);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3398);
				match(COMMA);
				}
			}

			setState(3402);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(3401);
				match(LR_BRACKET);
				}
			}

			setState(3406);
			_la = _input.LA(1);
			if (_la==CONTENT) {
				{
				setState(3404);
				match(CONTENT);
				setState(3405);
				match(EQUAL);
				}
			}

			setState(3411);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3408);
				((Create_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3409);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3410);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3420);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3413);
				match(COMMA);
				setState(3414);
				match(PLATFORM);
				setState(3415);
				match(EQUAL);
				setState(3417);
				_la = _input.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					setState(3416);
					_la = _input.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(3419);
				match(RR_BRACKET);
				}
			}

			}
			setState(3437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(3422);
				match(WITH);
				setState(3432); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3432);
					switch (_input.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						setState(3424);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3423);
							match(COMMA);
							}
						}

						setState(3426);
						match(LANGUAGE);
						setState(3427);
						match(EQUAL);
						setState(3428);
						_la = _input.LA(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						setState(3429);
						match(DATA_SOURCE);
						setState(3430);
						match(EQUAL);
						setState(3431);
						((Create_external_libraryContext)_localctx).external_data_source_name = id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3434); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				setState(3436);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(MocaSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(MocaSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode AFFINITY() { return getToken(MocaSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(MocaSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(MocaSqlParser.NUMANODE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(MocaSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(MocaSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_resource_poolContext alter_external_resource_pool() throws RecognitionException {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3439);
			match(ALTER);
			setState(3440);
			match(EXTERNAL);
			setState(3441);
			match(RESOURCE);
			setState(3442);
			match(POOL);
			setState(3445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(3443);
				((Alter_external_resource_poolContext)_localctx).pool_name = id();
				}
				break;
			case 2:
				{
				setState(3444);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(3447);
			match(WITH);
			setState(3448);
			match(LR_BRACKET);
			setState(3449);
			match(MAX_CPU_PERCENT);
			setState(3450);
			match(EQUAL);
			setState(3451);
			((Alter_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3489);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3453);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3452);
					match(COMMA);
					}
				}

				setState(3455);
				match(AFFINITY);
				setState(3456);
				match(CPU);
				setState(3457);
				match(EQUAL);
				setState(3471);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3458);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3467); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3467);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
							case 1:
								{
								setState(3460);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3459);
									match(COMMA);
									}
								}

								setState(3462);
								match(DECIMAL);
								setState(3463);
								match(TO);
								setState(3464);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3465);
								match(COMMA);
								setState(3466);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3469); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3473);
				match(NUMANODE);
				setState(3474);
				match(EQUAL);
				setState(3485); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3485);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
						case 1:
							{
							setState(3476);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3475);
								match(COMMA);
								}
							}

							setState(3478);
							match(DECIMAL);
							setState(3479);
							match(TO);
							setState(3480);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3482);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3481);
								match(COMMA);
								}
							}

							setState(3484);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3487); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(3492);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3491);
					match(COMMA);
					}
				}

				setState(3494);
				match(MAX_MEMORY_PERCENT);
				setState(3495);
				match(EQUAL);
				setState(3496);
				((Alter_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3505);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3500);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3499);
					match(COMMA);
					}
				}

				setState(3502);
				match(MAX_PROCESSES);
				setState(3503);
				match(EQUAL);
				setState(3504);
				((Alter_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3507);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(MocaSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode AFFINITY() { return getToken(MocaSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(MocaSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(MocaSqlParser.NUMANODE, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(MocaSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(MocaSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_resource_poolContext create_external_resource_pool() throws RecognitionException {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3509);
			match(CREATE);
			setState(3510);
			match(EXTERNAL);
			setState(3511);
			match(RESOURCE);
			setState(3512);
			match(POOL);
			setState(3513);
			((Create_external_resource_poolContext)_localctx).pool_name = id();
			setState(3514);
			match(WITH);
			setState(3515);
			match(LR_BRACKET);
			setState(3516);
			match(MAX_CPU_PERCENT);
			setState(3517);
			match(EQUAL);
			setState(3518);
			((Create_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3556);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3520);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3519);
					match(COMMA);
					}
				}

				setState(3522);
				match(AFFINITY);
				setState(3523);
				match(CPU);
				setState(3524);
				match(EQUAL);
				setState(3538);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3525);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3534); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3534);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
							case 1:
								{
								setState(3527);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3526);
									match(COMMA);
									}
								}

								setState(3529);
								match(DECIMAL);
								setState(3530);
								match(TO);
								setState(3531);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3532);
								match(COMMA);
								setState(3533);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3536); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3540);
				match(NUMANODE);
				setState(3541);
				match(EQUAL);
				setState(3552); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3552);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
						case 1:
							{
							setState(3543);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3542);
								match(COMMA);
								}
							}

							setState(3545);
							match(DECIMAL);
							setState(3546);
							match(TO);
							setState(3547);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3549);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3548);
								match(COMMA);
								}
							}

							setState(3551);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3554); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(3559);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3558);
					match(COMMA);
					}
				}

				setState(3561);
				match(MAX_MEMORY_PERCENT);
				setState(3562);
				match(EQUAL);
				setState(3563);
				((Create_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3572);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3567);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3566);
					match(COMMA);
					}
				}

				setState(3569);
				match(MAX_PROCESSES);
				setState(3570);
				match(EQUAL);
				setState(3571);
				((Create_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3574);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public TerminalNode REORGANIZE() { return getToken(MocaSqlParser.REORGANIZE, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(MocaSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_catalogContext alter_fulltext_catalog() throws RecognitionException {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alter_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3576);
			match(ALTER);
			setState(3577);
			match(FULLTEXT);
			setState(3578);
			match(CATALOG);
			setState(3579);
			((Alter_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3590);
			switch (_input.LA(1)) {
			case REBUILD:
				{
				setState(3580);
				match(REBUILD);
				setState(3585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3581);
					match(WITH);
					setState(3582);
					match(ACCENT_SENSITIVITY);
					setState(3583);
					match(EQUAL);
					setState(3584);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				setState(3587);
				match(REORGANIZE);
				}
				break;
			case AS:
				{
				setState(3588);
				match(AS);
				setState(3589);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public IdContext filegroup;
		public Token rootpath;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public TerminalNode FILEGROUP() { return getToken(MocaSqlParser.FILEGROUP, 0); }
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(MocaSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fulltext_catalogContext create_fulltext_catalog() throws RecognitionException {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_create_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			match(CREATE);
			setState(3593);
			match(FULLTEXT);
			setState(3594);
			match(CATALOG);
			setState(3595);
			((Create_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3599);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3596);
				match(ON);
				setState(3597);
				match(FILEGROUP);
				setState(3598);
				((Create_fulltext_catalogContext)_localctx).filegroup = id();
				}
			}

			setState(3604);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3601);
				match(IN);
				setState(3602);
				match(PATH);
				setState(3603);
				((Create_fulltext_catalogContext)_localctx).rootpath = match(STRING);
				}
			}

			setState(3610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				setState(3606);
				match(WITH);
				setState(3607);
				match(ACCENT_SENSITIVITY);
				setState(3608);
				match(EQUAL);
				setState(3609);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(3614);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3612);
				match(AS);
				setState(3613);
				match(DEFAULT);
				}
			}

			setState(3618);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3616);
				match(AUTHORIZATION);
				setState(3617);
				((Create_fulltext_catalogContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public Token stopword;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(MocaSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode LANGUAGE() { return getToken(MocaSqlParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_stoplistContext alter_fulltext_stoplist() throws RecognitionException {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			match(ALTER);
			setState(3621);
			match(FULLTEXT);
			setState(3622);
			match(STOPLIST);
			setState(3623);
			((Alter_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3637);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(3624);
				match(ADD);
				setState(3625);
				((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
				setState(3626);
				match(LANGUAGE);
				setState(3627);
				_la = _input.LA(1);
				if ( !(((((_la - 809)) & ~0x3f) == 0 && ((1L << (_la - 809)) & ((1L << (DECIMAL - 809)) | (1L << (STRING - 809)) | (1L << (BINARY - 809)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case DROP:
				{
				setState(3628);
				match(DROP);
				setState(3635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(3629);
					((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
					setState(3630);
					match(LANGUAGE);
					setState(3631);
					_la = _input.LA(1);
					if ( !(((((_la - 809)) & ~0x3f) == 0 && ((1L << (_la - 809)) & ((1L << (DECIMAL - 809)) | (1L << (STRING - 809)) | (1L << (BINARY - 809)))) != 0)) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case 2:
					{
					setState(3632);
					match(ALL);
					setState(3633);
					_la = _input.LA(1);
					if ( !(((((_la - 809)) & ~0x3f) == 0 && ((1L << (_la - 809)) & ((1L << (DECIMAL - 809)) | (1L << (STRING - 809)) | (1L << (BINARY - 809)))) != 0)) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case 3:
					{
					setState(3634);
					match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext database_name;
		public IdContext source_stoplist_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public List<TerminalNode> STOPLIST() { return getTokens(MocaSqlParser.STOPLIST); }
		public TerminalNode STOPLIST(int i) {
			return getToken(MocaSqlParser.STOPLIST, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(MocaSqlParser.SYSTEM, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fulltext_stoplistContext create_fulltext_stoplist() throws RecognitionException {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_create_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3639);
			match(CREATE);
			setState(3640);
			match(FULLTEXT);
			setState(3641);
			match(STOPLIST);
			setState(3642);
			((Create_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3654);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3643);
				match(FROM);
				setState(3652);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3647);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
					case 1:
						{
						setState(3644);
						((Create_fulltext_stoplistContext)_localctx).database_name = id();
						setState(3645);
						match(DOT);
						}
						break;
					}
					setState(3649);
					((Create_fulltext_stoplistContext)_localctx).source_stoplist_name = id();
					}
					break;
				case 2:
					{
					setState(3650);
					match(SYSTEM);
					setState(3651);
					match(STOPLIST);
					}
					break;
				}
				}
			}

			setState(3658);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3656);
				match(AUTHORIZATION);
				setState(3657);
				((Create_fulltext_stoplistContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token old_password;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> CREDENTIAL() { return getTokens(MocaSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(MocaSqlParser.CREDENTIAL, i);
		}
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MocaSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(MocaSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(MocaSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(MocaSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode HASHED() { return getToken(MocaSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(MocaSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(MocaSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(MocaSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(MocaSqlParser.UNLOCK, i);
		}
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_login_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_login_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_login_sql_serverContext alter_login_sql_server() throws RecognitionException {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_alter_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3660);
			match(ALTER);
			setState(3661);
			match(LOGIN);
			setState(3662);
			((Alter_login_sql_serverContext)_localctx).login_name = id();
			setState(3730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(3664);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3663);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3666);
				match(WITH);
				setState(3680);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3667);
					match(PASSWORD);
					setState(3668);
					match(EQUAL);
					setState(3672);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3669);
						((Alter_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3670);
						((Alter_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3671);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3677);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3674);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						}
						setState(3679);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3691);
				_la = _input.LA(1);
				if (_la==OLD_PASSWORD) {
					{
					setState(3682);
					match(OLD_PASSWORD);
					setState(3683);
					match(EQUAL);
					setState(3684);
					((Alter_login_sql_serverContext)_localctx).old_password = match(STRING);
					setState(3688);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3685);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						}
						setState(3690);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3696);
				_la = _input.LA(1);
				if (_la==DEFAULT_DATABASE) {
					{
					setState(3693);
					match(DEFAULT_DATABASE);
					setState(3694);
					match(EQUAL);
					setState(3695);
					((Alter_login_sql_serverContext)_localctx).default_database = id();
					}
				}

				setState(3701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3698);
					match(DEFAULT_LANGUAGE);
					setState(3699);
					match(EQUAL);
					setState(3700);
					((Alter_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3706);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(3703);
					match(NAME);
					setState(3704);
					match(EQUAL);
					setState(3705);
					((Alter_login_sql_serverContext)_localctx).login_name = id();
					}
					break;
				}
				setState(3711);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3708);
					match(CHECK_POLICY);
					setState(3709);
					match(EQUAL);
					setState(3710);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(3716);
				_la = _input.LA(1);
				if (_la==CHECK_EXPIRATION) {
					{
					setState(3713);
					match(CHECK_EXPIRATION);
					setState(3714);
					match(EQUAL);
					setState(3715);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(3721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(3718);
					match(CREDENTIAL);
					setState(3719);
					match(EQUAL);
					setState(3720);
					((Alter_login_sql_serverContext)_localctx).credential_name = id();
					}
					break;
				}
				setState(3725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3723);
					match(NO);
					setState(3724);
					match(CREDENTIAL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3727);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3728);
				match(CREDENTIAL);
				setState(3729);
				((Alter_login_sql_serverContext)_localctx).credential_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token sid;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public Token default_language;
		public IdContext certname;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode SID() { return getToken(MocaSqlParser.SID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(MocaSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(MocaSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(MocaSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public List<TerminalNode> BINARY() { return getTokens(MocaSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MocaSqlParser.BINARY, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public TerminalNode WINDOWS() { return getToken(MocaSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode HASHED() { return getToken(MocaSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(MocaSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(MocaSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(MocaSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(MocaSqlParser.UNLOCK, i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_login_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_login_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_sql_serverContext create_login_sql_server() throws RecognitionException {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_create_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3732);
			match(CREATE);
			setState(3733);
			match(LOGIN);
			setState(3734);
			((Create_login_sql_serverContext)_localctx).login_name = id();
			setState(3825);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3735);
				match(WITH);
				setState(3749);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3736);
					match(PASSWORD);
					setState(3737);
					match(EQUAL);
					setState(3741);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3738);
						((Create_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3739);
						((Create_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3740);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3746);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3743);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						}
						setState(3748);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3757);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3752);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3751);
						match(COMMA);
						}
					}

					setState(3754);
					match(SID);
					setState(3755);
					match(EQUAL);
					setState(3756);
					((Create_login_sql_serverContext)_localctx).sid = match(BINARY);
					}
					break;
				}
				setState(3765);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3760);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3759);
						match(COMMA);
						}
					}

					setState(3762);
					match(DEFAULT_DATABASE);
					setState(3763);
					match(EQUAL);
					setState(3764);
					((Create_login_sql_serverContext)_localctx).default_database = id();
					}
					break;
				}
				setState(3773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3768);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3767);
						match(COMMA);
						}
					}

					setState(3770);
					match(DEFAULT_LANGUAGE);
					setState(3771);
					match(EQUAL);
					setState(3772);
					((Create_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(3776);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3775);
						match(COMMA);
						}
					}

					setState(3778);
					match(CHECK_EXPIRATION);
					setState(3779);
					match(EQUAL);
					setState(3780);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3789);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3784);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3783);
						match(COMMA);
						}
					}

					setState(3786);
					match(CHECK_POLICY);
					setState(3787);
					match(EQUAL);
					setState(3788);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(3797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3792);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3791);
						match(COMMA);
						}
					}

					setState(3794);
					match(CREDENTIAL);
					setState(3795);
					match(EQUAL);
					setState(3796);
					((Create_login_sql_serverContext)_localctx).credential_name = id();
					}
					break;
				}
				}
				break;
			case FROM:
				{
				{
				setState(3799);
				match(FROM);
				setState(3823);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(3800);
					match(WINDOWS);
					{
					setState(3801);
					match(WITH);
					setState(3808);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
					case 1:
						{
						setState(3803);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3802);
							match(COMMA);
							}
						}

						setState(3805);
						match(DEFAULT_DATABASE);
						setState(3806);
						match(EQUAL);
						setState(3807);
						((Create_login_sql_serverContext)_localctx).default_database = id();
						}
						break;
					}
					setState(3816);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
					case 1:
						{
						setState(3811);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3810);
							match(COMMA);
							}
						}

						setState(3813);
						match(DEFAULT_LANGUAGE);
						setState(3814);
						match(EQUAL);
						setState(3815);
						((Create_login_sql_serverContext)_localctx).default_language = match(STRING);
						}
						break;
					}
					}
					}
					break;
				case CERTIFICATE:
					{
					setState(3818);
					match(CERTIFICATE);
					setState(3819);
					((Create_login_sql_serverContext)_localctx).certname = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(3820);
					match(ASYMMETRIC);
					setState(3821);
					match(KEY);
					setState(3822);
					((Create_login_sql_serverContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MocaSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_login_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_login_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_login_azure_sqlContext alter_login_azure_sql() throws RecognitionException {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_alter_login_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3827);
			match(ALTER);
			setState(3828);
			match(LOGIN);
			setState(3829);
			((Alter_login_azure_sqlContext)_localctx).login_name = id();
			setState(3847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(3830);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3833);
				match(WITH);
				setState(3845);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3834);
					match(PASSWORD);
					setState(3835);
					match(EQUAL);
					setState(3836);
					((Alter_login_azure_sqlContext)_localctx).password = match(STRING);
					setState(3840);
					_la = _input.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						setState(3837);
						match(OLD_PASSWORD);
						setState(3838);
						match(EQUAL);
						setState(3839);
						((Alter_login_azure_sqlContext)_localctx).old_password = match(STRING);
						}
					}

					}
					break;
				case NAME:
					{
					setState(3842);
					match(NAME);
					setState(3843);
					match(EQUAL);
					setState(3844);
					((Alter_login_azure_sqlContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token sid;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SID() { return getToken(MocaSqlParser.SID, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_login_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_login_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_azure_sqlContext create_login_azure_sql() throws RecognitionException {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_create_login_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3849);
			match(CREATE);
			setState(3850);
			match(LOGIN);
			setState(3851);
			((Create_login_azure_sqlContext)_localctx).login_name = id();
			setState(3852);
			match(WITH);
			setState(3853);
			match(PASSWORD);
			setState(3854);
			match(EQUAL);
			setState(3855);
			match(STRING);
			setState(3859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3856);
				match(SID);
				setState(3857);
				match(EQUAL);
				setState(3858);
				((Create_login_azure_sqlContext)_localctx).sid = match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MocaSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(MocaSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(MocaSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(MocaSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(MocaSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_login_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_login_azure_sql_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_login_azure_sql_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3861);
			match(ALTER);
			setState(3862);
			match(LOGIN);
			setState(3863);
			((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
			setState(3887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3865);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(3864);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3867);
				match(WITH);
				setState(3885);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3868);
					match(PASSWORD);
					setState(3869);
					match(EQUAL);
					setState(3870);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).password = match(STRING);
					setState(3880);
					_la = _input.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						setState(3871);
						match(OLD_PASSWORD);
						setState(3872);
						match(EQUAL);
						setState(3873);
						((Alter_login_azure_sql_dw_and_pdwContext)_localctx).old_password = match(STRING);
						setState(3877);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==MUST_CHANGE || _la==UNLOCK) {
							{
							{
							setState(3874);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							}
							setState(3879);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				case NAME:
					{
					setState(3882);
					match(NAME);
					setState(3883);
					match(EQUAL);
					setState(3884);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_pdwContext extends ParserRuleContext {
		public IdContext loginName;
		public Token password;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode WINDOWS() { return getToken(MocaSqlParser.WINDOWS, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(MocaSqlParser.MUST_CHANGE, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(MocaSqlParser.CHECK_POLICY, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_login_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_login_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_login_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_pdwContext create_login_pdw() throws RecognitionException {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_create_login_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			match(CREATE);
			setState(3890);
			match(LOGIN);
			setState(3891);
			((Create_login_pdwContext)_localctx).loginName = id();
			setState(3908);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3892);
				match(WITH);
				{
				setState(3893);
				match(PASSWORD);
				setState(3894);
				match(EQUAL);
				setState(3895);
				((Create_login_pdwContext)_localctx).password = match(STRING);
				setState(3897);
				_la = _input.LA(1);
				if (_la==MUST_CHANGE) {
					{
					setState(3896);
					match(MUST_CHANGE);
					}
				}

				setState(3904);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3899);
					match(CHECK_POLICY);
					setState(3900);
					match(EQUAL);
					setState(3902);
					_la = _input.LA(1);
					if (_la==OFF || _la==ON) {
						{
						setState(3901);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					}
				}

				}
				}
				break;
			case FROM:
				{
				setState(3906);
				match(FROM);
				setState(3907);
				match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(MocaSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(MocaSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(MocaSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_master_key_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_master_key_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_master_key_sql_serverContext alter_master_key_sql_server() throws RecognitionException {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alter_master_key_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3910);
			match(ALTER);
			setState(3911);
			match(MASTER);
			setState(3912);
			match(KEY);
			setState(3934);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(3914);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(3913);
					match(FORCE);
					}
				}

				setState(3916);
				match(REGENERATE);
				setState(3917);
				match(WITH);
				setState(3918);
				match(ENCRYPTION);
				setState(3919);
				match(BY);
				setState(3920);
				match(PASSWORD);
				setState(3921);
				match(EQUAL);
				setState(3922);
				((Alter_master_key_sql_serverContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				setState(3923);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3924);
				match(ENCRYPTION);
				setState(3925);
				match(BY);
				setState(3932);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(3926);
					match(SERVICE);
					setState(3927);
					match(MASTER);
					setState(3928);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(3929);
					match(PASSWORD);
					setState(3930);
					match(EQUAL);
					setState(3931);
					((Alter_master_key_sql_serverContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_master_key_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_master_key_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_master_key_sql_serverContext create_master_key_sql_server() throws RecognitionException {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_create_master_key_sql_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(CREATE);
			setState(3937);
			match(MASTER);
			setState(3938);
			match(KEY);
			setState(3939);
			match(ENCRYPTION);
			setState(3940);
			match(BY);
			setState(3941);
			match(PASSWORD);
			setState(3942);
			match(EQUAL);
			setState(3943);
			((Create_master_key_sql_serverContext)_localctx).password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(MocaSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(MocaSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(MocaSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_master_key_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_master_key_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_master_key_azure_sqlContext alter_master_key_azure_sql() throws RecognitionException {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			match(ALTER);
			setState(3946);
			match(MASTER);
			setState(3947);
			match(KEY);
			setState(3975);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(3949);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(3948);
					match(FORCE);
					}
				}

				setState(3951);
				match(REGENERATE);
				setState(3952);
				match(WITH);
				setState(3953);
				match(ENCRYPTION);
				setState(3954);
				match(BY);
				setState(3955);
				match(PASSWORD);
				setState(3956);
				match(EQUAL);
				setState(3957);
				((Alter_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
				{
				setState(3958);
				match(ADD);
				setState(3959);
				match(ENCRYPTION);
				setState(3960);
				match(BY);
				setState(3967);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(3961);
					match(SERVICE);
					setState(3962);
					match(MASTER);
					setState(3963);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(3964);
					match(PASSWORD);
					setState(3965);
					match(EQUAL);
					setState(3966);
					((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				setState(3969);
				match(DROP);
				setState(3970);
				match(ENCRYPTION);
				setState(3971);
				match(BY);
				setState(3972);
				match(PASSWORD);
				setState(3973);
				match(EQUAL);
				setState(3974);
				((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_master_key_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_master_key_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_master_key_azure_sqlContext create_master_key_azure_sql() throws RecognitionException {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_create_master_key_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3977);
			match(CREATE);
			setState(3978);
			match(MASTER);
			setState(3979);
			match(KEY);
			setState(3985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(3980);
				match(ENCRYPTION);
				setState(3981);
				match(BY);
				setState(3982);
				match(PASSWORD);
				setState(3983);
				match(EQUAL);
				setState(3984);
				((Create_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext schema_collection_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode VALIDATION() { return getToken(MocaSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(MocaSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(MocaSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(MocaSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_message_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_message_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_message_typeContext alter_message_type() throws RecognitionException {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_alter_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3987);
			match(ALTER);
			setState(3988);
			match(MESSAGE);
			setState(3989);
			match(TYPE);
			setState(3990);
			((Alter_message_typeContext)_localctx).message_type_name = id();
			setState(3991);
			match(VALIDATION);
			setState(3992);
			match(EQUAL);
			setState(4001);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(3993);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(3994);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(3995);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(3996);
				match(VALID_XML);
				setState(3997);
				match(WITH);
				setState(3998);
				match(SCHEMA);
				setState(3999);
				match(COLLECTION);
				setState(4000);
				((Alter_message_typeContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(MocaSqlParser.FUNCTION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode RANGE() { return getToken(MocaSqlParser.RANGE, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SPLIT() { return getToken(MocaSqlParser.SPLIT, 0); }
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_partition_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_partition_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_partition_functionContext alter_partition_function() throws RecognitionException {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alter_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4003);
			match(ALTER);
			setState(4004);
			match(PARTITION);
			setState(4005);
			match(FUNCTION);
			setState(4006);
			((Alter_partition_functionContext)_localctx).partition_function_name = id();
			setState(4007);
			match(LR_BRACKET);
			setState(4008);
			match(RR_BRACKET);
			setState(4009);
			_la = _input.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4010);
			match(RANGE);
			setState(4011);
			match(LR_BRACKET);
			setState(4012);
			match(DECIMAL);
			setState(4013);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext file_group_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(MocaSqlParser.SCHEME, 0); }
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public TerminalNode USED() { return getToken(MocaSqlParser.USED, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_partition_scheme(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_partition_scheme(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_partition_schemeContext alter_partition_scheme() throws RecognitionException {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_alter_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4015);
			match(ALTER);
			setState(4016);
			match(PARTITION);
			setState(4017);
			match(SCHEME);
			setState(4018);
			((Alter_partition_schemeContext)_localctx).partition_scheme_name = id();
			setState(4019);
			match(NEXT);
			setState(4020);
			match(USED);
			setState(4022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(4021);
				((Alter_partition_schemeContext)_localctx).file_group_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext user_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(MocaSqlParser.BINDING, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(MocaSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_remote_service_bindingContext alter_remote_service_binding() throws RecognitionException {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alter_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4024);
			match(ALTER);
			setState(4025);
			match(REMOTE);
			setState(4026);
			match(SERVICE);
			setState(4027);
			match(BINDING);
			setState(4028);
			((Alter_remote_service_bindingContext)_localctx).binding_name = id();
			setState(4029);
			match(WITH);
			setState(4033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				setState(4030);
				match(USER);
				setState(4031);
				match(EQUAL);
				setState(4032);
				((Alter_remote_service_bindingContext)_localctx).user_name = id();
				}
				break;
			}
			setState(4039);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4035);
				match(COMMA);
				setState(4036);
				match(ANONYMOUS);
				setState(4037);
				match(EQUAL);
				setState(4038);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext owner_name;
		public Token remote_service_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(MocaSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(MocaSqlParser.SERVICE, i);
		}
		public TerminalNode BINDING() { return getToken(MocaSqlParser.BINDING, 0); }
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(MocaSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_remote_service_bindingContext create_remote_service_binding() throws RecognitionException {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4041);
			match(CREATE);
			setState(4042);
			match(REMOTE);
			setState(4043);
			match(SERVICE);
			setState(4044);
			match(BINDING);
			setState(4045);
			((Create_remote_service_bindingContext)_localctx).binding_name = id();
			setState(4048);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4046);
				match(AUTHORIZATION);
				setState(4047);
				((Create_remote_service_bindingContext)_localctx).owner_name = id();
				}
			}

			setState(4050);
			match(TO);
			setState(4051);
			match(SERVICE);
			setState(4052);
			((Create_remote_service_bindingContext)_localctx).remote_service_name = match(STRING);
			setState(4053);
			match(WITH);
			setState(4057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(4054);
				match(USER);
				setState(4055);
				match(EQUAL);
				setState(4056);
				((Create_remote_service_bindingContext)_localctx).user_name = id();
				}
				break;
			}
			setState(4063);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4059);
				match(COMMA);
				setState(4060);
				match(ANONYMOUS);
				setState(4061);
				match(EQUAL);
				setState(4062);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode MIN_CPU_PERCENT() { return getToken(MocaSqlParser.MIN_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX_CPU_PERCENT() { return getToken(MocaSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(MocaSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode AFFINITY() { return getToken(MocaSqlParser.AFFINITY, 0); }
		public TerminalNode SCHEDULER() { return getToken(MocaSqlParser.SCHEDULER, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(MocaSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(MocaSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public TerminalNode NUMANODE() { return getToken(MocaSqlParser.NUMANODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_resource_poolContext create_resource_pool() throws RecognitionException {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_create_resource_pool);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			match(CREATE);
			setState(4066);
			match(RESOURCE);
			setState(4067);
			match(POOL);
			setState(4068);
			((Create_resource_poolContext)_localctx).pool_name = id();
			setState(4171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(4069);
				match(WITH);
				setState(4070);
				match(LR_BRACKET);
				setState(4077);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(4072);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4071);
						match(COMMA);
						}
					}

					setState(4074);
					match(MIN_CPU_PERCENT);
					setState(4075);
					match(EQUAL);
					setState(4076);
					match(DECIMAL);
					}
					break;
				}
				setState(4085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(4080);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4079);
						match(COMMA);
						}
					}

					setState(4082);
					match(MAX_CPU_PERCENT);
					setState(4083);
					match(EQUAL);
					setState(4084);
					match(DECIMAL);
					}
					break;
				}
				setState(4093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(4088);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4087);
						match(COMMA);
						}
					}

					setState(4090);
					match(CAP_CPU_PERCENT);
					setState(4091);
					match(EQUAL);
					setState(4092);
					match(DECIMAL);
					}
					break;
				}
				setState(4136);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(4096);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4095);
						match(COMMA);
						}
					}

					setState(4098);
					match(AFFINITY);
					setState(4099);
					match(SCHEDULER);
					setState(4100);
					match(EQUAL);
					setState(4134);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4101);
						match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						setState(4102);
						match(LR_BRACKET);
						setState(4112); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4104);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4103);
								match(COMMA);
								}
							}

							setState(4110);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
							case 1:
								{
								setState(4106);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4107);
								match(DECIMAL);
								setState(4108);
								match(TO);
								setState(4109);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4114); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4116);
						match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						setState(4117);
						match(NUMANODE);
						setState(4118);
						match(EQUAL);
						setState(4119);
						match(LR_BRACKET);
						setState(4129); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4121);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4120);
								match(COMMA);
								}
							}

							setState(4127);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
							case 1:
								{
								setState(4123);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4124);
								match(DECIMAL);
								setState(4125);
								match(TO);
								setState(4126);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4131); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4133);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(4144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
				case 1:
					{
					setState(4139);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4138);
						match(COMMA);
						}
					}

					setState(4141);
					match(MIN_MEMORY_PERCENT);
					setState(4142);
					match(EQUAL);
					setState(4143);
					match(DECIMAL);
					}
					break;
				}
				setState(4152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
				case 1:
					{
					setState(4147);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4146);
						match(COMMA);
						}
					}

					setState(4149);
					match(MAX_MEMORY_PERCENT);
					setState(4150);
					match(EQUAL);
					setState(4151);
					match(DECIMAL);
					}
					break;
				}
				setState(4160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(4155);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4154);
						match(COMMA);
						}
					}

					setState(4157);
					match(MIN_IOPS_PER_VOLUME);
					setState(4158);
					match(EQUAL);
					setState(4159);
					match(DECIMAL);
					}
					break;
				}
				setState(4168);
				_la = _input.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					setState(4163);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4162);
						match(COMMA);
						}
					}

					setState(4165);
					match(MAX_IOPS_PER_VOLUME);
					setState(4166);
					match(EQUAL);
					setState(4167);
					match(DECIMAL);
					}
				}

				setState(4170);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_governorContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext function_name;
		public Token max_outstanding_io_per_volume;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode GOVERNOR() { return getToken(MocaSqlParser.GOVERNOR, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(MocaSqlParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode RESET() { return getToken(MocaSqlParser.RESET, 0); }
		public TerminalNode STATISTICS() { return getToken(MocaSqlParser.STATISTICS, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(MocaSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public TerminalNode RECONFIGURE() { return getToken(MocaSqlParser.RECONFIGURE, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_governor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_resource_governor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_resource_governor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_resource_governor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_resource_governorContext alter_resource_governor() throws RecognitionException {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_resource_governor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4173);
			match(ALTER);
			setState(4174);
			match(RESOURCE);
			setState(4175);
			match(GOVERNOR);
			setState(4197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(4176);
				_la = _input.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case 2:
				{
				setState(4177);
				match(WITH);
				setState(4178);
				match(LR_BRACKET);
				setState(4179);
				match(CLASSIFIER_FUNCTION);
				setState(4180);
				match(EQUAL);
				setState(4186);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(4181);
					((Alter_resource_governorContext)_localctx).schema_name = id();
					setState(4182);
					match(DOT);
					setState(4183);
					((Alter_resource_governorContext)_localctx).function_name = id();
					}
					break;
				case NULL:
					{
					setState(4185);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4188);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(4189);
				match(RESET);
				setState(4190);
				match(STATISTICS);
				}
				break;
			case 4:
				{
				setState(4191);
				match(WITH);
				setState(4192);
				match(LR_BRACKET);
				setState(4193);
				match(MAX_OUTSTANDING_IO_PER_VOLUME);
				setState(4194);
				match(EQUAL);
				setState(4195);
				((Alter_resource_governorContext)_localctx).max_outstanding_io_per_volume = match(DECIMAL);
				setState(4196);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext database_principal;
		public IdContext new_role_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MocaSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_db_roleContext alter_db_role() throws RecognitionException {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alter_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4199);
			match(ALTER);
			setState(4200);
			match(ROLE);
			setState(4201);
			((Alter_db_roleContext)_localctx).role_name = id();
			setState(4209);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4202);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4203);
				match(MEMBER);
				setState(4204);
				((Alter_db_roleContext)_localctx).database_principal = id();
				}
				break;
			case WITH:
				{
				setState(4205);
				match(WITH);
				setState(4206);
				match(NAME);
				setState(4207);
				match(EQUAL);
				setState(4208);
				((Alter_db_roleContext)_localctx).new_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_db_roleContext create_db_role() throws RecognitionException {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_create_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4211);
			match(CREATE);
			setState(4212);
			match(ROLE);
			setState(4213);
			((Create_db_roleContext)_localctx).role_name = id();
			setState(4216);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4214);
				match(AUTHORIZATION);
				setState(4215);
				((Create_db_roleContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public IdContext owner_name;
		public Token route_service_name;
		public Token broker_instance_identifier;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode ROUTE() { return getToken(MocaSqlParser.ROUTE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode ADDRESS() { return getToken(MocaSqlParser.ADDRESS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> QUOTED_URL() { return getTokens(MocaSqlParser.QUOTED_URL); }
		public TerminalNode QUOTED_URL(int i) {
			return getToken(MocaSqlParser.QUOTED_URL, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(MocaSqlParser.SERVICE_NAME, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(MocaSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode LIFETIME() { return getToken(MocaSqlParser.LIFETIME, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode MIRROR_ADDRESS() { return getToken(MocaSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_route(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_route(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routeContext create_route() throws RecognitionException {
		Create_routeContext _localctx = new Create_routeContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_create_route);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4218);
			match(CREATE);
			setState(4219);
			match(ROUTE);
			setState(4220);
			((Create_routeContext)_localctx).route_name = id();
			setState(4223);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4221);
				match(AUTHORIZATION);
				setState(4222);
				((Create_routeContext)_localctx).owner_name = id();
				}
			}

			setState(4225);
			match(WITH);
			setState(4232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(4227);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4226);
					match(COMMA);
					}
				}

				setState(4229);
				match(SERVICE_NAME);
				setState(4230);
				match(EQUAL);
				setState(4231);
				((Create_routeContext)_localctx).route_service_name = match(STRING);
				}
				break;
			}
			setState(4240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				setState(4235);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4234);
					match(COMMA);
					}
				}

				setState(4237);
				match(BROKER_INSTANCE);
				setState(4238);
				match(EQUAL);
				setState(4239);
				((Create_routeContext)_localctx).broker_instance_identifier = match(STRING);
				}
				break;
			}
			setState(4248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(4243);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4242);
					match(COMMA);
					}
				}

				setState(4245);
				match(LIFETIME);
				setState(4246);
				match(EQUAL);
				setState(4247);
				match(DECIMAL);
				}
				break;
			}
			setState(4251);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4250);
				match(COMMA);
				}
			}

			setState(4253);
			match(ADDRESS);
			setState(4254);
			match(EQUAL);
			setState(4255);
			_la = _input.LA(1);
			if ( !(_la==QUOTED_URL || _la==STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4260);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4256);
				match(COMMA);
				setState(4257);
				match(MIRROR_ADDRESS);
				setState(4258);
				match(EQUAL);
				setState(4259);
				_la = _input.LA(1);
				if ( !(_la==QUOTED_URL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(MocaSqlParser.RULE, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_ruleContext create_rule() throws RecognitionException {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_create_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			match(CREATE);
			setState(4263);
			match(RULE);
			setState(4267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(4264);
				((Create_ruleContext)_localctx).schema_name = id();
				setState(4265);
				match(DOT);
				}
				break;
			}
			setState(4269);
			((Create_ruleContext)_localctx).rule_name = id();
			setState(4270);
			match(AS);
			setState(4271);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_sqlContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(MocaSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(MocaSqlParser.SCHEMA, i);
		}
		public TerminalNode TRANSFER() { return getToken(MocaSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COLON() { return getTokens(MocaSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(MocaSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_schema_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_schema_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_schema_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_sqlContext alter_schema_sql() throws RecognitionException {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_alter_schema_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4273);
			match(ALTER);
			setState(4274);
			match(SCHEMA);
			setState(4275);
			((Alter_schema_sqlContext)_localctx).schema_name = id();
			setState(4276);
			match(TRANSFER);
			setState(4286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(4282);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(4277);
					match(OBJECT);
					}
					break;
				case TYPE:
					{
					setState(4278);
					match(TYPE);
					}
					break;
				case XML:
					{
					setState(4279);
					match(XML);
					setState(4280);
					match(SCHEMA);
					setState(4281);
					match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4284);
				match(COLON);
				setState(4285);
				match(COLON);
				}
				break;
			}
			setState(4288);
			id();
			setState(4291);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4289);
				match(DOT);
				setState(4290);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public IdContext object_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(MocaSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(MocaSqlParser.SCHEMA, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<Create_tableContext> create_table() {
			return getRuleContexts(Create_tableContext.class);
		}
		public Create_tableContext create_table(int i) {
			return getRuleContext(Create_tableContext.class,i);
		}
		public List<Create_viewContext> create_view() {
			return getRuleContexts(Create_viewContext.class);
		}
		public Create_viewContext create_view(int i) {
			return getRuleContext(Create_viewContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public List<TerminalNode> REVOKE() { return getTokens(MocaSqlParser.REVOKE); }
		public TerminalNode REVOKE(int i) {
			return getToken(MocaSqlParser.REVOKE, i);
		}
		public List<TerminalNode> FROM() { return getTokens(MocaSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MocaSqlParser.FROM, i);
		}
		public List<TerminalNode> GRANT() { return getTokens(MocaSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MocaSqlParser.GRANT, i);
		}
		public List<TerminalNode> DENY() { return getTokens(MocaSqlParser.DENY); }
		public TerminalNode DENY(int i) {
			return getToken(MocaSqlParser.DENY, i);
		}
		public List<TerminalNode> SELECT() { return getTokens(MocaSqlParser.SELECT); }
		public TerminalNode SELECT(int i) {
			return getToken(MocaSqlParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(MocaSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(MocaSqlParser.INSERT, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(MocaSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(MocaSqlParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(MocaSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(MocaSqlParser.UPDATE, i);
		}
		public List<TerminalNode> COLON() { return getTokens(MocaSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(MocaSqlParser.COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_create_schema);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4293);
			match(CREATE);
			setState(4294);
			match(SCHEMA);
			setState(4302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(4295);
				((Create_schemaContext)_localctx).schema_name = id();
				}
				break;
			case 2:
				{
				setState(4296);
				match(AUTHORIZATION);
				setState(4297);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			case 3:
				{
				setState(4298);
				((Create_schemaContext)_localctx).schema_name = id();
				setState(4299);
				match(AUTHORIZATION);
				setState(4300);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			}
			setState(4332);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4330);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
					case 1:
						{
						setState(4304);
						create_table();
						}
						break;
					case 2:
						{
						setState(4305);
						create_view();
						}
						break;
					case 3:
						{
						setState(4306);
						_la = _input.LA(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(4307);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(4308);
						match(ON);
						setState(4312);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4309);
							match(SCHEMA);
							setState(4310);
							match(COLON);
							setState(4311);
							match(COLON);
							}
						}

						setState(4314);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4315);
						match(TO);
						setState(4316);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					case 4:
						{
						setState(4318);
						match(REVOKE);
						setState(4319);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(4320);
						match(ON);
						setState(4324);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4321);
							match(SCHEMA);
							setState(4322);
							match(COLON);
							setState(4323);
							match(COLON);
							}
						}

						setState(4326);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4327);
						match(FROM);
						setState(4328);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					}
					} 
				}
				setState(4334);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_schema_azure_sql_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4335);
			match(CREATE);
			setState(4336);
			match(SCHEMA);
			setState(4337);
			((Create_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4340);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4338);
				match(AUTHORIZATION);
				setState(4339);
				((Create_schema_azure_sql_dw_and_pdwContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode TRANSFER() { return getToken(MocaSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public List<TerminalNode> COLON() { return getTokens(MocaSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(MocaSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_schema_azure_sql_dw_and_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alter_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4342);
			match(ALTER);
			setState(4343);
			match(SCHEMA);
			setState(4344);
			((Alter_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4345);
			match(TRANSFER);
			setState(4349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(4346);
				match(OBJECT);
				setState(4347);
				match(COLON);
				setState(4348);
				match(COLON);
				}
				break;
			}
			setState(4351);
			id();
			setState(4354);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4352);
				match(DOT);
				setState(4353);
				match(ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_search_property_listContext extends ParserRuleContext {
		public IdContext new_list_name;
		public IdContext database_name;
		public IdContext source_list_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SEARCH() { return getToken(MocaSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(MocaSqlParser.LIST, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_search_property_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_search_property_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_search_property_listContext create_search_property_list() throws RecognitionException {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_create_search_property_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4356);
			match(CREATE);
			setState(4357);
			match(SEARCH);
			setState(4358);
			match(PROPERTY);
			setState(4359);
			match(LIST);
			setState(4360);
			((Create_search_property_listContext)_localctx).new_list_name = id();
			setState(4368);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4361);
				match(FROM);
				setState(4365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(4362);
					((Create_search_property_listContext)_localctx).database_name = id();
					setState(4363);
					match(DOT);
					}
					break;
				}
				setState(4367);
				((Create_search_property_listContext)_localctx).source_list_name = id();
				}
			}

			setState(4372);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4370);
				match(AUTHORIZATION);
				setState(4371);
				((Create_search_property_listContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public IdContext tvf_schema_name;
		public IdContext security_predicate_function_name;
		public IdContext column_name_or_arguments;
		public IdContext table_schema_name;
		public IdContext name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(MocaSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(MocaSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public List<TerminalNode> ADD() { return getTokens(MocaSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(MocaSqlParser.ADD, i);
		}
		public List<TerminalNode> PREDICATE() { return getTokens(MocaSqlParser.PREDICATE); }
		public TerminalNode PREDICATE(int i) {
			return getToken(MocaSqlParser.PREDICATE, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(MocaSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(MocaSqlParser.AFTER, i);
		}
		public List<TerminalNode> BEFORE() { return getTokens(MocaSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(MocaSqlParser.BEFORE, i);
		}
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public List<TerminalNode> FILTER() { return getTokens(MocaSqlParser.FILTER); }
		public TerminalNode FILTER(int i) {
			return getToken(MocaSqlParser.FILTER, i);
		}
		public List<TerminalNode> BLOCK() { return getTokens(MocaSqlParser.BLOCK); }
		public TerminalNode BLOCK(int i) {
			return getToken(MocaSqlParser.BLOCK, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(MocaSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(MocaSqlParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(MocaSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(MocaSqlParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(MocaSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(MocaSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_security_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_security_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_security_policyContext create_security_policy() throws RecognitionException {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4374);
			match(CREATE);
			setState(4375);
			match(SECURITY);
			setState(4376);
			match(POLICY);
			setState(4380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(4377);
				((Create_security_policyContext)_localctx).schema_name = id();
				setState(4378);
				match(DOT);
				}
				break;
			}
			setState(4382);
			((Create_security_policyContext)_localctx).security_policy_name = id();
			setState(4423); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4384);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4383);
					match(COMMA);
					}
				}

				setState(4386);
				match(ADD);
				setState(4388);
				_la = _input.LA(1);
				if (_la==BLOCK || _la==FILTER) {
					{
					setState(4387);
					_la = _input.LA(1);
					if ( !(_la==BLOCK || _la==FILTER) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4390);
				match(PREDICATE);
				setState(4391);
				((Create_security_policyContext)_localctx).tvf_schema_name = id();
				setState(4392);
				match(DOT);
				setState(4393);
				((Create_security_policyContext)_localctx).security_predicate_function_name = id();
				setState(4394);
				match(LR_BRACKET);
				setState(4399); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4396);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4395);
						match(COMMA);
						}
					}

					setState(4398);
					((Create_security_policyContext)_localctx).column_name_or_arguments = id();
					}
					}
					setState(4401); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
				setState(4403);
				match(RR_BRACKET);
				setState(4404);
				match(ON);
				setState(4405);
				((Create_security_policyContext)_localctx).table_schema_name = id();
				setState(4406);
				match(DOT);
				setState(4407);
				((Create_security_policyContext)_localctx).name = id();
				setState(4420);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4418);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
						case 1:
							{
							setState(4409);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4408);
								match(COMMA);
								}
							}

							setState(4411);
							match(AFTER);
							setState(4412);
							_la = _input.LA(1);
							if ( !(_la==INSERT || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 2:
							{
							setState(4414);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4413);
								match(COMMA);
								}
							}

							setState(4416);
							match(BEFORE);
							setState(4417);
							_la = _input.LA(1);
							if ( !(_la==DELETE || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						}
						} 
					}
					setState(4422);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				}
				}
				}
				setState(4425); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==COMMA );
			setState(4437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(4427);
				match(WITH);
				setState(4428);
				match(LR_BRACKET);
				setState(4429);
				match(STATE);
				setState(4430);
				match(EQUAL);
				setState(4431);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4434);
				_la = _input.LA(1);
				if (_la==SCHEMABINDING) {
					{
					setState(4432);
					match(SCHEMABINDING);
					setState(4433);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4436);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4442);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4439);
				match(NOT);
				setState(4440);
				match(FOR);
				setState(4441);
				match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public Token sequnce_increment;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode RESTART() { return getToken(MocaSqlParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(MocaSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(MocaSqlParser.MINVALUE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NO() { return getTokens(MocaSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MocaSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(MocaSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(MocaSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(MocaSqlParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4444);
			match(ALTER);
			setState(4445);
			match(SEQUENCE);
			setState(4449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(4446);
				((Alter_sequenceContext)_localctx).schema_name = id();
				setState(4447);
				match(DOT);
				}
				break;
			}
			setState(4451);
			((Alter_sequenceContext)_localctx).sequence_name = id();
			setState(4457);
			_la = _input.LA(1);
			if (_la==RESTART) {
				{
				setState(4452);
				match(RESTART);
				setState(4455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(4453);
					match(WITH);
					setState(4454);
					match(DECIMAL);
					}
					break;
				}
				}
			}

			setState(4462);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(4459);
				match(INCREMENT);
				setState(4460);
				match(BY);
				setState(4461);
				((Alter_sequenceContext)_localctx).sequnce_increment = match(DECIMAL);
				}
			}

			setState(4468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4464);
				match(MINVALUE);
				setState(4465);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4466);
				match(NO);
				setState(4467);
				match(MINVALUE);
				}
				break;
			}
			setState(4474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4470);
				match(MAXVALUE);
				setState(4471);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4472);
				match(NO);
				setState(4473);
				match(MAXVALUE);
				}
				break;
			}
			setState(4479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(4476);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4477);
				match(NO);
				setState(4478);
				match(CYCLE);
				}
				break;
			}
			setState(4485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(4481);
				match(CACHE);
				setState(4482);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4483);
				match(NO);
				setState(4484);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(MocaSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode INCREMENT() { return getToken(MocaSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(MocaSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(MocaSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MocaSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(MocaSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(MocaSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(MocaSqlParser.CACHE, 0); }
		public TerminalNode MINUS() { return getToken(MocaSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4487);
			match(CREATE);
			setState(4488);
			match(SEQUENCE);
			setState(4492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4489);
				((Create_sequenceContext)_localctx).schema_name = id();
				setState(4490);
				match(DOT);
				}
				break;
			}
			setState(4494);
			((Create_sequenceContext)_localctx).sequence_name = id();
			setState(4497);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4495);
				match(AS);
				setState(4496);
				data_type();
				}
			}

			setState(4502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4499);
				match(START);
				setState(4500);
				match(WITH);
				setState(4501);
				match(DECIMAL);
				}
				break;
			}
			setState(4510);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(4504);
				match(INCREMENT);
				setState(4505);
				match(BY);
				setState(4507);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4506);
					match(MINUS);
					}
				}

				setState(4509);
				match(DECIMAL);
				}
			}

			setState(4518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(4512);
				match(MINVALUE);
				setState(4514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4513);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4516);
				match(NO);
				setState(4517);
				match(MINVALUE);
				}
				break;
			}
			setState(4526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4520);
				match(MAXVALUE);
				setState(4522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(4521);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4524);
				match(NO);
				setState(4525);
				match(MAXVALUE);
				}
				break;
			}
			setState(4531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4528);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4529);
				match(NO);
				setState(4530);
				match(CYCLE);
				}
				break;
			}
			setState(4539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4533);
				match(CACHE);
				setState(4535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
				case 1:
					{
					setState(4534);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4537);
				match(NO);
				setState(4538);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(MocaSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(MocaSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(MocaSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(MocaSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(MocaSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(MocaSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(MocaSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(MocaSqlParser.STATE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(MocaSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(MocaSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(MocaSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(MocaSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(MocaSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(MocaSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(MocaSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(MocaSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(MocaSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(MocaSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(MocaSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(MocaSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(MocaSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(MocaSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(MocaSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(MocaSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(MocaSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(MocaSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(MocaSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(MocaSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(MocaSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(MocaSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(MocaSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(MocaSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(MocaSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(MocaSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(MocaSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(MocaSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_auditContext alter_server_audit() throws RecognitionException {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alter_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4541);
			match(ALTER);
			setState(4542);
			match(SERVER);
			setState(4543);
			match(AUDIT);
			setState(4544);
			((Alter_server_auditContext)_localctx).audit_name = id();
			setState(4676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(4592);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4545);
					match(TO);
					setState(4590);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4546);
						match(FILE);
						{
						setState(4547);
						match(LR_BRACKET);
						setState(4584);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (MAX_FILES - 580)) | (1L << (MAX_ROLLOVER_FILES - 580)) | (1L << (MAXSIZE - 580)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4582);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
							case 1:
								{
								setState(4549);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4548);
									match(COMMA);
									}
								}

								setState(4551);
								match(FILEPATH);
								setState(4552);
								match(EQUAL);
								setState(4553);
								((Alter_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4555);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4554);
									match(COMMA);
									}
								}

								setState(4557);
								match(MAXSIZE);
								setState(4558);
								match(EQUAL);
								setState(4562);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4559);
									match(DECIMAL);
									setState(4560);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									} else {
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4561);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4565);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4564);
									match(COMMA);
									}
								}

								setState(4567);
								match(MAX_ROLLOVER_FILES);
								setState(4568);
								match(EQUAL);
								setState(4569);
								((Alter_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Alter_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								} else {
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4571);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4570);
									match(COMMA);
									}
								}

								setState(4573);
								match(MAX_FILES);
								setState(4574);
								match(EQUAL);
								setState(4575);
								((Alter_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4577);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4576);
									match(COMMA);
									}
								}

								setState(4579);
								match(RESERVE_DISK_SPACE);
								setState(4580);
								match(EQUAL);
								setState(4581);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								} else {
									consume();
								}
								}
								break;
							}
							}
							setState(4586);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4587);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4588);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4589);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(4594);
					match(WITH);
					setState(4595);
					match(LR_BRACKET);
					setState(4616);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==QUEUE_DELAY || _la==COMMA) {
						{
						setState(4614);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
						case 1:
							{
							setState(4597);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4596);
								match(COMMA);
								}
							}

							setState(4599);
							match(QUEUE_DELAY);
							setState(4600);
							match(EQUAL);
							setState(4601);
							((Alter_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4603);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4602);
								match(COMMA);
								}
							}

							setState(4605);
							match(ON_FAILURE);
							setState(4606);
							match(EQUAL);
							setState(4607);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4609);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4608);
								match(COMMA);
								}
							}

							setState(4611);
							match(STATE);
							setState(4612);
							match(EQUAL);
							setState(4613);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						}
						}
						setState(4618);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4619);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4668);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4622);
					match(WHERE);
					setState(4666);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
					case 1:
						{
						setState(4624);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4623);
							match(COMMA);
							}
						}

						{
						setState(4627);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4626);
							match(NOT);
							}
						}

						}
						setState(4629);
						((Alter_server_auditContext)_localctx).event_field_name = id();
						setState(4641);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
						case 1:
							{
							setState(4630);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4631);
							match(LESS);
							setState(4632);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4633);
							match(EXCLAMATION);
							setState(4634);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4635);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4636);
							match(GREATER);
							setState(4637);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4638);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4639);
							match(LESS);
							setState(4640);
							match(EQUAL);
							}
							break;
						}
						setState(4643);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4646);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4645);
							match(COMMA);
							}
						}

						setState(4648);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(4650);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4649);
							match(NOT);
							}
						}

						setState(4663);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
						case 1:
							{
							setState(4652);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4653);
							match(LESS);
							setState(4654);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4655);
							match(EXCLAMATION);
							setState(4656);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4657);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4658);
							match(GREATER);
							setState(4659);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4660);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4661);
							match(LESS);
							setState(4662);
							match(EQUAL);
							}
							break;
						}
						setState(4665);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4670);
				match(REMOVE);
				setState(4671);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4672);
				match(MODIFY);
				setState(4673);
				match(NAME);
				setState(4674);
				match(EQUAL);
				setState(4675);
				((Alter_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext audit_guid;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(MocaSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(MocaSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(MocaSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(MocaSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(MocaSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(MocaSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(MocaSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(MocaSqlParser.STATE, i);
		}
		public List<TerminalNode> AUDIT_GUID() { return getTokens(MocaSqlParser.AUDIT_GUID); }
		public TerminalNode AUDIT_GUID(int i) {
			return getToken(MocaSqlParser.AUDIT_GUID, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(MocaSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(MocaSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(MocaSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(MocaSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(MocaSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(MocaSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(MocaSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(MocaSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(MocaSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(MocaSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(MocaSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(MocaSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(MocaSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(MocaSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(MocaSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(MocaSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(MocaSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(MocaSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(MocaSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(MocaSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(MocaSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(MocaSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(MocaSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(MocaSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(MocaSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(MocaSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(MocaSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(MocaSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_auditContext create_server_audit() throws RecognitionException {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_create_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4678);
			match(CREATE);
			setState(4679);
			match(SERVER);
			setState(4680);
			match(AUDIT);
			setState(4681);
			((Create_server_auditContext)_localctx).audit_name = id();
			setState(4819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(4729);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4682);
					match(TO);
					setState(4727);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4683);
						match(FILE);
						{
						setState(4684);
						match(LR_BRACKET);
						setState(4721);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (MAX_FILES - 580)) | (1L << (MAX_ROLLOVER_FILES - 580)) | (1L << (MAXSIZE - 580)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4719);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
							case 1:
								{
								setState(4686);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4685);
									match(COMMA);
									}
								}

								setState(4688);
								match(FILEPATH);
								setState(4689);
								match(EQUAL);
								setState(4690);
								((Create_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4692);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4691);
									match(COMMA);
									}
								}

								setState(4694);
								match(MAXSIZE);
								setState(4695);
								match(EQUAL);
								setState(4699);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4696);
									match(DECIMAL);
									setState(4697);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									} else {
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4698);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4702);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4701);
									match(COMMA);
									}
								}

								setState(4704);
								match(MAX_ROLLOVER_FILES);
								setState(4705);
								match(EQUAL);
								setState(4706);
								((Create_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Create_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								} else {
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4708);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4707);
									match(COMMA);
									}
								}

								setState(4710);
								match(MAX_FILES);
								setState(4711);
								match(EQUAL);
								setState(4712);
								((Create_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4714);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4713);
									match(COMMA);
									}
								}

								setState(4716);
								match(RESERVE_DISK_SPACE);
								setState(4717);
								match(EQUAL);
								setState(4718);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								} else {
									consume();
								}
								}
								break;
							}
							}
							setState(4723);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4724);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4725);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4726);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					setState(4731);
					match(WITH);
					setState(4732);
					match(LR_BRACKET);
					setState(4759);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==AUDIT_GUID || _la==QUEUE_DELAY || _la==COMMA) {
						{
						setState(4757);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
						case 1:
							{
							setState(4734);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4733);
								match(COMMA);
								}
							}

							setState(4736);
							match(QUEUE_DELAY);
							setState(4737);
							match(EQUAL);
							setState(4738);
							((Create_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4740);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4739);
								match(COMMA);
								}
							}

							setState(4742);
							match(ON_FAILURE);
							setState(4743);
							match(EQUAL);
							setState(4744);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4746);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4745);
								match(COMMA);
								}
							}

							setState(4748);
							match(STATE);
							setState(4749);
							match(EQUAL);
							setState(4750);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 4:
							{
							setState(4752);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4751);
								match(COMMA);
								}
							}

							setState(4754);
							match(AUDIT_GUID);
							setState(4755);
							match(EQUAL);
							setState(4756);
							((Create_server_auditContext)_localctx).audit_guid = id();
							}
							break;
						}
						}
						setState(4761);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4762);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4811);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4765);
					match(WHERE);
					setState(4809);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
					case 1:
						{
						setState(4767);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4766);
							match(COMMA);
							}
						}

						{
						setState(4770);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4769);
							match(NOT);
							}
						}

						}
						setState(4772);
						((Create_server_auditContext)_localctx).event_field_name = id();
						setState(4784);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
						case 1:
							{
							setState(4773);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4774);
							match(LESS);
							setState(4775);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4776);
							match(EXCLAMATION);
							setState(4777);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4778);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4779);
							match(GREATER);
							setState(4780);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4781);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4782);
							match(LESS);
							setState(4783);
							match(EQUAL);
							}
							break;
						}
						setState(4786);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4789);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4788);
							match(COMMA);
							}
						}

						setState(4791);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(4793);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4792);
							match(NOT);
							}
						}

						setState(4806);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
						case 1:
							{
							setState(4795);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4796);
							match(LESS);
							setState(4797);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4798);
							match(EXCLAMATION);
							setState(4799);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4800);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4801);
							match(GREATER);
							setState(4802);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4803);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4804);
							match(LESS);
							setState(4805);
							match(EQUAL);
							}
							break;
						}
						setState(4808);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4813);
				match(REMOVE);
				setState(4814);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4815);
				match(MODIFY);
				setState(4816);
				match(NAME);
				setState(4817);
				match(EQUAL);
				setState(4818);
				((Create_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<TerminalNode> SERVER() { return getTokens(MocaSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(MocaSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(MocaSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(MocaSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(MocaSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public List<TerminalNode> ADD() { return getTokens(MocaSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(MocaSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(MocaSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(MocaSqlParser.DROP, i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_audit_specificationContext alter_server_audit_specification() throws RecognitionException {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4821);
			match(ALTER);
			setState(4822);
			match(SERVER);
			setState(4823);
			match(AUDIT);
			setState(4824);
			match(SPECIFICATION);
			setState(4825);
			((Alter_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4830);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4826);
				match(FOR);
				setState(4827);
				match(SERVER);
				setState(4828);
				match(AUDIT);
				setState(4829);
				((Alter_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4839);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4832);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4833);
					match(LR_BRACKET);
					setState(4834);
					((Alter_server_audit_specificationContext)_localctx).audit_action_group_name = id();
					setState(4835);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4841);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			}
			setState(4848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(4842);
				match(WITH);
				setState(4843);
				match(LR_BRACKET);
				setState(4844);
				match(STATE);
				setState(4845);
				match(EQUAL);
				setState(4846);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4847);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public List<TerminalNode> SERVER() { return getTokens(MocaSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(MocaSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(MocaSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(MocaSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(MocaSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<TerminalNode> ADD() { return getTokens(MocaSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(MocaSqlParser.ADD, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_audit_specificationContext create_server_audit_specification() throws RecognitionException {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_create_server_audit_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4850);
			match(CREATE);
			setState(4851);
			match(SERVER);
			setState(4852);
			match(AUDIT);
			setState(4853);
			match(SPECIFICATION);
			setState(4854);
			((Create_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4859);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4855);
				match(FOR);
				setState(4856);
				match(SERVER);
				setState(4857);
				match(AUDIT);
				setState(4858);
				((Create_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				setState(4861);
				match(ADD);
				setState(4862);
				match(LR_BRACKET);
				setState(4863);
				((Create_server_audit_specificationContext)_localctx).audit_action_group_name = id();
				setState(4864);
				match(RR_BRACKET);
				}
				}
				setState(4870);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4877);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(4871);
				match(WITH);
				setState(4872);
				match(LR_BRACKET);
				setState(4873);
				match(STATE);
				setState(4874);
				match(EQUAL);
				setState(4875);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4876);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_configurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(MocaSqlParser.CONFIGURATION, 0); }
		public List<TerminalNode> SET() { return getTokens(MocaSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MocaSqlParser.SET, i);
		}
		public TerminalNode PROCESS() { return getToken(MocaSqlParser.PROCESS, 0); }
		public TerminalNode AFFINITY() { return getToken(MocaSqlParser.AFFINITY, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MocaSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode LOG() { return getToken(MocaSqlParser.LOG, 0); }
		public TerminalNode FAILOVER() { return getToken(MocaSqlParser.FAILOVER, 0); }
		public TerminalNode CLUSTER() { return getToken(MocaSqlParser.CLUSTER, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode HADR() { return getToken(MocaSqlParser.HADR, 0); }
		public TerminalNode CONTEXT() { return getToken(MocaSqlParser.CONTEXT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode BUFFER() { return getToken(MocaSqlParser.BUFFER, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public TerminalNode EXTENSION() { return getToken(MocaSqlParser.EXTENSION, 0); }
		public TerminalNode SOFTNUMA() { return getToken(MocaSqlParser.SOFTNUMA, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOCAL() { return getToken(MocaSqlParser.LOCAL, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode CPU() { return getToken(MocaSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(MocaSqlParser.NUMANODE, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MocaSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_FILES() { return getToken(MocaSqlParser.MAX_FILES, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(MocaSqlParser.VERBOSELOGGING, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(MocaSqlParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(MocaSqlParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(MocaSqlParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(MocaSqlParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(MocaSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode FILENAME() { return getToken(MocaSqlParser.FILENAME, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(MocaSqlParser.SIZE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode KB() { return getToken(MocaSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(MocaSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(MocaSqlParser.GB, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_configuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_server_configuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_server_configuration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_server_configuration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_configurationContext alter_server_configuration() throws RecognitionException {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4879);
			match(ALTER);
			setState(4880);
			match(SERVER);
			setState(4881);
			match(CONFIGURATION);
			setState(4882);
			match(SET);
			{
			setState(4988);
			switch (_input.LA(1)) {
			case PROCESS:
				{
				setState(4883);
				match(PROCESS);
				setState(4884);
				match(AFFINITY);
				setState(4920);
				switch (_input.LA(1)) {
				case CPU:
					{
					setState(4885);
					match(CPU);
					setState(4886);
					match(EQUAL);
					setState(4902);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4887);
						match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						setState(4898); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								setState(4898);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
								case 1:
									{
									setState(4889);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(4888);
										match(COMMA);
										}
									}

									setState(4891);
									match(DECIMAL);
									}
									break;
								case 2:
									{
									setState(4893);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(4892);
										match(COMMA);
										}
									}

									setState(4895);
									match(DECIMAL);
									setState(4896);
									match(TO);
									setState(4897);
									match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(4900); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					setState(4904);
					match(NUMANODE);
					setState(4905);
					match(EQUAL);
					setState(4916); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(4916);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
							case 1:
								{
								setState(4907);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4906);
									match(COMMA);
									}
								}

								setState(4909);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4911);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4910);
									match(COMMA);
									}
								}

								setState(4913);
								match(DECIMAL);
								setState(4914);
								match(TO);
								setState(4915);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4918); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				setState(4922);
				match(DIAGNOSTICS);
				setState(4923);
				match(LOG);
				setState(4939);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4924);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(4925);
					match(OFF);
					}
					break;
				case PATH:
					{
					setState(4926);
					match(PATH);
					setState(4927);
					match(EQUAL);
					setState(4928);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					setState(4929);
					match(MAX_SIZE);
					setState(4930);
					match(EQUAL);
					setState(4934);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(4931);
						match(DECIMAL);
						setState(4932);
						match(MB);
						}
						break;
					case DEFAULT:
						{
						setState(4933);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					setState(4936);
					match(MAX_FILES);
					setState(4937);
					match(EQUAL);
					setState(4938);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				setState(4941);
				match(FAILOVER);
				setState(4942);
				match(CLUSTER);
				setState(4943);
				match(PROPERTY);
				setState(4961);
				switch (_input.LA(1)) {
				case VERBOSELOGGING:
					{
					setState(4944);
					match(VERBOSELOGGING);
					setState(4945);
					match(EQUAL);
					setState(4946);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					setState(4947);
					match(SQLDUMPERFLAGS);
					setState(4948);
					match(EQUAL);
					setState(4949);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					setState(4950);
					match(SQLDUMPERPATH);
					setState(4951);
					match(EQUAL);
					setState(4952);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					setState(4953);
					match(SQLDUMPERTIMEOUT);
					setState(4954);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					setState(4955);
					match(FAILURECONDITIONLEVEL);
					setState(4956);
					match(EQUAL);
					setState(4957);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					setState(4958);
					match(HEALTHCHECKTIMEOUT);
					setState(4959);
					match(EQUAL);
					setState(4960);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				setState(4963);
				match(HADR);
				setState(4964);
				match(CLUSTER);
				setState(4965);
				match(CONTEXT);
				setState(4966);
				match(EQUAL);
				setState(4967);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case BUFFER:
				{
				setState(4968);
				match(BUFFER);
				setState(4969);
				match(POOL);
				setState(4970);
				match(EXTENSION);
				setState(4983);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4971);
					match(ON);
					setState(4972);
					match(LR_BRACKET);
					setState(4973);
					match(FILENAME);
					setState(4974);
					match(EQUAL);
					setState(4975);
					match(STRING);
					setState(4976);
					match(COMMA);
					setState(4977);
					match(SIZE);
					setState(4978);
					match(EQUAL);
					setState(4979);
					match(DECIMAL);
					setState(4980);
					_la = _input.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4981);
					match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					setState(4982);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				setState(4985);
				match(SET);
				setState(4986);
				match(SOFTNUMA);
				setState(4987);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_roleContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext server_principal;
		public IdContext new_server_role_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MocaSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_roleContext alter_server_role() throws RecognitionException {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alter_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4990);
			match(ALTER);
			setState(4991);
			match(SERVER);
			setState(4992);
			match(ROLE);
			setState(4993);
			((Alter_server_roleContext)_localctx).server_role_name = id();
			setState(5001);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4994);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4995);
				match(MEMBER);
				setState(4996);
				((Alter_server_roleContext)_localctx).server_principal = id();
				}
				break;
			case WITH:
				{
				setState(4997);
				match(WITH);
				setState(4998);
				match(NAME);
				setState(4999);
				match(EQUAL);
				setState(5000);
				((Alter_server_roleContext)_localctx).new_server_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_roleContext extends ParserRuleContext {
		public IdContext server_role;
		public IdContext server_principal;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_roleContext create_server_role() throws RecognitionException {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_create_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5003);
			match(CREATE);
			setState(5004);
			match(SERVER);
			setState(5005);
			match(ROLE);
			setState(5006);
			((Create_server_roleContext)_localctx).server_role = id();
			setState(5009);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5007);
				match(AUTHORIZATION);
				setState(5008);
				((Create_server_roleContext)_localctx).server_principal = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_role_pdwContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext login;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode MEMBER() { return getToken(MocaSqlParser.MEMBER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_server_role_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_server_role_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_server_role_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_role_pdwContext alter_server_role_pdw() throws RecognitionException {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alter_server_role_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5011);
			match(ALTER);
			setState(5012);
			match(SERVER);
			setState(5013);
			match(ROLE);
			setState(5014);
			((Alter_server_role_pdwContext)_localctx).server_role_name = id();
			setState(5015);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5016);
			match(MEMBER);
			setState(5017);
			((Alter_server_role_pdwContext)_localctx).login = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_serviceContext extends ParserRuleContext {
		public IdContext modified_service_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public IdContext modified_contract_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public List<TerminalNode> ADD() { return getTokens(MocaSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(MocaSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(MocaSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(MocaSqlParser.DROP, i);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_serviceContext alter_service() throws RecognitionException {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alter_service);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5019);
			match(ALTER);
			setState(5020);
			match(SERVICE);
			setState(5021);
			((Alter_serviceContext)_localctx).modified_service_name = id();
			setState(5029);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5022);
				match(ON);
				setState(5023);
				match(QUEUE);
				{
				setState(5024);
				((Alter_serviceContext)_localctx).schema_name = id();
				setState(5025);
				match(DOT);
				}
				setState(5027);
				((Alter_serviceContext)_localctx).queue_name = id();
				}
			}

			setState(5038);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,576,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5032);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5031);
						match(COMMA);
						}
					}

					setState(5034);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(5035);
					((Alter_serviceContext)_localctx).modified_contract_name = id();
					}
					} 
				}
				setState(5040);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,576,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_serviceContext extends ParserRuleContext {
		public IdContext create_service_name;
		public IdContext owner_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MocaSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MocaSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_serviceContext create_service() throws RecognitionException {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_create_service);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5041);
			match(CREATE);
			setState(5042);
			match(SERVICE);
			setState(5043);
			((Create_serviceContext)_localctx).create_service_name = id();
			setState(5046);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5044);
				match(AUTHORIZATION);
				setState(5045);
				((Create_serviceContext)_localctx).owner_name = id();
				}
			}

			setState(5048);
			match(ON);
			setState(5049);
			match(QUEUE);
			setState(5053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(5050);
				((Create_serviceContext)_localctx).schema_name = id();
				setState(5051);
				match(DOT);
				}
				break;
			}
			setState(5055);
			((Create_serviceContext)_localctx).queue_name = id();
			setState(5069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				{
				setState(5056);
				match(LR_BRACKET);
				setState(5064); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5058);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5057);
						match(COMMA);
						}
					}

					setState(5062);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case EXPIREDATE:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case POLICY:
					case PRECISION:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROLE:
					case ROWCOUNT:
					case SAFETY:
					case RULE:
					case SERVER:
					case SID:
					case SOURCE:
					case SPLIT:
					case STATE:
					case START:
					case STOP:
					case TARGET:
					case TRAN:
					case USER:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
					case URL:
						{
						setState(5060);
						id();
						}
						break;
					case DEFAULT:
						{
						setState(5061);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(5066); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (DEFAULT - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
				setState(5068);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_service_master_keyContext extends ParserRuleContext {
		public Token acold_account_name;
		public Token old_password;
		public Token new_account_name;
		public Token new_password;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode REGENERATE() { return getToken(MocaSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(MocaSqlParser.OLD_ACCOUNT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(MocaSqlParser.COMMA, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MocaSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(MocaSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(MocaSqlParser.NEW_PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_service_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_service_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_service_master_keyContext alter_service_master_key() throws RecognitionException {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alter_service_master_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5071);
			match(ALTER);
			setState(5072);
			match(SERVICE);
			setState(5073);
			match(MASTER);
			setState(5074);
			match(KEY);
			setState(5096);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(5076);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5075);
					match(FORCE);
					}
				}

				setState(5078);
				match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				setState(5079);
				match(WITH);
				setState(5094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(5080);
					match(OLD_ACCOUNT);
					setState(5081);
					match(EQUAL);
					setState(5082);
					((Alter_service_master_keyContext)_localctx).acold_account_name = match(STRING);
					setState(5083);
					match(COMMA);
					setState(5084);
					match(OLD_PASSWORD);
					setState(5085);
					match(EQUAL);
					setState(5086);
					((Alter_service_master_keyContext)_localctx).old_password = match(STRING);
					}
					break;
				case 2:
					{
					setState(5087);
					match(NEW_ACCOUNT);
					setState(5088);
					match(EQUAL);
					setState(5089);
					((Alter_service_master_keyContext)_localctx).new_account_name = match(STRING);
					setState(5090);
					match(COMMA);
					setState(5091);
					match(NEW_PASSWORD);
					setState(5092);
					match(EQUAL);
					setState(5093);
					((Alter_service_master_keyContext)_localctx).new_password = match(STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext Asym_key_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(MocaSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(MocaSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_symmetric_keyContext alter_symmetric_key() throws RecognitionException {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alter_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(ALTER);
			setState(5099);
			match(SYMMETRIC);
			setState(5100);
			match(KEY);
			setState(5101);
			((Alter_symmetric_keyContext)_localctx).key_name = id();
			{
			setState(5102);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5103);
			match(ENCRYPTION);
			setState(5104);
			match(BY);
			setState(5116);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(5105);
				match(CERTIFICATE);
				setState(5106);
				((Alter_symmetric_keyContext)_localctx).certificate_name = id();
				}
				break;
			case PASSWORD:
				{
				setState(5107);
				match(PASSWORD);
				setState(5108);
				match(EQUAL);
				setState(5109);
				((Alter_symmetric_keyContext)_localctx).password = match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				setState(5110);
				match(SYMMETRIC);
				setState(5111);
				match(KEY);
				setState(5112);
				((Alter_symmetric_keyContext)_localctx).symmetric_key_name = id();
				}
				break;
			case ASYMMETRIC:
				{
				setState(5113);
				match(ASYMMETRIC);
				setState(5114);
				match(KEY);
				setState(5115);
				((Alter_symmetric_keyContext)_localctx).Asym_key_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext owner_name;
		public IdContext provider_name;
		public Token key_pass_phrase;
		public Token identity_phrase;
		public Token provider_key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext asym_key_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(MocaSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(MocaSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(MocaSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(MocaSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(MocaSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(MocaSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode DES() { return getToken(MocaSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(MocaSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(MocaSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(MocaSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(MocaSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(MocaSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(MocaSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(MocaSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(MocaSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(MocaSqlParser.AES_256, 0); }
		public TerminalNode CREATE_NEW() { return getToken(MocaSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(MocaSqlParser.OPEN_EXISTING, 0); }
		public Create_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_symmetric_keyContext create_symmetric_key() throws RecognitionException {
		Create_symmetric_keyContext _localctx = new Create_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_create_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5118);
			match(ALTER);
			setState(5119);
			match(SYMMETRIC);
			setState(5120);
			match(KEY);
			setState(5121);
			((Create_symmetric_keyContext)_localctx).key_name = id();
			setState(5124);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5122);
				match(AUTHORIZATION);
				setState(5123);
				((Create_symmetric_keyContext)_localctx).owner_name = id();
				}
			}

			setState(5129);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5126);
				match(FROM);
				setState(5127);
				match(PROVIDER);
				setState(5128);
				((Create_symmetric_keyContext)_localctx).provider_name = id();
				}
			}

			{
			setState(5131);
			match(WITH);
			setState(5164);
			switch (_input.LA(1)) {
			case ALGORITHM:
			case CREATION_DISPOSITION:
			case IDENTITY_VALUE:
			case KEY_SOURCE:
			case PROVIDER_KEY_NAME:
				{
				setState(5147);
				switch (_input.LA(1)) {
				case KEY_SOURCE:
					{
					setState(5132);
					match(KEY_SOURCE);
					setState(5133);
					match(EQUAL);
					setState(5134);
					((Create_symmetric_keyContext)_localctx).key_pass_phrase = match(STRING);
					}
					break;
				case ALGORITHM:
					{
					setState(5135);
					match(ALGORITHM);
					setState(5136);
					match(EQUAL);
					setState(5137);
					_la = _input.LA(1);
					if ( !(((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (AES_128 - 388)) | (1L << (AES_192 - 388)) | (1L << (AES_256 - 388)))) != 0) || _la==DES || _la==DESX || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (RC2 - 665)) | (1L << (RC4 - 665)) | (1L << (RC4_128 - 665)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case IDENTITY_VALUE:
					{
					setState(5138);
					match(IDENTITY_VALUE);
					setState(5139);
					match(EQUAL);
					setState(5140);
					((Create_symmetric_keyContext)_localctx).identity_phrase = match(STRING);
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(5141);
					match(PROVIDER_KEY_NAME);
					setState(5142);
					match(EQUAL);
					setState(5143);
					((Create_symmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(5144);
					match(CREATION_DISPOSITION);
					setState(5145);
					match(EQUAL);
					setState(5146);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTION:
				{
				setState(5149);
				match(ENCRYPTION);
				setState(5150);
				match(BY);
				setState(5162);
				switch (_input.LA(1)) {
				case CERTIFICATE:
					{
					setState(5151);
					match(CERTIFICATE);
					setState(5152);
					((Create_symmetric_keyContext)_localctx).certificate_name = id();
					}
					break;
				case PASSWORD:
					{
					setState(5153);
					match(PASSWORD);
					setState(5154);
					match(EQUAL);
					setState(5155);
					((Create_symmetric_keyContext)_localctx).password = match(STRING);
					}
					break;
				case SYMMETRIC:
					{
					setState(5156);
					match(SYMMETRIC);
					setState(5157);
					match(KEY);
					setState(5158);
					((Create_symmetric_keyContext)_localctx).symmetric_key_name = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(5159);
					match(ASYMMETRIC);
					setState(5160);
					match(KEY);
					setState(5161);
					((Create_symmetric_keyContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public IdContext schema_name_1;
		public IdContext synonym_name;
		public IdContext server_name;
		public IdContext database_name;
		public IdContext schema_name_2;
		public IdContext object_name;
		public IdContext database_or_schema2;
		public IdContext schema_id_2_or_object_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode SYNONYM() { return getToken(MocaSqlParser.SYNONYM, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(MocaSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MocaSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_synonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_synonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_create_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5166);
			match(CREATE);
			setState(5167);
			match(SYNONYM);
			setState(5171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(5168);
				((Create_synonymContext)_localctx).schema_name_1 = id();
				setState(5169);
				match(DOT);
				}
				break;
			}
			setState(5173);
			((Create_synonymContext)_localctx).synonym_name = id();
			setState(5174);
			match(FOR);
			setState(5201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				{
				setState(5178);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(5175);
					((Create_synonymContext)_localctx).server_name = id();
					setState(5176);
					match(DOT);
					}
					break;
				}
				setState(5183);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(5180);
					((Create_synonymContext)_localctx).database_name = id();
					setState(5181);
					match(DOT);
					}
					break;
				}
				setState(5188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(5185);
					((Create_synonymContext)_localctx).schema_name_2 = id();
					setState(5186);
					match(DOT);
					}
					break;
				}
				setState(5190);
				((Create_synonymContext)_localctx).object_name = id();
				}
				break;
			case 2:
				{
				setState(5194);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(5191);
					((Create_synonymContext)_localctx).database_or_schema2 = id();
					setState(5192);
					match(DOT);
					}
					break;
				}
				setState(5199);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					setState(5196);
					((Create_synonymContext)_localctx).schema_id_2_or_object_name = id();
					setState(5197);
					match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public Token lcid;
		public IdContext language_name_or_alias;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(MocaSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(MocaSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(MocaSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(MocaSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(MocaSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(MocaSqlParser.LOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(MocaSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(MocaSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(MocaSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(MocaSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public List<TerminalNode> NULL() { return getTokens(MocaSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(MocaSqlParser.NULL, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MocaSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MocaSqlParser.NONE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> OLD_PASSWORD() { return getTokens(MocaSqlParser.OLD_PASSWORD); }
		public TerminalNode OLD_PASSWORD(int i) {
			return getToken(MocaSqlParser.OLD_PASSWORD, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_alter_user);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5203);
			match(ALTER);
			setState(5204);
			match(USER);
			setState(5205);
			((Alter_userContext)_localctx).username = id();
			setState(5206);
			match(WITH);
			setState(5257); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5257);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
					case 1:
						{
						setState(5208);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5207);
							match(COMMA);
							}
						}

						setState(5210);
						match(NAME);
						setState(5211);
						match(EQUAL);
						setState(5212);
						((Alter_userContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5214);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5213);
							match(COMMA);
							}
						}

						setState(5216);
						match(DEFAULT_SCHEMA);
						setState(5217);
						match(EQUAL);
						setState(5220);
						switch (_input.LA(1)) {
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case EXPIREDATE:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case POLICY:
						case PRECISION:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROLE:
						case ROWCOUNT:
						case SAFETY:
						case RULE:
						case SERVER:
						case SID:
						case SOURCE:
						case SPLIT:
						case STATE:
						case START:
						case STOP:
						case TARGET:
						case TRAN:
						case USER:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
						case URL:
							{
							setState(5218);
							((Alter_userContext)_localctx).schema_name = id();
							}
							break;
						case NULL:
							{
							setState(5219);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						setState(5223);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5222);
							match(COMMA);
							}
						}

						setState(5225);
						match(LOGIN);
						setState(5226);
						match(EQUAL);
						setState(5227);
						((Alter_userContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5229);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5228);
							match(COMMA);
							}
						}

						setState(5231);
						match(PASSWORD);
						setState(5232);
						match(EQUAL);
						setState(5233);
						match(STRING);
						setState(5237); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(5234);
							match(OLD_PASSWORD);
							setState(5235);
							match(EQUAL);
							setState(5236);
							match(STRING);
							}
							}
							setState(5239); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==OLD_PASSWORD );
						}
						break;
					case 5:
						{
						setState(5242);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5241);
							match(COMMA);
							}
						}

						setState(5244);
						match(DEFAULT_LANGUAGE);
						setState(5245);
						match(EQUAL);
						setState(5249);
						switch (_input.LA(1)) {
						case NONE:
							{
							setState(5246);
							match(NONE);
							}
							break;
						case DECIMAL:
							{
							setState(5247);
							((Alter_userContext)_localctx).lcid = match(DECIMAL);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case EXPIREDATE:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case POLICY:
						case PRECISION:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROLE:
						case ROWCOUNT:
						case SAFETY:
						case RULE:
						case SERVER:
						case SID:
						case SOURCE:
						case SPLIT:
						case STATE:
						case START:
						case STOP:
						case TARGET:
						case TRAN:
						case USER:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
						case URL:
							{
							setState(5248);
							((Alter_userContext)_localctx).language_name_or_alias = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 6:
						{
						setState(5252);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5251);
							match(COMMA);
							}
						}

						setState(5254);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5255);
						match(EQUAL);
						setState(5256);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5259); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,609,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext windows_principal;
		public IdContext language_name_or_alias;
		public Token password;
		public IdContext Azure_Active_Directory_principal;
		public IdContext cert_name;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(MocaSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(MocaSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(MocaSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(MocaSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> SID() { return getTokens(MocaSqlParser.SID); }
		public TerminalNode SID(int i) {
			return getToken(MocaSqlParser.SID, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(MocaSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MocaSqlParser.BINARY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MocaSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MocaSqlParser.NONE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode WITHOUT() { return getToken(MocaSqlParser.WITHOUT, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_create_user);
		int _la;
		try {
			int _alt;
			setState(5407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5261);
				match(CREATE);
				setState(5262);
				match(USER);
				setState(5263);
				((Create_userContext)_localctx).user_name = id();
				setState(5267);
				_la = _input.LA(1);
				if (_la==FOR || _la==FROM) {
					{
					setState(5264);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(5265);
					match(LOGIN);
					setState(5266);
					((Create_userContext)_localctx).login_name = id();
					}
				}

				setState(5287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(5269);
					match(WITH);
					setState(5284);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5282);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
							case 1:
								{
								setState(5271);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5270);
									match(COMMA);
									}
								}

								setState(5273);
								match(DEFAULT_SCHEMA);
								setState(5274);
								match(EQUAL);
								setState(5275);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5277);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5276);
									match(COMMA);
									}
								}

								setState(5279);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5280);
								match(EQUAL);
								setState(5281);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								} else {
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5286);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5289);
				match(CREATE);
				setState(5290);
				match(USER);
				setState(5371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(5291);
					((Create_userContext)_localctx).windows_principal = id();
					setState(5326);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
					case 1:
						{
						setState(5292);
						match(WITH);
						setState(5323);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								setState(5321);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
								case 1:
									{
									setState(5294);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5293);
										match(COMMA);
										}
									}

									setState(5296);
									match(DEFAULT_SCHEMA);
									setState(5297);
									match(EQUAL);
									setState(5298);
									((Create_userContext)_localctx).schema_name = id();
									}
									break;
								case 2:
									{
									setState(5300);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5299);
										match(COMMA);
										}
									}

									setState(5302);
									match(DEFAULT_LANGUAGE);
									setState(5303);
									match(EQUAL);
									setState(5307);
									switch (_input.LA(1)) {
									case NONE:
										{
										setState(5304);
										match(NONE);
										}
										break;
									case DECIMAL:
										{
										setState(5305);
										match(DECIMAL);
										}
										break;
									case CALLED:
									case DATA_COMPRESSION:
									case EVENTDATA:
									case EXPIREDATE:
									case FILENAME:
									case FILLFACTOR:
									case FORCESEEK:
									case INIT:
									case KEY:
									case MASTER:
									case MAX_MEMORY:
									case OFFSETS:
									case PAGE:
									case POLICY:
									case PRECISION:
									case PUBLIC:
									case R:
									case RAW:
									case RETURN:
									case RETURNS:
									case ROLE:
									case ROWCOUNT:
									case SAFETY:
									case RULE:
									case SERVER:
									case SID:
									case SOURCE:
									case SPLIT:
									case STATE:
									case START:
									case STOP:
									case TARGET:
									case TRAN:
									case USER:
									case ABSOLUTE:
									case ACCENT_SENSITIVITY:
									case ACTION:
									case ACTIVATION:
									case ACTIVE:
									case ADDRESS:
									case AES_128:
									case AES_192:
									case AES_256:
									case AFFINITY:
									case AFTER:
									case AGGREGATE:
									case ALGORITHM:
									case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
									case ALLOW_SNAPSHOT_ISOLATION:
									case ALLOWED:
									case ANSI_NULL_DEFAULT:
									case ANSI_NULLS:
									case ANSI_PADDING:
									case ANSI_WARNINGS:
									case APPLICATION_LOG:
									case APPLY:
									case ARITHABORT:
									case ASSEMBLY:
									case AUDIT:
									case AUDIT_GUID:
									case AUTO:
									case AUTO_CLEANUP:
									case AUTO_CLOSE:
									case AUTO_CREATE_STATISTICS:
									case AUTO_SHRINK:
									case AUTO_UPDATE_STATISTICS:
									case AUTO_UPDATE_STATISTICS_ASYNC:
									case AVAILABILITY:
									case AVG:
									case BACKUP_PRIORITY:
									case BEGIN_DIALOG:
									case BIGINT:
									case BINARY_BASE64:
									case BINARY_CHECKSUM:
									case BINDING:
									case BLOB_STORAGE:
									case BROKER:
									case BROKER_INSTANCE:
									case BULK_LOGGED:
									case CALLER:
									case CAP_CPU_PERCENT:
									case CAST:
									case CATALOG:
									case CATCH:
									case CHANGE_RETENTION:
									case CHANGE_TRACKING:
									case CHECKSUM:
									case CHECKSUM_AGG:
									case CLEANUP:
									case COLLECTION:
									case COLUMN_MASTER_KEY:
									case COMMITTED:
									case COMPATIBILITY_LEVEL:
									case CONCAT:
									case CONCAT_NULL_YIELDS_NULL:
									case CONTENT:
									case CONTROL:
									case COOKIE:
									case COUNT:
									case COUNT_BIG:
									case COUNTER:
									case CPU:
									case CREATE_NEW:
									case CREATION_DISPOSITION:
									case CREDENTIAL:
									case CRYPTOGRAPHIC:
									case CURSOR_CLOSE_ON_COMMIT:
									case CURSOR_DEFAULT:
									case DATA:
									case DATE_CORRELATION_OPTIMIZATION:
									case DATEADD:
									case DATEDIFF:
									case DATENAME:
									case DATEPART:
									case DAYS:
									case DB_CHAINING:
									case DB_FAILOVER:
									case DECRYPTION:
									case DEFAULT_DOUBLE_QUOTE:
									case DEFAULT_FULLTEXT_LANGUAGE:
									case DEFAULT_LANGUAGE:
									case DELAY:
									case DELAYED_DURABILITY:
									case DELETED:
									case DENSE_RANK:
									case DEPENDENTS:
									case DES:
									case DESCRIPTION:
									case DESX:
									case DHCP:
									case DIALOG:
									case DIRECTORY_NAME:
									case DISABLE:
									case DISABLE_BROKER:
									case DISABLED:
									case DISK_DRIVE:
									case DOCUMENT:
									case DYNAMIC:
									case EMERGENCY:
									case EMPTY:
									case ENABLE:
									case ENABLE_BROKER:
									case ENCRYPTED_VALUE:
									case ENCRYPTION:
									case ENDPOINT_URL:
									case ERROR_BROKER_CONVERSATIONS:
									case EXCLUSIVE:
									case EXECUTABLE:
									case EXIST:
									case EXPAND:
									case EXPIRY_DATE:
									case EXPLICIT:
									case FAIL_OPERATION:
									case FAILOVER_MODE:
									case FAILURE:
									case FAILURE_CONDITION_LEVEL:
									case FAST:
									case FAST_FORWARD:
									case FILEGROUP:
									case FILEGROWTH:
									case FILEPATH:
									case FILESTREAM:
									case FILTER:
									case FIRST:
									case FIRST_VALUE:
									case FOLLOWING:
									case FORCE:
									case FORCE_FAILOVER_ALLOW_DATA_LOSS:
									case FORCED:
									case FORMAT:
									case FORWARD_ONLY:
									case FULLSCAN:
									case FULLTEXT:
									case GB:
									case GETDATE:
									case GETUTCDATE:
									case GLOBAL:
									case GO:
									case GROUP_MAX_REQUESTS:
									case GROUPING:
									case GROUPING_ID:
									case HADR:
									case HASH:
									case HEALTH_CHECK_TIMEOUT:
									case HIGH:
									case HONOR_BROKER_PRIORITY:
									case HOURS:
									case IDENTITY_VALUE:
									case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
									case IMMEDIATE:
									case IMPERSONATE:
									case IMPORTANCE:
									case INCREMENTAL:
									case INITIATOR:
									case INPUT:
									case INSENSITIVE:
									case INSERTED:
									case INT:
									case IP:
									case ISOLATION:
									case KB:
									case KEEP:
									case KEEPFIXED:
									case KEY_SOURCE:
									case KEYS:
									case KEYSET:
									case LAG:
									case LAST:
									case LAST_VALUE:
									case LEAD:
									case LEVEL:
									case LIST:
									case LISTENER:
									case LISTENER_URL:
									case LOB_COMPACTION:
									case LOCAL:
									case LOCATION:
									case LOCK:
									case LOCK_ESCALATION:
									case LOGIN:
									case LOOP:
									case LOW:
									case MANUAL:
									case MARK:
									case MATERIALIZED:
									case MAX:
									case MAX_CPU_PERCENT:
									case MAX_DOP:
									case MAX_FILES:
									case MAX_IOPS_PER_VOLUME:
									case MAX_MEMORY_PERCENT:
									case MAX_PROCESSES:
									case MAX_QUEUE_READERS:
									case MAX_ROLLOVER_FILES:
									case MAXDOP:
									case MAXRECURSION:
									case MAXSIZE:
									case MB:
									case MEDIUM:
									case MEMORY_OPTIMIZED_DATA:
									case MESSAGE:
									case MIN:
									case MIN_ACTIVE_ROWVERSION:
									case MIN_CPU_PERCENT:
									case MIN_IOPS_PER_VOLUME:
									case MIN_MEMORY_PERCENT:
									case MINUTES:
									case MIRROR_ADDRESS:
									case MIXED_PAGE_ALLOCATION:
									case MODE:
									case MODIFY:
									case MOVE:
									case MULTI_USER:
									case NAME:
									case NESTED_TRIGGERS:
									case NEW_ACCOUNT:
									case NEW_BROKER:
									case NEW_PASSWORD:
									case NEXT:
									case NO:
									case NO_TRUNCATE:
									case NO_WAIT:
									case NOCOUNT:
									case NODES:
									case NOEXPAND:
									case NON_TRANSACTED_ACCESS:
									case NORECOMPUTE:
									case NORECOVERY:
									case NOWAIT:
									case NTILE:
									case NUMANODE:
									case NUMBER:
									case NUMERIC_ROUNDABORT:
									case OBJECT:
									case OFFLINE:
									case OFFSET:
									case OLD_ACCOUNT:
									case ONLINE:
									case ONLY:
									case OPEN_EXISTING:
									case OPTIMISTIC:
									case OPTIMIZE:
									case OUT:
									case OUTPUT:
									case OWNER:
									case PAGE_VERIFY:
									case PARAMETERIZATION:
									case PARTITION:
									case PARTITIONS:
									case PARTNER:
									case PATH:
									case POISON_MESSAGE_HANDLING:
									case POOL:
									case PORT:
									case PRECEDING:
									case PRIMARY_ROLE:
									case PRIOR:
									case PRIORITY:
									case PRIORITY_LEVEL:
									case PRIVATE:
									case PRIVATE_KEY:
									case PRIVILEGES:
									case PROCEDURE_NAME:
									case PROPERTY:
									case PROVIDER:
									case PROVIDER_KEY_NAME:
									case QUERY:
									case QUEUE:
									case QUEUE_DELAY:
									case QUOTED_IDENTIFIER:
									case RANGE:
									case RANK:
									case RC2:
									case RC4:
									case RC4_128:
									case READ_COMMITTED_SNAPSHOT:
									case READ_ONLY:
									case READ_ONLY_ROUTING_LIST:
									case READ_WRITE:
									case READONLY:
									case REBUILD:
									case RECEIVE:
									case RECOMPILE:
									case RECOVERY:
									case RECURSIVE_TRIGGERS:
									case RELATIVE:
									case REMOTE:
									case REMOTE_SERVICE_NAME:
									case REMOVE:
									case REORGANIZE:
									case REPEATABLE:
									case REPLICA:
									case REQUEST_MAX_CPU_TIME_SEC:
									case REQUEST_MAX_MEMORY_GRANT_PERCENT:
									case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
									case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
									case RESERVE_DISK_SPACE:
									case RESOURCE:
									case RESOURCE_MANAGER_LOCATION:
									case RESTRICTED_USER:
									case RETENTION:
									case ROBUST:
									case ROOT:
									case ROUTE:
									case ROW:
									case ROW_NUMBER:
									case ROWGUID:
									case ROWS:
									case SAMPLE:
									case SCHEMABINDING:
									case SCOPED:
									case SCROLL:
									case SCROLL_LOCKS:
									case SEARCH:
									case SECONDARY:
									case SECONDARY_ONLY:
									case SECONDARY_ROLE:
									case SECONDS:
									case SECRET:
									case SECURITY:
									case SECURITY_LOG:
									case SEEDING_MODE:
									case SELF:
									case SEMI_SENSITIVE:
									case SEND:
									case SENT:
									case SEQUENCE:
									case SERIALIZABLE:
									case SESSION_TIMEOUT:
									case SETERROR:
									case SHARE:
									case SHOWPLAN:
									case SIGNATURE:
									case SIMPLE:
									case SINGLE_USER:
									case SIZE:
									case SMALLINT:
									case SNAPSHOT:
									case SPATIAL_WINDOW_MAX_CELLS:
									case STANDBY:
									case START_DATE:
									case STATIC:
									case STATS_STREAM:
									case STATUS:
									case STDEV:
									case STDEVP:
									case STOPLIST:
									case STRING_AGG:
									case STUFF:
									case SUBJECT:
									case SUM:
									case SUSPEND:
									case SYMMETRIC:
									case SYNCHRONOUS_COMMIT:
									case SYNONYM:
									case SYSTEM:
									case TAKE:
									case TARGET_RECOVERY_TIME:
									case TB:
									case TEXTIMAGE_ON:
									case THROW:
									case TIES:
									case TIME:
									case TIMEOUT:
									case TIMER:
									case TINYINT:
									case TORN_PAGE_DETECTION:
									case TRANSFORM_NOISE_WORDS:
									case TRIPLE_DES:
									case TRIPLE_DES_3KEY:
									case TRUSTWORTHY:
									case TRY:
									case TSQL:
									case TWO_DIGIT_YEAR_CUTOFF:
									case TYPE:
									case TYPE_WARNING:
									case UNBOUNDED:
									case UNCOMMITTED:
									case UNKNOWN:
									case UNLIMITED:
									case USING:
									case VALID_XML:
									case VALIDATION:
									case VALUE:
									case VAR:
									case VARP:
									case VIEW_METADATA:
									case VIEWS:
									case WAIT:
									case WELL_FORMED_XML:
									case WORK:
									case WORKLOAD:
									case XML:
									case XMLNAMESPACES:
									case DOUBLE_QUOTE_ID:
									case SQUARE_BRACKET_ID:
									case ID:
									case URL:
										{
										setState(5306);
										((Create_userContext)_localctx).language_name_or_alias = id();
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									}
									break;
								case 3:
									{
									setState(5310);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5309);
										match(COMMA);
										}
									}

									setState(5312);
									match(SID);
									setState(5313);
									match(EQUAL);
									setState(5314);
									match(BINARY);
									}
									break;
								case 4:
									{
									setState(5316);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5315);
										match(COMMA);
										}
									}

									setState(5318);
									match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									setState(5319);
									match(EQUAL);
									setState(5320);
									_la = _input.LA(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.recoverInline(this);
									} else {
										consume();
									}
									}
									break;
								}
								} 
							}
							setState(5325);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(5328);
					((Create_userContext)_localctx).user_name = id();
					setState(5329);
					match(WITH);
					setState(5330);
					match(PASSWORD);
					setState(5331);
					match(EQUAL);
					setState(5332);
					((Create_userContext)_localctx).password = match(STRING);
					setState(5363);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,630,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5361);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
							case 1:
								{
								setState(5334);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5333);
									match(COMMA);
									}
								}

								setState(5336);
								match(DEFAULT_SCHEMA);
								setState(5337);
								match(EQUAL);
								setState(5338);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5340);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5339);
									match(COMMA);
									}
								}

								setState(5342);
								match(DEFAULT_LANGUAGE);
								setState(5343);
								match(EQUAL);
								setState(5347);
								switch (_input.LA(1)) {
								case NONE:
									{
									setState(5344);
									match(NONE);
									}
									break;
								case DECIMAL:
									{
									setState(5345);
									match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case EXPIREDATE:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case POLICY:
								case PRECISION:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROLE:
								case ROWCOUNT:
								case SAFETY:
								case RULE:
								case SERVER:
								case SID:
								case SOURCE:
								case SPLIT:
								case STATE:
								case START:
								case STOP:
								case TARGET:
								case TRAN:
								case USER:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
								case URL:
									{
									setState(5346);
									((Create_userContext)_localctx).language_name_or_alias = id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(5350);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5349);
									match(COMMA);
									}
								}

								setState(5352);
								match(SID);
								setState(5353);
								match(EQUAL);
								setState(5354);
								match(BINARY);
								}
								break;
							case 4:
								{
								setState(5356);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5355);
									match(COMMA);
									}
								}

								setState(5358);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5359);
								match(EQUAL);
								setState(5360);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								} else {
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5365);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,630,_ctx);
					}
					}
					break;
				case 3:
					{
					setState(5366);
					((Create_userContext)_localctx).Azure_Active_Directory_principal = id();
					setState(5367);
					match(FROM);
					setState(5368);
					match(EXTERNAL);
					setState(5369);
					match(PROVIDER);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5373);
				match(CREATE);
				setState(5374);
				match(USER);
				setState(5375);
				((Create_userContext)_localctx).user_name = id();
				setState(5402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
				case 1:
					{
					setState(5376);
					match(WITHOUT);
					setState(5377);
					match(LOGIN);
					setState(5392);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,635,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5390);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
							case 1:
								{
								setState(5379);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5378);
									match(COMMA);
									}
								}

								setState(5381);
								match(DEFAULT_SCHEMA);
								setState(5382);
								match(EQUAL);
								setState(5383);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5385);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5384);
									match(COMMA);
									}
								}

								setState(5387);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5388);
								match(EQUAL);
								setState(5389);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								} else {
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5394);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,635,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(5395);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(5396);
					match(CERTIFICATE);
					setState(5397);
					((Create_userContext)_localctx).cert_name = id();
					}
					break;
				case 3:
					{
					setState(5398);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(5399);
					match(ASYMMETRIC);
					setState(5400);
					match(KEY);
					setState(5401);
					((Create_userContext)_localctx).asym_key_name = id();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5404);
				match(CREATE);
				setState(5405);
				match(USER);
				setState(5406);
				((Create_userContext)_localctx).user_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_azure_sql_dwContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext Azure_Active_Directory_principal;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode WITHOUT() { return getToken(MocaSqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(MocaSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_azure_sql_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_user_azure_sql_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_user_azure_sql_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_user_azure_sql_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_azure_sql_dwContext create_user_azure_sql_dw() throws RecognitionException {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			setState(5437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5409);
				match(CREATE);
				setState(5410);
				match(USER);
				setState(5411);
				((Create_user_azure_sql_dwContext)_localctx).user_name = id();
				setState(5417);
				switch (_input.LA(1)) {
				case FOR:
				case FROM:
					{
					setState(5412);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(5413);
					match(LOGIN);
					setState(5414);
					((Create_user_azure_sql_dwContext)_localctx).login_name = id();
					}
					break;
				case WITHOUT:
					{
					setState(5415);
					match(WITHOUT);
					setState(5416);
					match(LOGIN);
					}
					break;
				case EOF:
				case T__0:
				case T__1:
				case ALTER:
				case BACKUP:
				case BEGIN:
				case BLOCKING_HIERARCHY:
				case BREAK:
				case CALLED:
				case CASE:
				case CLOSE:
				case COALESCE:
				case COMMIT:
				case CONTINUE:
				case CONVERT:
				case CREATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DBCC:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DROP:
				case ELSE:
				case END:
				case EVENTDATA:
				case EXECUTE:
				case EXPIREDATE:
				case FETCH:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case GET:
				case GOTO:
				case GRANT:
				case IDENTITY:
				case IF:
				case IIF:
				case INIT:
				case INSERT:
				case ISNULL:
				case KEY:
				case KILL:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case MERGE:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OPEN:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PRINT:
				case PUBLIC:
				case R:
				case RAISERROR:
				case RAW:
				case RECONFIGURE:
				case RETURN:
				case RETURNS:
				case REVERT:
				case RIGHT:
				case ROLLBACK:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SAVE:
				case SELECT:
				case SERVER:
				case SESSION_USER:
				case SET:
				case SETUSER:
				case SHUTDOWN:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case TRAN:
				case TRUNCATE:
				case UPDATE:
				case USE:
				case USER:
				case WAITFOR:
				case WHILE:
				case WITH:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_MOD_VARIABLE:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case AT:
				case DOLLAR:
				case LR_BRACKET:
				case SEMI:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case URL:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
				case 1:
					{
					setState(5419);
					match(WITH);
					setState(5420);
					match(DEFAULT_SCHEMA);
					setState(5421);
					match(EQUAL);
					setState(5422);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5425);
				match(CREATE);
				setState(5426);
				match(USER);
				setState(5427);
				((Create_user_azure_sql_dwContext)_localctx).Azure_Active_Directory_principal = id();
				setState(5428);
				match(FROM);
				setState(5429);
				match(EXTERNAL);
				setState(5430);
				match(PROVIDER);
				setState(5435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
				case 1:
					{
					setState(5431);
					match(WITH);
					setState(5432);
					match(DEFAULT_SCHEMA);
					setState(5433);
					match(EQUAL);
					setState(5434);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_azure_sqlContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(MocaSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(MocaSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(MocaSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(MocaSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(MocaSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(MocaSqlParser.LOGIN, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_user_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_user_azure_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_user_azure_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_azure_sqlContext alter_user_azure_sql() throws RecognitionException {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5439);
			match(ALTER);
			setState(5440);
			match(USER);
			setState(5441);
			((Alter_user_azure_sqlContext)_localctx).username = id();
			setState(5442);
			match(WITH);
			setState(5467); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5467);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
					case 1:
						{
						setState(5444);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5443);
							match(COMMA);
							}
						}

						setState(5446);
						match(NAME);
						setState(5447);
						match(EQUAL);
						setState(5448);
						((Alter_user_azure_sqlContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5450);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5449);
							match(COMMA);
							}
						}

						setState(5452);
						match(DEFAULT_SCHEMA);
						setState(5453);
						match(EQUAL);
						setState(5454);
						((Alter_user_azure_sqlContext)_localctx).schema_name = id();
						}
						break;
					case 3:
						{
						setState(5456);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5455);
							match(COMMA);
							}
						}

						setState(5458);
						match(LOGIN);
						setState(5459);
						match(EQUAL);
						setState(5460);
						((Alter_user_azure_sqlContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5462);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5461);
							match(COMMA);
							}
						}

						setState(5464);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5465);
						match(EQUAL);
						setState(5466);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5469); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,647,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode WORKLOAD() { return getToken(MocaSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(MocaSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(MocaSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(MocaSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(MocaSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(MocaSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(MocaSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(MocaSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(MocaSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(MocaSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(MocaSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(MocaSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(MocaSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(MocaSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(MocaSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> LOW() { return getTokens(MocaSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(MocaSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(MocaSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(MocaSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(MocaSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(MocaSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_workload_groupContext alter_workload_group() throws RecognitionException {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_alter_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5471);
			match(ALTER);
			setState(5472);
			match(WORKLOAD);
			setState(5473);
			match(GROUP);
			setState(5476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(5474);
				((Alter_workload_groupContext)_localctx).workload_group_group_name = id();
				}
				break;
			case 2:
				{
				setState(5475);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(5509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5478);
				match(WITH);
				setState(5479);
				match(LR_BRACKET);
				setState(5504); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5504);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
					case 1:
						{
						setState(5480);
						match(IMPORTANCE);
						setState(5481);
						match(EQUAL);
						setState(5482);
						_la = _input.LA(1);
						if ( !(((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (HIGH - 533)) | (1L << (LOW - 533)) | (1L << (MEDIUM - 533)))) != 0)) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5484);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5483);
							match(COMMA);
							}
						}

						setState(5486);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5487);
						match(EQUAL);
						setState(5488);
						((Alter_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5490);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5489);
							match(COMMA);
							}
						}

						setState(5492);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5493);
						match(EQUAL);
						setState(5494);
						((Alter_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5495);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5496);
						match(EQUAL);
						setState(5497);
						((Alter_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5498);
						match(MAX_DOP);
						setState(5499);
						match(EQUAL);
						setState(5500);
						((Alter_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5501);
						match(GROUP_MAX_REQUESTS);
						setState(5502);
						match(EQUAL);
						setState(5503);
						((Alter_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5506); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (GROUP_MAX_REQUESTS - 527)) | (1L << (IMPORTANCE - 527)) | (1L << (MAX_DOP - 527)))) != 0) || ((((_la - 685)) & ~0x3f) == 0 && ((1L << (_la - 685)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 685)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 685)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 685)))) != 0) || _la==COMMA );
				setState(5508);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5511);
				match(USING);
				setState(5514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
				case 1:
					{
					setState(5512);
					((Alter_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5513);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public IdContext external_pool_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode WORKLOAD() { return getToken(MocaSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(MocaSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(MocaSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(MocaSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(MocaSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(MocaSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(MocaSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(MocaSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(MocaSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(MocaSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(MocaSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(MocaSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(MocaSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(MocaSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(MocaSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public TerminalNode EXTERNAL() { return getToken(MocaSqlParser.EXTERNAL, 0); }
		public List<TerminalNode> LOW() { return getTokens(MocaSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(MocaSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(MocaSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(MocaSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(MocaSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(MocaSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_workload_groupContext create_workload_group() throws RecognitionException {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_create_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5518);
			match(CREATE);
			setState(5519);
			match(WORKLOAD);
			setState(5520);
			match(GROUP);
			setState(5521);
			((Create_workload_groupContext)_localctx).workload_group_group_name = id();
			setState(5553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5522);
				match(WITH);
				setState(5523);
				match(LR_BRACKET);
				setState(5548); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5548);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
					case 1:
						{
						setState(5524);
						match(IMPORTANCE);
						setState(5525);
						match(EQUAL);
						setState(5526);
						_la = _input.LA(1);
						if ( !(((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (HIGH - 533)) | (1L << (LOW - 533)) | (1L << (MEDIUM - 533)))) != 0)) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5528);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5527);
							match(COMMA);
							}
						}

						setState(5530);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5531);
						match(EQUAL);
						setState(5532);
						((Create_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5534);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5533);
							match(COMMA);
							}
						}

						setState(5536);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5537);
						match(EQUAL);
						setState(5538);
						((Create_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5539);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5540);
						match(EQUAL);
						setState(5541);
						((Create_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5542);
						match(MAX_DOP);
						setState(5543);
						match(EQUAL);
						setState(5544);
						((Create_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5545);
						match(GROUP_MAX_REQUESTS);
						setState(5546);
						match(EQUAL);
						setState(5547);
						((Create_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5550); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (GROUP_MAX_REQUESTS - 527)) | (1L << (IMPORTANCE - 527)) | (1L << (MAX_DOP - 527)))) != 0) || ((((_la - 685)) & ~0x3f) == 0 && ((1L << (_la - 685)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 685)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 685)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 685)))) != 0) || _la==COMMA );
				setState(5552);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5555);
				match(USING);
				setState(5558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
				case 1:
					{
					setState(5556);
					((Create_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5557);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				setState(5566);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					setState(5561);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5560);
						match(COMMA);
						}
					}

					setState(5563);
					match(EXTERNAL);
					setState(5564);
					((Create_workload_groupContext)_localctx).external_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5565);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_xml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_xml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_xml_schema_collectionContext create_xml_schema_collection() throws RecognitionException {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_create_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			match(CREATE);
			setState(5571);
			match(XML);
			setState(5572);
			match(SCHEMA);
			setState(5573);
			match(COLLECTION);
			setState(5577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5574);
				((Create_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(5575);
				match(DOT);
				}
				break;
			}
			setState(5579);
			((Create_xml_schema_collectionContext)_localctx).sql_identifier = id();
			setState(5580);
			match(AS);
			setState(5584);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(5581);
				match(STRING);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				{
				setState(5582);
				id();
				}
				break;
			case LOCAL_ID:
				{
				setState(5583);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_queueContext create_queue() throws RecognitionException {
		Create_queueContext _localctx = new Create_queueContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_create_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5586);
			match(CREATE);
			setState(5587);
			match(QUEUE);
			setState(5590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				{
				setState(5588);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5589);
				((Create_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				setState(5592);
				queue_settings();
				}
				break;
			}
			setState(5598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				{
				setState(5595);
				match(ON);
				setState(5596);
				((Create_queueContext)_localctx).filegroup = id();
				}
				break;
			case 2:
				{
				setState(5597);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_settingsContext extends ParserRuleContext {
		public Token max_readers;
		public Token user_name;
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> STATUS() { return getTokens(MocaSqlParser.STATUS); }
		public TerminalNode STATUS(int i) {
			return getToken(MocaSqlParser.STATUS, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode RETENTION() { return getToken(MocaSqlParser.RETENTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(MocaSqlParser.ACTIVATION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(MocaSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(MocaSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(MocaSqlParser.OFF, i);
		}
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode PROCEDURE_NAME() { return getToken(MocaSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public TerminalNode MAX_QUEUE_READERS() { return getToken(MocaSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode EXECUTE() { return getToken(MocaSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode SELF() { return getToken(MocaSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(MocaSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_settings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQueue_settings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQueue_settings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQueue_settings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_settingsContext queue_settings() throws RecognitionException {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_queue_settings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5600);
			match(WITH);
			setState(5607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(5601);
				match(STATUS);
				setState(5602);
				match(EQUAL);
				setState(5603);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5605);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5604);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(5609);
				match(RETENTION);
				setState(5610);
				match(EQUAL);
				setState(5611);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5613);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5612);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				{
				setState(5617);
				match(ACTIVATION);
				setState(5618);
				match(LR_BRACKET);
				setState(5656);
				switch (_input.LA(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					{
					setState(5625);
					_la = _input.LA(1);
					if (_la==STATUS) {
						{
						setState(5619);
						match(STATUS);
						setState(5620);
						match(EQUAL);
						setState(5621);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(5623);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5622);
							match(COMMA);
							}
						}

						}
					}

					setState(5633);
					_la = _input.LA(1);
					if (_la==PROCEDURE_NAME) {
						{
						setState(5627);
						match(PROCEDURE_NAME);
						setState(5628);
						match(EQUAL);
						setState(5629);
						func_proc_name_database_schema();
						setState(5631);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5630);
							match(COMMA);
							}
						}

						}
					}

					setState(5641);
					_la = _input.LA(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						setState(5635);
						match(MAX_QUEUE_READERS);
						setState(5636);
						match(EQUAL);
						setState(5637);
						((Queue_settingsContext)_localctx).max_readers = match(DECIMAL);
						setState(5639);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5638);
							match(COMMA);
							}
						}

						}
					}

					setState(5653);
					_la = _input.LA(1);
					if (_la==EXECUTE) {
						{
						setState(5643);
						match(EXECUTE);
						setState(5644);
						match(AS);
						setState(5648);
						switch (_input.LA(1)) {
						case SELF:
							{
							setState(5645);
							match(SELF);
							}
							break;
						case STRING:
							{
							setState(5646);
							((Queue_settingsContext)_localctx).user_name = match(STRING);
							}
							break;
						case OWNER:
							{
							setState(5647);
							match(OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5651);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5650);
							match(COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case DROP:
					{
					setState(5655);
					match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5658);
				match(RR_BRACKET);
				setState(5660);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5659);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(5664);
				match(POISON_MESSAGE_HANDLING);
				setState(5665);
				match(LR_BRACKET);
				{
				setState(5666);
				match(STATUS);
				setState(5667);
				match(EQUAL);
				setState(5668);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				setState(5670);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public Queue_actionContext queue_action() {
			return getRuleContext(Queue_actionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_queueContext alter_queue() throws RecognitionException {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_alter_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5673);
			match(ALTER);
			setState(5674);
			match(QUEUE);
			setState(5677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5675);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5676);
				((Alter_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5681);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(5679);
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				setState(5680);
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_actionContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return getRuleContext(Queue_rebuild_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode REORGANIZE() { return getToken(MocaSqlParser.REORGANIZE, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(MocaSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode MOVE() { return getToken(MocaSqlParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQueue_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQueue_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQueue_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_actionContext queue_action() throws RecognitionException {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_queue_action);
		int _la;
		try {
			setState(5704);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5683);
				match(REBUILD);
				setState(5689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					setState(5684);
					match(WITH);
					setState(5685);
					match(LR_BRACKET);
					setState(5686);
					queue_rebuild_options();
					setState(5687);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5691);
				match(REORGANIZE);
				setState(5696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
				case 1:
					{
					setState(5692);
					match(WITH);
					setState(5693);
					match(LOB_COMPACTION);
					setState(5694);
					match(EQUAL);
					setState(5695);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5698);
				match(MOVE);
				setState(5699);
				match(TO);
				setState(5702);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(5700);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(5701);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_rebuild_optionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(MocaSqlParser.MAXDOP, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_rebuild_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQueue_rebuild_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQueue_rebuild_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQueue_rebuild_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_rebuild_optionsContext queue_rebuild_options() throws RecognitionException {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_queue_rebuild_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5706);
			match(MAXDOP);
			setState(5707);
			match(EQUAL);
			setState(5708);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_contractContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext message_type_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode CONTRACT() { return getToken(MocaSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public List<TerminalNode> SENT() { return getTokens(MocaSqlParser.SENT); }
		public TerminalNode SENT(int i) {
			return getToken(MocaSqlParser.SENT, i);
		}
		public List<TerminalNode> BY() { return getTokens(MocaSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MocaSqlParser.BY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> INITIATOR() { return getTokens(MocaSqlParser.INITIATOR); }
		public TerminalNode INITIATOR(int i) {
			return getToken(MocaSqlParser.INITIATOR, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(MocaSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(MocaSqlParser.TARGET, i);
		}
		public List<TerminalNode> ANY() { return getTokens(MocaSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(MocaSqlParser.ANY, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MocaSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MocaSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_contract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_contract(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_contractContext create_contract() throws RecognitionException {
		Create_contractContext _localctx = new Create_contractContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_create_contract);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5710);
			match(CREATE);
			setState(5711);
			match(CONTRACT);
			setState(5712);
			contract_name();
			setState(5715);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5713);
				match(AUTHORIZATION);
				setState(5714);
				((Create_contractContext)_localctx).owner_name = id();
				}
			}

			setState(5717);
			match(LR_BRACKET);
			setState(5728); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5720);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(5718);
					((Create_contractContext)_localctx).message_type_name = id();
					}
					break;
				case DEFAULT:
					{
					setState(5719);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5722);
				match(SENT);
				setState(5723);
				match(BY);
				setState(5724);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==TARGET || _la==INITIATOR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5726);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5725);
					match(COMMA);
					}
				}

				}
				}
				setState(5730); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (DEFAULT - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL );
			setState(5732);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversation_statementContext extends ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return getRuleContext(Begin_conversation_timerContext.class,0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return getRuleContext(Begin_conversation_dialogContext.class,0);
		}
		public End_conversationContext end_conversation() {
			return getRuleContext(End_conversationContext.class,0);
		}
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public Send_conversationContext send_conversation() {
			return getRuleContext(Send_conversationContext.class,0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return getRuleContext(Waitfor_conversationContext.class,0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterConversation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitConversation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitConversation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conversation_statementContext conversation_statement() throws RecognitionException {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_conversation_statement);
		try {
			setState(5740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5734);
				begin_conversation_timer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5735);
				begin_conversation_dialog();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5736);
				end_conversation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5737);
				get_conversation();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5738);
				send_conversation();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5739);
				waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext owner_name;
		public IdContext schema_collection_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode VALIDATION() { return getToken(MocaSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(MocaSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(MocaSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(MocaSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(MocaSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMessage_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMessage_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMessage_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_message_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5742);
			match(CREATE);
			setState(5743);
			match(MESSAGE);
			setState(5744);
			match(TYPE);
			setState(5745);
			((Message_statementContext)_localctx).message_type_name = id();
			setState(5748);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5746);
				match(AUTHORIZATION);
				setState(5747);
				((Message_statementContext)_localctx).owner_name = id();
				}
			}

			{
			setState(5750);
			match(VALIDATION);
			setState(5751);
			match(EQUAL);
			setState(5760);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(5752);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(5753);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(5754);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(5755);
				match(VALID_XML);
				setState(5756);
				match(WITH);
				setState(5757);
				match(SCHEMA);
				setState(5758);
				match(COLLECTION);
				setState(5759);
				((Message_statementContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(MocaSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(MocaSqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(MocaSqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(MocaSqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(MocaSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(MocaSqlParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(MocaSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(MocaSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(MocaSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MocaSqlParser.BY, i);
		}
		public List<TerminalNode> SOURCE() { return getTokens(MocaSqlParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(MocaSqlParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public List<TerminalNode> AND() { return getTokens(MocaSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MocaSqlParser.AND, i);
		}
		public TerminalNode TARGET() { return getToken(MocaSqlParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5763);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5762);
				with_expression();
				}
			}

			setState(5765);
			match(MERGE);
			setState(5773);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5766);
				match(TOP);
				setState(5767);
				match(LR_BRACKET);
				setState(5768);
				expression(0);
				setState(5769);
				match(RR_BRACKET);
				setState(5771);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5770);
					match(PERCENT);
					}
				}

				}
			}

			setState(5776);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5775);
				match(INTO);
				}
			}

			setState(5778);
			ddl_object();
			setState(5780);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5779);
				insert_with_table_hints();
				}
			}

			setState(5783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(5782);
				as_table_alias();
				}
				break;
			}
			setState(5785);
			match(USING);
			setState(5786);
			table_sources();
			setState(5787);
			match(ON);
			setState(5788);
			search_condition();
			setState(5799);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,707,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5789);
					match(WHEN);
					setState(5790);
					match(MATCHED);
					setState(5793);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(5791);
						match(AND);
						setState(5792);
						search_condition();
						}
					}

					setState(5795);
					match(THEN);
					setState(5796);
					merge_matched();
					}
					} 
				}
				setState(5801);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,707,_ctx);
			}
			setState(5815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				{
				setState(5802);
				match(WHEN);
				setState(5803);
				match(NOT);
				setState(5804);
				match(MATCHED);
				setState(5807);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(5805);
					match(BY);
					setState(5806);
					match(TARGET);
					}
				}

				setState(5811);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5809);
					match(AND);
					setState(5810);
					search_condition();
					}
				}

				setState(5813);
				match(THEN);
				setState(5814);
				merge_not_matched();
				}
				break;
			}
			setState(5830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(5817);
				match(WHEN);
				setState(5818);
				match(NOT);
				setState(5819);
				match(MATCHED);
				setState(5820);
				match(BY);
				setState(5821);
				match(SOURCE);
				setState(5824);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5822);
					match(AND);
					setState(5823);
					search_condition();
					}
				}

				setState(5826);
				match(THEN);
				setState(5827);
				merge_matched();
				}
				}
				setState(5832);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5834);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5833);
				output_clause();
				}
			}

			setState(5837);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5836);
				option_clause();
				}
			}

			setState(5839);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMerge_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMerge_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMerge_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_merge_matched);
		int _la;
		try {
			setState(5852);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5841);
				match(UPDATE);
				setState(5842);
				match(SET);
				setState(5843);
				update_elem();
				setState(5848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5844);
					match(COMMA);
					setState(5845);
					update_elem();
					}
					}
					setState(5850);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5851);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MocaSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMerge_not_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMerge_not_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMerge_not_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5854);
			match(INSERT);
			setState(5859);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5855);
				match(LR_BRACKET);
				setState(5856);
				column_name_list();
				setState(5857);
				match(RR_BRACKET);
				}
			}

			setState(5864);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(5861);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(5862);
				match(DEFAULT);
				setState(5863);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<TerminalNode> FROM() { return getTokens(MocaSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MocaSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5867);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5866);
				with_expression();
				}
			}

			setState(5869);
			match(DELETE);
			setState(5879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				setState(5870);
				match(TOP);
				setState(5871);
				match(LR_BRACKET);
				setState(5872);
				expression(0);
				setState(5873);
				match(RR_BRACKET);
				setState(5875);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5874);
					match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				setState(5877);
				match(TOP);
				setState(5878);
				match(DECIMAL);
				}
				break;
			}
			setState(5882);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5881);
				match(FROM);
				}
			}

			setState(5884);
			delete_statement_from();
			setState(5886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				setState(5885);
				insert_with_table_hints();
				}
				break;
			}
			setState(5889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				setState(5888);
				output_clause();
				}
				break;
			}
			setState(5893);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5891);
				match(FROM);
				setState(5892);
				table_sources();
				}
			}

			setState(5908);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5895);
				match(WHERE);
				setState(5906);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_MOD_VARIABLE:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case AT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case URL:
					{
					setState(5896);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(5897);
					match(CURRENT);
					setState(5898);
					match(OF);
					setState(5904);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
					case 1:
						{
						setState(5900);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
						case 1:
							{
							setState(5899);
							match(GLOBAL);
							}
							break;
						}
						setState(5902);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(5903);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5911);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5910);
				for_clause();
				}
			}

			setState(5914);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5913);
				option_clause();
				}
			}

			setState(5917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5916);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDelete_statement_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDelete_statement_from(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDelete_statement_from(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_delete_statement_from);
		try {
			setState(5923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5919);
				ddl_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5920);
				table_alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5921);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5922);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MocaSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5926);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5925);
				with_expression();
				}
			}

			setState(5928);
			match(INSERT);
			setState(5936);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5929);
				match(TOP);
				setState(5930);
				match(LR_BRACKET);
				setState(5931);
				expression(0);
				setState(5932);
				match(RR_BRACKET);
				setState(5934);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5933);
					match(PERCENT);
					}
				}

				}
			}

			setState(5939);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5938);
				match(INTO);
				}
			}

			setState(5943);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
			case URL:
				{
				setState(5941);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(5942);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				{
				setState(5945);
				insert_with_table_hints();
				}
				break;
			}
			setState(5952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				{
				setState(5948);
				match(LR_BRACKET);
				setState(5949);
				column_name_list();
				setState(5950);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5955);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5954);
				output_clause();
				}
			}

			setState(5957);
			insert_statement_value();
			setState(5959);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5958);
				for_clause();
				}
			}

			setState(5962);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5961);
				option_clause();
				}
			}

			setState(5965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				setState(5964);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterInsert_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitInsert_statement_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitInsert_statement_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_insert_statement_value);
		try {
			setState(5972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5967);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5968);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5969);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5970);
				match(DEFAULT);
				setState(5971);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_statementContext extends ParserRuleContext {
		public IdContext table_variable;
		public Search_conditionContext where;
		public TerminalNode RECEIVE() { return getToken(MocaSqlParser.RECEIVE, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MocaSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(MocaSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MocaSqlParser.LOCAL_ID, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterReceive_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitReceive_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitReceive_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Receive_statementContext receive_statement() throws RecognitionException {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_receive_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5975);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5974);
				match(LR_BRACKET);
				}
			}

			setState(5977);
			match(RECEIVE);
			setState(5982);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(5978);
				match(ALL);
				}
				break;
			case DISTINCT:
				{
				setState(5979);
				match(DISTINCT);
				}
				break;
			case TOP:
				{
				setState(5980);
				top_clause();
				}
				break;
			case STAR:
				{
				setState(5981);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				setState(5984);
				match(LOCAL_ID);
				setState(5985);
				match(EQUAL);
				setState(5986);
				expression(0);
				setState(5988);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5987);
					match(COMMA);
					}
				}

				}
				}
				setState(5994);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5995);
			match(FROM);
			setState(5996);
			full_table_name();
			setState(6002);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5997);
				match(INTO);
				setState(5998);
				((Receive_statementContext)_localctx).table_variable = id();
				{
				setState(5999);
				match(WHERE);
				setState(6000);
				((Receive_statementContext)_localctx).where = search_condition();
				}
				}
			}

			setState(6005);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(6004);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6008);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6007);
				with_expression();
				}
			}

			setState(6010);
			query_expression();
			setState(6012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
			case 1:
				{
				setState(6011);
				order_by_clause();
				}
				break;
			}
			setState(6015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				setState(6014);
				for_clause();
				}
				break;
			}
			setState(6018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				setState(6017);
				option_clause();
				}
				break;
			}
			setState(6021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				setState(6020);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6025);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(6023);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(6024);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_condition_listContext search_condition_list() {
			return getRuleContext(Search_condition_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6028);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6027);
				with_expression();
				}
			}

			setState(6030);
			match(UPDATE);
			setState(6038);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(6031);
				match(TOP);
				setState(6032);
				match(LR_BRACKET);
				setState(6033);
				expression(0);
				setState(6034);
				match(RR_BRACKET);
				setState(6036);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(6035);
					match(PERCENT);
					}
				}

				}
			}

			setState(6042);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
			case URL:
				{
				setState(6040);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(6041);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6045);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(6044);
				with_table_hints();
				}
			}

			setState(6047);
			match(SET);
			setState(6048);
			update_elem();
			setState(6053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6049);
				match(COMMA);
				setState(6050);
				update_elem();
				}
				}
				setState(6055);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				setState(6056);
				output_clause();
				}
				break;
			}
			setState(6061);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6059);
				match(FROM);
				setState(6060);
				table_sources();
				}
			}

			setState(6076);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6063);
				match(WHERE);
				setState(6074);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_MOD_VARIABLE:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case AT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case URL:
					{
					setState(6064);
					search_condition_list();
					}
					break;
				case CURRENT:
					{
					setState(6065);
					match(CURRENT);
					setState(6066);
					match(OF);
					setState(6072);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
					case 1:
						{
						setState(6068);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
						case 1:
							{
							setState(6067);
							match(GLOBAL);
							}
							break;
						}
						setState(6070);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(6071);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6079);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6078);
				for_clause();
				}
			}

			setState(6082);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6081);
				option_clause();
				}
			}

			setState(6085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				setState(6084);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOutput_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOutput_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOutput_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6087);
			match(OUTPUT);
			setState(6088);
			output_dml_list_elem();
			setState(6093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6089);
				match(COMMA);
				setState(6090);
				output_dml_list_elem();
				}
				}
				setState(6095);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6107);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6096);
				match(INTO);
				setState(6099);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(6097);
					match(LOCAL_ID);
					}
					break;
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(6098);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(6101);
					match(LR_BRACKET);
					setState(6102);
					column_name_list();
					setState(6103);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOutput_dml_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOutput_dml_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOutput_dml_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_output_dml_list_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				{
				setState(6109);
				output_column_name();
				}
				break;
			case 2:
				{
				setState(6110);
				expression(0);
				}
				break;
			}
			setState(6114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(6113);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_column_nameContext extends ParserRuleContext {
		public TerminalNode DELETED() { return getToken(MocaSqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(MocaSqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(MocaSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOutput_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOutput_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOutput_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_output_column_name);
		try {
			setState(6127);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
				case 1:
					{
					setState(6116);
					match(DELETED);
					}
					break;
				case 2:
					{
					setState(6117);
					match(INSERTED);
					}
					break;
				case 3:
					{
					setState(6118);
					table_name();
					}
					break;
				}
				setState(6121);
				match(DOT);
				setState(6124);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(6122);
					match(STAR);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(6123);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6126);
				match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTAINMENT() { return getToken(MocaSqlParser.CONTAINMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public List<Database_file_specContext> database_file_spec() {
			return getRuleContexts(Database_file_specContext.class);
		}
		public Database_file_specContext database_file_spec(int i) {
			return getRuleContext(Database_file_specContext.class,i);
		}
		public TerminalNode LOG() { return getToken(MocaSqlParser.LOG, 0); }
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(MocaSqlParser.PARTIAL, 0); }
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6129);
			match(CREATE);
			setState(6130);
			match(DATABASE);
			{
			setState(6131);
			((Create_databaseContext)_localctx).database = id();
			}
			setState(6135);
			_la = _input.LA(1);
			if (_la==CONTAINMENT) {
				{
				setState(6132);
				match(CONTAINMENT);
				setState(6133);
				match(EQUAL);
				setState(6134);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(6149);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6137);
				match(ON);
				setState(6139);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(6138);
					match(PRIMARY);
					}
				}

				setState(6141);
				database_file_spec();
				setState(6146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6142);
					match(COMMA);
					setState(6143);
					database_file_spec();
					}
					}
					setState(6148);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6161);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6151);
				match(LOG);
				setState(6152);
				match(ON);
				setState(6153);
				database_file_spec();
				setState(6158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6154);
					match(COMMA);
					setState(6155);
					database_file_spec();
					}
					}
					setState(6160);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6165);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(6163);
				match(COLLATE);
				setState(6164);
				((Create_databaseContext)_localctx).collation_name = id();
				}
			}

			setState(6176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				{
				setState(6167);
				match(WITH);
				setState(6168);
				create_database_option();
				setState(6173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6169);
					match(COMMA);
					setState(6170);
					create_database_option();
					}
					}
					setState(6175);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(MocaSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6178);
			match(CREATE);
			setState(6180);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(6179);
				match(UNIQUE);
				}
			}

			setState(6183);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(6182);
				clustered();
				}
			}

			setState(6185);
			match(INDEX);
			setState(6186);
			id();
			setState(6187);
			match(ON);
			setState(6188);
			table_name_with_hint();
			setState(6189);
			match(LR_BRACKET);
			setState(6190);
			column_name_list_with_order();
			setState(6191);
			match(RR_BRACKET);
			setState(6197);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(6192);
				match(INCLUDE);
				setState(6193);
				match(LR_BRACKET);
				setState(6194);
				column_name_list();
				setState(6195);
				match(RR_BRACKET);
				}
			}

			setState(6201);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6199);
				match(WHERE);
				setState(6200);
				((Create_indexContext)_localctx).where = search_condition();
				}
			}

			setState(6204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				setState(6203);
				index_options();
				}
				break;
			}
			setState(6208);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6206);
				match(ON);
				setState(6207);
				id();
				}
			}

			setState(6211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(6210);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_procedureContext extends ParserRuleContext {
		public Token proc;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode PROC() { return getToken(MocaSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(MocaSqlParser.PROCEDURE, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Procedure_optionContext> procedure_option() {
			return getRuleContexts(Procedure_optionContext.class);
		}
		public Procedure_optionContext procedure_option(int i) {
			return getRuleContext(Procedure_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(MocaSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_or_alter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_or_alter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_or_alter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_procedureContext create_or_alter_procedure() throws RecognitionException {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_create_or_alter_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6219);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6213);
				match(CREATE);
				setState(6216);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6214);
					match(OR);
					setState(6215);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6218);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6221);
			((Create_or_alter_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Create_or_alter_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(6222);
			func_proc_name_schema();
			setState(6225);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6223);
				match(SEMI);
				setState(6224);
				match(DECIMAL);
				}
			}

			setState(6241);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(6228);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6227);
					match(LR_BRACKET);
					}
				}

				setState(6230);
				procedure_param();
				setState(6235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6231);
					match(COMMA);
					setState(6232);
					procedure_param();
					}
					}
					setState(6237);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6239);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(6238);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(6252);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6243);
				match(WITH);
				setState(6244);
				procedure_option();
				setState(6249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6245);
					match(COMMA);
					setState(6246);
					procedure_option();
					}
					}
					setState(6251);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6256);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6254);
				match(FOR);
				setState(6255);
				match(REPLICATION);
				}
			}

			setState(6258);
			match(AS);
			setState(6259);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_triggerContext extends ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return getRuleContext(Create_or_alter_dml_triggerContext.class,0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return getRuleContext(Create_or_alter_ddl_triggerContext.class,0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_or_alter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_or_alter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_or_alter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_triggerContext create_or_alter_trigger() throws RecognitionException {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_create_or_alter_trigger);
		try {
			setState(6263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6261);
				create_or_alter_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6262);
				create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_dml_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public List<TerminalNode> FOR() { return getTokens(MocaSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(MocaSqlParser.FOR, i);
		}
		public TerminalNode AFTER() { return getToken(MocaSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(MocaSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public List<TerminalNode> WITH() { return getTokens(MocaSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MocaSqlParser.WITH, i);
		}
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public TerminalNode APPEND() { return getToken(MocaSqlParser.APPEND, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(MocaSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_or_alter_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_or_alter_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_or_alter_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() throws RecognitionException {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6271);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6265);
				match(CREATE);
				setState(6268);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6266);
					match(OR);
					setState(6267);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6270);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6273);
			match(TRIGGER);
			setState(6274);
			simple_name();
			setState(6275);
			match(ON);
			setState(6276);
			table_name();
			setState(6286);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6277);
				match(WITH);
				setState(6278);
				dml_trigger_option();
				setState(6283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6279);
					match(COMMA);
					setState(6280);
					dml_trigger_option();
					}
					}
					setState(6285);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6292);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(6288);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(6289);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(6290);
				match(INSTEAD);
				setState(6291);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6294);
			dml_trigger_operation();
			setState(6299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6295);
				match(COMMA);
				setState(6296);
				dml_trigger_operation();
				}
				}
				setState(6301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6304);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6302);
				match(WITH);
				setState(6303);
				match(APPEND);
				}
			}

			setState(6309);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6306);
				match(NOT);
				setState(6307);
				match(FOR);
				setState(6308);
				match(REPLICATION);
				}
			}

			setState(6311);
			match(AS);
			setState(6312);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDml_trigger_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDml_trigger_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDml_trigger_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_trigger_optionContext dml_trigger_option() throws RecognitionException {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_dml_trigger_option);
		try {
			setState(6316);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6314);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6315);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_operationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(MocaSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDml_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDml_trigger_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDml_trigger_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_trigger_operationContext dml_trigger_operation() throws RecognitionException {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_dml_trigger_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6318);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return getRuleContext(Ddl_trigger_operationContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode AFTER() { return getToken(MocaSqlParser.AFTER, 0); }
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(MocaSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_or_alter_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_or_alter_ddl_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_or_alter_ddl_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() throws RecognitionException {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6326);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6320);
				match(CREATE);
				setState(6323);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6321);
					match(OR);
					setState(6322);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6325);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6328);
			match(TRIGGER);
			setState(6329);
			simple_id();
			setState(6330);
			match(ON);
			setState(6334);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(6331);
				match(ALL);
				setState(6332);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(6333);
				match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6345);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6336);
				match(WITH);
				setState(6337);
				dml_trigger_option();
				setState(6342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6338);
					match(COMMA);
					setState(6339);
					dml_trigger_option();
					}
					}
					setState(6344);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6347);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(6348);
			ddl_trigger_operation();
			setState(6353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6349);
				match(COMMA);
				setState(6350);
				dml_trigger_operation();
				}
				}
				setState(6355);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6356);
			match(AS);
			setState(6357);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_trigger_operationContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDdl_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDdl_trigger_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDdl_trigger_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_trigger_operationContext ddl_trigger_operation() throws RecognitionException {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_ddl_trigger_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6359);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_functionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(MocaSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return getRuleContext(Func_body_returns_selectContext.class,0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return getRuleContext(Func_body_returns_tableContext.class,0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return getRuleContext(Func_body_returns_scalarContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode OR() { return getToken(MocaSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_or_alter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_or_alter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_or_alter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_functionContext create_or_alter_function() throws RecognitionException {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_create_or_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6367);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6361);
				match(CREATE);
				setState(6364);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6362);
					match(OR);
					setState(6363);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6366);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6369);
			match(FUNCTION);
			setState(6370);
			func_proc_name_schema();
			setState(6384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				{
				setState(6371);
				match(LR_BRACKET);
				setState(6372);
				procedure_param();
				setState(6377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6373);
					match(COMMA);
					setState(6374);
					procedure_param();
					}
					}
					setState(6379);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6380);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				setState(6382);
				match(LR_BRACKET);
				setState(6383);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
			case 1:
				{
				setState(6386);
				func_body_returns_select();
				}
				break;
			case 2:
				{
				setState(6387);
				func_body_returns_table();
				}
				break;
			case 3:
				{
				setState(6388);
				func_body_returns_scalar();
				}
				break;
			}
			setState(6392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				setState(6391);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_selectContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(MocaSqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public TerminalNode RETURN() { return getToken(MocaSqlParser.RETURN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_body_returns_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_body_returns_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_body_returns_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_selectContext func_body_returns_select() throws RecognitionException {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_func_body_returns_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6394);
			match(RETURNS);
			setState(6395);
			match(TABLE);
			setState(6405);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6396);
				match(WITH);
				setState(6397);
				function_option();
				setState(6402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6398);
					match(COMMA);
					setState(6399);
					function_option();
					}
					}
					setState(6404);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6408);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6407);
				match(AS);
				}
			}

			setState(6410);
			match(RETURN);
			setState(6416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				setState(6411);
				match(LR_BRACKET);
				setState(6412);
				select_statement();
				setState(6413);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6415);
				select_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_tableContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(MocaSqlParser.RETURNS, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(MocaSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(MocaSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(MocaSqlParser.END, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_body_returns_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_body_returns_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_body_returns_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_tableContext func_body_returns_table() throws RecognitionException {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6418);
			match(RETURNS);
			setState(6419);
			match(LOCAL_ID);
			setState(6420);
			table_type_definition();
			setState(6430);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6421);
				match(WITH);
				setState(6422);
				function_option();
				setState(6427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6423);
					match(COMMA);
					setState(6424);
					function_option();
					}
					}
					setState(6429);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6433);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6432);
				match(AS);
				}
			}

			setState(6435);
			match(BEGIN);
			setState(6439);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6436);
					sql_clause();
					}
					} 
				}
				setState(6441);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
			}
			setState(6442);
			match(RETURN);
			setState(6444);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6443);
				match(SEMI);
				}
			}

			setState(6446);
			match(END);
			setState(6448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				setState(6447);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_scalarContext extends ParserRuleContext {
		public ExpressionContext ret;
		public TerminalNode RETURNS() { return getToken(MocaSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(MocaSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(MocaSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(MocaSqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_scalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_body_returns_scalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_body_returns_scalar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_body_returns_scalar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_body_returns_scalarContext func_body_returns_scalar() throws RecognitionException {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6450);
			match(RETURNS);
			setState(6451);
			data_type();
			setState(6461);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6452);
				match(WITH);
				setState(6453);
				function_option();
				setState(6458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6454);
					match(COMMA);
					setState(6455);
					function_option();
					}
					}
					setState(6460);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6464);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6463);
				match(AS);
				}
			}

			setState(6466);
			match(BEGIN);
			setState(6470);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6467);
					sql_clause();
					}
					} 
				}
				setState(6472);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			}
			setState(6473);
			match(RETURN);
			setState(6474);
			((Func_body_returns_scalarContext)_localctx).ret = expression(0);
			setState(6476);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6475);
				match(SEMI);
				}
			}

			setState(6478);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public Default_valueContext default_val;
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode VARYING() { return getToken(MocaSqlParser.VARYING, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode OUT() { return getToken(MocaSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public TerminalNode READONLY() { return getToken(MocaSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterProcedure_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitProcedure_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitProcedure_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6480);
			match(LOCAL_ID);
			setState(6484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6481);
				id();
				setState(6482);
				match(DOT);
				}
				break;
			}
			setState(6487);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6486);
				match(AS);
				}
			}

			setState(6489);
			data_type();
			setState(6491);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(6490);
				match(VARYING);
				}
			}

			setState(6495);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(6493);
				match(EQUAL);
				setState(6494);
				((Procedure_paramContext)_localctx).default_val = default_value();
				}
			}

			setState(6498);
			_la = _input.LA(1);
			if (((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (OUT - 634)) | (1L << (OUTPUT - 634)) | (1L << (READONLY - 634)))) != 0)) {
				{
				setState(6497);
				_la = _input.LA(1);
				if ( !(((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (OUT - 634)) | (1L << (OUTPUT - 634)) | (1L << (READONLY - 634)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(MocaSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterProcedure_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitProcedure_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitProcedure_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_optionContext procedure_option() throws RecognitionException {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_procedure_option);
		try {
			setState(6503);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6500);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6501);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6502);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(MocaSqlParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(MocaSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(MocaSqlParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(MocaSqlParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(MocaSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunction_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunction_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunction_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_optionContext function_option() throws RecognitionException {
		Function_optionContext _localctx = new Function_optionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_function_option);
		try {
			setState(6517);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6505);
				match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6506);
				match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6507);
				match(RETURNS);
				setState(6508);
				match(NULL);
				setState(6509);
				match(ON);
				setState(6510);
				match(NULL);
				setState(6511);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 4);
				{
				setState(6512);
				match(CALLED);
				setState(6513);
				match(ON);
				setState(6514);
				match(NULL);
				setState(6515);
				match(INPUT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6516);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(MocaSqlParser.STATISTICS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode FULLSCAN() { return getToken(MocaSqlParser.FULLSCAN, 0); }
		public TerminalNode SAMPLE() { return getToken(MocaSqlParser.SAMPLE, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode STATS_STREAM() { return getToken(MocaSqlParser.STATS_STREAM, 0); }
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(MocaSqlParser.ROWS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(MocaSqlParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(MocaSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6519);
			match(CREATE);
			setState(6520);
			match(STATISTICS);
			setState(6521);
			id();
			setState(6522);
			match(ON);
			setState(6523);
			table_name_with_hint();
			setState(6524);
			match(LR_BRACKET);
			setState(6525);
			column_name_list();
			setState(6526);
			match(RR_BRACKET);
			setState(6545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				setState(6527);
				match(WITH);
				setState(6533);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(6528);
					match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					setState(6529);
					match(SAMPLE);
					setState(6530);
					match(DECIMAL);
					setState(6531);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					setState(6532);
					match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					setState(6535);
					match(COMMA);
					setState(6536);
					match(NORECOMPUTE);
					}
					break;
				}
				setState(6543);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6539);
					match(COMMA);
					setState(6540);
					match(INCREMENTAL);
					setState(6541);
					match(EQUAL);
					setState(6542);
					on_off();
					}
				}

				}
				break;
			}
			setState(6548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(6547);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statisticsContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode STATISTICS() { return getToken(MocaSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUpdate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUpdate_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUpdate_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statisticsContext update_statistics() throws RecognitionException {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_update_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6550);
			match(UPDATE);
			setState(6552);
			_la = _input.LA(1);
			if (_la==ALL || _la==INDEX) {
				{
				setState(6551);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(6554);
			match(STATISTICS);
			setState(6555);
			full_table_name();
			setState(6557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				setState(6556);
				id();
				}
				break;
			}
			setState(6562);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				setState(6559);
				match(USING);
				setState(6560);
				match(DECIMAL);
				setState(6561);
				match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode LOCK() { return getToken(MocaSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MocaSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MocaSqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(MocaSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6564);
			match(CREATE);
			setState(6565);
			match(TABLE);
			setState(6566);
			table_name();
			setState(6567);
			match(LR_BRACKET);
			setState(6568);
			column_def_table_constraints();
			setState(6570);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6569);
				match(COMMA);
				}
			}

			setState(6572);
			match(RR_BRACKET);
			setState(6575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				setState(6573);
				match(LOCK);
				setState(6574);
				simple_id();
				}
				break;
			}
			setState(6580);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6577);
					table_options();
					}
					} 
				}
				setState(6582);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
			}
			setState(6586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				setState(6583);
				match(ON);
				setState(6584);
				id();
				}
				break;
			case 2:
				{
				setState(6585);
				match(DEFAULT);
				}
				break;
			}
			setState(6591);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				setState(6588);
				match(TEXTIMAGE_ON);
				setState(6589);
				id();
				}
				break;
			case 2:
				{
				setState(6590);
				match(DEFAULT);
				}
				break;
			}
			setState(6594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
			case 1:
				{
				setState(6593);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6596);
			match(WITH);
			setState(6616);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6597);
				match(LR_BRACKET);
				setState(6598);
				index_option();
				setState(6603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6599);
					match(COMMA);
					setState(6600);
					index_option();
					}
					}
					setState(6605);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6606);
				match(RR_BRACKET);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
			case URL:
				{
				setState(6608);
				index_option();
				setState(6613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6609);
					match(COMMA);
					setState(6610);
					index_option();
					}
					}
					setState(6615);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MocaSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MocaSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MocaSqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MocaSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6618);
			match(CREATE);
			setState(6619);
			match(VIEW);
			setState(6620);
			simple_name();
			setState(6625);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6621);
				match(LR_BRACKET);
				setState(6622);
				column_name_list();
				setState(6623);
				match(RR_BRACKET);
				}
			}

			setState(6636);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6627);
				match(WITH);
				setState(6628);
				view_attribute();
				setState(6633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6629);
					match(COMMA);
					setState(6630);
					view_attribute();
					}
					}
					setState(6635);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6638);
			match(AS);
			setState(6639);
			select_statement();
			setState(6643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				setState(6640);
				match(WITH);
				setState(6641);
				match(CHECK);
				setState(6642);
				match(OPTION);
				}
				break;
			}
			setState(6646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				setState(6645);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(MocaSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitView_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitView_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6648);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(MocaSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(MocaSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(MocaSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(MocaSqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(MocaSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode ADD() { return getToken(MocaSqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return getRuleContext(Column_def_table_constraintContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MocaSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6650);
			match(ALTER);
			setState(6651);
			match(TABLE);
			setState(6652);
			table_name();
			setState(6696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				setState(6653);
				match(SET);
				setState(6654);
				match(LR_BRACKET);
				setState(6655);
				match(LOCK_ESCALATION);
				setState(6656);
				match(EQUAL);
				setState(6657);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(6658);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6659);
				match(ADD);
				setState(6660);
				column_def_table_constraint();
				}
				break;
			case 3:
				{
				setState(6661);
				match(ALTER);
				setState(6662);
				match(COLUMN);
				setState(6663);
				column_definition();
				}
				break;
			case 4:
				{
				setState(6664);
				match(DROP);
				setState(6665);
				match(COLUMN);
				setState(6666);
				id();
				}
				break;
			case 5:
				{
				setState(6667);
				match(DROP);
				setState(6668);
				match(CONSTRAINT);
				setState(6669);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 6:
				{
				setState(6670);
				match(WITH);
				setState(6671);
				match(CHECK);
				setState(6672);
				match(ADD);
				setState(6673);
				match(CONSTRAINT);
				setState(6674);
				((Alter_tableContext)_localctx).constraint = id();
				setState(6675);
				match(FOREIGN);
				setState(6676);
				match(KEY);
				setState(6677);
				match(LR_BRACKET);
				setState(6678);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(6679);
				match(RR_BRACKET);
				setState(6680);
				match(REFERENCES);
				setState(6681);
				table_name();
				setState(6682);
				match(LR_BRACKET);
				setState(6683);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(6684);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(6686);
				match(CHECK);
				setState(6687);
				match(CONSTRAINT);
				setState(6688);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 8:
				{
				setState(6689);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(6690);
				match(TRIGGER);
				setState(6692);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					setState(6691);
					id();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(6694);
				match(REBUILD);
				setState(6695);
				table_options();
				}
				break;
			}
			setState(6699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
			case 1:
				{
				setState(6698);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return getRuleContext(Database_optionspecContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6701);
			match(ALTER);
			setState(6702);
			match(DATABASE);
			setState(6705);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				{
				setState(6703);
				((Alter_databaseContext)_localctx).database = id();
				}
				break;
			case CURRENT:
				{
				setState(6704);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6719);
			switch (_input.LA(1)) {
			case MODIFY:
				{
				setState(6707);
				match(MODIFY);
				setState(6708);
				match(NAME);
				setState(6709);
				match(EQUAL);
				setState(6710);
				((Alter_databaseContext)_localctx).new_name = id();
				}
				break;
			case COLLATE:
				{
				setState(6711);
				match(COLLATE);
				setState(6712);
				((Alter_databaseContext)_localctx).collation = id();
				}
				break;
			case SET:
				{
				setState(6713);
				match(SET);
				setState(6714);
				database_optionspec();
				setState(6717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
				case 1:
					{
					setState(6715);
					match(WITH);
					setState(6716);
					termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
			case 1:
				{
				setState(6721);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionspecContext extends ParserRuleContext {
		public Auto_optionContext auto_option() {
			return getRuleContext(Auto_optionContext.class,0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return getRuleContext(Change_tracking_optionContext.class,0);
		}
		public Containment_optionContext containment_option() {
			return getRuleContext(Containment_optionContext.class,0);
		}
		public Cursor_optionContext cursor_option() {
			return getRuleContext(Cursor_optionContext.class,0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return getRuleContext(Database_mirroring_optionContext.class,0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return getRuleContext(Date_correlation_optimization_optionContext.class,0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return getRuleContext(Db_encryption_optionContext.class,0);
		}
		public Db_state_optionContext db_state_option() {
			return getRuleContext(Db_state_optionContext.class,0);
		}
		public Db_update_optionContext db_update_option() {
			return getRuleContext(Db_update_optionContext.class,0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return getRuleContext(Db_user_access_optionContext.class,0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return getRuleContext(Delayed_durability_optionContext.class,0);
		}
		public External_access_optionContext external_access_option() {
			return getRuleContext(External_access_optionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(MocaSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return getRuleContext(Database_filestream_optionContext.class,0);
		}
		public Hadr_optionsContext hadr_options() {
			return getRuleContext(Hadr_optionsContext.class,0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return getRuleContext(Mixed_page_allocation_optionContext.class,0);
		}
		public Parameterization_optionContext parameterization_option() {
			return getRuleContext(Parameterization_optionContext.class,0);
		}
		public Recovery_optionContext recovery_option() {
			return getRuleContext(Recovery_optionContext.class,0);
		}
		public Service_broker_optionContext service_broker_option() {
			return getRuleContext(Service_broker_optionContext.class,0);
		}
		public Snapshot_optionContext snapshot_option() {
			return getRuleContext(Snapshot_optionContext.class,0);
		}
		public Sql_optionContext sql_option() {
			return getRuleContext(Sql_optionContext.class,0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return getRuleContext(Target_recovery_time_optionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_optionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDatabase_optionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDatabase_optionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDatabase_optionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_optionspecContext database_optionspec() throws RecognitionException {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_database_optionspec);
		try {
			setState(6747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6724);
				auto_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6725);
				change_tracking_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6726);
				containment_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6727);
				cursor_option();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6728);
				database_mirroring_option();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6729);
				date_correlation_optimization_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6730);
				db_encryption_option();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6731);
				db_state_option();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6732);
				db_update_option();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6733);
				db_user_access_option();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6734);
				delayed_durability_option();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6735);
				external_access_option();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6736);
				match(FILESTREAM);
				setState(6737);
				database_filestream_option();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6738);
				hadr_options();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6739);
				mixed_page_allocation_option();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6740);
				parameterization_option();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6741);
				recovery_option();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6742);
				service_broker_option();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6743);
				snapshot_option();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6744);
				sql_option();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6745);
				target_recovery_time_option();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6746);
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_optionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(MocaSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public TerminalNode INCREMENTAL() { return getToken(MocaSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(MocaSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAuto_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAuto_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAuto_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auto_optionContext auto_option() throws RecognitionException {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_auto_option);
		int _la;
		try {
			setState(6766);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6749);
				match(AUTO_CLOSE);
				setState(6750);
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6751);
				match(AUTO_CREATE_STATISTICS);
				setState(6752);
				match(OFF);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(6753);
				match(ON);
				setState(6758);
				switch (_input.LA(1)) {
				case INCREMENTAL:
					{
					setState(6754);
					match(INCREMENTAL);
					setState(6755);
					match(EQUAL);
					setState(6756);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(6757);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 4);
				{
				setState(6760);
				match(AUTO_SHRINK);
				setState(6761);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6762);
				match(AUTO_UPDATE_STATISTICS);
				setState(6763);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(6764);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(6765);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_optionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(MocaSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<Change_tracking_option_listContext> change_tracking_option_list() {
			return getRuleContexts(Change_tracking_option_listContext.class);
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return getRuleContext(Change_tracking_option_listContext.class,i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterChange_tracking_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitChange_tracking_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitChange_tracking_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_optionContext change_tracking_option() throws RecognitionException {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_change_tracking_option);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6768);
			match(CHANGE_TRACKING);
			setState(6769);
			match(EQUAL);
			setState(6785);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(6770);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(6771);
				match(ON);
				setState(6782);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,885,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6772);
						change_tracking_option_list();
						setState(6777);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6773);
							match(COMMA);
							setState(6774);
							change_tracking_option_list();
							}
							}
							setState(6779);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						} 
					}
					setState(6784);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,885,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_option_listContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(MocaSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CHANGE_RETENTION() { return getToken(MocaSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode DAYS() { return getToken(MocaSqlParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(MocaSqlParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(MocaSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterChange_tracking_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitChange_tracking_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitChange_tracking_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_option_listContext change_tracking_option_list() throws RecognitionException {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_change_tracking_option_list);
		int _la;
		try {
			setState(6793);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6787);
				match(AUTO_CLEANUP);
				setState(6788);
				match(EQUAL);
				setState(6789);
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6790);
				match(CHANGE_RETENTION);
				setState(6791);
				match(EQUAL);
				setState(6792);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Containment_optionContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(MocaSqlParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(MocaSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_containment_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterContainment_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitContainment_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitContainment_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Containment_optionContext containment_option() throws RecognitionException {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_containment_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6795);
			match(CONTAINMENT);
			setState(6796);
			match(EQUAL);
			setState(6797);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(MocaSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CURSOR_DEFAULT() { return getToken(MocaSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(MocaSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCursor_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCursor_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCursor_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionContext cursor_option() throws RecognitionException {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_cursor_option);
		int _la;
		try {
			setState(6803);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6799);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(6800);
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6801);
				match(CURSOR_DEFAULT);
				setState(6802);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_endpointContext extends ParserRuleContext {
		public IdContext endpointname;
		public IdContext login;
		public Token state;
		public Token port;
		public IdContext cert_name;
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode ENDPOINT() { return getToken(MocaSqlParser.ENDPOINT, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode TCP() { return getToken(MocaSqlParser.TCP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public TerminalNode LISTENER_PORT() { return getToken(MocaSqlParser.LISTENER_PORT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MocaSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MocaSqlParser.RR_BRACKET, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode TSQL() { return getToken(MocaSqlParser.TSQL, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(MocaSqlParser.SERVICE_BROKER, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(MocaSqlParser.AUTHENTICATION, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(MocaSqlParser.DATABASE_MIRRORING, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode LISTENER_IP() { return getToken(MocaSqlParser.LISTENER_IP, 0); }
		public TerminalNode WITNESS() { return getToken(MocaSqlParser.WITNESS, 0); }
		public TerminalNode PARTNER() { return getToken(MocaSqlParser.PARTNER, 0); }
		public List<TerminalNode> ALL() { return getTokens(MocaSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(MocaSqlParser.ALL, i);
		}
		public TerminalNode IPV4_ADDR() { return getToken(MocaSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(MocaSqlParser.IPV6_ADDR, 0); }
		public TerminalNode WINDOWS() { return getToken(MocaSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(MocaSqlParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(MocaSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode STARTED() { return getToken(MocaSqlParser.STARTED, 0); }
		public TerminalNode STOPPED() { return getToken(MocaSqlParser.STOPPED, 0); }
		public List<TerminalNode> DISABLED() { return getTokens(MocaSqlParser.DISABLED); }
		public TerminalNode DISABLED(int i) {
			return getToken(MocaSqlParser.DISABLED, i);
		}
		public TerminalNode SUPPORTED() { return getToken(MocaSqlParser.SUPPORTED, 0); }
		public TerminalNode REQUIRED() { return getToken(MocaSqlParser.REQUIRED, 0); }
		public TerminalNode ENABLED() { return getToken(MocaSqlParser.ENABLED, 0); }
		public TerminalNode NTLM() { return getToken(MocaSqlParser.NTLM, 0); }
		public TerminalNode KERBEROS() { return getToken(MocaSqlParser.KERBEROS, 0); }
		public TerminalNode NEGOTIATE() { return getToken(MocaSqlParser.NEGOTIATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public TerminalNode AES() { return getToken(MocaSqlParser.AES, 0); }
		public TerminalNode RC4() { return getToken(MocaSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlter_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlter_endpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlter_endpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_endpointContext alter_endpoint() throws RecognitionException {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_alter_endpoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6805);
			match(ALTER);
			setState(6806);
			match(ENDPOINT);
			setState(6807);
			((Alter_endpointContext)_localctx).endpointname = id();
			setState(6810);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(6808);
				match(AUTHORIZATION);
				setState(6809);
				((Alter_endpointContext)_localctx).login = id();
				}
			}

			setState(6819);
			_la = _input.LA(1);
			if (_la==STATE) {
				{
				setState(6812);
				match(STATE);
				setState(6813);
				match(EQUAL);
				setState(6817);
				switch (_input.LA(1)) {
				case STARTED:
					{
					setState(6814);
					((Alter_endpointContext)_localctx).state = match(STARTED);
					}
					break;
				case STOPPED:
					{
					setState(6815);
					((Alter_endpointContext)_localctx).state = match(STOPPED);
					}
					break;
				case DISABLED:
					{
					setState(6816);
					((Alter_endpointContext)_localctx).state = match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6821);
			match(AS);
			setState(6822);
			match(TCP);
			setState(6823);
			match(LR_BRACKET);
			setState(6824);
			match(LISTENER_PORT);
			setState(6825);
			match(EQUAL);
			setState(6826);
			((Alter_endpointContext)_localctx).port = match(DECIMAL);
			setState(6831);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6827);
				match(COMMA);
				setState(6828);
				match(LISTENER_IP);
				setState(6829);
				match(EQUAL);
				setState(6830);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==IPV4_ADDR || _la==IPV6_ADDR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(6833);
			match(RR_BRACKET);
			setState(6943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				setState(6834);
				match(TSQL);
				}
				break;
			case 2:
				{
				setState(6835);
				match(FOR);
				setState(6836);
				match(SERVICE_BROKER);
				setState(6837);
				match(LR_BRACKET);
				setState(6838);
				match(AUTHENTICATION);
				setState(6839);
				match(EQUAL);
				setState(6856);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6840);
					match(WINDOWS);
					setState(6842);
					_la = _input.LA(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						setState(6841);
						_la = _input.LA(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					setState(6846);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6844);
						match(CERTIFICATE);
						setState(6845);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6848);
					match(CERTIFICATE);
					setState(6849);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6851);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6850);
						match(WINDOWS);
						}
					}

					setState(6854);
					_la = _input.LA(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						setState(6853);
						_la = _input.LA(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(6859);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6858);
						match(COMMA);
						}
					}

					setState(6861);
					match(ENCRYPTION);
					setState(6862);
					match(EQUAL);
					setState(6863);
					_la = _input.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(6873);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6864);
						match(ALGORITHM);
						setState(6871);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
						case 1:
							{
							setState(6865);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6866);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6867);
							match(AES);
							setState(6868);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6869);
							match(RC4);
							setState(6870);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6883);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
				case 1:
					{
					setState(6878);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6877);
						match(COMMA);
						}
					}

					setState(6880);
					match(MESSAGE_FORWARDING);
					setState(6881);
					match(EQUAL);
					setState(6882);
					_la = _input.LA(1);
					if ( !(_la==ENABLED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(6891);
				_la = _input.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					setState(6886);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6885);
						match(COMMA);
						}
					}

					setState(6888);
					match(MESSAGE_FORWARD_SIZE);
					setState(6889);
					match(EQUAL);
					setState(6890);
					match(DECIMAL);
					}
				}

				setState(6893);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(6894);
				match(FOR);
				setState(6895);
				match(DATABASE_MIRRORING);
				setState(6896);
				match(LR_BRACKET);
				setState(6897);
				match(AUTHENTICATION);
				setState(6898);
				match(EQUAL);
				setState(6915);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6899);
					match(WINDOWS);
					setState(6901);
					_la = _input.LA(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						setState(6900);
						_la = _input.LA(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					setState(6905);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6903);
						match(CERTIFICATE);
						setState(6904);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6907);
					match(CERTIFICATE);
					setState(6908);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6910);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6909);
						match(WINDOWS);
						}
					}

					setState(6913);
					_la = _input.LA(1);
					if (((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) {
						{
						setState(6912);
						_la = _input.LA(1);
						if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (KERBEROS - 171)) | (1L << (NEGOTIATE - 171)) | (1L << (NTLM - 171)))) != 0)) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6934);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
				case 1:
					{
					setState(6918);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6917);
						match(COMMA);
						}
					}

					setState(6920);
					match(ENCRYPTION);
					setState(6921);
					match(EQUAL);
					setState(6922);
					_la = _input.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(6932);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6923);
						match(ALGORITHM);
						setState(6930);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
						case 1:
							{
							setState(6924);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6925);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6926);
							match(AES);
							setState(6927);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6928);
							match(RC4);
							setState(6929);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6937);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6936);
					match(COMMA);
					}
				}

				setState(6939);
				match(ROLE);
				setState(6940);
				match(EQUAL);
				setState(6941);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==WITNESS || _la==PARTNER) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(6942);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_mirroring_optionContext extends ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return getRuleContext(Mirroring_set_optionContext.class,0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_mirroring_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDatabase_mirroring_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDatabase_mirroring_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDatabase_mirroring_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_mirroring_optionContext database_mirroring_option() throws RecognitionException {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_database_mirroring_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6945);
			mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_set_optionContext extends ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return getRuleContext(Mirroring_partnerContext.class,0);
		}
		public Partner_optionContext partner_option() {
			return getRuleContext(Partner_optionContext.class,0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return getRuleContext(Mirroring_witnessContext.class,0);
		}
		public Witness_optionContext witness_option() {
			return getRuleContext(Witness_optionContext.class,0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_set_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMirroring_set_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMirroring_set_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMirroring_set_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_set_optionContext mirroring_set_option() throws RecognitionException {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_mirroring_set_option);
		try {
			setState(6953);
			switch (_input.LA(1)) {
			case PARTNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6947);
				mirroring_partner();
				setState(6948);
				partner_option();
				}
				break;
			case WITNESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6950);
				mirroring_witness();
				setState(6951);
				witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_partnerContext extends ParserRuleContext {
		public TerminalNode PARTNER() { return getToken(MocaSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_partner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMirroring_partner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMirroring_partner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMirroring_partner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_partnerContext mirroring_partner() throws RecognitionException {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_mirroring_partner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6955);
			match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_witnessContext extends ParserRuleContext {
		public TerminalNode WITNESS() { return getToken(MocaSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_witness; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMirroring_witness(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMirroring_witness(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMirroring_witness(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_witnessContext mirroring_witness() throws RecognitionException {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_mirroring_witness);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6957);
			match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_partner_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_partner_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWitness_partner_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWitness_partner_equal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWitness_partner_equal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Witness_partner_equalContext witness_partner_equal() throws RecognitionException {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_witness_partner_equal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6959);
			match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public TerminalNode FAILOVER() { return getToken(MocaSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(MocaSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode RESUME() { return getToken(MocaSqlParser.RESUME, 0); }
		public TerminalNode SAFETY() { return getToken(MocaSqlParser.SAFETY, 0); }
		public TerminalNode FULL() { return getToken(MocaSqlParser.FULL, 0); }
		public TerminalNode SUSPEND() { return getToken(MocaSqlParser.SUSPEND, 0); }
		public TerminalNode TIMEOUT() { return getToken(MocaSqlParser.TIMEOUT, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPartner_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPartner_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPartner_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_optionContext partner_option() throws RecognitionException {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_partner_option);
		int _la;
		try {
			setState(6973);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6961);
				witness_partner_equal();
				setState(6962);
				partner_server();
				}
				break;
			case FAILOVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6964);
				match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6965);
				match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 4);
				{
				setState(6966);
				match(OFF);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6967);
				match(RESUME);
				}
				break;
			case SAFETY:
				enterOuterAlt(_localctx, 6);
				{
				setState(6968);
				match(SAFETY);
				setState(6969);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 7);
				{
				setState(6970);
				match(SUSPEND);
				}
				break;
			case TIMEOUT:
				enterOuterAlt(_localctx, 8);
				{
				setState(6971);
				match(TIMEOUT);
				setState(6972);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Witness_serverContext witness_server() {
			return getRuleContext(Witness_serverContext.class,0);
		}
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWitness_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWitness_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWitness_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Witness_optionContext witness_option() throws RecognitionException {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_witness_option);
		try {
			setState(6979);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6975);
				witness_partner_equal();
				setState(6976);
				witness_server();
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(6978);
				match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_serverContext extends ParserRuleContext {
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWitness_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWitness_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWitness_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Witness_serverContext witness_server() throws RecognitionException {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_witness_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6981);
			partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_serverContext extends ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return getRuleContext(Partner_server_tcp_prefixContext.class,0);
		}
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return getRuleContext(Mirroring_host_port_seperatorContext.class,0);
		}
		public Port_numberContext port_number() {
			return getRuleContext(Port_numberContext.class,0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPartner_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPartner_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPartner_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_serverContext partner_server() throws RecognitionException {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_partner_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6983);
			partner_server_tcp_prefix();
			setState(6984);
			host();
			setState(6985);
			mirroring_host_port_seperator();
			setState(6986);
			port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_host_port_seperatorContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_host_port_seperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMirroring_host_port_seperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMirroring_host_port_seperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMirroring_host_port_seperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mirroring_host_port_seperatorContext mirroring_host_port_seperator() throws RecognitionException {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_mirroring_host_port_seperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6988);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_server_tcp_prefixContext extends ParserRuleContext {
		public TerminalNode TCP() { return getToken(MocaSqlParser.TCP, 0); }
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(MocaSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server_tcp_prefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPartner_server_tcp_prefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPartner_server_tcp_prefix(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPartner_server_tcp_prefix(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_server_tcp_prefixContext partner_server_tcp_prefix() throws RecognitionException {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_partner_server_tcp_prefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6990);
			match(TCP);
			setState(6991);
			match(COLON);
			setState(6992);
			match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Port_numberContext extends ParserRuleContext {
		public Token port;
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPort_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPort_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPort_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Port_numberContext port_number() throws RecognitionException {
		Port_numberContext _localctx = new Port_numberContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_port_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6994);
			((Port_numberContext)_localctx).port = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitHost(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitHost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_host);
		try {
			setState(7006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6996);
				id();
				setState(6997);
				match(DOT);
				setState(6998);
				host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(7000);
					id();
					setState(7001);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(7003);
					id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_correlation_optimization_optionContext extends ParserRuleContext {
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(MocaSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_correlation_optimization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDate_correlation_optimization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDate_correlation_optimization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDate_correlation_optimization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_correlation_optimization_optionContext date_correlation_optimization_option() throws RecognitionException {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_date_correlation_optimization_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7008);
			match(DATE_CORRELATION_OPTIMIZATION);
			setState(7009);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_encryption_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_encryption_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDb_encryption_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDb_encryption_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDb_encryption_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_encryption_optionContext db_encryption_option() throws RecognitionException {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_db_encryption_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7011);
			match(ENCRYPTION);
			setState(7012);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_state_optionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(MocaSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MocaSqlParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(MocaSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_state_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDb_state_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDb_state_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDb_state_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_state_optionContext db_state_option() throws RecognitionException {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_db_state_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7014);
			_la = _input.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_update_optionContext extends ParserRuleContext {
		public TerminalNode READ_ONLY() { return getToken(MocaSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(MocaSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_update_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDb_update_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDb_update_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDb_update_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_update_optionContext db_update_option() throws RecognitionException {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_db_update_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7016);
			_la = _input.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_user_access_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE_USER() { return getToken(MocaSqlParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(MocaSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(MocaSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_user_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDb_user_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDb_user_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDb_user_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_user_access_optionContext db_user_access_option() throws RecognitionException {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_db_user_access_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7018);
			_la = _input.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delayed_durability_optionContext extends ParserRuleContext {
		public TerminalNode DELAYED_DURABILITY() { return getToken(MocaSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode DISABLED() { return getToken(MocaSqlParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(MocaSqlParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayed_durability_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDelayed_durability_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDelayed_durability_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDelayed_durability_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delayed_durability_optionContext delayed_durability_option() throws RecognitionException {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_delayed_durability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7020);
			match(DELAYED_DURABILITY);
			setState(7021);
			match(EQUAL);
			setState(7022);
			_la = _input.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_access_optionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(MocaSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRUSTWORTHY() { return getToken(MocaSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(MocaSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(MocaSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(MocaSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExternal_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExternal_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExternal_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_access_optionContext external_access_option() throws RecognitionException {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_external_access_option);
		int _la;
		try {
			setState(7049);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7024);
				match(DB_CHAINING);
				setState(7025);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(7026);
				match(TRUSTWORTHY);
				setState(7027);
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7028);
				match(DEFAULT_LANGUAGE);
				setState(7029);
				match(EQUAL);
				setState(7032);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(7030);
					id();
					}
					break;
				case STRING:
					{
					setState(7031);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7034);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(7035);
				match(EQUAL);
				setState(7038);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(7036);
					id();
					}
					break;
				case STRING:
					{
					setState(7037);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(7040);
				match(NESTED_TRIGGERS);
				setState(7041);
				match(EQUAL);
				setState(7042);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(7043);
				match(TRANSFORM_NOISE_WORDS);
				setState(7044);
				match(EQUAL);
				setState(7045);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(7046);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(7047);
				match(EQUAL);
				setState(7048);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hadr_optionsContext extends ParserRuleContext {
		public IdContext availability_group_name;
		public TerminalNode HADR() { return getToken(MocaSqlParser.HADR, 0); }
		public TerminalNode SUSPEND() { return getToken(MocaSqlParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(MocaSqlParser.RESUME, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hadr_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterHadr_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitHadr_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitHadr_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hadr_optionsContext hadr_options() throws RecognitionException {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_hadr_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7051);
			match(HADR);
			setState(7060);
			switch (_input.LA(1)) {
			case OFF:
			case AVAILABILITY:
				{
				setState(7057);
				switch (_input.LA(1)) {
				case AVAILABILITY:
					{
					setState(7052);
					match(AVAILABILITY);
					setState(7053);
					match(GROUP);
					setState(7054);
					match(EQUAL);
					setState(7055);
					((Hadr_optionsContext)_localctx).availability_group_name = id();
					}
					break;
				case OFF:
					{
					setState(7056);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESUME:
			case SUSPEND:
				{
				setState(7059);
				_la = _input.LA(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mixed_page_allocation_optionContext extends ParserRuleContext {
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(MocaSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mixed_page_allocation_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMixed_page_allocation_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMixed_page_allocation_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMixed_page_allocation_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mixed_page_allocation_optionContext mixed_page_allocation_option() throws RecognitionException {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_mixed_page_allocation_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7062);
			match(MIXED_PAGE_ALLOCATION);
			setState(7063);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterization_optionContext extends ParserRuleContext {
		public TerminalNode PARAMETERIZATION() { return getToken(MocaSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterParameterization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitParameterization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitParameterization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameterization_optionContext parameterization_option() throws RecognitionException {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_parameterization_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7065);
			match(PARAMETERIZATION);
			setState(7066);
			_la = _input.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recovery_optionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(MocaSqlParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(MocaSqlParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(MocaSqlParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(MocaSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode PAGE_VERIFY() { return getToken(MocaSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(MocaSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recovery_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRecovery_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRecovery_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRecovery_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Recovery_optionContext recovery_option() throws RecognitionException {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_recovery_option);
		int _la;
		try {
			setState(7074);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7068);
				match(RECOVERY);
				setState(7069);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7070);
				match(TORN_PAGE_DETECTION);
				setState(7071);
				on_off();
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(7072);
				match(PAGE_VERIFY);
				setState(7073);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_broker_optionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(MocaSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(MocaSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(MocaSqlParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(MocaSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(MocaSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_broker_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterService_broker_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitService_broker_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitService_broker_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Service_broker_optionContext service_broker_option() throws RecognitionException {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_service_broker_option);
		try {
			setState(7082);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7076);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7077);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7078);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7079);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(7080);
				match(HONOR_BROKER_PRIORITY);
				setState(7081);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_optionContext extends ParserRuleContext {
		public Token MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(MocaSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(MocaSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSnapshot_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSnapshot_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSnapshot_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Snapshot_optionContext snapshot_option() throws RecognitionException {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_snapshot_option);
		int _la;
		try {
			setState(7089);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(7084);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(7085);
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7086);
				match(READ_COMMITTED_SNAPSHOT);
				setState(7087);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case OFF:
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(7088);
				((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = (Token)_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(MocaSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(MocaSqlParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(MocaSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(MocaSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(MocaSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(MocaSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSql_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSql_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSql_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_optionContext sql_option() throws RecognitionException {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_sql_option);
		try {
			setState(7112);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7091);
				match(ANSI_NULL_DEFAULT);
				setState(7092);
				on_off();
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7093);
				match(ANSI_NULLS);
				setState(7094);
				on_off();
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7095);
				match(ANSI_PADDING);
				setState(7096);
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7097);
				match(ANSI_WARNINGS);
				setState(7098);
				on_off();
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(7099);
				match(ARITHABORT);
				setState(7100);
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7101);
				match(COMPATIBILITY_LEVEL);
				setState(7102);
				match(EQUAL);
				setState(7103);
				match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(7104);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(7105);
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7106);
				match(NUMERIC_ROUNDABORT);
				setState(7107);
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(7108);
				match(QUOTED_IDENTIFIER);
				setState(7109);
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(7110);
				match(RECURSIVE_TRIGGERS);
				setState(7111);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_recovery_time_optionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(MocaSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode SECONDS() { return getToken(MocaSqlParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(MocaSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_recovery_time_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTarget_recovery_time_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTarget_recovery_time_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTarget_recovery_time_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_recovery_time_optionContext target_recovery_time_option() throws RecognitionException {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_target_recovery_time_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7114);
			match(TARGET_RECOVERY_TIME);
			setState(7115);
			match(EQUAL);
			setState(7116);
			match(DECIMAL);
			setState(7117);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminationContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode ROLLBACK() { return getToken(MocaSqlParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(MocaSqlParser.AFTER, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode IMMEDIATE() { return getToken(MocaSqlParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(MocaSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTermination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTermination(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTermination(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_termination);
		try {
			setState(7125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7119);
				match(ROLLBACK);
				setState(7120);
				match(AFTER);
				setState(7121);
				((TerminationContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7122);
				match(ROLLBACK);
				setState(7123);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7124);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7127);
			match(DROP);
			setState(7128);
			match(INDEX);
			setState(7131);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7129);
				match(IF);
				setState(7130);
				match(EXISTS);
				}
			}

			setState(7149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
			case 1:
				{
				setState(7133);
				drop_relational_or_xml_or_spatial_index();
				setState(7138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7134);
					match(COMMA);
					setState(7135);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(7140);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(7141);
				drop_backward_compatible_index();
				setState(7146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7142);
					match(COMMA);
					setState(7143);
					drop_backward_compatible_index();
					}
					}
					setState(7148);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(7152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				setState(7151);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7154);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id();
			setState(7155);
			match(ON);
			setState(7156);
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_backward_compatible_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_backward_compatible_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_backward_compatible_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
			case 1:
				{
				setState(7158);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id();
				setState(7159);
				match(DOT);
				}
				break;
			}
			setState(7163);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id();
			setState(7164);
			match(DOT);
			setState(7165);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public Token proc;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public List<Func_proc_name_schemaContext> func_proc_name_schema() {
			return getRuleContexts(Func_proc_name_schemaContext.class);
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return getRuleContext(Func_proc_name_schemaContext.class,i);
		}
		public TerminalNode PROC() { return getToken(MocaSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(MocaSqlParser.PROCEDURE, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7167);
			match(DROP);
			setState(7168);
			((Drop_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Drop_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(7171);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7169);
				match(IF);
				setState(7170);
				match(EXISTS);
				}
			}

			setState(7173);
			func_proc_name_schema();
			setState(7178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7174);
				match(COMMA);
				setState(7175);
				func_proc_name_schema();
				}
				}
				setState(7180);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
			case 1:
				{
				setState(7181);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return getRuleContext(Drop_dml_triggerContext.class,0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return getRuleContext(Drop_ddl_triggerContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_drop_trigger);
		try {
			setState(7186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7184);
				drop_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7185);
				drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_dml_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_dml_triggerContext drop_dml_trigger() throws RecognitionException {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_drop_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7188);
			match(DROP);
			setState(7189);
			match(TRIGGER);
			setState(7192);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7190);
				match(IF);
				setState(7191);
				match(EXISTS);
				}
			}

			setState(7194);
			simple_name();
			setState(7199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7195);
				match(COMMA);
				setState(7196);
				simple_name();
				}
				}
				setState(7201);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
			case 1:
				{
				setState(7202);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MocaSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_ddl_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_ddl_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_ddl_triggerContext drop_ddl_trigger() throws RecognitionException {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_drop_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7205);
			match(DROP);
			setState(7206);
			match(TRIGGER);
			setState(7209);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7207);
				match(IF);
				setState(7208);
				match(EXISTS);
				}
			}

			setState(7211);
			simple_name();
			setState(7216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7212);
				match(COMMA);
				setState(7213);
				simple_name();
				}
				}
				setState(7218);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7219);
			match(ON);
			setState(7223);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(7220);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(7221);
				match(ALL);
				setState(7222);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				setState(7225);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MocaSqlParser.FUNCTION, 0); }
		public List<Func_proc_name_schemaContext> func_proc_name_schema() {
			return getRuleContexts(Func_proc_name_schemaContext.class);
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return getRuleContext(Func_proc_name_schemaContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_drop_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7228);
			match(DROP);
			setState(7229);
			match(FUNCTION);
			setState(7232);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7230);
				match(IF);
				setState(7231);
				match(EXISTS);
				}
			}

			setState(7234);
			func_proc_name_schema();
			setState(7239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7235);
				match(COMMA);
				setState(7236);
				func_proc_name_schema();
				}
				}
				setState(7241);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
			case 1:
				{
				setState(7242);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statisticsContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(MocaSqlParser.STATISTICS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statisticsContext drop_statistics() throws RecognitionException {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_drop_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7245);
			match(DROP);
			setState(7246);
			match(STATISTICS);
			setState(7256); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7248);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7247);
					match(COMMA);
					}
				}

				setState(7253);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
				case 1:
					{
					setState(7250);
					table_name();
					setState(7251);
					match(DOT);
					}
					break;
				}
				setState(7255);
				((Drop_statisticsContext)_localctx).name = id();
				}
				}
				setState(7258); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BLOCKING_HIERARCHY || _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==COMMA || _la==URL );
			setState(7260);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7262);
			match(DROP);
			setState(7263);
			match(TABLE);
			setState(7266);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7264);
				match(IF);
				setState(7265);
				match(EXISTS);
				}
			}

			setState(7268);
			table_name();
			setState(7270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(7269);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MocaSqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7272);
			match(DROP);
			setState(7273);
			match(VIEW);
			setState(7276);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7274);
				match(IF);
				setState(7275);
				match(EXISTS);
				}
			}

			setState(7278);
			simple_name();
			setState(7283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7279);
				match(COMMA);
				setState(7280);
				simple_name();
				}
				}
				setState(7285);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
			case 1:
				{
				setState(7286);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7289);
			match(CREATE);
			setState(7290);
			match(TYPE);
			setState(7291);
			((Create_typeContext)_localctx).name = simple_name();
			setState(7296);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7292);
				match(FROM);
				setState(7293);
				data_type();
				setState(7294);
				default_value();
				}
			}

			setState(7304);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7298);
				match(AS);
				setState(7299);
				match(TABLE);
				setState(7300);
				match(LR_BRACKET);
				setState(7301);
				column_def_table_constraints();
				setState(7302);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode DROP() { return getToken(MocaSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(MocaSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7306);
			match(DROP);
			setState(7307);
			match(TYPE);
			setState(7310);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7308);
				match(IF);
				setState(7309);
				match(EXISTS);
				}
			}

			setState(7312);
			((Drop_typeContext)_localctx).name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRowset_function_limited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRowset_function_limited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRowset_function_limited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_rowset_function_limited);
		try {
			setState(7316);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7314);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7315);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(MocaSqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOpenquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOpenquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOpenquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7318);
			match(OPENQUERY);
			setState(7319);
			match(LR_BRACKET);
			setState(7320);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(7321);
			match(COMMA);
			setState(7322);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(7323);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(MocaSqlParser.OPENDATASOURCE, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOpendatasource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOpendatasource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOpendatasource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7325);
			match(OPENDATASOURCE);
			setState(7326);
			match(LR_BRACKET);
			setState(7327);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(7328);
			match(COMMA);
			setState(7329);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(7330);
			match(RR_BRACKET);
			setState(7331);
			match(DOT);
			setState(7333);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
				{
				setState(7332);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(7335);
			match(DOT);
			setState(7337);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
				{
				setState(7336);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(7339);
			match(DOT);
			{
			setState(7340);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Token xml_namespace_uri;
		public TerminalNode DECLARE() { return getToken(MocaSqlParser.DECLARE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public List<Declare_localContext> declare_local() {
			return getRuleContexts(Declare_localContext.class);
		}
		public Declare_localContext declare_local(int i) {
			return getRuleContext(Declare_localContext.class,i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return getRuleContext(Xml_type_definitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(MocaSqlParser.XMLNAMESPACES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDeclare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDeclare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDeclare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_declare_statement);
		int _la;
		try {
			setState(7385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7342);
				match(DECLARE);
				setState(7343);
				match(LOCAL_ID);
				setState(7345);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7344);
					match(AS);
					}
				}

				setState(7347);
				table_type_definition();
				setState(7349);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
				case 1:
					{
					setState(7348);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7351);
				match(DECLARE);
				setState(7352);
				declare_local();
				setState(7357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7353);
					match(COMMA);
					setState(7354);
					declare_local();
					}
					}
					setState(7359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
				case 1:
					{
					setState(7360);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7363);
				match(DECLARE);
				setState(7364);
				match(LOCAL_ID);
				setState(7366);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7365);
					match(AS);
					}
				}

				setState(7368);
				xml_type_definition();
				setState(7370);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(7369);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7372);
				match(WITH);
				setState(7373);
				match(XMLNAMESPACES);
				setState(7374);
				match(LR_BRACKET);
				setState(7375);
				((Declare_statementContext)_localctx).xml_namespace_uri = match(STRING);
				setState(7377);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7376);
					match(COMMA);
					}
				}

				setState(7379);
				match(AS);
				setState(7380);
				id();
				setState(7381);
				match(RR_BRACKET);
				setState(7383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(7382);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(MocaSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MocaSqlParser.DEALLOCATE, 0); }
		public TerminalNode CURSOR() { return getToken(MocaSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return getRuleContext(Fetch_cursorContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MocaSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCursor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_cursor_statement);
		int _la;
		try {
			setState(7416);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7387);
				match(CLOSE);
				setState(7389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
				case 1:
					{
					setState(7388);
					match(GLOBAL);
					}
					break;
				}
				setState(7391);
				cursor_name();
				setState(7393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(7392);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7395);
				match(DEALLOCATE);
				setState(7397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(7396);
					match(GLOBAL);
					}
					break;
				}
				setState(7400);
				_la = _input.LA(1);
				if (_la==CURSOR) {
					{
					setState(7399);
					match(CURSOR);
					}
				}

				setState(7402);
				cursor_name();
				setState(7404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(7403);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7406);
				declare_cursor();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(7407);
				fetch_cursor();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(7408);
				match(OPEN);
				setState(7410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					setState(7409);
					match(GLOBAL);
					}
					break;
				}
				setState(7412);
				cursor_name();
				setState(7414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					setState(7413);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_databaseContext extends ParserRuleContext {
		public IdContext database_name;
		public Token file_or_filegroup;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(MocaSqlParser.BACKUP, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(MocaSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> FILE() { return getTokens(MocaSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(MocaSqlParser.FILE, i);
		}
		public List<TerminalNode> FILEGROUP() { return getTokens(MocaSqlParser.FILEGROUP); }
		public TerminalNode FILEGROUP(int i) {
			return getToken(MocaSqlParser.FILEGROUP, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> DISK() { return getTokens(MocaSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(MocaSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(MocaSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(MocaSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(MocaSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(MocaSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(MocaSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(MocaSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(MocaSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(MocaSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(MocaSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(MocaSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(MocaSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(MocaSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(MocaSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(MocaSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(MocaSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(MocaSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(MocaSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(MocaSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(MocaSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(MocaSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(MocaSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(MocaSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(MocaSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(MocaSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(MocaSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(MocaSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(MocaSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(MocaSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(MocaSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(MocaSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(MocaSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(MocaSqlParser.STATS, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(MocaSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(MocaSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MocaSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MocaSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(MocaSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(MocaSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(MocaSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(MocaSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(MocaSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(MocaSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(MocaSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(MocaSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(MocaSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(MocaSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(MocaSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(MocaSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(MocaSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(MocaSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(MocaSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(MocaSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(MocaSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(MocaSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(MocaSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(MocaSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(MocaSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(MocaSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(MocaSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(MocaSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(MocaSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(MocaSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(MocaSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(MocaSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(MocaSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(MocaSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(MocaSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(MocaSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(MocaSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(MocaSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(MocaSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(MocaSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(MocaSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(MocaSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(MocaSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(MocaSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(MocaSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(MocaSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(MocaSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(MocaSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(MocaSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(MocaSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(MocaSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(MocaSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(MocaSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(MocaSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBackup_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBackup_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBackup_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_databaseContext backup_database() throws RecognitionException {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_backup_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7418);
			match(BACKUP);
			setState(7419);
			match(DATABASE);
			{
			setState(7420);
			((Backup_databaseContext)_localctx).database_name = id();
			}
			setState(7433);
			_la = _input.LA(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				setState(7421);
				match(READ_WRITE_FILEGROUPS);
				setState(7430);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,984,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7423);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7422);
							match(COMMA);
							}
						}

						setState(7425);
						_la = _input.LA(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(7426);
						match(EQUAL);
						setState(7427);
						((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
						}
						} 
					}
					setState(7432);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,984,_ctx);
				}
				}
			}

			setState(7443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				setState(7436);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7435);
					match(COMMA);
					}
				}

				setState(7438);
				_la = _input.LA(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(7439);
				match(EQUAL);
				setState(7440);
				((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
				}
				}
				setState(7445);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
			case 1:
				{
				setState(7446);
				match(TO);
				setState(7451); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7448);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7447);
							match(COMMA);
							}
						}

						setState(7450);
						((Backup_databaseContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7453); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,989,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7455);
				match(TO);
				setState(7465); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7457);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7456);
							match(COMMA);
							}
						}

						setState(7459);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(7460);
						match(EQUAL);
						setState(7463);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7461);
							match(STRING);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case EXPIREDATE:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case POLICY:
						case PRECISION:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROLE:
						case ROWCOUNT:
						case SAFETY:
						case RULE:
						case SERVER:
						case SID:
						case SOURCE:
						case SPLIT:
						case STATE:
						case START:
						case STOP:
						case TARGET:
						case TRAN:
						case USER:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
						case URL:
							{
							setState(7462);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7467); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,992,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(7504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
			case 1:
				{
				setState(7481); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7471);
					match(MIRROR);
					setState(7472);
					match(TO);
					setState(7477); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(7474);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7473);
								match(COMMA);
								}
							}

							setState(7476);
							((Backup_databaseContext)_localctx).logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7479); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,995,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(7483); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				setState(7500); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7485);
					match(MIRROR);
					setState(7486);
					match(TO);
					setState(7496); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(7488);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7487);
								match(COMMA);
								}
							}

							setState(7490);
							_la = _input.LA(1);
							if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							setState(7491);
							match(EQUAL);
							setState(7494);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7492);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7493);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7498); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,999,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(7502); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			setState(7666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
			case 1:
				{
				setState(7506);
				match(WITH);
				setState(7663);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1036,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(7661);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1035,_ctx) ) {
						case 1:
							{
							setState(7508);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7507);
								match(COMMA);
								}
							}

							setState(7510);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(7512);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7511);
								match(COMMA);
								}
							}

							setState(7514);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(7516);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7515);
								match(COMMA);
								}
							}

							setState(7518);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 4:
							{
							setState(7520);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7519);
								match(COMMA);
								}
							}

							setState(7522);
							match(DESCRIPTION);
							setState(7523);
							match(EQUAL);
							setState(7526);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7524);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7525);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(7529);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7528);
								match(COMMA);
								}
							}

							setState(7531);
							match(NAME);
							setState(7532);
							match(EQUAL);
							setState(7533);
							((Backup_databaseContext)_localctx).backup_set_name = id();
							}
							break;
						case 6:
							{
							setState(7535);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7534);
								match(COMMA);
								}
							}

							setState(7537);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(7539);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7538);
								match(COMMA);
								}
							}

							setState(7541);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(7543);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7542);
								match(COMMA);
								}
							}

							setState(7557);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(7545);
								match(EXPIREDATE);
								setState(7546);
								match(EQUAL);
								setState(7549);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7547);
									match(STRING);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case EXPIREDATE:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case POLICY:
								case PRECISION:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROLE:
								case ROWCOUNT:
								case SAFETY:
								case RULE:
								case SERVER:
								case SID:
								case SOURCE:
								case SPLIT:
								case STATE:
								case START:
								case STOP:
								case TARGET:
								case TRAN:
								case USER:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
								case URL:
									{
									setState(7548);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(7551);
								match(RETAINDAYS);
								setState(7552);
								match(EQUAL);
								setState(7555);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(7553);
									match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case EXPIREDATE:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case POLICY:
								case PRECISION:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROLE:
								case ROWCOUNT:
								case SAFETY:
								case RULE:
								case SERVER:
								case SID:
								case SOURCE:
								case SPLIT:
								case STATE:
								case START:
								case STOP:
								case TARGET:
								case TRAN:
								case USER:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
								case URL:
									{
									setState(7554);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(7560);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7559);
								match(COMMA);
								}
							}

							setState(7562);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 10:
							{
							setState(7564);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7563);
								match(COMMA);
								}
							}

							setState(7566);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 11:
							{
							setState(7568);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7567);
								match(COMMA);
								}
							}

							setState(7570);
							_la = _input.LA(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 12:
							{
							setState(7572);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7571);
								match(COMMA);
								}
							}

							setState(7574);
							match(MEDIADESCRIPTION);
							setState(7575);
							match(EQUAL);
							setState(7578);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7576);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7577);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(7581);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7580);
								match(COMMA);
								}
							}

							setState(7583);
							match(MEDIANAME);
							setState(7584);
							match(EQUAL);
							{
							setState(7585);
							((Backup_databaseContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(7587);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7586);
								match(COMMA);
								}
							}

							setState(7589);
							match(BLOCKSIZE);
							setState(7590);
							match(EQUAL);
							setState(7593);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7591);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7592);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(7596);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7595);
								match(COMMA);
								}
							}

							setState(7598);
							match(BUFFERCOUNT);
							setState(7599);
							match(EQUAL);
							setState(7602);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7600);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7601);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(7605);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7604);
								match(COMMA);
								}
							}

							setState(7607);
							match(MAXTRANSFER);
							setState(7608);
							match(EQUAL);
							setState(7611);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7609);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7610);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(7614);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7613);
								match(COMMA);
								}
							}

							setState(7616);
							_la = _input.LA(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 18:
							{
							setState(7618);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7617);
								match(COMMA);
								}
							}

							setState(7620);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 19:
							{
							setState(7622);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7621);
								match(COMMA);
								}
							}

							setState(7624);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(7626);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7625);
								match(COMMA);
								}
							}

							setState(7628);
							match(STATS);
							setState(7631);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(7629);
								match(EQUAL);
								setState(7630);
								((Backup_databaseContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(7634);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7633);
								match(COMMA);
								}
							}

							setState(7636);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 22:
							{
							setState(7638);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7637);
								match(COMMA);
								}
							}

							setState(7640);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 23:
							{
							setState(7642);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7641);
								match(COMMA);
								}
							}

							setState(7644);
							match(ENCRYPTION);
							setState(7645);
							match(LR_BRACKET);
							setState(7646);
							match(ALGORITHM);
							setState(7647);
							match(EQUAL);
							setState(7648);
							_la = _input.LA(1);
							if ( !(((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (AES_128 - 388)) | (1L << (AES_192 - 388)) | (1L << (AES_256 - 388)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							setState(7649);
							match(COMMA);
							setState(7650);
							match(SERVER);
							setState(7651);
							match(CERTIFICATE);
							setState(7652);
							match(EQUAL);
							setState(7659);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
							case 1:
								{
								setState(7653);
								((Backup_databaseContext)_localctx).encryptor_name = id();
								}
								break;
							case 2:
								{
								setState(7654);
								match(SERVER);
								setState(7655);
								match(ASYMMETRIC);
								setState(7656);
								match(KEY);
								setState(7657);
								match(EQUAL);
								setState(7658);
								((Backup_databaseContext)_localctx).encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(7665);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1036,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_logContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public Token undo_file_name;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(MocaSqlParser.BACKUP, 0); }
		public TerminalNode LOG() { return getToken(MocaSqlParser.LOG, 0); }
		public List<TerminalNode> TO() { return getTokens(MocaSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(MocaSqlParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DISK() { return getTokens(MocaSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(MocaSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(MocaSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(MocaSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(MocaSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(MocaSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(MocaSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(MocaSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(MocaSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(MocaSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(MocaSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(MocaSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(MocaSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(MocaSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(MocaSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(MocaSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(MocaSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(MocaSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(MocaSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(MocaSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(MocaSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(MocaSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(MocaSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(MocaSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(MocaSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(MocaSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(MocaSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(MocaSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(MocaSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(MocaSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(MocaSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(MocaSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(MocaSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(MocaSqlParser.STATS, i);
		}
		public List<TerminalNode> NO_TRUNCATE() { return getTokens(MocaSqlParser.NO_TRUNCATE); }
		public TerminalNode NO_TRUNCATE(int i) {
			return getToken(MocaSqlParser.NO_TRUNCATE, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(MocaSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(MocaSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MocaSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MocaSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MocaSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MocaSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(MocaSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(MocaSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(MocaSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(MocaSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(MocaSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(MocaSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(MocaSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(MocaSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(MocaSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(MocaSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(MocaSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(MocaSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(MocaSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(MocaSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(MocaSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(MocaSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(MocaSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(MocaSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(MocaSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(MocaSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(MocaSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(MocaSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(MocaSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(MocaSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(MocaSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(MocaSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(MocaSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(MocaSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(MocaSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(MocaSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(MocaSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(MocaSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(MocaSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(MocaSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(MocaSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(MocaSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(MocaSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(MocaSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(MocaSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(MocaSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(MocaSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(MocaSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(MocaSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(MocaSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(MocaSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(MocaSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(MocaSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(MocaSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NORECOVERY() { return getTokens(MocaSqlParser.NORECOVERY); }
		public TerminalNode NORECOVERY(int i) {
			return getToken(MocaSqlParser.NORECOVERY, i);
		}
		public List<TerminalNode> STANDBY() { return getTokens(MocaSqlParser.STANDBY); }
		public TerminalNode STANDBY(int i) {
			return getToken(MocaSqlParser.STANDBY, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(MocaSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(MocaSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_log; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBackup_log(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBackup_log(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBackup_log(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_logContext backup_log() throws RecognitionException {
		Backup_logContext _localctx = new Backup_logContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_backup_log);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7668);
			match(BACKUP);
			setState(7669);
			match(LOG);
			{
			setState(7670);
			((Backup_logContext)_localctx).database_name = id();
			}
			setState(7694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1043,_ctx) ) {
			case 1:
				{
				setState(7671);
				match(TO);
				setState(7676); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7673);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7672);
							match(COMMA);
							}
						}

						setState(7675);
						((Backup_logContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7678); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1039,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7680);
				match(TO);
				setState(7690); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7682);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7681);
							match(COMMA);
							}
						}

						setState(7684);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(7685);
						match(EQUAL);
						setState(7688);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7686);
							match(STRING);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case EXPIREDATE:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case POLICY:
						case PRECISION:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROLE:
						case ROWCOUNT:
						case SAFETY:
						case RULE:
						case SERVER:
						case SID:
						case SOURCE:
						case SPLIT:
						case STATE:
						case START:
						case STOP:
						case TARGET:
						case TRAN:
						case USER:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
						case URL:
							{
							setState(7687);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7692); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1042,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(7729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
			case 1:
				{
				setState(7706); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7696);
					match(MIRROR);
					setState(7697);
					match(TO);
					setState(7702); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(7699);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7698);
								match(COMMA);
								}
							}

							setState(7701);
							((Backup_logContext)_localctx).logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7704); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(7708); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				setState(7725); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7710);
					match(MIRROR);
					setState(7711);
					match(TO);
					setState(7721); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(7713);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7712);
								match(COMMA);
								}
							}

							setState(7715);
							_la = _input.LA(1);
							if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							setState(7716);
							match(EQUAL);
							setState(7719);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7717);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7718);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7723); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1049,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(7727); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			setState(7904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1090,_ctx) ) {
			case 1:
				{
				setState(7731);
				match(WITH);
				setState(7901);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1089,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(7899);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
						case 1:
							{
							setState(7733);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7732);
								match(COMMA);
								}
							}

							setState(7735);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(7737);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7736);
								match(COMMA);
								}
							}

							setState(7739);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(7741);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7740);
								match(COMMA);
								}
							}

							setState(7743);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 4:
							{
							setState(7745);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7744);
								match(COMMA);
								}
							}

							setState(7747);
							match(DESCRIPTION);
							setState(7748);
							match(EQUAL);
							setState(7751);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7749);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7750);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(7754);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7753);
								match(COMMA);
								}
							}

							setState(7756);
							match(NAME);
							setState(7757);
							match(EQUAL);
							setState(7758);
							((Backup_logContext)_localctx).backup_set_name = id();
							}
							break;
						case 6:
							{
							setState(7760);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7759);
								match(COMMA);
								}
							}

							setState(7762);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(7764);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7763);
								match(COMMA);
								}
							}

							setState(7766);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(7768);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7767);
								match(COMMA);
								}
							}

							setState(7782);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(7770);
								match(EXPIREDATE);
								setState(7771);
								match(EQUAL);
								setState(7774);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7772);
									match(STRING);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case EXPIREDATE:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case POLICY:
								case PRECISION:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROLE:
								case ROWCOUNT:
								case SAFETY:
								case RULE:
								case SERVER:
								case SID:
								case SOURCE:
								case SPLIT:
								case STATE:
								case START:
								case STOP:
								case TARGET:
								case TRAN:
								case USER:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
								case URL:
									{
									setState(7773);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(7776);
								match(RETAINDAYS);
								setState(7777);
								match(EQUAL);
								setState(7780);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(7778);
									match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case EXPIREDATE:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case POLICY:
								case PRECISION:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROLE:
								case ROWCOUNT:
								case SAFETY:
								case RULE:
								case SERVER:
								case SID:
								case SOURCE:
								case SPLIT:
								case STATE:
								case START:
								case STOP:
								case TARGET:
								case TRAN:
								case USER:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
								case URL:
									{
									setState(7779);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(7785);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7784);
								match(COMMA);
								}
							}

							setState(7787);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 10:
							{
							setState(7789);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7788);
								match(COMMA);
								}
							}

							setState(7791);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 11:
							{
							setState(7793);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7792);
								match(COMMA);
								}
							}

							setState(7795);
							_la = _input.LA(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 12:
							{
							setState(7797);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7796);
								match(COMMA);
								}
							}

							setState(7799);
							match(MEDIADESCRIPTION);
							setState(7800);
							match(EQUAL);
							setState(7803);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7801);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7802);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(7806);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7805);
								match(COMMA);
								}
							}

							setState(7808);
							match(MEDIANAME);
							setState(7809);
							match(EQUAL);
							{
							setState(7810);
							((Backup_logContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(7812);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7811);
								match(COMMA);
								}
							}

							setState(7814);
							match(BLOCKSIZE);
							setState(7815);
							match(EQUAL);
							setState(7818);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7816);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7817);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(7821);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7820);
								match(COMMA);
								}
							}

							setState(7823);
							match(BUFFERCOUNT);
							setState(7824);
							match(EQUAL);
							setState(7827);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7825);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7826);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(7830);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7829);
								match(COMMA);
								}
							}

							setState(7832);
							match(MAXTRANSFER);
							setState(7833);
							match(EQUAL);
							setState(7836);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7834);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case EXPIREDATE:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case POLICY:
							case PRECISION:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROLE:
							case ROWCOUNT:
							case SAFETY:
							case RULE:
							case SERVER:
							case SID:
							case SOURCE:
							case SPLIT:
							case STATE:
							case START:
							case STOP:
							case TARGET:
							case TRAN:
							case USER:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
							case URL:
								{
								setState(7835);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(7839);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7838);
								match(COMMA);
								}
							}

							setState(7841);
							_la = _input.LA(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 18:
							{
							setState(7843);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7842);
								match(COMMA);
								}
							}

							setState(7845);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 19:
							{
							setState(7847);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7846);
								match(COMMA);
								}
							}

							setState(7849);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(7851);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7850);
								match(COMMA);
								}
							}

							setState(7853);
							match(STATS);
							setState(7856);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(7854);
								match(EQUAL);
								setState(7855);
								((Backup_logContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(7859);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7858);
								match(COMMA);
								}
							}

							setState(7861);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 22:
							{
							setState(7863);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7862);
								match(COMMA);
								}
							}

							setState(7865);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							}
							break;
						case 23:
							{
							setState(7867);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7866);
								match(COMMA);
								}
							}

							setState(7873);
							switch (_input.LA(1)) {
							case NORECOVERY:
								{
								setState(7869);
								match(NORECOVERY);
								}
								break;
							case STANDBY:
								{
								setState(7870);
								match(STANDBY);
								setState(7871);
								match(EQUAL);
								setState(7872);
								((Backup_logContext)_localctx).undo_file_name = match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 24:
							{
							setState(7876);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7875);
								match(COMMA);
								}
							}

							setState(7878);
							match(NO_TRUNCATE);
							}
							break;
						case 25:
							{
							setState(7880);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7879);
								match(COMMA);
								}
							}

							setState(7882);
							match(ENCRYPTION);
							setState(7883);
							match(LR_BRACKET);
							setState(7884);
							match(ALGORITHM);
							setState(7885);
							match(EQUAL);
							setState(7886);
							_la = _input.LA(1);
							if ( !(((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (AES_128 - 388)) | (1L << (AES_192 - 388)) | (1L << (AES_256 - 388)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							} else {
								consume();
							}
							setState(7887);
							match(COMMA);
							setState(7888);
							match(SERVER);
							setState(7889);
							match(CERTIFICATE);
							setState(7890);
							match(EQUAL);
							setState(7897);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1087,_ctx) ) {
							case 1:
								{
								setState(7891);
								((Backup_logContext)_localctx).encryptor_name = id();
								}
								break;
							case 2:
								{
								setState(7892);
								match(SERVER);
								setState(7893);
								match(ASYMMETRIC);
								setState(7894);
								match(KEY);
								setState(7895);
								match(EQUAL);
								setState(7896);
								((Backup_logContext)_localctx).encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(7903);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1089,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_certificateContext extends ParserRuleContext {
		public IdContext certname;
		public Token cert_file;
		public Token private_key_file;
		public Token encryption_password;
		public Token decryption_pasword;
		public TerminalNode BACKUP() { return getToken(MocaSqlParser.BACKUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public List<TerminalNode> FILE() { return getTokens(MocaSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(MocaSqlParser.FILE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(MocaSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(MocaSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(MocaSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MocaSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(MocaSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(MocaSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(MocaSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(MocaSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBackup_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBackup_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBackup_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_certificateContext backup_certificate() throws RecognitionException {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_backup_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7906);
			match(BACKUP);
			setState(7907);
			match(CERTIFICATE);
			setState(7908);
			((Backup_certificateContext)_localctx).certname = id();
			setState(7909);
			match(TO);
			setState(7910);
			match(FILE);
			setState(7911);
			match(EQUAL);
			setState(7912);
			((Backup_certificateContext)_localctx).cert_file = match(STRING);
			setState(7944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
			case 1:
				{
				setState(7913);
				match(WITH);
				setState(7914);
				match(PRIVATE);
				setState(7915);
				match(KEY);
				setState(7916);
				match(LR_BRACKET);
				setState(7939); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(7939);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
					case 1:
						{
						setState(7918);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7917);
							match(COMMA);
							}
						}

						setState(7920);
						match(FILE);
						setState(7921);
						match(EQUAL);
						setState(7922);
						((Backup_certificateContext)_localctx).private_key_file = match(STRING);
						}
						break;
					case 2:
						{
						setState(7924);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7923);
							match(COMMA);
							}
						}

						setState(7926);
						match(ENCRYPTION);
						setState(7927);
						match(BY);
						setState(7928);
						match(PASSWORD);
						setState(7929);
						match(EQUAL);
						setState(7930);
						((Backup_certificateContext)_localctx).encryption_password = match(STRING);
						}
						break;
					case 3:
						{
						setState(7932);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7931);
							match(COMMA);
							}
						}

						setState(7934);
						match(DECRYPTION);
						setState(7935);
						match(BY);
						setState(7936);
						match(PASSWORD);
						setState(7937);
						match(EQUAL);
						setState(7938);
						((Backup_certificateContext)_localctx).decryption_pasword = match(STRING);
						}
						break;
					}
					}
					setState(7941); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				setState(7943);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_master_keyContext extends ParserRuleContext {
		public Token master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(MocaSqlParser.BACKUP, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBackup_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBackup_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBackup_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_master_keyContext backup_master_key() throws RecognitionException {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_backup_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7946);
			match(BACKUP);
			setState(7947);
			match(MASTER);
			setState(7948);
			match(KEY);
			setState(7949);
			match(TO);
			setState(7950);
			match(FILE);
			setState(7951);
			match(EQUAL);
			setState(7952);
			((Backup_master_keyContext)_localctx).master_key_backup_file = match(STRING);
			setState(7953);
			match(ENCRYPTION);
			setState(7954);
			match(BY);
			setState(7955);
			match(PASSWORD);
			setState(7956);
			match(EQUAL);
			setState(7957);
			((Backup_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_service_master_keyContext extends ParserRuleContext {
		public Token service_master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(MocaSqlParser.BACKUP, 0); }
		public TerminalNode SERVICE() { return getToken(MocaSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBackup_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBackup_service_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBackup_service_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_service_master_keyContext backup_service_master_key() throws RecognitionException {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_backup_service_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7959);
			match(BACKUP);
			setState(7960);
			match(SERVICE);
			setState(7961);
			match(MASTER);
			setState(7962);
			match(KEY);
			setState(7963);
			match(TO);
			setState(7964);
			match(FILE);
			setState(7965);
			match(EQUAL);
			setState(7966);
			((Backup_service_master_keyContext)_localctx).service_master_key_backup_file = match(STRING);
			setState(7967);
			match(ENCRYPTION);
			setState(7968);
			match(BY);
			setState(7969);
			match(PASSWORD);
			setState(7970);
			match(EQUAL);
			setState(7971);
			((Backup_service_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_statementContext extends ParserRuleContext {
		public TerminalNode KILL() { return getToken(MocaSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return getRuleContext(Kill_processContext.class,0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return getRuleContext(Kill_query_notificationContext.class,0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return getRuleContext(Kill_stats_jobContext.class,0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterKill_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitKill_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitKill_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Kill_statementContext kill_statement() throws RecognitionException {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_kill_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7973);
			match(KILL);
			setState(7977);
			switch (_input.LA(1)) {
			case UOW:
			case DECIMAL:
			case STRING:
				{
				setState(7974);
				kill_process();
				}
				break;
			case QUERY:
				{
				setState(7975);
				kill_query_notification();
				}
				break;
			case STATS:
				{
				setState(7976);
				kill_stats_job();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_processContext extends ParserRuleContext {
		public Token session_id;
		public TerminalNode UOW() { return getToken(MocaSqlParser.UOW, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode STATUSONLY() { return getToken(MocaSqlParser.STATUSONLY, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_process; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterKill_process(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitKill_process(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitKill_process(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Kill_processContext kill_process() throws RecognitionException {
		Kill_processContext _localctx = new Kill_processContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_kill_process);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7981);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
				{
				setState(7979);
				((Kill_processContext)_localctx).session_id = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					((Kill_processContext)_localctx).session_id = (Token)_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case UOW:
				{
				setState(7980);
				match(UOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1099,_ctx) ) {
			case 1:
				{
				setState(7983);
				match(WITH);
				setState(7984);
				match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_query_notificationContext extends ParserRuleContext {
		public Token subscription_id;
		public TerminalNode QUERY() { return getToken(MocaSqlParser.QUERY, 0); }
		public TerminalNode NOTIFICATION() { return getToken(MocaSqlParser.NOTIFICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(MocaSqlParser.SUBSCRIPTION, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_query_notification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterKill_query_notification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitKill_query_notification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitKill_query_notification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Kill_query_notificationContext kill_query_notification() throws RecognitionException {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_kill_query_notification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7987);
			match(QUERY);
			setState(7988);
			match(NOTIFICATION);
			setState(7989);
			match(SUBSCRIPTION);
			setState(7992);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(7990);
				match(ALL);
				}
				break;
			case DECIMAL:
				{
				setState(7991);
				((Kill_query_notificationContext)_localctx).subscription_id = match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_stats_jobContext extends ParserRuleContext {
		public Token job_id;
		public TerminalNode STATS() { return getToken(MocaSqlParser.STATS, 0); }
		public TerminalNode JOB() { return getToken(MocaSqlParser.JOB, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_stats_job; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterKill_stats_job(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitKill_stats_job(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitKill_stats_job(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Kill_stats_jobContext kill_stats_job() throws RecognitionException {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_kill_stats_job);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7994);
			match(STATS);
			setState(7995);
			match(JOB);
			setState(7996);
			((Kill_stats_jobContext)_localctx).job_id = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MocaSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_execute_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7998);
			match(EXECUTE);
			setState(7999);
			execute_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_bodyContext extends ParserRuleContext {
		public Token return_status;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_bodyContext execute_body() throws RecognitionException {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_execute_body);
		int _la;
		try {
			setState(8043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1101,_ctx) ) {
				case 1:
					{
					setState(8001);
					((Execute_bodyContext)_localctx).return_status = match(LOCAL_ID);
					setState(8002);
					match(EQUAL);
					}
					break;
				}
				setState(8007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1102,_ctx) ) {
				case 1:
					{
					setState(8005);
					func_proc_name_server_database_schema();
					}
					break;
				case 2:
					{
					setState(8006);
					expression(0);
					}
					break;
				}
				setState(8017);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
				case 1:
					{
					setState(8009);
					execute_statement_arg();
					setState(8014);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(8010);
						match(COMMA);
						setState(8011);
						execute_statement_arg();
						}
						}
						setState(8016);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(8020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1105,_ctx) ) {
				case 1:
					{
					setState(8019);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8022);
				match(LR_BRACKET);
				setState(8023);
				execute_var_string();
				setState(8028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(8024);
					match(PLUS);
					setState(8025);
					execute_var_string();
					}
					}
					setState(8030);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8031);
				match(RR_BRACKET);
				setState(8038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1108,_ctx) ) {
				case 1:
					{
					setState(8033);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(8032);
						match(AS);
						}
					}

					setState(8035);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(8036);
					match(EQUAL);
					setState(8037);
					match(STRING);
					}
					break;
				}
				setState(8041);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1109,_ctx) ) {
				case 1:
					{
					setState(8040);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(MocaSqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_statement_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_statement_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_statement_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1111,_ctx) ) {
			case 1:
				{
				setState(8045);
				((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(8046);
				match(EQUAL);
				}
				break;
			}
			setState(8058);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
			case URL:
				{
				setState(8051);
				switch (_input.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(8049);
					constant_LOCAL_ID();
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(8050);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1113,_ctx) ) {
				case 1:
					{
					setState(8053);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				setState(8056);
				match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(8057);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_var_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_var_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_var_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8060);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_statementContext extends ParserRuleContext {
		public Table_nameContext on_id;
		public IdContext id;
		public List<IdContext> to_principal = new ArrayList<IdContext>();
		public IdContext as_principal;
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public List<TerminalNode> GRANT() { return getTokens(MocaSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MocaSqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return getRuleContext(Grant_permissionContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MocaSqlParser.OPTION, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(MocaSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode REVERT() { return getToken(MocaSqlParser.REVERT, 0); }
		public TerminalNode COOKIE() { return getToken(MocaSqlParser.COOKIE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return getRuleContext(Open_keyContext.class,0);
		}
		public Close_keyContext close_key() {
			return getRuleContext(Close_keyContext.class,0);
		}
		public Create_keyContext create_key() {
			return getRuleContext(Create_keyContext.class,0);
		}
		public Create_certificateContext create_certificate() {
			return getRuleContext(Create_certificateContext.class,0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSecurity_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSecurity_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSecurity_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_statementContext security_statement() throws RecognitionException {
		Security_statementContext _localctx = new Security_statementContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_security_statement);
		int _la;
		try {
			setState(8121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8062);
				execute_clause();
				setState(8064);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1115,_ctx) ) {
				case 1:
					{
					setState(8063);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8066);
				match(GRANT);
				setState(8078);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(8067);
					match(ALL);
					setState(8069);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(8068);
						match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					setState(8071);
					grant_permission();
					setState(8076);
					_la = _input.LA(1);
					if (_la==LR_BRACKET) {
						{
						setState(8072);
						match(LR_BRACKET);
						setState(8073);
						column_name_list();
						setState(8074);
						match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8082);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8080);
					match(ON);
					setState(8081);
					((Security_statementContext)_localctx).on_id = table_name();
					}
				}

				setState(8084);
				match(TO);
				{
				setState(8085);
				((Security_statementContext)_localctx).id = id();
				((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
				}
				setState(8090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8086);
					match(COMMA);
					setState(8087);
					((Security_statementContext)_localctx).id = id();
					((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
					}
					}
					setState(8092);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1121,_ctx) ) {
				case 1:
					{
					setState(8093);
					match(WITH);
					setState(8094);
					match(GRANT);
					setState(8095);
					match(OPTION);
					}
					break;
				}
				setState(8100);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8098);
					match(AS);
					setState(8099);
					((Security_statementContext)_localctx).as_principal = id();
					}
				}

				setState(8103);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1123,_ctx) ) {
				case 1:
					{
					setState(8102);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8105);
				match(REVERT);
				setState(8112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1124,_ctx) ) {
				case 1:
					{
					setState(8106);
					match(LR_BRACKET);
					setState(8107);
					match(WITH);
					setState(8108);
					match(COOKIE);
					setState(8109);
					match(EQUAL);
					setState(8110);
					match(LOCAL_ID);
					setState(8111);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1125,_ctx) ) {
				case 1:
					{
					setState(8114);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8117);
				open_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8118);
				close_key();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8119);
				create_key();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8120);
				create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return getRuleContext(Existing_keysContext.class,0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return getRuleContext(Generate_new_keysContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ACTIVE() { return getToken(MocaSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode BEGIN() { return getToken(MocaSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(MocaSqlParser.DIALOG, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_certificateContext create_certificate() throws RecognitionException {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_create_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8123);
			match(CREATE);
			setState(8124);
			match(CERTIFICATE);
			setState(8125);
			((Create_certificateContext)_localctx).certificate_name = id();
			setState(8128);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(8126);
				match(AUTHORIZATION);
				setState(8127);
				((Create_certificateContext)_localctx).user_name = id();
				}
			}

			setState(8133);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(8130);
				match(FROM);
				setState(8131);
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				setState(8132);
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1129,_ctx) ) {
			case 1:
				{
				setState(8135);
				match(ACTIVE);
				setState(8136);
				match(FOR);
				setState(8137);
				match(BEGIN);
				setState(8138);
				match(DIALOG);
				setState(8139);
				match(EQUAL);
				setState(8140);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_keysContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Token path_to_file;
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode EXECUTABLE() { return getToken(MocaSqlParser.EXECUTABLE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return getRuleContext(Private_key_optionsContext.class,0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExisting_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExisting_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExisting_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Existing_keysContext existing_keys() throws RecognitionException {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_existing_keys);
		int _la;
		try {
			setState(8160);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(8143);
				match(ASSEMBLY);
				setState(8144);
				((Existing_keysContext)_localctx).assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8146);
				_la = _input.LA(1);
				if (_la==EXECUTABLE) {
					{
					setState(8145);
					match(EXECUTABLE);
					}
				}

				setState(8148);
				match(FILE);
				setState(8149);
				match(EQUAL);
				setState(8150);
				((Existing_keysContext)_localctx).path_to_file = match(STRING);
				setState(8158);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1131,_ctx) ) {
				case 1:
					{
					setState(8151);
					match(WITH);
					setState(8152);
					match(PRIVATE);
					setState(8153);
					match(KEY);
					setState(8154);
					match(LR_BRACKET);
					setState(8155);
					private_key_options();
					setState(8156);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Private_key_optionsContext extends ParserRuleContext {
		public Token path;
		public Token password;
		public TerminalNode FILE() { return getToken(MocaSqlParser.FILE, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode DECRYPTION() { return getToken(MocaSqlParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_private_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPrivate_key_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPrivate_key_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPrivate_key_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Private_key_optionsContext private_key_options() throws RecognitionException {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_private_key_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8162);
			_la = _input.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(8163);
			match(EQUAL);
			setState(8164);
			((Private_key_optionsContext)_localctx).path = match(STRING);
			setState(8171);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8165);
				match(COMMA);
				setState(8166);
				_la = _input.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(8167);
				match(BY);
				setState(8168);
				match(PASSWORD);
				setState(8169);
				match(EQUAL);
				setState(8170);
				((Private_key_optionsContext)_localctx).password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_new_keysContext extends ParserRuleContext {
		public Token password;
		public Token certificate_subject_name;
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode SUBJECT() { return getToken(MocaSqlParser.SUBJECT, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public List<Date_optionsContext> date_options() {
			return getRuleContexts(Date_optionsContext.class);
		}
		public Date_optionsContext date_options(int i) {
			return getRuleContext(Date_optionsContext.class,i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_new_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGenerate_new_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGenerate_new_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGenerate_new_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generate_new_keysContext generate_new_keys() throws RecognitionException {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_generate_new_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8178);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(8173);
				match(ENCRYPTION);
				setState(8174);
				match(BY);
				setState(8175);
				match(PASSWORD);
				setState(8176);
				match(EQUAL);
				setState(8177);
				((Generate_new_keysContext)_localctx).password = match(STRING);
				}
			}

			setState(8180);
			match(WITH);
			setState(8181);
			match(SUBJECT);
			setState(8182);
			match(EQUAL);
			setState(8183);
			((Generate_new_keysContext)_localctx).certificate_subject_name = match(STRING);
			setState(8188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8184);
				match(COMMA);
				setState(8185);
				date_options();
				}
				}
				setState(8190);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_optionsContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode START_DATE() { return getToken(MocaSqlParser.START_DATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(MocaSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDate_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDate_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDate_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_optionsContext date_options() throws RecognitionException {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_date_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8191);
			_la = _input.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(8192);
			match(EQUAL);
			setState(8193);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token password;
		public TerminalNode OPEN() { return getToken(MocaSqlParser.OPEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode DECRYPTION() { return getToken(MocaSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return getRuleContext(Decryption_mechanismContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOpen_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOpen_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOpen_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_keyContext open_key() throws RecognitionException {
		Open_keyContext _localctx = new Open_keyContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_open_key);
		try {
			setState(8211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8195);
				match(OPEN);
				setState(8196);
				match(SYMMETRIC);
				setState(8197);
				match(KEY);
				setState(8198);
				((Open_keyContext)_localctx).key_name = id();
				setState(8199);
				match(DECRYPTION);
				setState(8200);
				match(BY);
				setState(8201);
				decryption_mechanism();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8203);
				match(OPEN);
				setState(8204);
				match(MASTER);
				setState(8205);
				match(KEY);
				setState(8206);
				match(DECRYPTION);
				setState(8207);
				match(BY);
				setState(8208);
				match(PASSWORD);
				setState(8209);
				match(EQUAL);
				setState(8210);
				((Open_keyContext)_localctx).password = match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode CLOSE() { return getToken(MocaSqlParser.CLOSE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode KEYS() { return getToken(MocaSqlParser.KEYS, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClose_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClose_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClose_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_keyContext close_key() throws RecognitionException {
		Close_keyContext _localctx = new Close_keyContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_close_key);
		try {
			setState(8224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1137,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8213);
				match(CLOSE);
				setState(8214);
				match(SYMMETRIC);
				setState(8215);
				match(KEY);
				setState(8216);
				((Close_keyContext)_localctx).key_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8217);
				match(CLOSE);
				setState(8218);
				match(ALL);
				setState(8219);
				match(SYMMETRIC);
				setState(8220);
				match(KEYS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8221);
				match(CLOSE);
				setState(8222);
				match(MASTER);
				setState(8223);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_keyContext extends ParserRuleContext {
		public Token password;
		public IdContext key_name;
		public IdContext user_name;
		public IdContext provider_name;
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(MocaSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(MocaSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(MocaSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MocaSqlParser.BY, i);
		}
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(MocaSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public List<Key_optionsContext> key_options() {
			return getRuleContexts(Key_optionsContext.class);
		}
		public Key_optionsContext key_options(int i) {
			return getRuleContext(Key_optionsContext.class,i);
		}
		public List<Encryption_mechanismContext> encryption_mechanism() {
			return getRuleContexts(Encryption_mechanismContext.class);
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return getRuleContext(Encryption_mechanismContext.class,i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_keyContext create_key() throws RecognitionException {
		Create_keyContext _localctx = new Create_keyContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_create_key);
		int _la;
		try {
			int _alt;
			setState(8261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8226);
				match(CREATE);
				setState(8227);
				match(MASTER);
				setState(8228);
				match(KEY);
				setState(8229);
				match(ENCRYPTION);
				setState(8230);
				match(BY);
				setState(8231);
				match(PASSWORD);
				setState(8232);
				match(EQUAL);
				setState(8233);
				((Create_keyContext)_localctx).password = match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8234);
				match(CREATE);
				setState(8235);
				match(SYMMETRIC);
				setState(8236);
				match(KEY);
				setState(8237);
				((Create_keyContext)_localctx).key_name = id();
				setState(8240);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(8238);
					match(AUTHORIZATION);
					setState(8239);
					((Create_keyContext)_localctx).user_name = id();
					}
				}

				setState(8245);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(8242);
					match(FROM);
					setState(8243);
					match(PROVIDER);
					setState(8244);
					((Create_keyContext)_localctx).provider_name = id();
					}
				}

				setState(8247);
				match(WITH);
				setState(8257); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8252);
						switch (_input.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							setState(8248);
							key_options();
							}
							break;
						case ENCRYPTION:
							{
							setState(8249);
							match(ENCRYPTION);
							setState(8250);
							match(BY);
							setState(8251);
							encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(8255);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8254);
							match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8259); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1142,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_optionsContext extends ParserRuleContext {
		public Token pass_phrase;
		public Token identity_phrase;
		public Token key_name_in_provider;
		public TerminalNode KEY_SOURCE() { return getToken(MocaSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return getRuleContext(AlgorithmContext.class,0);
		}
		public TerminalNode IDENTITY_VALUE() { return getToken(MocaSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(MocaSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(MocaSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREATE_NEW() { return getToken(MocaSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(MocaSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterKey_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitKey_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitKey_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_optionsContext key_options() throws RecognitionException {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_key_options);
		int _la;
		try {
			setState(8278);
			switch (_input.LA(1)) {
			case KEY_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8263);
				match(KEY_SOURCE);
				setState(8264);
				match(EQUAL);
				setState(8265);
				((Key_optionsContext)_localctx).pass_phrase = match(STRING);
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(8266);
				match(ALGORITHM);
				setState(8267);
				match(EQUAL);
				setState(8268);
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8269);
				match(IDENTITY_VALUE);
				setState(8270);
				match(EQUAL);
				setState(8271);
				((Key_optionsContext)_localctx).identity_phrase = match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(8272);
				match(PROVIDER_KEY_NAME);
				setState(8273);
				match(EQUAL);
				setState(8274);
				((Key_optionsContext)_localctx).key_name_in_provider = match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				enterOuterAlt(_localctx, 5);
				{
				setState(8275);
				match(CREATION_DISPOSITION);
				setState(8276);
				match(EQUAL);
				setState(8277);
				_la = _input.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmContext extends ParserRuleContext {
		public TerminalNode DES() { return getToken(MocaSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(MocaSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(MocaSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(MocaSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(MocaSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(MocaSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(MocaSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(MocaSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(MocaSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(MocaSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlgorithmContext algorithm() throws RecognitionException {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8280);
			_la = _input.LA(1);
			if ( !(((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (AES_128 - 388)) | (1L << (AES_192 - 388)) | (1L << (AES_256 - 388)))) != 0) || _la==DES || _la==DESX || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (RC2 - 665)) | (1L << (RC4 - 665)) | (1L << (RC4_128 - 665)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEncryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEncryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEncryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encryption_mechanismContext encryption_mechanism() throws RecognitionException {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_encryption_mechanism);
		try {
			setState(8293);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8282);
				match(CERTIFICATE);
				setState(8283);
				((Encryption_mechanismContext)_localctx).certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8284);
				match(ASYMMETRIC);
				setState(8285);
				match(KEY);
				setState(8286);
				((Encryption_mechanismContext)_localctx).asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8287);
				match(SYMMETRIC);
				setState(8288);
				match(KEY);
				setState(8289);
				((Encryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8290);
				match(PASSWORD);
				setState(8291);
				match(EQUAL);
				setState(8292);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(MocaSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(MocaSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(MocaSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDecryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDecryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDecryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decryption_mechanismContext decryption_mechanism() throws RecognitionException {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_decryption_mechanism);
		try {
			setState(8318);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8295);
				match(CERTIFICATE);
				setState(8296);
				((Decryption_mechanismContext)_localctx).certificate_name = id();
				setState(8301);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1146,_ctx) ) {
				case 1:
					{
					setState(8297);
					match(WITH);
					setState(8298);
					match(PASSWORD);
					setState(8299);
					match(EQUAL);
					setState(8300);
					match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8303);
				match(ASYMMETRIC);
				setState(8304);
				match(KEY);
				setState(8305);
				((Decryption_mechanismContext)_localctx).asym_key_name = id();
				setState(8310);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1147,_ctx) ) {
				case 1:
					{
					setState(8306);
					match(WITH);
					setState(8307);
					match(PASSWORD);
					setState(8308);
					match(EQUAL);
					setState(8309);
					match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8312);
				match(SYMMETRIC);
				setState(8313);
				match(KEY);
				setState(8314);
				((Decryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8315);
				match(PASSWORD);
				setState(8316);
				match(EQUAL);
				setState(8317);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_permissionContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MocaSqlParser.EXECUTE, 0); }
		public TerminalNode VIEW() { return getToken(MocaSqlParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TAKE() { return getToken(MocaSqlParser.TAKE, 0); }
		public TerminalNode CONTROL() { return getToken(MocaSqlParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(MocaSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(MocaSqlParser.SHOWPLAN, 0); }
		public TerminalNode IMPERSONATE() { return getToken(MocaSqlParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(MocaSqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public TerminalNode INSERT() { return getToken(MocaSqlParser.INSERT, 0); }
		public TerminalNode ALTER() { return getToken(MocaSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MocaSqlParser.DATABASE, 0); }
		public TerminalNode ANY() { return getToken(MocaSqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGrant_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGrant_permission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGrant_permission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_permissionContext grant_permission() throws RecognitionException {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_grant_permission);
		int _la;
		try {
			setState(8346);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8320);
				match(EXECUTE);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 2);
				{
				setState(8321);
				match(VIEW);
				setState(8322);
				id();
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8323);
				match(TAKE);
				setState(8324);
				id();
				}
				break;
			case CONTROL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8325);
				match(CONTROL);
				setState(8327);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
					{
					setState(8326);
					id();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8329);
				match(CREATE);
				setState(8330);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case SHOWPLAN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8331);
				match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8332);
				match(IMPERSONATE);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 8);
				{
				setState(8333);
				match(SELECT);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 9);
				{
				setState(8334);
				match(REFERENCES);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 10);
				{
				setState(8335);
				match(INSERT);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 11);
				{
				setState(8336);
				match(ALTER);
				setState(8344);
				_la = _input.LA(1);
				if (_la==ANY || _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (DATABASE - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
					{
					setState(8338);
					_la = _input.LA(1);
					if (_la==ANY) {
						{
						setState(8337);
						match(ANY);
						}
					}

					setState(8342);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case EXPIREDATE:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case POLICY:
					case PRECISION:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROLE:
					case ROWCOUNT:
					case SAFETY:
					case RULE:
					case SERVER:
					case SID:
					case SOURCE:
					case SPLIT:
					case STATE:
					case START:
					case STOP:
					case TARGET:
					case TRAN:
					case USER:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
					case URL:
						{
						setState(8340);
						id();
						}
						break;
					case DATABASE:
						{
						setState(8341);
						match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdContext member_name;
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MocaSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(MocaSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_set_statement);
		int _la;
		try {
			setState(8387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8348);
				match(SET);
				setState(8349);
				match(LOCAL_ID);
				setState(8352);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(8350);
					match(DOT);
					setState(8351);
					((Set_statementContext)_localctx).member_name = id();
					}
				}

				setState(8354);
				match(EQUAL);
				setState(8355);
				expression(0);
				setState(8357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1155,_ctx) ) {
				case 1:
					{
					setState(8356);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8359);
				match(SET);
				setState(8360);
				match(LOCAL_ID);
				setState(8361);
				assignment_operator();
				setState(8362);
				expression(0);
				setState(8364);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1156,_ctx) ) {
				case 1:
					{
					setState(8363);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8366);
				match(SET);
				setState(8367);
				match(LOCAL_ID);
				setState(8368);
				match(EQUAL);
				setState(8369);
				match(CURSOR);
				setState(8370);
				declare_set_cursor_common();
				setState(8381);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8371);
					match(FOR);
					setState(8379);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(8372);
						match(READ);
						setState(8373);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(8374);
						match(UPDATE);
						setState(8377);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(8375);
							match(OF);
							setState(8376);
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(8384);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1160,_ctx) ) {
				case 1:
					{
					setState(8383);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8386);
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MocaSqlParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(MocaSqlParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(MocaSqlParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(MocaSqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(MocaSqlParser.MARK, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode COMMIT() { return getToken(MocaSqlParser.COMMIT, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(MocaSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode WORK() { return getToken(MocaSqlParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(MocaSqlParser.ROLLBACK, 0); }
		public TerminalNode SAVE() { return getToken(MocaSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTransaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTransaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTransaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_transaction_statement);
		int _la;
		try {
			setState(8470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1180,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8389);
				match(BEGIN);
				setState(8390);
				match(DISTRIBUTED);
				setState(8391);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(8394);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1162,_ctx) ) {
				case 1:
					{
					setState(8392);
					id();
					}
					break;
				case 2:
					{
					setState(8393);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1163,_ctx) ) {
				case 1:
					{
					setState(8396);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8399);
				match(BEGIN);
				setState(8400);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(8410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1166,_ctx) ) {
				case 1:
					{
					setState(8403);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case EXPIREDATE:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case POLICY:
					case PRECISION:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROLE:
					case ROWCOUNT:
					case SAFETY:
					case RULE:
					case SERVER:
					case SID:
					case SOURCE:
					case SPLIT:
					case STATE:
					case START:
					case STOP:
					case TARGET:
					case TRAN:
					case USER:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
					case URL:
						{
						setState(8401);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(8402);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8408);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1165,_ctx) ) {
					case 1:
						{
						setState(8405);
						match(WITH);
						setState(8406);
						match(MARK);
						setState(8407);
						match(STRING);
						}
						break;
					}
					}
					break;
				}
				setState(8413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1167,_ctx) ) {
				case 1:
					{
					setState(8412);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8415);
				match(COMMIT);
				setState(8416);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(8429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1170,_ctx) ) {
				case 1:
					{
					setState(8419);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case EXPIREDATE:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case POLICY:
					case PRECISION:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROLE:
					case ROWCOUNT:
					case SAFETY:
					case RULE:
					case SERVER:
					case SID:
					case SOURCE:
					case SPLIT:
					case STATE:
					case START:
					case STOP:
					case TARGET:
					case TRAN:
					case USER:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
					case URL:
						{
						setState(8417);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(8418);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8427);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1169,_ctx) ) {
					case 1:
						{
						setState(8421);
						match(WITH);
						setState(8422);
						match(LR_BRACKET);
						setState(8423);
						match(DELAYED_DURABILITY);
						setState(8424);
						match(EQUAL);
						setState(8425);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(8426);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(8432);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1171,_ctx) ) {
				case 1:
					{
					setState(8431);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8434);
				match(COMMIT);
				setState(8436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1172,_ctx) ) {
				case 1:
					{
					setState(8435);
					match(WORK);
					}
					break;
				}
				setState(8439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1173,_ctx) ) {
				case 1:
					{
					setState(8438);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8441);
				match(COMMIT);
				setState(8442);
				id();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8443);
				match(ROLLBACK);
				setState(8444);
				id();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8445);
				match(ROLLBACK);
				setState(8446);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(8449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1174,_ctx) ) {
				case 1:
					{
					setState(8447);
					id();
					}
					break;
				case 2:
					{
					setState(8448);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1175,_ctx) ) {
				case 1:
					{
					setState(8451);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8454);
				match(ROLLBACK);
				setState(8456);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1176,_ctx) ) {
				case 1:
					{
					setState(8455);
					match(WORK);
					}
					break;
				}
				setState(8459);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1177,_ctx) ) {
				case 1:
					{
					setState(8458);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8461);
				match(SAVE);
				setState(8462);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(8465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1178,_ctx) ) {
				case 1:
					{
					setState(8463);
					id();
					}
					break;
				case 2:
					{
					setState(8464);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1179,_ctx) ) {
				case 1:
					{
					setState(8467);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO() { return getToken(MocaSqlParser.GO, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_go_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8472);
			match(GO);
			setState(8474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1181,_ctx) ) {
			case 1:
				{
				setState(8473);
				((Go_statementContext)_localctx).count = match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public IdContext database;
		public TerminalNode USE() { return getToken(MocaSqlParser.USE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUse_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUse_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUse_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8476);
			match(USE);
			setState(8477);
			((Use_statementContext)_localctx).database = id();
			setState(8479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1182,_ctx) ) {
			case 1:
				{
				setState(8478);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Setuser_statementContext extends ParserRuleContext {
		public Token user;
		public TerminalNode SETUSER() { return getToken(MocaSqlParser.SETUSER, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setuser_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSetuser_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSetuser_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSetuser_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Setuser_statementContext setuser_statement() throws RecognitionException {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_setuser_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8481);
			match(SETUSER);
			setState(8483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1183,_ctx) ) {
			case 1:
				{
				setState(8482);
				((Setuser_statementContext)_localctx).user = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reconfigure_statementContext extends ParserRuleContext {
		public TerminalNode RECONFIGURE() { return getToken(MocaSqlParser.RECONFIGURE, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode OVERRIDE() { return getToken(MocaSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reconfigure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterReconfigure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitReconfigure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitReconfigure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reconfigure_statementContext reconfigure_statement() throws RecognitionException {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_reconfigure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8485);
			match(RECONFIGURE);
			setState(8488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1184,_ctx) ) {
			case 1:
				{
				setState(8486);
				match(WITH);
				setState(8487);
				match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shutdown_statementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MocaSqlParser.SHUTDOWN, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode NOWAIT() { return getToken(MocaSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdown_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterShutdown_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitShutdown_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitShutdown_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Shutdown_statementContext shutdown_statement() throws RecognitionException {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_shutdown_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8490);
			match(SHUTDOWN);
			setState(8493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1185,_ctx) ) {
			case 1:
				{
				setState(8491);
				match(WITH);
				setState(8492);
				match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_clauseContext extends ParserRuleContext {
		public Simple_idContext name;
		public TerminalNode DBCC() { return getToken(MocaSqlParser.DBCC, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return getRuleContext(Dbcc_optionsContext.class,0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDbcc_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDbcc_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDbcc_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dbcc_clauseContext dbcc_clause() throws RecognitionException {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_dbcc_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8495);
			match(DBCC);
			setState(8496);
			((Dbcc_clauseContext)_localctx).name = simple_id();
			setState(8501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1186,_ctx) ) {
			case 1:
				{
				setState(8497);
				match(LR_BRACKET);
				setState(8498);
				expression_list();
				setState(8499);
				match(RR_BRACKET);
				}
				break;
			}
			setState(8505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1187,_ctx) ) {
			case 1:
				{
				setState(8503);
				match(WITH);
				setState(8504);
				dbcc_options();
				}
				break;
			}
			setState(8508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1188,_ctx) ) {
			case 1:
				{
				setState(8507);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_optionsContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDbcc_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDbcc_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDbcc_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dbcc_optionsContext dbcc_options() throws RecognitionException {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_dbcc_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8510);
			simple_id();
			setState(8513);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8511);
				match(COMMA);
				setState(8512);
				simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_clauseContext extends ParserRuleContext {
		public Token clause;
		public TerminalNode EXECUTE() { return getToken(MocaSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode CALLER() { return getToken(MocaSqlParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(MocaSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(MocaSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExecute_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExecute_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExecute_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_clauseContext execute_clause() throws RecognitionException {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_execute_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8515);
			match(EXECUTE);
			setState(8516);
			match(AS);
			setState(8517);
			((Execute_clauseContext)_localctx).clause = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				((Execute_clauseContext)_localctx).clause = (Token)_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDeclare_local(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDeclare_local(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDeclare_local(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8519);
			match(LOCAL_ID);
			setState(8521);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8520);
				match(AS);
				}
			}

			setState(8523);
			data_type();
			setState(8526);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(8524);
				match(EQUAL);
				setState(8525);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(MocaSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_table_type_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8528);
			match(TABLE);
			setState(8529);
			match(LR_BRACKET);
			setState(8530);
			column_def_table_constraints();
			setState(8531);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_type_definitionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return getRuleContext(Xml_schema_collectionContext.class,0);
		}
		public TerminalNode CONTENT() { return getToken(MocaSqlParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(MocaSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXml_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXml_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXml_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_type_definitionContext xml_type_definition() throws RecognitionException {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_xml_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8533);
			match(XML);
			setState(8534);
			match(LR_BRACKET);
			setState(8536);
			_la = _input.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				setState(8535);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(8538);
			xml_schema_collection();
			setState(8539);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_schema_collectionContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(MocaSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(MocaSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_schema_collectionContext xml_schema_collection() throws RecognitionException {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8541);
			match(ID);
			setState(8542);
			match(DOT);
			setState(8543);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_def_table_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_def_table_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8545);
			column_def_table_constraint();
			setState(8552);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1194,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8547);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8546);
						match(COMMA);
						}
					}

					setState(8549);
					column_def_table_constraint();
					}
					} 
				}
				setState(8554);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1194,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return getRuleContext(Materialized_column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_def_table_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_def_table_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_def_table_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_column_def_table_constraint);
		try {
			setState(8558);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1195,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8555);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8556);
				materialized_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8557);
				table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext constraint;
		public Token seed;
		public Token increment;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(MocaSqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8560);
			id();
			setState(8564);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case DOUBLE:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				{
				setState(8561);
				data_type();
				}
				break;
			case AS:
				{
				setState(8562);
				match(AS);
				setState(8563);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8568);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(8566);
				match(COLLATE);
				setState(8567);
				id();
				}
			}

			setState(8571);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1198,_ctx) ) {
			case 1:
				{
				setState(8570);
				null_notnull();
				}
				break;
			}
			setState(8594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1203,_ctx) ) {
			case 1:
				{
				setState(8575);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(8573);
					match(CONSTRAINT);
					setState(8574);
					((Column_definitionContext)_localctx).constraint = id();
					}
				}

				setState(8577);
				null_or_default();
				setState(8579);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1200,_ctx) ) {
				case 1:
					{
					setState(8578);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8581);
				match(IDENTITY);
				setState(8587);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1201,_ctx) ) {
				case 1:
					{
					setState(8582);
					match(LR_BRACKET);
					setState(8583);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(8584);
					match(COMMA);
					setState(8585);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(8586);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1202,_ctx) ) {
				case 1:
					{
					setState(8589);
					match(NOT);
					setState(8590);
					match(FOR);
					setState(8591);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(8597);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(8596);
				match(ROWGUIDCOL);
				}
			}

			setState(8602);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1205,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8599);
					column_constraint();
					}
					} 
				}
				setState(8604);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1205,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Materialized_column_definitionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(MocaSqlParser.COMPUTE, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public TerminalNode MATERIALIZED() { return getToken(MocaSqlParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMaterialized_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMaterialized_column_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMaterialized_column_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Materialized_column_definitionContext materialized_column_definition() throws RecognitionException {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_materialized_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8605);
			id();
			setState(8606);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(8607);
			expression(0);
			setState(8611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1206,_ctx) ) {
			case 1:
				{
				setState(8608);
				match(MATERIALIZED);
				}
				break;
			case 2:
				{
				setState(8609);
				match(NOT);
				setState(8610);
				match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8615);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(8613);
				match(CONSTRAINT);
				setState(8614);
				((Column_constraintContext)_localctx).constraint = id();
				}
			}

			setState(8654);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(8620);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(8617);
					match(PRIMARY);
					setState(8618);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(8619);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8623);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(8622);
					clustered();
					}
				}

				setState(8626);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1210,_ctx) ) {
				case 1:
					{
					setState(8625);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(8628);
				match(CHECK);
				setState(8632);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8629);
					match(NOT);
					setState(8630);
					match(FOR);
					setState(8631);
					match(REPLICATION);
					}
				}

				setState(8634);
				match(LR_BRACKET);
				setState(8635);
				search_condition();
				setState(8636);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(8640);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(8638);
					match(FOREIGN);
					setState(8639);
					match(KEY);
					}
				}

				setState(8642);
				match(REFERENCES);
				setState(8643);
				table_name();
				setState(8644);
				match(LR_BRACKET);
				setState(8645);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(8646);
				match(RR_BRACKET);
				setState(8648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1213,_ctx) ) {
				case 1:
					{
					setState(8647);
					on_delete();
					}
					break;
				}
				setState(8651);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8650);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				setState(8653);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(MocaSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(MocaSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MocaSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(MocaSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MocaSqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(MocaSqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(MocaSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(MocaSqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(MocaSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(MocaSqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8658);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(8656);
				match(CONSTRAINT);
				setState(8657);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(8724);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(8663);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(8660);
					match(PRIMARY);
					setState(8661);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(8662);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8666);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(8665);
					clustered();
					}
				}

				setState(8668);
				match(LR_BRACKET);
				setState(8669);
				column_name_list_with_order();
				setState(8670);
				match(RR_BRACKET);
				setState(8672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1219,_ctx) ) {
				case 1:
					{
					setState(8671);
					index_options();
					}
					break;
				}
				setState(8676);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8674);
					match(ON);
					setState(8675);
					id();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(8678);
				match(CHECK);
				setState(8682);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8679);
					match(NOT);
					setState(8680);
					match(FOR);
					setState(8681);
					match(REPLICATION);
					}
				}

				setState(8684);
				match(LR_BRACKET);
				setState(8685);
				search_condition();
				setState(8686);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(8688);
				match(DEFAULT);
				setState(8690);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(8689);
					match(LR_BRACKET);
					}
				}

				setState(8696); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(8696);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(8692);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(8693);
						match(PLUS);
						}
						break;
					case CALLED:
					case COALESCE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case EXPIREDATE:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case IDENTITY:
					case IIF:
					case INIT:
					case ISNULL:
					case KEY:
					case LEFT:
					case MASTER:
					case MAX_MEMORY:
					case NULLIF:
					case OFFSETS:
					case PAGE:
					case POLICY:
					case PRECISION:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case RIGHT:
					case ROLE:
					case ROWCOUNT:
					case SAFETY:
					case RULE:
					case SERVER:
					case SESSION_USER:
					case SID:
					case SOURCE:
					case SPLIT:
					case STATE:
					case START:
					case STOP:
					case SYSTEM_USER:
					case TARGET:
					case TRAN:
					case USER:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
					case URL:
						{
						setState(8694);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(8695);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(8698); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || _la==COALESCE || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (CONVERT - 71)) | (1L << (CURRENT_TIMESTAMP - 71)) | (1L << (CURRENT_USER - 71)) | (1L << (DATA_COMPRESSION - 71)) | (1L << (EVENTDATA - 71)) | (1L << (EXPIREDATE - 71)) | (1L << (FILENAME - 71)) | (1L << (FILLFACTOR - 71)) | (1L << (FORCESEEK - 71)))) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (IDENTITY - 150)) | (1L << (IIF - 150)) | (1L << (INIT - 150)) | (1L << (ISNULL - 150)) | (1L << (KEY - 150)) | (1L << (LEFT - 150)) | (1L << (MASTER - 150)) | (1L << (MAX_MEMORY - 150)))) != 0) || ((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (NULLIF - 224)) | (1L << (OFFSETS - 224)) | (1L << (PAGE - 224)) | (1L << (POLICY - 224)) | (1L << (PRECISION - 224)) | (1L << (PUBLIC - 224)) | (1L << (R - 224)) | (1L << (RAW - 224)) | (1L << (RETURN - 224)) | (1L << (RETURNS - 224)) | (1L << (RIGHT - 224)))) != 0) || ((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (ROLE - 289)) | (1L << (ROWCOUNT - 289)) | (1L << (SAFETY - 289)) | (1L << (RULE - 289)) | (1L << (SERVER - 289)) | (1L << (SESSION_USER - 289)) | (1L << (SID - 289)) | (1L << (SOURCE - 289)) | (1L << (SPLIT - 289)) | (1L << (STATE - 289)) | (1L << (START - 289)) | (1L << (STOP - 289)) | (1L << (SYSTEM_USER - 289)) | (1L << (TARGET - 289)) | (1L << (TRAN - 289)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (LOCAL_ID - 750)) | (1L << (DECIMAL - 750)) | (1L << (ID - 750)) | (1L << (STRING - 750)))) != 0) || _la==PLUS || _la==URL );
				setState(8701);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(8700);
					match(RR_BRACKET);
					}
				}

				setState(8703);
				match(FOR);
				setState(8704);
				id();
				}
				break;
			case FOREIGN:
				{
				setState(8705);
				match(FOREIGN);
				setState(8706);
				match(KEY);
				setState(8707);
				match(LR_BRACKET);
				setState(8708);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(8709);
				match(RR_BRACKET);
				setState(8710);
				match(REFERENCES);
				setState(8711);
				table_name();
				setState(8716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1226,_ctx) ) {
				case 1:
					{
					setState(8712);
					match(LR_BRACKET);
					setState(8713);
					((Table_constraintContext)_localctx).pk = column_name_list();
					setState(8714);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1227,_ctx) ) {
				case 1:
					{
					setState(8718);
					on_delete();
					}
					break;
				}
				setState(8722);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8721);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(MocaSqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(MocaSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOn_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOn_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8726);
			match(ON);
			setState(8727);
			match(DELETE);
			setState(8735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1230,_ctx) ) {
			case 1:
				{
				setState(8728);
				match(NO);
				setState(8729);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8730);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8731);
				match(SET);
				setState(8732);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8733);
				match(SET);
				setState(8734);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(MocaSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOn_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOn_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8737);
			match(ON);
			setState(8738);
			match(UPDATE);
			setState(8746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1231,_ctx) ) {
			case 1:
				{
				setState(8739);
				match(NO);
				setState(8740);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8741);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8742);
				match(SET);
				setState(8743);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8744);
				match(SET);
				setState(8745);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIndex_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIndex_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIndex_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8748);
			match(WITH);
			setState(8749);
			match(LR_BRACKET);
			setState(8750);
			index_option();
			setState(8755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8751);
				match(COMMA);
				setState(8752);
				index_option();
				}
				}
				setState(8757);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8758);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIndex_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIndex_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8760);
			simple_id();
			setState(8761);
			match(EQUAL);
			setState(8765);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
			case URL:
				{
				setState(8762);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(8763);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(8764);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MocaSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MocaSqlParser.CURSOR, 0); }
		public List<TerminalNode> FOR() { return getTokens(MocaSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(MocaSqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(MocaSqlParser.SCROLL, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(MocaSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(MocaSqlParser.INSENSITIVE, 0); }
		public TerminalNode READ() { return getToken(MocaSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(MocaSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(MocaSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDeclare_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDeclare_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8767);
			match(DECLARE);
			setState(8768);
			cursor_name();
			setState(8800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1241,_ctx) ) {
			case 1:
				{
				setState(8769);
				match(CURSOR);
				setState(8779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1236,_ctx) ) {
				case 1:
					{
					setState(8770);
					declare_set_cursor_common();
					setState(8777);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(8771);
						match(FOR);
						setState(8772);
						match(UPDATE);
						setState(8775);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(8773);
							match(OF);
							setState(8774);
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8782);
				_la = _input.LA(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					setState(8781);
					_la = _input.LA(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(8785);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(8784);
					match(SCROLL);
					}
				}

				setState(8787);
				match(CURSOR);
				setState(8788);
				match(FOR);
				setState(8789);
				select_statement();
				setState(8798);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8790);
					match(FOR);
					setState(8796);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(8791);
						match(READ);
						setState(8792);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(8793);
						match(UPDATE);
						}
						break;
					case OF:
						{
						{
						setState(8794);
						match(OF);
						setState(8795);
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			setState(8803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1242,_ctx) ) {
			case 1:
				{
				setState(8802);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_commonContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Declare_set_cursor_common_partialContext> declare_set_cursor_common_partial() {
			return getRuleContexts(Declare_set_cursor_common_partialContext.class);
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return getRuleContext(Declare_set_cursor_common_partialContext.class,i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDeclare_set_cursor_common(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDeclare_set_cursor_common(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDeclare_set_cursor_common(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_set_cursor_commonContext declare_set_cursor_common() throws RecognitionException {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_declare_set_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (DYNAMIC - 485)) | (1L << (FAST_FORWARD - 485)) | (1L << (FORWARD_ONLY - 485)) | (1L << (GLOBAL - 485)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (SCROLL - 704)) | (1L << (SCROLL_LOCKS - 704)) | (1L << (STATIC - 704)))) != 0) || _la==TYPE_WARNING) {
				{
				{
				setState(8805);
				declare_set_cursor_common_partial();
				}
				}
				setState(8810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8811);
			match(FOR);
			setState(8812);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_common_partialContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(MocaSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(MocaSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(MocaSqlParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(MocaSqlParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(MocaSqlParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(MocaSqlParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(MocaSqlParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(MocaSqlParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(MocaSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(MocaSqlParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(MocaSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common_partial; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDeclare_set_cursor_common_partial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDeclare_set_cursor_common_partial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDeclare_set_cursor_common_partial(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() throws RecognitionException {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			setState(8819);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8814);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8815);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8816);
				_la = _input.LA(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				enterOuterAlt(_localctx, 4);
				{
				setState(8817);
				_la = _input.LA(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case TYPE_WARNING:
				enterOuterAlt(_localctx, 5);
				{
				setState(8818);
				match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_cursorContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(MocaSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(MocaSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MocaSqlParser.LOCAL_ID, i);
		}
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(MocaSqlParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(MocaSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MocaSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ABSOLUTE() { return getToken(MocaSqlParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(MocaSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFetch_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFetch_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFetch_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_cursorContext fetch_cursor() throws RecognitionException {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_fetch_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8821);
			match(FETCH);
			setState(8831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1246,_ctx) ) {
			case 1:
				{
				setState(8828);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(8822);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(8823);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(8824);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(8825);
					match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					setState(8826);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(8827);
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8830);
				match(FROM);
				}
				break;
			}
			setState(8834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1247,_ctx) ) {
			case 1:
				{
				setState(8833);
				match(GLOBAL);
				}
				break;
			}
			setState(8836);
			cursor_name();
			setState(8846);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(8837);
				match(INTO);
				setState(8838);
				match(LOCAL_ID);
				setState(8843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8839);
					match(COMMA);
					setState(8840);
					match(LOCAL_ID);
					}
					}
					setState(8845);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(8849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1250,_ctx) ) {
			case 1:
				{
				setState(8848);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MocaSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(MocaSqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(MocaSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MocaSqlParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(MocaSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MocaSqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(MocaSqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(MocaSqlParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MocaSqlParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MocaSqlParser.SERIALIZABLE, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode IDENTITY_INSERT() { return getToken(MocaSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSet_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSet_special(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSet_special(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_set_special);
		try {
			setState(8900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8851);
				match(SET);
				setState(8852);
				id();
				setState(8856);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(8853);
					id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(8854);
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					setState(8855);
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8859);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1252,_ctx) ) {
				case 1:
					{
					setState(8858);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8861);
				match(SET);
				setState(8862);
				match(TRANSACTION);
				setState(8863);
				match(ISOLATION);
				setState(8864);
				match(LEVEL);
				setState(8874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1253,_ctx) ) {
				case 1:
					{
					setState(8865);
					match(READ);
					setState(8866);
					match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					setState(8867);
					match(READ);
					setState(8868);
					match(COMMITTED);
					}
					break;
				case 3:
					{
					setState(8869);
					match(REPEATABLE);
					setState(8870);
					match(READ);
					}
					break;
				case 4:
					{
					setState(8871);
					match(SNAPSHOT);
					}
					break;
				case 5:
					{
					setState(8872);
					match(SERIALIZABLE);
					}
					break;
				case 6:
					{
					setState(8873);
					match(DECIMAL);
					}
					break;
				}
				setState(8877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1254,_ctx) ) {
				case 1:
					{
					setState(8876);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8879);
				match(SET);
				setState(8880);
				match(IDENTITY_INSERT);
				setState(8881);
				table_name();
				setState(8882);
				on_off();
				setState(8884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1255,_ctx) ) {
				case 1:
					{
					setState(8883);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8886);
				match(SET);
				setState(8887);
				match(ANSI_NULLS);
				setState(8888);
				on_off();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8889);
				match(SET);
				setState(8890);
				match(QUOTED_IDENTIFIER);
				setState(8891);
				on_off();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8892);
				match(SET);
				setState(8893);
				match(ANSI_PADDING);
				setState(8894);
				on_off();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8895);
				match(SET);
				setState(8896);
				match(ANSI_WARNINGS);
				setState(8897);
				on_off();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8898);
				match(SET);
				setState(8899);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterConstant_LOCAL_ID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitConstant_LOCAL_ID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitConstant_LOCAL_ID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_constant_LOCAL_ID);
		try {
			setState(8904);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8902);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8903);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public Moca_at_variablesContext moca_at_variables() {
			return getRuleContext(Moca_at_variablesContext.class,0);
		}
		public Moca_at_plus_variablesContext moca_at_plus_variables() {
			return getRuleContext(Moca_at_plus_variablesContext.class,0);
		}
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return getRuleContext(Unary_operator_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MocaSqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 726;
		enterRecursionRule(_localctx, 726, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1258,_ctx) ) {
			case 1:
				{
				setState(8907);
				moca_at_variables();
				}
				break;
			case 2:
				{
				setState(8908);
				moca_at_plus_variables();
				}
				break;
			case 3:
				{
				setState(8909);
				primitive_expression();
				}
				break;
			case 4:
				{
				setState(8910);
				function_call();
				}
				break;
			case 5:
				{
				setState(8911);
				case_expression();
				}
				break;
			case 6:
				{
				setState(8912);
				full_column_name();
				}
				break;
			case 7:
				{
				setState(8913);
				bracket_expression();
				}
				break;
			case 8:
				{
				setState(8914);
				unary_operator_expression();
				}
				break;
			case 9:
				{
				setState(8915);
				over_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8937);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1260,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8935);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1259,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8918);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8919);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & ((1L << (STAR - 840)) | (1L << (DIVIDE - 840)) | (1L << (MODULE - 840)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(8920);
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8921);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8922);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (DOUBLE_BAR - 829)) | (1L << (PLUS - 829)) | (1L << (MINUS - 829)) | (1L << (BIT_OR - 829)) | (1L << (BIT_AND - 829)) | (1L << (BIT_XOR - 829)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						} else {
							consume();
						}
						setState(8923);
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8924);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8925);
						comparison_operator();
						setState(8926);
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8928);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8929);
						assignment_operator();
						setState(8930);
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8932);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(8933);
						match(COLLATE);
						setState(8934);
						id();
						}
						break;
					}
					} 
				}
				setState(8939);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1260,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Moca_at_variablesContext extends ParserRuleContext {
		public Moca_at_variableContext moca_at_variable() {
			return getRuleContext(Moca_at_variableContext.class,0);
		}
		public Moca_at_minus_variableContext moca_at_minus_variable() {
			return getRuleContext(Moca_at_minus_variableContext.class,0);
		}
		public Moca_environment_variableContext moca_environment_variable() {
			return getRuleContext(Moca_environment_variableContext.class,0);
		}
		public Moca_at_keep_directivesContext moca_at_keep_directives() {
			return getRuleContext(Moca_at_keep_directivesContext.class,0);
		}
		public Moca_at_ignore_directiveContext moca_at_ignore_directive() {
			return getRuleContext(Moca_at_ignore_directiveContext.class,0);
		}
		public Moca_at_onstack_directiveContext moca_at_onstack_directive() {
			return getRuleContext(Moca_at_onstack_directiveContext.class,0);
		}
		public Moca_at_type_cast_variableContext moca_at_type_cast_variable() {
			return getRuleContext(Moca_at_type_cast_variableContext.class,0);
		}
		public Moca_integration_variableContext moca_integration_variable() {
			return getRuleContext(Moca_integration_variableContext.class,0);
		}
		public Moca_at_variablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_variables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_variables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_variables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_variables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_variablesContext moca_at_variables() throws RecognitionException {
		Moca_at_variablesContext _localctx = new Moca_at_variablesContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_moca_at_variables);
		try {
			setState(8948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8940);
				moca_at_variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8941);
				moca_at_minus_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8942);
				moca_environment_variable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8943);
				moca_at_keep_directives();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8944);
				moca_at_ignore_directive();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8945);
				moca_at_onstack_directive();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8946);
				moca_at_type_cast_variable();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8947);
				moca_integration_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_variablesContext extends ParserRuleContext {
		public Moca_at_plus_variableContext moca_at_plus_variable() {
			return getRuleContext(Moca_at_plus_variableContext.class,0);
		}
		public Moca_at_starContext moca_at_star() {
			return getRuleContext(Moca_at_starContext.class,0);
		}
		public Moca_at_mod_variableContext moca_at_mod_variable() {
			return getRuleContext(Moca_at_mod_variableContext.class,0);
		}
		public Moca_at_plus_keep_directiveContext moca_at_plus_keep_directive() {
			return getRuleContext(Moca_at_plus_keep_directiveContext.class,0);
		}
		public Moca_at_mod_keep_directiveContext moca_at_mod_keep_directive() {
			return getRuleContext(Moca_at_mod_keep_directiveContext.class,0);
		}
		public Moca_at_plus_oldvar_directivesContext moca_at_plus_oldvar_directives() {
			return getRuleContext(Moca_at_plus_oldvar_directivesContext.class,0);
		}
		public Moca_at_plus_type_cast_variableContext moca_at_plus_type_cast_variable() {
			return getRuleContext(Moca_at_plus_type_cast_variableContext.class,0);
		}
		public Moca_at_plus_database_qualifier_variableContext moca_at_plus_database_qualifier_variable() {
			return getRuleContext(Moca_at_plus_database_qualifier_variableContext.class,0);
		}
		public Moca_at_mod_database_qualifier_variableContext moca_at_mod_database_qualifier_variable() {
			return getRuleContext(Moca_at_mod_database_qualifier_variableContext.class,0);
		}
		public Moca_at_plus_variablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_variables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_variables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_variables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_variables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_variablesContext moca_at_plus_variables() throws RecognitionException {
		Moca_at_plus_variablesContext _localctx = new Moca_at_plus_variablesContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_moca_at_plus_variables);
		try {
			setState(8959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8950);
				moca_at_plus_variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8951);
				moca_at_star();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8952);
				moca_at_mod_variable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8953);
				moca_at_plus_keep_directive();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8954);
				moca_at_mod_keep_directive();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8955);
				moca_at_plus_oldvar_directives();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8956);
				moca_at_plus_type_cast_variable();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8957);
				moca_at_plus_database_qualifier_variable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8958);
				moca_at_mod_database_qualifier_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_variableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Moca_at_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_variableContext moca_at_variable() throws RecognitionException {
		Moca_at_variableContext _localctx = new Moca_at_variableContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_moca_at_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8961);
			match(LOCAL_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_environment_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_ENVIRONMENT_VARIABLE() { return getToken(MocaSqlParser.MOCA_ENVIRONMENT_VARIABLE, 0); }
		public Moca_environment_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_environment_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_environment_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_environment_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_environment_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_environment_variableContext moca_environment_variable() throws RecognitionException {
		Moca_environment_variableContext _localctx = new Moca_environment_variableContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_moca_environment_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8963);
			match(MOCA_ENVIRONMENT_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_minus_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_MINUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_MINUS_VARIABLE, 0); }
		public Moca_at_minus_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_minus_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_minus_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_minus_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_minus_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_minus_variableContext moca_at_minus_variable() throws RecognitionException {
		Moca_at_minus_variableContext _localctx = new Moca_at_minus_variableContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_moca_at_minus_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8965);
			match(MOCA_AT_MINUS_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_PLUS_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_PLUS_VARIABLE, 0); }
		public Moca_at_plus_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_variableContext moca_at_plus_variable() throws RecognitionException {
		Moca_at_plus_variableContext _localctx = new Moca_at_plus_variableContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_moca_at_plus_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8967);
			match(MOCA_AT_PLUS_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_mod_variableContext extends ParserRuleContext {
		public TerminalNode MOCA_AT_MOD_VARIABLE() { return getToken(MocaSqlParser.MOCA_AT_MOD_VARIABLE, 0); }
		public Moca_at_mod_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_mod_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_mod_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_mod_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_mod_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_mod_variableContext moca_at_mod_variable() throws RecognitionException {
		Moca_at_mod_variableContext _localctx = new Moca_at_mod_variableContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_moca_at_mod_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8969);
			match(MOCA_AT_MOD_VARIABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_starContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(MocaSqlParser.AT, 0); }
		public TerminalNode STAR() { return getToken(MocaSqlParser.STAR, 0); }
		public Moca_at_starContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_star; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_star(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_star(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_starContext moca_at_star() throws RecognitionException {
		Moca_at_starContext _localctx = new Moca_at_starContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_moca_at_star);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8971);
			match(AT);
			setState(8972);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_keep_directivesContext extends ParserRuleContext {
		public Moca_at_keep_directiveContext moca_at_keep_directive() {
			return getRuleContext(Moca_at_keep_directiveContext.class,0);
		}
		public Moca_at_minus_keep_directiveContext moca_at_minus_keep_directive() {
			return getRuleContext(Moca_at_minus_keep_directiveContext.class,0);
		}
		public Moca_at_keep_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_keep_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_keep_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_keep_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_keep_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_keep_directivesContext moca_at_keep_directives() throws RecognitionException {
		Moca_at_keep_directivesContext _localctx = new Moca_at_keep_directivesContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_moca_at_keep_directives);
		try {
			setState(8976);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8974);
				moca_at_keep_directive();
				}
				break;
			case MOCA_AT_MINUS_VARIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8975);
				moca_at_minus_keep_directive();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_keep_directiveContext extends ParserRuleContext {
		public Moca_at_variableContext moca_at_variable() {
			return getRuleContext(Moca_at_variableContext.class,0);
		}
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode MOCA_KEEP() { return getToken(MocaSqlParser.MOCA_KEEP, 0); }
		public Moca_at_keep_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_keep_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_keep_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_keep_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_keep_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_keep_directiveContext moca_at_keep_directive() throws RecognitionException {
		Moca_at_keep_directiveContext _localctx = new Moca_at_keep_directiveContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_moca_at_keep_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8978);
			moca_at_variable();
			setState(8979);
			match(SHARP);
			setState(8980);
			match(MOCA_KEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_minus_keep_directiveContext extends ParserRuleContext {
		public Moca_at_minus_variableContext moca_at_minus_variable() {
			return getRuleContext(Moca_at_minus_variableContext.class,0);
		}
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode MOCA_KEEP() { return getToken(MocaSqlParser.MOCA_KEEP, 0); }
		public Moca_at_minus_keep_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_minus_keep_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_minus_keep_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_minus_keep_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_minus_keep_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_minus_keep_directiveContext moca_at_minus_keep_directive() throws RecognitionException {
		Moca_at_minus_keep_directiveContext _localctx = new Moca_at_minus_keep_directiveContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_moca_at_minus_keep_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8982);
			moca_at_minus_variable();
			setState(8983);
			match(SHARP);
			setState(8984);
			match(MOCA_KEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_keep_directiveContext extends ParserRuleContext {
		public Moca_at_plus_variableContext moca_at_plus_variable() {
			return getRuleContext(Moca_at_plus_variableContext.class,0);
		}
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode MOCA_KEEP() { return getToken(MocaSqlParser.MOCA_KEEP, 0); }
		public Moca_at_plus_keep_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_keep_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_keep_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_keep_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_keep_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_keep_directiveContext moca_at_plus_keep_directive() throws RecognitionException {
		Moca_at_plus_keep_directiveContext _localctx = new Moca_at_plus_keep_directiveContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_moca_at_plus_keep_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8986);
			moca_at_plus_variable();
			setState(8987);
			match(SHARP);
			setState(8988);
			match(MOCA_KEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_mod_keep_directiveContext extends ParserRuleContext {
		public Moca_at_mod_variableContext moca_at_mod_variable() {
			return getRuleContext(Moca_at_mod_variableContext.class,0);
		}
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode MOCA_KEEP() { return getToken(MocaSqlParser.MOCA_KEEP, 0); }
		public Moca_at_mod_keep_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_mod_keep_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_mod_keep_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_mod_keep_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_mod_keep_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_mod_keep_directiveContext moca_at_mod_keep_directive() throws RecognitionException {
		Moca_at_mod_keep_directiveContext _localctx = new Moca_at_mod_keep_directiveContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_moca_at_mod_keep_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8990);
			moca_at_mod_variable();
			setState(8991);
			match(SHARP);
			setState(8992);
			match(MOCA_KEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_onstack_directiveContext extends ParserRuleContext {
		public Moca_at_variableContext moca_at_variable() {
			return getRuleContext(Moca_at_variableContext.class,0);
		}
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode MOCA_ONSTACK() { return getToken(MocaSqlParser.MOCA_ONSTACK, 0); }
		public Moca_at_onstack_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_onstack_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_onstack_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_onstack_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_onstack_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_onstack_directiveContext moca_at_onstack_directive() throws RecognitionException {
		Moca_at_onstack_directiveContext _localctx = new Moca_at_onstack_directiveContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_moca_at_onstack_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8994);
			moca_at_variable();
			setState(8995);
			match(SHARP);
			setState(8996);
			match(MOCA_ONSTACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_ignore_directiveContext extends ParserRuleContext {
		public Moca_at_variableContext moca_at_variable() {
			return getRuleContext(Moca_at_variableContext.class,0);
		}
		public TerminalNode SHARP() { return getToken(MocaSqlParser.SHARP, 0); }
		public TerminalNode MOCA_IGNORE() { return getToken(MocaSqlParser.MOCA_IGNORE, 0); }
		public Moca_at_ignore_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_ignore_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_ignore_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_ignore_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_ignore_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_ignore_directiveContext moca_at_ignore_directive() throws RecognitionException {
		Moca_at_ignore_directiveContext _localctx = new Moca_at_ignore_directiveContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_moca_at_ignore_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8998);
			moca_at_variable();
			setState(8999);
			match(SHARP);
			setState(9000);
			match(MOCA_IGNORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_oldvar_directivesContext extends ParserRuleContext {
		public Moca_at_plus_oldvar_directiveContext moca_at_plus_oldvar_directive() {
			return getRuleContext(Moca_at_plus_oldvar_directiveContext.class,0);
		}
		public Moca_at_mod_oldvar_directiveContext moca_at_mod_oldvar_directive() {
			return getRuleContext(Moca_at_mod_oldvar_directiveContext.class,0);
		}
		public Moca_at_plus_oldvar_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_oldvar_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_oldvar_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_oldvar_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_oldvar_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_oldvar_directivesContext moca_at_plus_oldvar_directives() throws RecognitionException {
		Moca_at_plus_oldvar_directivesContext _localctx = new Moca_at_plus_oldvar_directivesContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_moca_at_plus_oldvar_directives);
		try {
			setState(9004);
			switch (_input.LA(1)) {
			case MOCA_AT_PLUS_VARIABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9002);
				moca_at_plus_oldvar_directive();
				}
				break;
			case MOCA_AT_MOD_VARIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9003);
				moca_at_mod_oldvar_directive();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_oldvar_directiveContext extends ParserRuleContext {
		public Moca_at_plus_variableContext moca_at_plus_variable() {
			return getRuleContext(Moca_at_plus_variableContext.class,0);
		}
		public TerminalNode BIT_XOR() { return getToken(MocaSqlParser.BIT_XOR, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_at_plus_oldvar_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_oldvar_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_oldvar_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_oldvar_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_oldvar_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_oldvar_directiveContext moca_at_plus_oldvar_directive() throws RecognitionException {
		Moca_at_plus_oldvar_directiveContext _localctx = new Moca_at_plus_oldvar_directiveContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_moca_at_plus_oldvar_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9006);
			moca_at_plus_variable();
			setState(9007);
			match(BIT_XOR);
			setState(9008);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_mod_oldvar_directiveContext extends ParserRuleContext {
		public Moca_at_mod_variableContext moca_at_mod_variable() {
			return getRuleContext(Moca_at_mod_variableContext.class,0);
		}
		public TerminalNode BIT_XOR() { return getToken(MocaSqlParser.BIT_XOR, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_at_mod_oldvar_directiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_mod_oldvar_directive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_mod_oldvar_directive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_mod_oldvar_directive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_mod_oldvar_directive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_mod_oldvar_directiveContext moca_at_mod_oldvar_directive() throws RecognitionException {
		Moca_at_mod_oldvar_directiveContext _localctx = new Moca_at_mod_oldvar_directiveContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_moca_at_mod_oldvar_directive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9010);
			moca_at_mod_variable();
			setState(9011);
			match(BIT_XOR);
			setState(9012);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_type_cast_variableContext extends ParserRuleContext {
		public Moca_at_variableContext moca_at_variable() {
			return getRuleContext(Moca_at_variableContext.class,0);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_at_type_cast_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_type_cast_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_type_cast_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_type_cast_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_type_cast_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_type_cast_variableContext moca_at_type_cast_variable() throws RecognitionException {
		Moca_at_type_cast_variableContext _localctx = new Moca_at_type_cast_variableContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_moca_at_type_cast_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9014);
			moca_at_variable();
			setState(9015);
			match(COLON);
			setState(9016);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_type_cast_variableContext extends ParserRuleContext {
		public Moca_at_plus_variableContext moca_at_plus_variable() {
			return getRuleContext(Moca_at_plus_variableContext.class,0);
		}
		public TerminalNode COLON() { return getToken(MocaSqlParser.COLON, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_at_plus_type_cast_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_type_cast_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_type_cast_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_type_cast_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_type_cast_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_type_cast_variableContext moca_at_plus_type_cast_variable() throws RecognitionException {
		Moca_at_plus_type_cast_variableContext _localctx = new Moca_at_plus_type_cast_variableContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_moca_at_plus_type_cast_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9018);
			moca_at_plus_variable();
			setState(9019);
			match(COLON);
			setState(9020);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_plus_database_qualifier_variableContext extends ParserRuleContext {
		public Moca_at_plus_variableContext moca_at_plus_variable() {
			return getRuleContext(Moca_at_plus_variableContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_at_plus_database_qualifier_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_plus_database_qualifier_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_plus_database_qualifier_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_plus_database_qualifier_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_plus_database_qualifier_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_plus_database_qualifier_variableContext moca_at_plus_database_qualifier_variable() throws RecognitionException {
		Moca_at_plus_database_qualifier_variableContext _localctx = new Moca_at_plus_database_qualifier_variableContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_moca_at_plus_database_qualifier_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9022);
			moca_at_plus_variable();
			setState(9023);
			match(DOT);
			setState(9024);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_at_mod_database_qualifier_variableContext extends ParserRuleContext {
		public Moca_at_mod_variableContext moca_at_mod_variable() {
			return getRuleContext(Moca_at_mod_variableContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MocaSqlParser.DOT, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_at_mod_database_qualifier_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_at_mod_database_qualifier_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_at_mod_database_qualifier_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_at_mod_database_qualifier_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_at_mod_database_qualifier_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_at_mod_database_qualifier_variableContext moca_at_mod_database_qualifier_variable() throws RecognitionException {
		Moca_at_mod_database_qualifier_variableContext _localctx = new Moca_at_mod_database_qualifier_variableContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_moca_at_mod_database_qualifier_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9026);
			moca_at_mod_variable();
			setState(9027);
			match(DOT);
			setState(9028);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Moca_integration_variableContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Moca_integration_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_moca_integration_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMoca_integration_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMoca_integration_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMoca_integration_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Moca_integration_variableContext moca_integration_variable() throws RecognitionException {
		Moca_integration_variableContext _localctx = new Moca_integration_variableContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_moca_integration_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9030);
			_la = _input.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(9031);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPrimitive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPrimitive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_primitive_expression);
		try {
			setState(9037);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9033);
				match(DEFAULT);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9034);
				match(NULL);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(9035);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9036);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(MocaSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MocaSqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MocaSqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_case_expression);
		int _la;
		try {
			setState(9064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9039);
				match(CASE);
				setState(9040);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(9042); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9041);
					switch_section();
					}
					}
					setState(9044); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(9048);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(9046);
					match(ELSE);
					setState(9047);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(9050);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9052);
				match(CASE);
				setState(9054); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9053);
					switch_search_condition_section();
					}
					}
					setState(9056); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(9060);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(9058);
					match(ELSE);
					setState(9059);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(9062);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operator_expressionContext extends ParserRuleContext {
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUnary_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUnary_operator_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUnary_operator_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_operator_expressionContext unary_operator_expression() throws RecognitionException {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_unary_operator_expression);
		int _la;
		try {
			setState(9070);
			switch (_input.LA(1)) {
			case BIT_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9066);
				match(BIT_NOT);
				setState(9067);
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9068);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9069);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBracket_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBracket_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_bracket_expression);
		try {
			setState(9080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9072);
				match(LR_BRACKET);
				setState(9073);
				expression(0);
				setState(9074);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9076);
				match(LR_BRACKET);
				setState(9077);
				subquery();
				setState(9078);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitConstant_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitConstant_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_constant_expression);
		try {
			setState(9090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9082);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9083);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9084);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9085);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9086);
				match(LR_BRACKET);
				setState(9087);
				constant_expression();
				setState(9088);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9092);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(MocaSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(MocaSqlParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWith_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWith_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_with_expression);
		int _la;
		try {
			setState(9120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9094);
				match(WITH);
				setState(9097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1274,_ctx) ) {
				case 1:
					{
					setState(9095);
					match(XMLNAMESPACES);
					setState(9096);
					match(COMMA);
					}
					break;
				}
				setState(9099);
				common_table_expression();
				setState(9104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9100);
					match(COMMA);
					setState(9101);
					common_table_expression();
					}
					}
					setState(9106);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9107);
				match(WITH);
				setState(9108);
				match(BLOCKING_HIERARCHY);
				setState(9113);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(9109);
					match(LR_BRACKET);
					setState(9110);
					full_column_name_list();
					setState(9111);
					match(RR_BRACKET);
					}
				}

				setState(9115);
				match(AS);
				setState(9116);
				match(LR_BRACKET);
				setState(9117);
				select_statement();
				setState(9118);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCommon_table_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCommon_table_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9122);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(9127);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(9123);
				match(LR_BRACKET);
				setState(9124);
				column_name_list();
				setState(9125);
				match(RR_BRACKET);
				}
			}

			setState(9129);
			match(AS);
			setState(9130);
			match(LR_BRACKET);
			setState(9131);
			select_statement();
			setState(9132);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUpdate_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUpdate_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_update_elem);
		try {
			setState(9150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9136);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(9134);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(9135);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9140);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(9138);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9139);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9142);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9143);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(9144);
				match(DOT);
				setState(9145);
				((Update_elemContext)_localctx).method_name = id();
				setState(9146);
				match(LR_BRACKET);
				setState(9147);
				expression_list();
				setState(9148);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_listContext extends ParserRuleContext {
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_listContext search_condition_list() throws RecognitionException {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_search_condition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9152);
			search_condition();
			setState(9157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9153);
				match(COMMA);
				setState(9154);
				search_condition();
				}
				}
				setState(9159);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_andContext> search_condition_and() {
			return getRuleContexts(Search_condition_andContext.class);
		}
		public Search_condition_andContext search_condition_and(int i) {
			return getRuleContext(Search_condition_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(MocaSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(MocaSqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9160);
			search_condition_and();
			setState(9165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(9161);
				match(OR);
				setState(9162);
				search_condition_and();
				}
				}
				setState(9167);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_andContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MocaSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MocaSqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_andContext search_condition_and() throws RecognitionException {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_search_condition_and);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9168);
			search_condition_not();
			setState(9173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(9169);
				match(AND);
				setState(9170);
				search_condition_not();
				}
				}
				setState(9175);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSearch_condition_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSearch_condition_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSearch_condition_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9177);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(9176);
				match(NOT);
				}
			}

			setState(9179);
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(MocaSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(MocaSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(MocaSqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(MocaSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(MocaSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(MocaSqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(MocaSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Moca_at_plus_variablesContext moca_at_plus_variables() {
			return getRuleContext(Moca_at_plus_variablesContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_predicate);
		int _la;
		try {
			setState(9237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1291,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9181);
				match(EXISTS);
				setState(9182);
				match(LR_BRACKET);
				setState(9183);
				subquery();
				setState(9184);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9186);
				expression(0);
				setState(9187);
				comparison_operator();
				setState(9188);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9190);
				expression(0);
				setState(9191);
				comparison_operator();
				setState(9192);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9193);
				match(LR_BRACKET);
				setState(9194);
				subquery();
				setState(9195);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9197);
				expression(0);
				setState(9199);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9198);
					match(NOT);
					}
				}

				setState(9201);
				match(BETWEEN);
				setState(9202);
				expression(0);
				setState(9203);
				match(AND);
				setState(9204);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9206);
				expression(0);
				setState(9208);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9207);
					match(NOT);
					}
				}

				setState(9210);
				match(IN);
				setState(9211);
				match(LR_BRACKET);
				setState(9214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1288,_ctx) ) {
				case 1:
					{
					setState(9212);
					subquery();
					}
					break;
				case 2:
					{
					setState(9213);
					expression_list();
					}
					break;
				}
				setState(9216);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9218);
				expression(0);
				setState(9220);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9219);
					match(NOT);
					}
				}

				setState(9222);
				match(LIKE);
				setState(9223);
				expression(0);
				setState(9226);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(9224);
					match(ESCAPE);
					setState(9225);
					expression(0);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9228);
				expression(0);
				setState(9229);
				match(IS);
				setState(9230);
				null_notnull();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9232);
				moca_at_plus_variables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9233);
				match(LR_BRACKET);
				setState(9234);
				search_condition();
				setState(9235);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public List<Sql_unionContext> sql_union() {
			return getRuleContexts(Sql_unionContext.class);
		}
		public Sql_unionContext sql_union(int i) {
			return getRuleContext(Sql_unionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQuery_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQuery_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_query_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9244);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(9239);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(9240);
				match(LR_BRACKET);
				setState(9241);
				query_expression();
				setState(9242);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9249);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1293,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9246);
					sql_union();
					}
					} 
				}
				setState(9251);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1293,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_unionContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(MocaSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(MocaSqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(MocaSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public Sql_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSql_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSql_union(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSql_union(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_unionContext sql_union() throws RecognitionException {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_sql_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9258);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(9252);
				match(UNION);
				setState(9254);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9253);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(9256);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(9257);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9265);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(9260);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(9261);
				match(LR_BRACKET);
				setState(9262);
				query_expression();
				setState(9263);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(MocaSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MocaSqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MocaSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(MocaSqlParser.HAVING, 0); }
		public List<TerminalNode> ALL() { return getTokens(MocaSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(MocaSqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(MocaSqlParser.DISTINCT, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9267);
			match(SELECT);
			setState(9269);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(9268);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(9272);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(9271);
				top_clause();
				}
			}

			setState(9274);
			select_list();
			setState(9277);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(9275);
				match(INTO);
				setState(9276);
				table_name();
				}
			}

			setState(9281);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(9279);
				match(FROM);
				setState(9280);
				table_sources();
				}
			}

			setState(9285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1301,_ctx) ) {
			case 1:
				{
				setState(9283);
				match(WHERE);
				setState(9284);
				((Query_specificationContext)_localctx).where = search_condition();
				}
				break;
			}
			setState(9300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1304,_ctx) ) {
			case 1:
				{
				setState(9287);
				match(GROUP);
				setState(9288);
				match(BY);
				setState(9290);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9289);
					match(ALL);
					}
				}

				setState(9292);
				group_by_item();
				setState(9297);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1303,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9293);
						match(COMMA);
						setState(9294);
						group_by_item();
						}
						} 
					}
					setState(9299);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1303,_ctx);
				}
				}
				break;
			}
			setState(9304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1305,_ctx) ) {
			case 1:
				{
				setState(9302);
				match(HAVING);
				setState(9303);
				((Query_specificationContext)_localctx).having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(MocaSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(MocaSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9306);
			match(TOP);
			setState(9309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1306,_ctx) ) {
			case 1:
				{
				setState(9307);
				top_percent();
				}
				break;
			case 2:
				{
				setState(9308);
				top_count();
				}
				break;
			}
			setState(9313);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9311);
				match(WITH);
				setState(9312);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_percentContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(MocaSqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(MocaSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(MocaSqlParser.FLOAT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTop_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTop_percent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTop_percent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_top_percent);
		int _la;
		try {
			setState(9322);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9315);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9316);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9317);
				match(LR_BRACKET);
				setState(9318);
				expression(0);
				setState(9319);
				match(RR_BRACKET);
				setState(9320);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTop_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTop_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTop_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_top_count);
		try {
			setState(9329);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9324);
				match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9325);
				match(LR_BRACKET);
				setState(9326);
				expression(0);
				setState(9327);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MocaSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(MocaSqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(MocaSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(MocaSqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MocaSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MocaSqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(MocaSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(MocaSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9331);
			match(ORDER);
			setState(9332);
			match(BY);
			setState(9333);
			order_by_expression();
			setState(9338);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1310,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9334);
					match(COMMA);
					setState(9335);
					order_by_expression();
					}
					} 
				}
				setState(9340);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1310,_ctx);
			}
			setState(9352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1312,_ctx) ) {
			case 1:
				{
				setState(9341);
				match(OFFSET);
				setState(9342);
				expression(0);
				setState(9343);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1311,_ctx) ) {
				case 1:
					{
					setState(9344);
					match(FETCH);
					setState(9345);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(9346);
					expression(0);
					setState(9347);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(9348);
					match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(MocaSqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode RAW() { return getToken(MocaSqlParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode ELEMENTS() { return getToken(MocaSqlParser.ELEMENTS, 0); }
		public TerminalNode XSINIL() { return getToken(MocaSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(MocaSqlParser.ABSENT, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode XMLDATA() { return getToken(MocaSqlParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(MocaSqlParser.XMLSCHEMA, 0); }
		public TerminalNode EXPLICIT() { return getToken(MocaSqlParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode JSON() { return getToken(MocaSqlParser.JSON, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(MocaSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(MocaSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(9442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9354);
				match(FOR);
				setState(9355);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9356);
				match(FOR);
				setState(9357);
				match(XML);
				setState(9365);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(9358);
					match(RAW);
					setState(9362);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1313,_ctx) ) {
					case 1:
						{
						setState(9359);
						match(LR_BRACKET);
						setState(9360);
						match(STRING);
						setState(9361);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					setState(9364);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9370);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1315,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9367);
						xml_common_directives();
						}
						} 
					}
					setState(9372);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1315,_ctx);
				}
				setState(9383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1318,_ctx) ) {
				case 1:
					{
					setState(9373);
					match(COMMA);
					setState(9381);
					switch (_input.LA(1)) {
					case XMLDATA:
						{
						setState(9374);
						match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						setState(9375);
						match(XMLSCHEMA);
						setState(9379);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1316,_ctx) ) {
						case 1:
							{
							setState(9376);
							match(LR_BRACKET);
							setState(9377);
							match(STRING);
							setState(9378);
							match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(9388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1319,_ctx) ) {
				case 1:
					{
					setState(9385);
					match(COMMA);
					setState(9386);
					match(ELEMENTS);
					setState(9387);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9390);
				match(FOR);
				setState(9391);
				match(XML);
				setState(9392);
				match(EXPLICIT);
				setState(9396);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1320,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9393);
						xml_common_directives();
						}
						} 
					}
					setState(9398);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1320,_ctx);
				}
				setState(9401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1321,_ctx) ) {
				case 1:
					{
					setState(9399);
					match(COMMA);
					setState(9400);
					match(XMLDATA);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9403);
				match(FOR);
				setState(9404);
				match(XML);
				setState(9405);
				match(PATH);
				setState(9409);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1322,_ctx) ) {
				case 1:
					{
					setState(9406);
					match(LR_BRACKET);
					setState(9407);
					match(STRING);
					setState(9408);
					match(RR_BRACKET);
					}
					break;
				}
				setState(9414);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1323,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9411);
						xml_common_directives();
						}
						} 
					}
					setState(9416);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1323,_ctx);
				}
				setState(9420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1324,_ctx) ) {
				case 1:
					{
					setState(9417);
					match(COMMA);
					setState(9418);
					match(ELEMENTS);
					setState(9419);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9422);
				match(FOR);
				setState(9423);
				match(JSON);
				setState(9424);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9432);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1326,_ctx) ) {
				case 1:
					{
					setState(9425);
					match(COMMA);
					setState(9426);
					match(ROOT);
					setState(9430);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1325,_ctx) ) {
					case 1:
						{
						setState(9427);
						match(LR_BRACKET);
						setState(9428);
						match(STRING);
						setState(9429);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(9436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1327,_ctx) ) {
				case 1:
					{
					setState(9434);
					match(COMMA);
					setState(9435);
					match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				setState(9440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1328,_ctx) ) {
				case 1:
					{
					setState(9438);
					match(COMMA);
					setState(9439);
					match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode BINARY_BASE64() { return getToken(MocaSqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXml_common_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXml_common_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXml_common_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_xml_common_directives);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9444);
			match(COMMA);
			setState(9453);
			switch (_input.LA(1)) {
			case BINARY_BASE64:
				{
				setState(9445);
				match(BINARY_BASE64);
				}
				break;
			case TYPE:
				{
				setState(9446);
				match(TYPE);
				}
				break;
			case ROOT:
				{
				setState(9447);
				match(ROOT);
				setState(9451);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1330,_ctx) ) {
				case 1:
					{
					setState(9448);
					match(LR_BRACKET);
					setState(9449);
					match(STRING);
					setState(9450);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MocaSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MocaSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOrder_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOrder_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9455);
			expression(0);
			setState(9457);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(9456);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGroup_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGroup_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9459);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(MocaSqlParser.OPTION, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOption_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOption_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOption_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9461);
			match(OPTION);
			setState(9462);
			match(LR_BRACKET);
			setState(9463);
			option();
			setState(9468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9464);
				match(COMMA);
				setState(9465);
				option();
				}
				}
				setState(9470);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9471);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(MocaSqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(MocaSqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(MocaSqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(MocaSqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(MocaSqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(MocaSqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(MocaSqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(MocaSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(MocaSqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(MocaSqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(MocaSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(MocaSqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MocaSqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(MocaSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(MocaSqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(MocaSqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(MocaSqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_option);
		int _la;
		try {
			setState(9518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9473);
				match(FAST);
				setState(9474);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9475);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9476);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9477);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9478);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9479);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(9480);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9481);
				match(EXPAND);
				setState(9482);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9483);
				match(FORCE);
				setState(9484);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9485);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9486);
				match(KEEP);
				setState(9487);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9488);
				match(KEEPFIXED);
				setState(9489);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9490);
				match(MAXDOP);
				setState(9491);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9492);
				match(MAXRECURSION);
				setState(9493);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9494);
				match(OPTIMIZE);
				setState(9495);
				match(FOR);
				setState(9496);
				match(LR_BRACKET);
				setState(9497);
				optimize_for_arg();
				setState(9502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9498);
					match(COMMA);
					setState(9499);
					optimize_for_arg();
					}
					}
					setState(9504);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9505);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9507);
				match(OPTIMIZE);
				setState(9508);
				match(FOR);
				setState(9509);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9510);
				match(PARAMETERIZATION);
				setState(9511);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9512);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9513);
				match(ROBUST);
				setState(9514);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9515);
				match(USE);
				setState(9516);
				match(PLAN);
				setState(9517);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOptimize_for_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOptimize_for_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOptimize_for_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9520);
			match(LOCAL_ID);
			setState(9527);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(9521);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(9522);
				match(EQUAL);
				setState(9525);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(9523);
					constant();
					}
					break;
				case NULL:
					{
					setState(9524);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9529);
			select_list_elem();
			setState(9534);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1338,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9530);
					match(COMMA);
					setState(9531);
					select_list_elem();
					}
					} 
				}
				setState(9536);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1338,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_method_argumentsContext extends ParserRuleContext {
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_method_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUdt_method_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUdt_method_arguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUdt_method_arguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udt_method_argumentsContext udt_method_arguments() throws RecognitionException {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_udt_method_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9537);
			match(LR_BRACKET);
			setState(9538);
			execute_var_string();
			setState(9543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9539);
				match(COMMA);
				setState(9540);
				execute_var_string();
				}
				}
				setState(9545);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9546);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public AsteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAsterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAsterisk(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAsterisk(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskContext asterisk() throws RecognitionException {
		AsteriskContext _localctx = new AsteriskContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_asterisk);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9551);
			_la = _input.LA(1);
			if (_la==BLOCKING_HIERARCHY || _la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
				{
				setState(9548);
				table_name();
				setState(9549);
				match(DOT);
				}
			}

			setState(9553);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_elemContext extends ParserRuleContext {
		public IdContext column_name;
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(MocaSqlParser.ROWGUID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9568);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOLLAR:
			case URL:
				{
				setState(9558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1341,_ctx) ) {
				case 1:
					{
					setState(9555);
					table_name();
					setState(9556);
					match(DOT);
					}
					break;
				}
				setState(9565);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1342,_ctx) ) {
				case 1:
					{
					setState(9560);
					((Column_elemContext)_localctx).column_name = id();
					}
					break;
				case 2:
					{
					setState(9561);
					match(DOLLAR);
					setState(9562);
					match(IDENTITY);
					}
					break;
				case 3:
					{
					setState(9563);
					match(DOLLAR);
					setState(9564);
					match(ROWGUID);
					}
					break;
				}
				}
				break;
			case NULL:
				{
				setState(9567);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9571);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1344,_ctx) ) {
			case 1:
				{
				setState(9570);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return getRuleContext(Udt_method_argumentsContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUdt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUdt_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUdt_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udt_elemContext udt_elem() throws RecognitionException {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_udt_elem);
		try {
			setState(9590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9573);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(9574);
				match(DOT);
				setState(9575);
				((Udt_elemContext)_localctx).non_static_attr = id();
				setState(9576);
				udt_method_arguments();
				setState(9578);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1345,_ctx) ) {
				case 1:
					{
					setState(9577);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9580);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(9581);
				match(COLON);
				setState(9582);
				match(COLON);
				setState(9583);
				((Udt_elemContext)_localctx).static_attr = id();
				setState(9585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1346,_ctx) ) {
				case 1:
					{
					setState(9584);
					udt_method_arguments();
					}
					break;
				}
				setState(9588);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1347,_ctx) ) {
				case 1:
					{
					setState(9587);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_elemContext extends ParserRuleContext {
		public Token eq;
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExpression_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExpression_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExpression_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_expression_elem);
		try {
			setState(9600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1350,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9592);
				column_alias();
				setState(9593);
				((Expression_elemContext)_localctx).eq = match(EQUAL);
				setState(9594);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9596);
				expression(0);
				setState(9598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1349,_ctx) ) {
				case 1:
					{
					setState(9597);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public Udt_elemContext udt_elem() {
			return getRuleContext(Udt_elemContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSelect_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSelect_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_select_list_elem);
		try {
			setState(9606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9602);
				asterisk();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9603);
				column_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9604);
				udt_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9605);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_sources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_sources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_table_sources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9608);
			table_source();
			setState(9613);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1352,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9609);
					match(COMMA);
					setState(9610);
					table_source();
					}
					} 
				}
				setState(9615);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1352,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_table_source);
		try {
			setState(9621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9616);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9617);
				match(LR_BRACKET);
				setState(9618);
				table_source_item_joined();
				setState(9619);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_source_item_joined(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_source_item_joined(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_source_item_joined(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9623);
			table_source_item();
			setState(9627);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1354,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9624);
					join_part();
					}
					} 
				}
				setState(9629);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1354,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_source_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_source_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_source_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_table_source_item);
		try {
			setState(9679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1366,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9630);
				table_name_with_hint();
				setState(9632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1355,_ctx) ) {
				case 1:
					{
					setState(9631);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9634);
				full_table_name();
				setState(9636);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1356,_ctx) ) {
				case 1:
					{
					setState(9635);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9638);
				rowset_function();
				setState(9640);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1357,_ctx) ) {
				case 1:
					{
					setState(9639);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9642);
				derived_table();
				setState(9647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1359,_ctx) ) {
				case 1:
					{
					setState(9643);
					as_table_alias();
					setState(9645);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1358,_ctx) ) {
					case 1:
						{
						setState(9644);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9649);
				change_table();
				setState(9650);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9652);
				function_call();
				setState(9657);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1361,_ctx) ) {
				case 1:
					{
					setState(9653);
					as_table_alias();
					setState(9655);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1360,_ctx) ) {
					case 1:
						{
						setState(9654);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9659);
				match(LOCAL_ID);
				setState(9661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1362,_ctx) ) {
				case 1:
					{
					setState(9660);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9663);
				match(LOCAL_ID);
				setState(9664);
				match(DOT);
				setState(9665);
				function_call();
				setState(9670);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1364,_ctx) ) {
				case 1:
					{
					setState(9666);
					as_table_alias();
					setState(9668);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1363,_ctx) ) {
					case 1:
						{
						setState(9667);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9672);
				open_xml();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9673);
				match(COLON);
				setState(9674);
				match(COLON);
				setState(9675);
				function_call();
				setState(9677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1365,_ctx) ) {
				case 1:
					{
					setState(9676);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(MocaSqlParser.OPENXML, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOpen_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOpen_xml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOpen_xml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9681);
			match(OPENXML);
			setState(9682);
			match(LR_BRACKET);
			setState(9683);
			expression(0);
			setState(9684);
			match(COMMA);
			setState(9685);
			expression(0);
			setState(9688);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9686);
				match(COMMA);
				setState(9687);
				expression(0);
				}
			}

			setState(9690);
			match(RR_BRACKET);
			setState(9696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1368,_ctx) ) {
			case 1:
				{
				setState(9691);
				match(WITH);
				setState(9692);
				match(LR_BRACKET);
				setState(9693);
				schema_declaration();
				setState(9694);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSchema_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSchema_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSchema_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9698);
			column_declaration();
			setState(9703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9699);
				match(COMMA);
				setState(9700);
				column_declaration();
				}
				}
				setState(9705);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9706);
			match(ID);
			setState(9707);
			data_type();
			setState(9709);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(9708);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode CHANGETABLE() { return getToken(MocaSqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(MocaSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterChange_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitChange_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitChange_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9711);
			match(CHANGETABLE);
			setState(9712);
			match(LR_BRACKET);
			setState(9713);
			match(CHANGES);
			setState(9714);
			table_name();
			setState(9715);
			match(COMMA);
			setState(9716);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(9717);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Token join_type;
		public Token join_hint;
		public TerminalNode JOIN() { return getToken(MocaSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MocaSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MocaSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(MocaSqlParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(MocaSqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(MocaSqlParser.OUTER, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(MocaSqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode CROSS() { return getToken(MocaSqlParser.CROSS, 0); }
		public TerminalNode APPLY() { return getToken(MocaSqlParser.APPLY, 0); }
		public TerminalNode PIVOT() { return getToken(MocaSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(MocaSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterJoin_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitJoin_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitJoin_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_join_part);
		int _la;
		try {
			setState(9753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9726);
				switch (_input.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					setState(9720);
					_la = _input.LA(1);
					if (_la==INNER) {
						{
						setState(9719);
						match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(9722);
					((Join_partContext)_localctx).join_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						((Join_partContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(9724);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(9723);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9729);
				_la = _input.LA(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					setState(9728);
					((Join_partContext)_localctx).join_hint = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						((Join_partContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(9731);
				match(JOIN);
				setState(9732);
				table_source();
				setState(9733);
				match(ON);
				setState(9734);
				search_condition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9736);
				match(CROSS);
				setState(9737);
				match(JOIN);
				setState(9738);
				table_source();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9739);
				match(CROSS);
				setState(9740);
				match(APPLY);
				setState(9741);
				table_source();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9742);
				match(OUTER);
				setState(9743);
				match(APPLY);
				setState(9744);
				table_source();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9745);
				match(PIVOT);
				setState(9746);
				pivot_clause();
				setState(9747);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9749);
				match(UNPIVOT);
				setState(9750);
				unpivot_clause();
				setState(9751);
				as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9755);
			match(LR_BRACKET);
			setState(9756);
			aggregate_windowed_function();
			setState(9757);
			match(FOR);
			setState(9758);
			full_column_name();
			setState(9759);
			match(IN);
			setState(9760);
			column_alias_list();
			setState(9761);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MocaSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(MocaSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9763);
			match(LR_BRACKET);
			setState(9764);
			expression(0);
			setState(9765);
			match(FOR);
			setState(9766);
			full_column_name();
			setState(9767);
			match(IN);
			setState(9768);
			match(LR_BRACKET);
			setState(9769);
			full_column_name_list();
			setState(9770);
			match(RR_BRACKET);
			setState(9771);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFull_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFull_column_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFull_column_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_full_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9773);
			full_column_name();
			setState(9778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9774);
				match(COMMA);
				setState(9775);
				full_column_name();
				}
				}
				setState(9780);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_name_with_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_name_with_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_name_with_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9781);
			table_name();
			setState(9783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1377,_ctx) ) {
			case 1:
				{
				setState(9782);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(MocaSqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MocaSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MocaSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(MocaSqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRowset_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRowset_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRowset_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_rowset_function);
		int _la;
		try {
			setState(9811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(9785);
				match(OPENROWSET);
				setState(9786);
				match(LR_BRACKET);
				setState(9787);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(9788);
				match(COMMA);
				setState(9789);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(9790);
				match(COMMA);
				setState(9791);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(9792);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(9793);
				match(OPENROWSET);
				setState(9794);
				match(LR_BRACKET);
				setState(9795);
				match(BULK);
				setState(9796);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(9797);
				match(COMMA);
				setState(9807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1379,_ctx) ) {
				case 1:
					{
					setState(9798);
					bulk_option();
					setState(9803);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(9799);
						match(COMMA);
						setState(9800);
						bulk_option();
						}
						}
						setState(9805);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(9806);
					id();
					}
					break;
				}
				setState(9809);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBulk_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBulk_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBulk_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9813);
			id();
			setState(9814);
			match(EQUAL);
			setState(9815);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDerived_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_derived_table);
		try {
			setState(9827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9817);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9818);
				match(LR_BRACKET);
				setState(9819);
				subquery();
				setState(9820);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9822);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9823);
				match(LR_BRACKET);
				setState(9824);
				table_value_constructor();
				setState(9825);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CURRENT_USERContext extends Function_callContext {
		public TerminalNode CURRENT_USER() { return getToken(MocaSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCURRENT_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCURRENT_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCURRENT_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEADDContext extends Function_callContext {
		public TerminalNode DATEADD() { return getToken(MocaSqlParser.DATEADD, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEADDContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATEADD(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATEADD(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATEADD(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CHECKSUMContext extends Function_callContext {
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCHECKSUM(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCHECKSUM(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CURRENT_TIMESTAMPContext extends Function_callContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MocaSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCURRENT_TIMESTAMP(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCURRENT_TIMESTAMP(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCURRENT_TIMESTAMP(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BINARY_CHECKSUMContext extends Function_callContext {
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBINARY_CHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBINARY_CHECKSUM(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBINARY_CHECKSUM(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IFFContext extends Function_callContext {
		public TerminalNode IIF() { return getToken(MocaSqlParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public IFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SYSTEM_USERContext extends Function_callContext {
		public TerminalNode SYSTEM_USER() { return getToken(MocaSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSYSTEM_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSYSTEM_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSYSTEM_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NULLIFContext extends Function_callContext {
		public TerminalNode NULLIF() { return getToken(MocaSqlParser.NULLIF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NULLIFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNULLIF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNULLIF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNULLIF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SESSION_USERContext extends Function_callContext {
		public TerminalNode SESSION_USER() { return getToken(MocaSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSESSION_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSESSION_USER(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSESSION_USER(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CONVERTContext extends Function_callContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public TerminalNode CONVERT() { return getToken(MocaSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CONVERTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCONVERT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCONVERT(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCONVERT(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class XML_DATA_TYPE_FUNCContext extends Function_callContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public XML_DATA_TYPE_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXML_DATA_TYPE_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class COALESCEContext extends Function_callContext {
		public TerminalNode COALESCE() { return getToken(MocaSqlParser.COALESCE, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public COALESCEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCOALESCE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCOALESCE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCOALESCE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CASTContext extends Function_callContext {
		public TerminalNode CAST() { return getToken(MocaSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public CASTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCAST(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCAST(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCAST(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MIN_ACTIVE_ROWVERSIONContext extends Function_callContext {
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(MocaSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitMIN_ACTIVE_ROWVERSION(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SCALAR_FUNCTIONContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSCALAR_FUNCTION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSCALAR_FUNCTION(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSCALAR_FUNCTION(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEPARTContext extends Function_callContext {
		public TerminalNode DATEPART() { return getToken(MocaSqlParser.DATEPART, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATEPARTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATEPART(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATEPART(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATEPART(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class STUFFContext extends Function_callContext {
		public TerminalNode STUFF() { return getToken(MocaSqlParser.STUFF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public STUFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSTUFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSTUFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSTUFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAGGREGATE_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IDENTITYContext extends Function_callContext {
		public Token seed;
		public Token increment;
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIDENTITY(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIDENTITY(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIDENTITY(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RANKING_WINDOWED_FUNCContext extends Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRANKING_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATENAMEContext extends Function_callContext {
		public TerminalNode DATENAME() { return getToken(MocaSqlParser.DATENAME, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATENAMEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATENAME(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATENAME(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATENAME(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GETUTCDATEContext extends Function_callContext {
		public TerminalNode GETUTCDATE() { return getToken(MocaSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGETUTCDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGETUTCDATE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGETUTCDATE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return getRuleContext(Analytic_windowed_functionContext.class,0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitANALYTIC_WINDOWED_FUNC(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ISNULLContext extends Function_callContext {
		public TerminalNode ISNULL() { return getToken(MocaSqlParser.ISNULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ISNULLContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterISNULL(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitISNULL(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitISNULL(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DATEDIFFContext extends Function_callContext {
		public TerminalNode DATEDIFF() { return getToken(MocaSqlParser.DATEDIFF, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEDIFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDATEDIFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDATEDIFF(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDATEDIFF(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GETDATEContext extends Function_callContext {
		public TerminalNode GETDATE() { return getToken(MocaSqlParser.GETDATE, 0); }
		public GETDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGETDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGETDATE(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGETDATE(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class STRINGAGGContext extends Function_callContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public TerminalNode STRING_AGG() { return getToken(MocaSqlParser.STRING_AGG, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(MocaSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public STRINGAGGContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSTRINGAGG(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSTRINGAGG(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSTRINGAGG(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_function_call);
		int _la;
		try {
			setState(9975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1387,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9829);
				match(BINARY_CHECKSUM);
				setState(9830);
				match(LR_BRACKET);
				setState(9831);
				match(STAR);
				setState(9832);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new CASTContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9833);
				match(CAST);
				setState(9834);
				match(LR_BRACKET);
				setState(9835);
				expression(0);
				setState(9836);
				match(AS);
				setState(9837);
				data_type();
				setState(9838);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new CONVERTContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9840);
				match(CONVERT);
				setState(9841);
				match(LR_BRACKET);
				setState(9842);
				((CONVERTContext)_localctx).convert_data_type = data_type();
				setState(9843);
				match(COMMA);
				setState(9844);
				((CONVERTContext)_localctx).convert_expression = expression(0);
				setState(9847);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9845);
					match(COMMA);
					setState(9846);
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				setState(9849);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9851);
				match(CHECKSUM);
				setState(9852);
				match(LR_BRACKET);
				setState(9853);
				match(STAR);
				setState(9854);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new COALESCEContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9855);
				match(COALESCE);
				setState(9856);
				match(LR_BRACKET);
				setState(9857);
				expression_list();
				setState(9858);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9860);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 7:
				_localctx = new CURRENT_USERContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9861);
				match(CURRENT_USER);
				}
				break;
			case 8:
				_localctx = new DATEADDContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9862);
				match(DATEADD);
				setState(9863);
				match(LR_BRACKET);
				setState(9864);
				match(ID);
				setState(9865);
				match(COMMA);
				setState(9866);
				expression(0);
				setState(9867);
				match(COMMA);
				setState(9868);
				expression(0);
				setState(9869);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new DATEDIFFContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9871);
				match(DATEDIFF);
				setState(9872);
				match(LR_BRACKET);
				setState(9873);
				match(ID);
				setState(9874);
				match(COMMA);
				setState(9875);
				expression(0);
				setState(9876);
				match(COMMA);
				setState(9877);
				expression(0);
				setState(9878);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new DATENAMEContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9880);
				match(DATENAME);
				setState(9881);
				match(LR_BRACKET);
				setState(9882);
				match(ID);
				setState(9883);
				match(COMMA);
				setState(9884);
				expression(0);
				setState(9885);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new DATEPARTContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9887);
				match(DATEPART);
				setState(9888);
				match(LR_BRACKET);
				setState(9889);
				match(ID);
				setState(9890);
				match(COMMA);
				setState(9891);
				expression(0);
				setState(9892);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new GETDATEContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9894);
				match(GETDATE);
				setState(9895);
				match(LR_BRACKET);
				setState(9896);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new GETUTCDATEContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9897);
				match(GETUTCDATE);
				setState(9898);
				match(LR_BRACKET);
				setState(9899);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new IDENTITYContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9900);
				match(IDENTITY);
				setState(9901);
				match(LR_BRACKET);
				setState(9902);
				data_type();
				setState(9905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1383,_ctx) ) {
				case 1:
					{
					setState(9903);
					match(COMMA);
					setState(9904);
					((IDENTITYContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(9909);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9907);
					match(COMMA);
					setState(9908);
					((IDENTITYContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(9911);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(9913);
				match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 16:
				_localctx = new NULLIFContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(9914);
				match(NULLIF);
				setState(9915);
				match(LR_BRACKET);
				setState(9916);
				expression(0);
				setState(9917);
				match(COMMA);
				setState(9918);
				expression(0);
				setState(9919);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new STUFFContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(9921);
				match(STUFF);
				setState(9922);
				match(LR_BRACKET);
				setState(9923);
				expression(0);
				setState(9924);
				match(COMMA);
				setState(9925);
				match(DECIMAL);
				setState(9926);
				match(COMMA);
				setState(9927);
				match(DECIMAL);
				setState(9928);
				match(COMMA);
				setState(9929);
				expression(0);
				setState(9930);
				match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new SESSION_USERContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(9932);
				match(SESSION_USER);
				}
				break;
			case 19:
				_localctx = new SYSTEM_USERContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(9933);
				match(SYSTEM_USER);
				}
				break;
			case 20:
				_localctx = new ISNULLContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(9934);
				match(ISNULL);
				setState(9935);
				match(LR_BRACKET);
				setState(9936);
				expression(0);
				setState(9937);
				match(COMMA);
				setState(9938);
				expression(0);
				setState(9939);
				match(RR_BRACKET);
				}
				break;
			case 21:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(9941);
				xml_data_type_methods();
				}
				break;
			case 22:
				_localctx = new IFFContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(9942);
				match(IIF);
				setState(9943);
				match(LR_BRACKET);
				setState(9944);
				search_condition();
				setState(9945);
				match(COMMA);
				setState(9946);
				expression(0);
				setState(9947);
				match(COMMA);
				setState(9948);
				expression(0);
				setState(9949);
				match(RR_BRACKET);
				}
				break;
			case 23:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(9951);
				ranking_windowed_function();
				}
				break;
			case 24:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(9952);
				aggregate_windowed_function();
				}
				break;
			case 25:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(9953);
				analytic_windowed_function();
				}
				break;
			case 26:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(9954);
				scalar_function_name();
				setState(9955);
				match(LR_BRACKET);
				setState(9957);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << BLOCKING_HIERARCHY) | (1L << CALLED) | (1L << CASE) | (1L << COALESCE))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (CONVERT - 71)) | (1L << (CURRENT_TIMESTAMP - 71)) | (1L << (CURRENT_USER - 71)) | (1L << (DATA_COMPRESSION - 71)) | (1L << (DEFAULT - 71)) | (1L << (EVENTDATA - 71)) | (1L << (EXPIREDATE - 71)) | (1L << (FILENAME - 71)) | (1L << (FILLFACTOR - 71)) | (1L << (FORCESEEK - 71)))) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (IDENTITY - 150)) | (1L << (IIF - 150)) | (1L << (INIT - 150)) | (1L << (ISNULL - 150)) | (1L << (KEY - 150)) | (1L << (LEFT - 150)) | (1L << (MASTER - 150)) | (1L << (MAX_MEMORY - 150)))) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (NULL - 223)) | (1L << (NULLIF - 223)) | (1L << (OFFSETS - 223)) | (1L << (OVER - 223)) | (1L << (PAGE - 223)) | (1L << (POLICY - 223)) | (1L << (PRECISION - 223)) | (1L << (PUBLIC - 223)) | (1L << (R - 223)) | (1L << (RAW - 223)) | (1L << (RETURN - 223)) | (1L << (RETURNS - 223)))) != 0) || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (RIGHT - 287)) | (1L << (ROLE - 287)) | (1L << (ROWCOUNT - 287)) | (1L << (SAFETY - 287)) | (1L << (RULE - 287)) | (1L << (SERVER - 287)) | (1L << (SESSION_USER - 287)) | (1L << (SID - 287)) | (1L << (SOURCE - 287)) | (1L << (SPLIT - 287)) | (1L << (STATE - 287)) | (1L << (START - 287)) | (1L << (STOP - 287)) | (1L << (SYSTEM_USER - 287)) | (1L << (TARGET - 287)) | (1L << (TRAN - 287)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (LOCAL_ID - 750)) | (1L << (MOCA_ENVIRONMENT_VARIABLE - 750)) | (1L << (MOCA_AT_MINUS_VARIABLE - 750)) | (1L << (MOCA_AT_PLUS_VARIABLE - 750)) | (1L << (MOCA_AT_MOD_VARIABLE - 750)) | (1L << (DECIMAL - 750)) | (1L << (ID - 750)) | (1L << (STRING - 750)))) != 0) || ((((_la - 814)) & ~0x3f) == 0 && ((1L << (_la - 814)) & ((1L << (BINARY - 814)) | (1L << (FLOAT - 814)) | (1L << (REAL - 814)) | (1L << (AT - 814)) | (1L << (DOLLAR - 814)) | (1L << (LR_BRACKET - 814)) | (1L << (PLUS - 814)) | (1L << (MINUS - 814)) | (1L << (BIT_NOT - 814)) | (1L << (URL - 814)))) != 0)) {
					{
					setState(9956);
					expression_list();
					}
				}

				setState(9959);
				match(RR_BRACKET);
				}
				break;
			case 27:
				_localctx = new STRINGAGGContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(9961);
				match(STRING_AGG);
				setState(9962);
				match(LR_BRACKET);
				setState(9963);
				((STRINGAGGContext)_localctx).expr = expression(0);
				setState(9964);
				match(COMMA);
				setState(9965);
				((STRINGAGGContext)_localctx).separator = expression(0);
				setState(9966);
				match(RR_BRACKET);
				setState(9973);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1386,_ctx) ) {
				case 1:
					{
					setState(9967);
					match(WITHIN);
					setState(9968);
					match(GROUP);
					setState(9969);
					match(LR_BRACKET);
					setState(9970);
					order_by_clause();
					setState(9971);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterXml_data_type_methods(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitXml_data_type_methods(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitXml_data_type_methods(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_xml_data_type_methods);
		try {
			setState(9982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9977);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9978);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9979);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9980);
				modify_method();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9981);
				nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_methodContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public TerminalNode VALUE() { return getToken(MocaSqlParser.VALUE, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode EVENTDATA() { return getToken(MocaSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public TerminalNode PARAM_NODE() { return getToken(MocaSqlParser.PARAM_NODE, 0); }
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterValue_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitValue_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitValue_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_value_method);
		try {
			setState(10027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1389,_ctx) ) {
				case 1:
					{
					setState(9984);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9985);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9986);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(9987);
					query_method();
					}
					break;
				}
				setState(9990);
				match(DOT);
				setState(9991);
				match(VALUE);
				setState(9992);
				match(LR_BRACKET);
				setState(9993);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(9994);
				match(COMMA);
				setState(9995);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(9996);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1390,_ctx) ) {
				case 1:
					{
					setState(9997);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9998);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9999);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(10000);
					query_method();
					}
					break;
				}
				setState(10003);
				match(DOT);
				setState(10004);
				match(ROW);
				setState(10005);
				match(DOT);
				setState(10006);
				match(VALUE);
				setState(10007);
				match(LR_BRACKET);
				setState(10008);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(10009);
				match(COMMA);
				setState(10010);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(10011);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1391,_ctx) ) {
				case 1:
					{
					setState(10012);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(10013);
					match(ID);
					}
					break;
				case 3:
					{
					setState(10014);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(10015);
					query_method();
					}
					break;
				}
				setState(10018);
				match(DOT);
				setState(10019);
				match(PARAM_NODE);
				setState(10020);
				match(DOT);
				setState(10021);
				match(VALUE);
				setState(10022);
				match(LR_BRACKET);
				setState(10023);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(10024);
				match(COMMA);
				setState(10025);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(10026);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode QUERY() { return getToken(MocaSqlParser.QUERY, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQuery_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQuery_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQuery_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_query_method);
		try {
			setState(10051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1393,_ctx) ) {
				case 1:
					{
					setState(10029);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(10030);
					match(ID);
					}
					break;
				case 3:
					{
					setState(10031);
					full_table_name();
					}
					break;
				}
				setState(10034);
				match(DOT);
				setState(10035);
				match(QUERY);
				setState(10036);
				match(LR_BRACKET);
				setState(10037);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(10038);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10042);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1394,_ctx) ) {
				case 1:
					{
					setState(10039);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(10040);
					match(ID);
					}
					break;
				case 3:
					{
					setState(10041);
					full_table_name();
					}
					break;
				}
				setState(10044);
				match(DOT);
				setState(10045);
				match(ROW);
				setState(10046);
				match(DOT);
				setState(10047);
				match(QUERY);
				setState(10048);
				match(LR_BRACKET);
				setState(10049);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(10050);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode EXIST() { return getToken(MocaSqlParser.EXIST, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExist_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExist_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExist_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_exist_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10053);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(10054);
			match(DOT);
			setState(10055);
			match(EXIST);
			setState(10056);
			match(LR_BRACKET);
			setState(10057);
			((Exist_methodContext)_localctx).xquery = match(STRING);
			setState(10058);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_methodContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterModify_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitModify_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitModify_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_modify_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10060);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(10061);
			match(DOT);
			setState(10062);
			match(MODIFY);
			setState(10063);
			match(LR_BRACKET);
			setState(10064);
			((Modify_methodContext)_localctx).xml_dml = match(STRING);
			setState(10065);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nodes_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode NODES() { return getToken(MocaSqlParser.NODES, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNodes_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNodes_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNodes_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_nodes_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10067);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(10068);
			match(DOT);
			setState(10069);
			match(NODES);
			setState(10070);
			match(LR_BRACKET);
			setState(10071);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(10072);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MocaSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(MocaSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSwitch_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSwitch_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10074);
			match(WHEN);
			setState(10075);
			expression(0);
			setState(10076);
			match(THEN);
			setState(10077);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MocaSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MocaSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSwitch_search_condition_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSwitch_search_condition_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10079);
			match(WHEN);
			setState(10080);
			search_condition();
			setState(10081);
			match(THEN);
			setState(10082);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_column_aliasContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAs_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAs_column_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAs_column_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_column_aliasContext as_column_alias() throws RecognitionException {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_as_column_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10085);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(10084);
				match(AS);
				}
			}

			setState(10087);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MocaSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAs_table_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAs_table_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAs_table_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10090);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(10089);
				match(AS);
				}
			}

			setState(10092);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10094);
			id();
			setState(10096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1398,_ctx) ) {
			case 1:
				{
				setState(10095);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWith_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWith_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWith_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10099);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(10098);
				match(WITH);
				}
			}

			setState(10101);
			match(LR_BRACKET);
			setState(10102);
			table_hint();
			setState(10109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (SERIALIZABLE - 720)) | (1L << (SNAPSHOT - 720)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 720)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(10104);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10103);
					match(COMMA);
					}
				}

				setState(10106);
				table_hint();
				}
				}
				setState(10111);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10112);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterInsert_with_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitInsert_with_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitInsert_with_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10114);
			match(WITH);
			setState(10115);
			match(LR_BRACKET);
			setState(10116);
			table_hint();
			setState(10123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (SERIALIZABLE - 720)) | (1L << (SNAPSHOT - 720)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 720)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(10118);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10117);
					match(COMMA);
					}
				}

				setState(10120);
				table_hint();
				}
				}
				setState(10125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10126);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(MocaSqlParser.INDEX, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(MocaSqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MocaSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MocaSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(MocaSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public List<TerminalNode> ID() { return getTokens(MocaSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(MocaSqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(MocaSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_table_hint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10129);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(10128);
				match(NOEXPAND);
				}
			}

			setState(10179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1410,_ctx) ) {
			case 1:
				{
				setState(10131);
				match(INDEX);
				setState(10151);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(10132);
					match(LR_BRACKET);
					setState(10133);
					index_value();
					setState(10138);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10134);
						match(COMMA);
						setState(10135);
						index_value();
						}
						}
						setState(10140);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10141);
					match(RR_BRACKET);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
				case URL:
					{
					setState(10143);
					index_value();
					setState(10148);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1406,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(10144);
							match(COMMA);
							setState(10145);
							index_value();
							}
							} 
						}
						setState(10150);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1406,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(10153);
				match(INDEX);
				setState(10154);
				match(EQUAL);
				setState(10155);
				index_value();
				}
				break;
			case 3:
				{
				setState(10156);
				match(FORCESEEK);
				setState(10171);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(10157);
					match(LR_BRACKET);
					setState(10158);
					index_value();
					setState(10159);
					match(LR_BRACKET);
					setState(10160);
					match(ID);
					setState(10165);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10161);
						match(COMMA);
						setState(10162);
						match(ID);
						}
						}
						setState(10167);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10168);
					match(RR_BRACKET);
					setState(10169);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(10173);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(10174);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(10175);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(10176);
				match(EQUAL);
				setState(10177);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(10178);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterIndex_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitIndex_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitIndex_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_index_value);
		try {
			setState(10183);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10181);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10182);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_alias_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_alias_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10185);
			match(LR_BRACKET);
			setState(10186);
			column_alias();
			setState(10191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10187);
				match(COMMA);
				setState(10188);
				column_alias();
				}
				}
				setState(10193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10194);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_column_alias);
		try {
			setState(10198);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10196);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10197);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10200);
			match(VALUES);
			setState(10201);
			match(LR_BRACKET);
			setState(10202);
			expression_list();
			setState(10203);
			match(RR_BRACKET);
			setState(10211);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1414,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10204);
					match(COMMA);
					setState(10205);
					match(LR_BRACKET);
					setState(10206);
					expression_list();
					setState(10207);
					match(RR_BRACKET);
					}
					} 
				}
				setState(10213);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1414,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10214);
			expression(0);
			setState(10219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10215);
				match(COMMA);
				setState(10216);
				expression(0);
				}
				}
				setState(10221);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(MocaSqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MocaSqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MocaSqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(MocaSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRanking_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRanking_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRanking_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(10232);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10222);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(10223);
				match(LR_BRACKET);
				setState(10224);
				match(RR_BRACKET);
				setState(10225);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10226);
				match(NTILE);
				setState(10227);
				match(LR_BRACKET);
				setState(10228);
				expression(0);
				setState(10229);
				match(RR_BRACKET);
				setState(10230);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode AVG() { return getToken(MocaSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MocaSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MocaSqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(MocaSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(MocaSqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(MocaSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(MocaSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(MocaSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(MocaSqlParser.COUNT_BIG, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(MocaSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(MocaSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(MocaSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAggregate_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAggregate_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(10266);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10234);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 738)) & ~0x3f) == 0 && ((1L << (_la - 738)) & ((1L << (STDEV - 738)) | (1L << (STDEVP - 738)) | (1L << (SUM - 738)) | (1L << (VAR - 738)) | (1L << (VARP - 738)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(10235);
				match(LR_BRACKET);
				setState(10236);
				all_distinct_expression();
				setState(10237);
				match(RR_BRACKET);
				setState(10239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1417,_ctx) ) {
				case 1:
					{
					setState(10238);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(10241);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(10242);
				match(LR_BRACKET);
				setState(10245);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(10243);
					match(STAR);
					}
					break;
				case T__0:
				case T__1:
				case ALL:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case DISTINCT:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case IIF:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case SYSTEM_USER:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case MOCA_ENVIRONMENT_VARIABLE:
				case MOCA_AT_MINUS_VARIABLE:
				case MOCA_AT_PLUS_VARIABLE:
				case MOCA_AT_MOD_VARIABLE:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case AT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
				case URL:
					{
					setState(10244);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10247);
				match(RR_BRACKET);
				setState(10249);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1419,_ctx) ) {
				case 1:
					{
					setState(10248);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(10251);
				match(CHECKSUM_AGG);
				setState(10252);
				match(LR_BRACKET);
				setState(10253);
				all_distinct_expression();
				setState(10254);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(10256);
				match(GROUPING);
				setState(10257);
				match(LR_BRACKET);
				setState(10258);
				expression(0);
				setState(10259);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(10261);
				match(GROUPING_ID);
				setState(10262);
				match(LR_BRACKET);
				setState(10263);
				expression_list();
				setState(10264);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_windowed_functionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MocaSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MocaSqlParser.LAST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(MocaSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MocaSqlParser.LEAD, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAnalytic_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAnalytic_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAnalytic_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analytic_windowed_functionContext analytic_windowed_function() throws RecognitionException {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_analytic_windowed_function);
		int _la;
		try {
			setState(10288);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10268);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(10269);
				match(LR_BRACKET);
				setState(10270);
				expression(0);
				setState(10271);
				match(RR_BRACKET);
				setState(10272);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(10274);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(10275);
				match(LR_BRACKET);
				setState(10276);
				expression(0);
				setState(10283);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10277);
					match(COMMA);
					setState(10278);
					expression(0);
					setState(10281);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10279);
						match(COMMA);
						setState(10280);
						expression(0);
						}
					}

					}
				}

				setState(10285);
				match(RR_BRACKET);
				setState(10286);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MocaSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MocaSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAll_distinct_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAll_distinct_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAll_distinct_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10291);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(10290);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(10293);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MocaSqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MocaSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10295);
			match(OVER);
			setState(10296);
			match(LR_BRACKET);
			setState(10300);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(10297);
				match(PARTITION);
				setState(10298);
				match(BY);
				setState(10299);
				expression_list();
				}
			}

			setState(10303);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(10302);
				order_by_clause();
				}
			}

			setState(10306);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(10305);
				row_or_range_clause();
				}
			}

			setState(10308);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(MocaSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MocaSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterRow_or_range_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitRow_or_range_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitRow_or_range_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10310);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(10311);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(MocaSqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(MocaSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_window_frame_extent);
		try {
			setState(10319);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10313);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10314);
				match(BETWEEN);
				setState(10315);
				window_frame_bound();
				setState(10316);
				match(AND);
				setState(10317);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_window_frame_bound);
		try {
			setState(10323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10321);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10322);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MocaSqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(MocaSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_preceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_preceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_window_frame_preceding);
		try {
			setState(10331);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10325);
				match(UNBOUNDED);
				setState(10326);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10327);
				match(DECIMAL);
				setState(10328);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(10329);
				match(CURRENT);
				setState(10330);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(MocaSqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWindow_frame_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWindow_frame_following(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWindow_frame_following(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_window_frame_following);
		try {
			setState(10337);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10333);
				match(UNBOUNDED);
				setState(10334);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10335);
				match(DECIMAL);
				setState(10336);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(MocaSqlParser.FILESTREAM, 0); }
		public List<Database_filestream_optionContext> database_filestream_option() {
			return getRuleContexts(Database_filestream_optionContext.class);
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return getRuleContext(Database_filestream_optionContext.class,i);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(MocaSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(MocaSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(MocaSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode DB_CHAINING() { return getToken(MocaSqlParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(MocaSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCreate_database_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCreate_database_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCreate_database_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			setState(10373);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(10339);
				match(FILESTREAM);
				{
				setState(10340);
				database_filestream_option();
				setState(10345);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1432,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(10341);
						match(COMMA);
						setState(10342);
						database_filestream_option();
						}
						} 
					}
					setState(10347);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1432,_ctx);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10348);
				match(DEFAULT_LANGUAGE);
				setState(10349);
				match(EQUAL);
				setState(10352);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(10350);
					id();
					}
					break;
				case STRING:
					{
					setState(10351);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10354);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(10355);
				match(EQUAL);
				setState(10358);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case EXPIREDATE:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case POLICY:
				case PRECISION:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROLE:
				case ROWCOUNT:
				case SAFETY:
				case RULE:
				case SERVER:
				case SID:
				case SOURCE:
				case SPLIT:
				case STATE:
				case START:
				case STOP:
				case TARGET:
				case TRAN:
				case USER:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case URL:
					{
					setState(10356);
					id();
					}
					break;
				case STRING:
					{
					setState(10357);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(10360);
				match(NESTED_TRIGGERS);
				setState(10361);
				match(EQUAL);
				setState(10362);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(10363);
				match(TRANSFORM_NOISE_WORDS);
				setState(10364);
				match(EQUAL);
				setState(10365);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(10366);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(10367);
				match(EQUAL);
				setState(10368);
				match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(10369);
				match(DB_CHAINING);
				setState(10370);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(10371);
				match(TRUSTWORTHY);
				setState(10372);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_filestream_optionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(MocaSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQUAL() { return getToken(MocaSqlParser.EQUAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(MocaSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(MocaSqlParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(MocaSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_filestream_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDatabase_filestream_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDatabase_filestream_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDatabase_filestream_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_filestream_optionContext database_filestream_option() throws RecognitionException {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_database_filestream_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10375);
			match(LR_BRACKET);
			setState(10382);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				setState(10376);
				match(NON_TRANSACTED_ACCESS);
				setState(10377);
				match(EQUAL);
				setState(10378);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				setState(10379);
				match(DIRECTORY_NAME);
				setState(10380);
				match(EQUAL);
				setState(10381);
				match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10384);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_file_specContext extends ParserRuleContext {
		public File_groupContext file_group() {
			return getRuleContext(File_groupContext.class,0);
		}
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDatabase_file_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDatabase_file_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDatabase_file_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_file_specContext database_file_spec() throws RecognitionException {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_database_file_spec);
		try {
			setState(10388);
			switch (_input.LA(1)) {
			case FILEGROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10386);
				file_group();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10387);
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_groupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(MocaSqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<File_specContext> file_spec() {
			return getRuleContexts(File_specContext.class);
		}
		public File_specContext file_spec(int i) {
			return getRuleContext(File_specContext.class,i);
		}
		public List<TerminalNode> CONTAINS() { return getTokens(MocaSqlParser.CONTAINS); }
		public TerminalNode CONTAINS(int i) {
			return getToken(MocaSqlParser.CONTAINS, i);
		}
		public TerminalNode FILESTREAM() { return getToken(MocaSqlParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(MocaSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFile_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFile_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_groupContext file_group() throws RecognitionException {
		File_groupContext _localctx = new File_groupContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_file_group);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10390);
			match(FILEGROUP);
			setState(10391);
			id();
			setState(10394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1438,_ctx) ) {
			case 1:
				{
				setState(10392);
				match(CONTAINS);
				setState(10393);
				match(FILESTREAM);
				}
				break;
			}
			setState(10397);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(10396);
				match(DEFAULT);
				}
			}

			setState(10401);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(10399);
				match(CONTAINS);
				setState(10400);
				match(MEMORY_OPTIMIZED_DATA);
				}
			}

			setState(10403);
			file_spec();
			setState(10408);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1441,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10404);
					match(COMMA);
					setState(10405);
					file_spec();
					}
					} 
				}
				setState(10410);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1441,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public Token file;
		public TerminalNode LR_BRACKET() { return getToken(MocaSqlParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(MocaSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(MocaSqlParser.EQUAL, i);
		}
		public TerminalNode FILENAME() { return getToken(MocaSqlParser.FILENAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MocaSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SIZE() { return getToken(MocaSqlParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(MocaSqlParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(MocaSqlParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(MocaSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFile_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFile_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFile_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10411);
			match(LR_BRACKET);
			setState(10412);
			match(NAME);
			setState(10413);
			match(EQUAL);
			setState(10416);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				{
				setState(10414);
				id();
				}
				break;
			case STRING:
				{
				setState(10415);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10419);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10418);
				match(COMMA);
				}
			}

			setState(10421);
			match(FILENAME);
			setState(10422);
			match(EQUAL);
			setState(10423);
			((File_specContext)_localctx).file = match(STRING);
			setState(10425);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10424);
				match(COMMA);
				}
			}

			setState(10433);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(10427);
				match(SIZE);
				setState(10428);
				match(EQUAL);
				setState(10429);
				file_size();
				setState(10431);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10430);
					match(COMMA);
					}
				}

				}
			}

			setState(10444);
			_la = _input.LA(1);
			if (_la==MAXSIZE) {
				{
				setState(10435);
				match(MAXSIZE);
				setState(10436);
				match(EQUAL);
				setState(10439);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(10437);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(10438);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10442);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10441);
					match(COMMA);
					}
				}

				}
			}

			setState(10452);
			_la = _input.LA(1);
			if (_la==FILEGROWTH) {
				{
				setState(10446);
				match(FILEGROWTH);
				setState(10447);
				match(EQUAL);
				setState(10448);
				file_size();
				setState(10450);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10449);
					match(COMMA);
					}
				}

				}
			}

			setState(10454);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEntity_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEntity_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEntity_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_nameContext entity_name() throws RecognitionException {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_entity_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1453,_ctx) ) {
			case 1:
				{
				setState(10456);
				((Entity_nameContext)_localctx).server = id();
				setState(10457);
				match(DOT);
				setState(10458);
				((Entity_nameContext)_localctx).database = id();
				setState(10459);
				match(DOT);
				setState(10460);
				((Entity_nameContext)_localctx).schema = id();
				setState(10461);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(10463);
				((Entity_nameContext)_localctx).database = id();
				setState(10464);
				match(DOT);
				setState(10466);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
					{
					setState(10465);
					((Entity_nameContext)_localctx).schema = id();
					}
				}

				setState(10468);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(10470);
				((Entity_nameContext)_localctx).schema = id();
				setState(10471);
				match(DOT);
				}
				break;
			}
			setState(10475);
			((Entity_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_azure_dwContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEntity_name_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEntity_name_for_azure_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEntity_name_for_azure_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_name_for_azure_dwContext entity_name_for_azure_dw() throws RecognitionException {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_entity_name_for_azure_dw);
		try {
			setState(10482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1454,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10477);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10478);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				setState(10479);
				match(DOT);
				setState(10480);
				((Entity_name_for_azure_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_parallel_dwContext extends ParserRuleContext {
		public IdContext schema_database;
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEntity_name_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEntity_name_for_parallel_dw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEntity_name_for_parallel_dw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() throws RecognitionException {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_entity_name_for_parallel_dw);
		try {
			setState(10489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10484);
				((Entity_name_for_parallel_dwContext)_localctx).schema_database = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10485);
				((Entity_name_for_parallel_dwContext)_localctx).schema = id();
				setState(10486);
				match(DOT);
				setState(10487);
				((Entity_name_for_parallel_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFull_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFull_table_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFull_table_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1457,_ctx) ) {
			case 1:
				{
				setState(10491);
				((Full_table_nameContext)_localctx).server = id();
				setState(10492);
				match(DOT);
				setState(10493);
				((Full_table_nameContext)_localctx).database = id();
				setState(10494);
				match(DOT);
				setState(10495);
				((Full_table_nameContext)_localctx).schema = id();
				setState(10496);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(10498);
				((Full_table_nameContext)_localctx).database = id();
				setState(10499);
				match(DOT);
				setState(10501);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
					{
					setState(10500);
					((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(10503);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(10505);
				((Full_table_nameContext)_localctx).schema = id();
				setState(10506);
				match(DOT);
				}
				break;
			}
			setState(10510);
			((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(MocaSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_table_name);
		int _la;
		try {
			setState(10538);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1459,_ctx) ) {
				case 1:
					{
					setState(10512);
					((Table_nameContext)_localctx).database = id();
					setState(10513);
					match(DOT);
					setState(10515);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
						{
						setState(10514);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(10517);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(10519);
					((Table_nameContext)_localctx).schema = id();
					setState(10520);
					match(DOT);
					}
					break;
				}
				setState(10524);
				((Table_nameContext)_localctx).table = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1461,_ctx) ) {
				case 1:
					{
					setState(10525);
					((Table_nameContext)_localctx).database = id();
					setState(10526);
					match(DOT);
					setState(10528);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
						{
						setState(10527);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(10530);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(10532);
					((Table_nameContext)_localctx).schema = id();
					setState(10533);
					match(DOT);
					}
					break;
				}
				setState(10537);
				match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSimple_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSimple_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSimple_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1463,_ctx) ) {
			case 1:
				{
				setState(10540);
				((Simple_nameContext)_localctx).schema = id();
				setState(10541);
				match(DOT);
				}
				break;
			}
			setState(10545);
			((Simple_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_schemaContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_proc_name_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_proc_name_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_proc_name_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_name_schemaContext func_proc_name_schema() throws RecognitionException {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_func_proc_name_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1464,_ctx) ) {
			case 1:
				{
				{
				setState(10547);
				((Func_proc_name_schemaContext)_localctx).schema = id();
				}
				setState(10548);
				match(DOT);
				}
				break;
			}
			setState(10552);
			((Func_proc_name_schemaContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_database_schemaContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_database_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_proc_name_database_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_proc_name_database_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_proc_name_database_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_name_database_schemaContext func_proc_name_database_schema() throws RecognitionException {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_func_proc_name_database_schema);
		int _la;
		try {
			setState(10565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10554);
				func_proc_name_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1466,_ctx) ) {
				case 1:
					{
					setState(10555);
					((Func_proc_name_database_schemaContext)_localctx).database = id();
					setState(10556);
					match(DOT);
					setState(10558);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
						{
						setState(10557);
						((Func_proc_name_database_schemaContext)_localctx).schema = id();
						}
					}

					setState(10560);
					match(DOT);
					}
					break;
				}
				setState(10564);
				((Func_proc_name_database_schemaContext)_localctx).procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_server_database_schemaContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_server_database_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFunc_proc_name_server_database_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFunc_proc_name_server_database_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFunc_proc_name_server_database_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() throws RecognitionException {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_func_proc_name_server_database_schema);
		int _la;
		try {
			setState(10580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1470,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10567);
				func_proc_name_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1469,_ctx) ) {
				case 1:
					{
					setState(10568);
					((Func_proc_name_server_database_schemaContext)_localctx).server = id();
					setState(10569);
					match(DOT);
					setState(10570);
					((Func_proc_name_server_database_schemaContext)_localctx).database = id();
					setState(10571);
					match(DOT);
					setState(10573);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (DOUBLE_QUOTE_ID - 750)) | (1L << (SQUARE_BRACKET_ID - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) {
						{
						setState(10572);
						((Func_proc_name_server_database_schemaContext)_localctx).schema = id();
						}
					}

					setState(10575);
					match(DOT);
					}
					break;
				}
				setState(10579);
				((Func_proc_name_server_database_schemaContext)_localctx).procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDdl_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDdl_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDdl_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_ddl_object);
		try {
			setState(10584);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10582);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(10583);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext column_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(MocaSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode STATUS() { return getToken(MocaSqlParser.STATUS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ARITHABORT() { return getToken(MocaSqlParser.ARITHABORT, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFull_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_full_column_name);
		try {
			setState(10634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1472,_ctx) ) {
				case 1:
					{
					setState(10586);
					table_name();
					setState(10587);
					match(DOT);
					}
					break;
				}
				setState(10591);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10595);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1473,_ctx) ) {
				case 1:
					{
					setState(10592);
					table_name();
					setState(10593);
					match(DOT);
					}
					break;
				}
				setState(10597);
				match(COMPATIBILITY_LEVEL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1474,_ctx) ) {
				case 1:
					{
					setState(10598);
					table_name();
					setState(10599);
					match(DOT);
					}
					break;
				}
				setState(10603);
				match(STATUS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10607);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1475,_ctx) ) {
				case 1:
					{
					setState(10604);
					table_name();
					setState(10605);
					match(DOT);
					}
					break;
				}
				setState(10609);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10613);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1476,_ctx) ) {
				case 1:
					{
					setState(10610);
					table_name();
					setState(10611);
					match(DOT);
					}
					break;
				}
				setState(10615);
				match(ARITHABORT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1477,_ctx) ) {
				case 1:
					{
					setState(10616);
					table_name();
					setState(10617);
					match(DOT);
					}
					break;
				}
				setState(10621);
				match(ANSI_WARNINGS);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1478,_ctx) ) {
				case 1:
					{
					setState(10622);
					table_name();
					setState(10623);
					match(DOT);
					}
					break;
				}
				setState(10627);
				match(ANSI_PADDING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1479,_ctx) ) {
				case 1:
					{
					setState(10628);
					table_name();
					setState(10629);
					match(DOT);
					}
					break;
				}
				setState(10633);
				match(ANSI_NULLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ASC() { return getTokens(MocaSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(MocaSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(MocaSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(MocaSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_name_list_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_name_list_with_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_name_list_with_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10636);
			id();
			setState(10638);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(10637);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(10647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10640);
				match(COMMA);
				setState(10641);
				id();
				setState(10643);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(10642);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				}
				setState(10649);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10650);
			id();
			setState(10655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10651);
				match(COMMA);
				setState(10652);
				id();
				}
				}
				setState(10657);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_cursor_name);
		try {
			setState(10660);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10658);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(10659);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterOn_off(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitOn_off(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitOn_off(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10662);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(MocaSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(MocaSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterClustered(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitClustered(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitClustered(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10664);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(MocaSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNull_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNull_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10667);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(10666);
				match(NOT);
				}
			}

			setState(10669);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(MocaSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterNull_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitNull_or_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitNull_or_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_null_or_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10678);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(10671);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(10672);
				match(DEFAULT);
				setState(10673);
				constant_expression();
				setState(10676);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1487,_ctx) ) {
				case 1:
					{
					setState(10674);
					match(WITH);
					setState(10675);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(MocaSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(MocaSqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitScalar_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitScalar_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_scalar_function_name);
		try {
			setState(10685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10680);
				func_proc_name_server_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10681);
				match(RIGHT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10682);
				match(LEFT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10683);
				match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10684);
				match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_timerContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MocaSqlParser.BEGIN, 0); }
		public TerminalNode CONVERSATION() { return getToken(MocaSqlParser.CONVERSATION, 0); }
		public TerminalNode TIMER() { return getToken(MocaSqlParser.TIMER, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public TerminalNode TIMEOUT() { return getToken(MocaSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_timer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBegin_conversation_timer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBegin_conversation_timer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBegin_conversation_timer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_timerContext begin_conversation_timer() throws RecognitionException {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_begin_conversation_timer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10687);
			match(BEGIN);
			setState(10688);
			match(CONVERSATION);
			setState(10689);
			match(TIMER);
			setState(10690);
			match(LR_BRACKET);
			setState(10691);
			match(LOCAL_ID);
			setState(10692);
			match(RR_BRACKET);
			setState(10693);
			match(TIMEOUT);
			setState(10694);
			match(EQUAL);
			setState(10695);
			time();
			setState(10697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1490,_ctx) ) {
			case 1:
				{
				setState(10696);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_dialogContext extends ParserRuleContext {
		public Token dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public Token service_broker_guid;
		public TerminalNode BEGIN() { return getToken(MocaSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(MocaSqlParser.DIALOG, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(MocaSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(MocaSqlParser.SERVICE, i);
		}
		public TerminalNode TO() { return getToken(MocaSqlParser.TO, 0); }
		public List<TerminalNode> ON() { return getTokens(MocaSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MocaSqlParser.ON, i);
		}
		public TerminalNode CONTRACT() { return getToken(MocaSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(MocaSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MocaSqlParser.LOCAL_ID, i);
		}
		public List<Service_nameContext> service_name() {
			return getRuleContexts(Service_nameContext.class);
		}
		public Service_nameContext service_name(int i) {
			return getRuleContext(Service_nameContext.class,i);
		}
		public TerminalNode CONVERSATION() { return getToken(MocaSqlParser.CONVERSATION, 0); }
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LIFETIME() { return getToken(MocaSqlParser.LIFETIME, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(MocaSqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(MocaSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode OFF() { return getToken(MocaSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_dialog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterBegin_conversation_dialog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitBegin_conversation_dialog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitBegin_conversation_dialog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_dialogContext begin_conversation_dialog() throws RecognitionException {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_begin_conversation_dialog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10699);
			match(BEGIN);
			setState(10700);
			match(DIALOG);
			setState(10702);
			_la = _input.LA(1);
			if (_la==CONVERSATION) {
				{
				setState(10701);
				match(CONVERSATION);
				}
			}

			setState(10704);
			((Begin_conversation_dialogContext)_localctx).dialog_handle = match(LOCAL_ID);
			setState(10705);
			match(FROM);
			setState(10706);
			match(SERVICE);
			setState(10707);
			((Begin_conversation_dialogContext)_localctx).initiator_service_name = service_name();
			setState(10708);
			match(TO);
			setState(10709);
			match(SERVICE);
			setState(10710);
			((Begin_conversation_dialogContext)_localctx).target_service_name = service_name();
			setState(10713);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10711);
				match(COMMA);
				setState(10712);
				((Begin_conversation_dialogContext)_localctx).service_broker_guid = match(STRING);
				}
			}

			setState(10715);
			match(ON);
			setState(10716);
			match(CONTRACT);
			setState(10717);
			contract_name();
			setState(10740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1498,_ctx) ) {
			case 1:
				{
				setState(10718);
				match(WITH);
				setState(10725);
				_la = _input.LA(1);
				if (_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) {
					{
					setState(10719);
					_la = _input.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(10720);
					match(EQUAL);
					setState(10721);
					match(LOCAL_ID);
					setState(10723);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10722);
						match(COMMA);
						}
					}

					}
				}

				setState(10733);
				_la = _input.LA(1);
				if (_la==LIFETIME) {
					{
					setState(10727);
					match(LIFETIME);
					setState(10728);
					match(EQUAL);
					setState(10729);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(10731);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10730);
						match(COMMA);
						}
					}

					}
				}

				setState(10738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1497,_ctx) ) {
				case 1:
					{
					setState(10735);
					match(ENCRYPTION);
					setState(10736);
					match(EQUAL);
					setState(10737);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			setState(10743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1499,_ctx) ) {
			case 1:
				{
				setState(10742);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contract_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contract_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterContract_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitContract_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitContract_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Contract_nameContext contract_name() throws RecognitionException {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_contract_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1500,_ctx) ) {
			case 1:
				{
				setState(10745);
				id();
				}
				break;
			case 2:
				{
				setState(10746);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterService_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitService_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitService_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Service_nameContext service_name() throws RecognitionException {
		Service_nameContext _localctx = new Service_nameContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_service_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1501,_ctx) ) {
			case 1:
				{
				setState(10749);
				id();
				}
				break;
			case 2:
				{
				setState(10750);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public Token faliure_code;
		public Token failure_text;
		public TerminalNode END() { return getToken(MocaSqlParser.END, 0); }
		public TerminalNode CONVERSATION() { return getToken(MocaSqlParser.CONVERSATION, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(MocaSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MocaSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(MocaSqlParser.WITH, 0); }
		public TerminalNode ERROR() { return getToken(MocaSqlParser.ERROR, 0); }
		public TerminalNode DESCRIPTION() { return getToken(MocaSqlParser.DESCRIPTION, 0); }
		public TerminalNode CLEANUP() { return getToken(MocaSqlParser.CLEANUP, 0); }
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterEnd_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitEnd_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitEnd_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_conversationContext end_conversation() throws RecognitionException {
		End_conversationContext _localctx = new End_conversationContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_end_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10753);
			match(END);
			setState(10754);
			match(CONVERSATION);
			setState(10755);
			((End_conversationContext)_localctx).conversation_handle = match(LOCAL_ID);
			setState(10757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1502,_ctx) ) {
			case 1:
				{
				setState(10756);
				match(SEMI);
				}
				break;
			}
			setState(10771);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1505,_ctx) ) {
			case 1:
				{
				setState(10759);
				match(WITH);
				setState(10766);
				_la = _input.LA(1);
				if (_la==ERROR) {
					{
					setState(10760);
					match(ERROR);
					setState(10761);
					match(EQUAL);
					setState(10762);
					((End_conversationContext)_localctx).faliure_code = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).faliure_code = (Token)_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(10763);
					match(DESCRIPTION);
					setState(10764);
					match(EQUAL);
					setState(10765);
					((End_conversationContext)_localctx).failure_text = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).failure_text = (Token)_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(10769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1504,_ctx) ) {
				case 1:
					{
					setState(10768);
					match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_conversationContext extends ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public TerminalNode WAITFOR() { return getToken(MocaSqlParser.WAITFOR, 0); }
		public TerminalNode TIMEOUT() { return getToken(MocaSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterWaitfor_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitWaitfor_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitWaitfor_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_conversationContext waitfor_conversation() throws RecognitionException {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_waitfor_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10774);
			_la = _input.LA(1);
			if (_la==WAITFOR) {
				{
				setState(10773);
				match(WAITFOR);
				}
			}

			setState(10776);
			match(LR_BRACKET);
			setState(10777);
			get_conversation();
			setState(10778);
			match(RR_BRACKET);
			setState(10784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1508,_ctx) ) {
			case 1:
				{
				setState(10780);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10779);
					match(COMMA);
					}
				}

				setState(10782);
				match(TIMEOUT);
				setState(10783);
				((Waitfor_conversationContext)_localctx).timeout = time();
				}
				break;
			}
			setState(10787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1509,_ctx) ) {
			case 1:
				{
				setState(10786);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_conversationContext extends ParserRuleContext {
		public Token conversation_group_id;
		public Queue_idContext queue;
		public TerminalNode GET() { return getToken(MocaSqlParser.GET, 0); }
		public TerminalNode CONVERSATION() { return getToken(MocaSqlParser.CONVERSATION, 0); }
		public TerminalNode GROUP() { return getToken(MocaSqlParser.GROUP, 0); }
		public TerminalNode FROM() { return getToken(MocaSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return getRuleContext(Queue_idContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MocaSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterGet_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitGet_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitGet_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_conversationContext get_conversation() throws RecognitionException {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_get_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10789);
			match(GET);
			setState(10790);
			match(CONVERSATION);
			setState(10791);
			match(GROUP);
			setState(10792);
			((Get_conversationContext)_localctx).conversation_group_id = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Get_conversationContext)_localctx).conversation_group_id = (Token)_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(10793);
			match(FROM);
			setState(10794);
			((Get_conversationContext)_localctx).queue = queue_id();
			setState(10796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1510,_ctx) ) {
			case 1:
				{
				setState(10795);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_idContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterQueue_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitQueue_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitQueue_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_idContext queue_id() throws RecognitionException {
		Queue_idContext _localctx = new Queue_idContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_queue_id);
		try {
			setState(10805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1511,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(10798);
				((Queue_idContext)_localctx).database_name = id();
				setState(10799);
				match(DOT);
				setState(10800);
				((Queue_idContext)_localctx).schema_name = id();
				setState(10801);
				match(DOT);
				setState(10802);
				((Queue_idContext)_localctx).name = id();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10804);
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Send_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public ExpressionContext message_type_name;
		public Token message_body_expression;
		public TerminalNode SEND() { return getToken(MocaSqlParser.SEND, 0); }
		public TerminalNode ON() { return getToken(MocaSqlParser.ON, 0); }
		public TerminalNode CONVERSATION() { return getToken(MocaSqlParser.CONVERSATION, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(MocaSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(MocaSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(MocaSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MocaSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_send_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSend_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSend_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSend_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Send_conversationContext send_conversation() throws RecognitionException {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_send_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10807);
			match(SEND);
			setState(10808);
			match(ON);
			setState(10809);
			match(CONVERSATION);
			setState(10810);
			((Send_conversationContext)_localctx).conversation_handle = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Send_conversationContext)_localctx).conversation_handle = (Token)_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(10811);
			match(MESSAGE);
			setState(10812);
			match(TYPE);
			setState(10813);
			((Send_conversationContext)_localctx).message_type_name = expression(0);
			setState(10817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1512,_ctx) ) {
			case 1:
				{
				setState(10814);
				match(LR_BRACKET);
				setState(10815);
				((Send_conversationContext)_localctx).message_body_expression = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					((Send_conversationContext)_localctx).message_body_expression = (Token)_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(10816);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1513,_ctx) ) {
			case 1:
				{
				setState(10819);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(MocaSqlParser.IDENTITY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(MocaSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(MocaSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode DOUBLE() { return getToken(MocaSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MocaSqlParser.PRECISION, 0); }
		public TerminalNode INT() { return getToken(MocaSqlParser.INT, 0); }
		public TerminalNode TINYINT() { return getToken(MocaSqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MocaSqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(MocaSqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_data_type);
		int _la;
		try {
			setState(10843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10822);
				id();
				setState(10824);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1514,_ctx) ) {
				case 1:
					{
					setState(10823);
					match(IDENTITY);
					}
					break;
				}
				setState(10833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1516,_ctx) ) {
				case 1:
					{
					setState(10826);
					match(LR_BRACKET);
					setState(10827);
					_la = _input.LA(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(10830);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10828);
						match(COMMA);
						setState(10829);
						match(DECIMAL);
						}
					}

					setState(10832);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10835);
				match(DOUBLE);
				setState(10837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1517,_ctx) ) {
				case 1:
					{
					setState(10836);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10839);
				match(INT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10840);
				match(TINYINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10841);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10842);
				match(BIGINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(MocaSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(MocaSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitDefault_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_default_value);
		try {
			setState(10848);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10845);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10846);
				match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(10847);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(MocaSqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(MocaSqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(MocaSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(MocaSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_constant);
		int _la;
		try {
			setState(10865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10850);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10851);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10853);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(10852);
					sign();
					}
				}

				setState(10855);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10857);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(10856);
					sign();
					}
				}

				setState(10859);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10861);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(10860);
					sign();
					}
				}

				setState(10863);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(10864);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10867);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(MocaSqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(MocaSqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_id);
		try {
			setState(10872);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case EXPIREDATE:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case POLICY:
			case PRECISION:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROLE:
			case ROWCOUNT:
			case SAFETY:
			case RULE:
			case SERVER:
			case SID:
			case SOURCE:
			case SPLIT:
			case STATE:
			case START:
			case STOP:
			case TARGET:
			case TRAN:
			case USER:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
			case URL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10869);
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(10870);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(10871);
				match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MocaSqlParser.ID, 0); }
		public TerminalNode ABSOLUTE() { return getToken(MocaSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(MocaSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode ACTION() { return getToken(MocaSqlParser.ACTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(MocaSqlParser.ACTIVATION, 0); }
		public TerminalNode ACTIVE() { return getToken(MocaSqlParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(MocaSqlParser.ADDRESS, 0); }
		public TerminalNode AES_128() { return getToken(MocaSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(MocaSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(MocaSqlParser.AES_256, 0); }
		public TerminalNode AFFINITY() { return getToken(MocaSqlParser.AFFINITY, 0); }
		public TerminalNode AFTER() { return getToken(MocaSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MocaSqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MocaSqlParser.ALGORITHM, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(MocaSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(MocaSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ALLOWED() { return getToken(MocaSqlParser.ALLOWED, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(MocaSqlParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(MocaSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(MocaSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(MocaSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(MocaSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode APPLY() { return getToken(MocaSqlParser.APPLY, 0); }
		public TerminalNode ARITHABORT() { return getToken(MocaSqlParser.ARITHABORT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(MocaSqlParser.ASSEMBLY, 0); }
		public TerminalNode AUDIT() { return getToken(MocaSqlParser.AUDIT, 0); }
		public TerminalNode AUDIT_GUID() { return getToken(MocaSqlParser.AUDIT_GUID, 0); }
		public TerminalNode AUTO() { return getToken(MocaSqlParser.AUTO, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(MocaSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(MocaSqlParser.AUTO_CLOSE, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(MocaSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(MocaSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AVAILABILITY() { return getToken(MocaSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(MocaSqlParser.AVG, 0); }
		public TerminalNode BACKUP_PRIORITY() { return getToken(MocaSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(MocaSqlParser.BEGIN_DIALOG, 0); }
		public TerminalNode BIGINT() { return getToken(MocaSqlParser.BIGINT, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(MocaSqlParser.BINARY_BASE64, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(MocaSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode BINDING() { return getToken(MocaSqlParser.BINDING, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(MocaSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode BROKER() { return getToken(MocaSqlParser.BROKER, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(MocaSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(MocaSqlParser.BULK_LOGGED, 0); }
		public TerminalNode CALLED() { return getToken(MocaSqlParser.CALLED, 0); }
		public TerminalNode CALLER() { return getToken(MocaSqlParser.CALLER, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(MocaSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode CAST() { return getToken(MocaSqlParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(MocaSqlParser.CATALOG, 0); }
		public TerminalNode CATCH() { return getToken(MocaSqlParser.CATCH, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(MocaSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(MocaSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode CHECKSUM() { return getToken(MocaSqlParser.CHECKSUM, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(MocaSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode CLEANUP() { return getToken(MocaSqlParser.CLEANUP, 0); }
		public TerminalNode COLLECTION() { return getToken(MocaSqlParser.COLLECTION, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(MocaSqlParser.COLUMN_MASTER_KEY, 0); }
		public TerminalNode COMMITTED() { return getToken(MocaSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(MocaSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode CONCAT() { return getToken(MocaSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(MocaSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTENT() { return getToken(MocaSqlParser.CONTENT, 0); }
		public TerminalNode CONTROL() { return getToken(MocaSqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(MocaSqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(MocaSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(MocaSqlParser.COUNT_BIG, 0); }
		public TerminalNode COUNTER() { return getToken(MocaSqlParser.COUNTER, 0); }
		public TerminalNode CPU() { return getToken(MocaSqlParser.CPU, 0); }
		public TerminalNode CREATE_NEW() { return getToken(MocaSqlParser.CREATE_NEW, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(MocaSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(MocaSqlParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(MocaSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(MocaSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(MocaSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode DATA() { return getToken(MocaSqlParser.DATA, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(MocaSqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(MocaSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode DATEADD() { return getToken(MocaSqlParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(MocaSqlParser.DATEDIFF, 0); }
		public TerminalNode DATENAME() { return getToken(MocaSqlParser.DATENAME, 0); }
		public TerminalNode DATEPART() { return getToken(MocaSqlParser.DATEPART, 0); }
		public TerminalNode DAYS() { return getToken(MocaSqlParser.DAYS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(MocaSqlParser.DB_CHAINING, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(MocaSqlParser.DB_FAILOVER, 0); }
		public TerminalNode DECRYPTION() { return getToken(MocaSqlParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(MocaSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(MocaSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode DELAY() { return getToken(MocaSqlParser.DELAY, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(MocaSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DELETED() { return getToken(MocaSqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MocaSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPENDENTS() { return getToken(MocaSqlParser.DEPENDENTS, 0); }
		public TerminalNode DES() { return getToken(MocaSqlParser.DES, 0); }
		public TerminalNode DESCRIPTION() { return getToken(MocaSqlParser.DESCRIPTION, 0); }
		public TerminalNode DESX() { return getToken(MocaSqlParser.DESX, 0); }
		public TerminalNode DHCP() { return getToken(MocaSqlParser.DHCP, 0); }
		public TerminalNode DIALOG() { return getToken(MocaSqlParser.DIALOG, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(MocaSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode DISABLE() { return getToken(MocaSqlParser.DISABLE, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(MocaSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode DISABLED() { return getToken(MocaSqlParser.DISABLED, 0); }
		public TerminalNode DISK_DRIVE() { return getToken(MocaSqlParser.DISK_DRIVE, 0); }
		public TerminalNode DOCUMENT() { return getToken(MocaSqlParser.DOCUMENT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MocaSqlParser.DYNAMIC, 0); }
		public TerminalNode EMERGENCY() { return getToken(MocaSqlParser.EMERGENCY, 0); }
		public TerminalNode EMPTY() { return getToken(MocaSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(MocaSqlParser.ENABLE, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(MocaSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(MocaSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MocaSqlParser.ENCRYPTION, 0); }
		public TerminalNode ENDPOINT_URL() { return getToken(MocaSqlParser.ENDPOINT_URL, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(MocaSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode EVENTDATA() { return getToken(MocaSqlParser.EVENTDATA, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MocaSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTABLE() { return getToken(MocaSqlParser.EXECUTABLE, 0); }
		public TerminalNode EXIST() { return getToken(MocaSqlParser.EXIST, 0); }
		public TerminalNode EXPAND() { return getToken(MocaSqlParser.EXPAND, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(MocaSqlParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPLICIT() { return getToken(MocaSqlParser.EXPLICIT, 0); }
		public TerminalNode FAIL_OPERATION() { return getToken(MocaSqlParser.FAIL_OPERATION, 0); }
		public TerminalNode FAILOVER_MODE() { return getToken(MocaSqlParser.FAILOVER_MODE, 0); }
		public TerminalNode FAILURE() { return getToken(MocaSqlParser.FAILURE, 0); }
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(MocaSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode FAST() { return getToken(MocaSqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(MocaSqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILEGROUP() { return getToken(MocaSqlParser.FILEGROUP, 0); }
		public TerminalNode FILEGROWTH() { return getToken(MocaSqlParser.FILEGROWTH, 0); }
		public TerminalNode FILENAME() { return getToken(MocaSqlParser.FILENAME, 0); }
		public TerminalNode FILEPATH() { return getToken(MocaSqlParser.FILEPATH, 0); }
		public TerminalNode FILESTREAM() { return getToken(MocaSqlParser.FILESTREAM, 0); }
		public TerminalNode FILLFACTOR() { return getToken(MocaSqlParser.FILLFACTOR, 0); }
		public TerminalNode FILTER() { return getToken(MocaSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(MocaSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MocaSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(MocaSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(MocaSqlParser.FORCE, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(MocaSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCED() { return getToken(MocaSqlParser.FORCED, 0); }
		public TerminalNode FORCESEEK() { return getToken(MocaSqlParser.FORCESEEK, 0); }
		public TerminalNode FORMAT() { return getToken(MocaSqlParser.FORMAT, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(MocaSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(MocaSqlParser.FULLSCAN, 0); }
		public TerminalNode FULLTEXT() { return getToken(MocaSqlParser.FULLTEXT, 0); }
		public TerminalNode GB() { return getToken(MocaSqlParser.GB, 0); }
		public TerminalNode GETDATE() { return getToken(MocaSqlParser.GETDATE, 0); }
		public TerminalNode GETUTCDATE() { return getToken(MocaSqlParser.GETUTCDATE, 0); }
		public TerminalNode GLOBAL() { return getToken(MocaSqlParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(MocaSqlParser.GO, 0); }
		public TerminalNode GROUP_MAX_REQUESTS() { return getToken(MocaSqlParser.GROUP_MAX_REQUESTS, 0); }
		public TerminalNode GROUPING() { return getToken(MocaSqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(MocaSqlParser.GROUPING_ID, 0); }
		public TerminalNode HADR() { return getToken(MocaSqlParser.HADR, 0); }
		public TerminalNode HASH() { return getToken(MocaSqlParser.HASH, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(MocaSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode HIGH() { return getToken(MocaSqlParser.HIGH, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(MocaSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode HOURS() { return getToken(MocaSqlParser.HOURS, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(MocaSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(MocaSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode IMMEDIATE() { return getToken(MocaSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMPERSONATE() { return getToken(MocaSqlParser.IMPERSONATE, 0); }
		public TerminalNode IMPORTANCE() { return getToken(MocaSqlParser.IMPORTANCE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(MocaSqlParser.INCREMENTAL, 0); }
		public TerminalNode INIT() { return getToken(MocaSqlParser.INIT, 0); }
		public TerminalNode INITIATOR() { return getToken(MocaSqlParser.INITIATOR, 0); }
		public TerminalNode INPUT() { return getToken(MocaSqlParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(MocaSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(MocaSqlParser.INSERTED, 0); }
		public TerminalNode INT() { return getToken(MocaSqlParser.INT, 0); }
		public TerminalNode IP() { return getToken(MocaSqlParser.IP, 0); }
		public TerminalNode ISOLATION() { return getToken(MocaSqlParser.ISOLATION, 0); }
		public TerminalNode KB() { return getToken(MocaSqlParser.KB, 0); }
		public TerminalNode KEEP() { return getToken(MocaSqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(MocaSqlParser.KEEPFIXED, 0); }
		public List<TerminalNode> KEY() { return getTokens(MocaSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(MocaSqlParser.KEY, i);
		}
		public TerminalNode KEY_SOURCE() { return getToken(MocaSqlParser.KEY_SOURCE, 0); }
		public TerminalNode KEYS() { return getToken(MocaSqlParser.KEYS, 0); }
		public TerminalNode KEYSET() { return getToken(MocaSqlParser.KEYSET, 0); }
		public TerminalNode LAG() { return getToken(MocaSqlParser.LAG, 0); }
		public TerminalNode LAST() { return getToken(MocaSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MocaSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(MocaSqlParser.LEAD, 0); }
		public TerminalNode LEVEL() { return getToken(MocaSqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MocaSqlParser.LIST, 0); }
		public TerminalNode LISTENER() { return getToken(MocaSqlParser.LISTENER, 0); }
		public TerminalNode LISTENER_URL() { return getToken(MocaSqlParser.LISTENER_URL, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(MocaSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode LOCAL() { return getToken(MocaSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(MocaSqlParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(MocaSqlParser.LOCK, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(MocaSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(MocaSqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(MocaSqlParser.LOOP, 0); }
		public TerminalNode LOW() { return getToken(MocaSqlParser.LOW, 0); }
		public TerminalNode MANUAL() { return getToken(MocaSqlParser.MANUAL, 0); }
		public TerminalNode MARK() { return getToken(MocaSqlParser.MARK, 0); }
		public TerminalNode MASTER() { return getToken(MocaSqlParser.MASTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(MocaSqlParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(MocaSqlParser.MAX, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(MocaSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode MAX_DOP() { return getToken(MocaSqlParser.MAX_DOP, 0); }
		public TerminalNode MAX_FILES() { return getToken(MocaSqlParser.MAX_FILES, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(MocaSqlParser.MAX_MEMORY, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(MocaSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(MocaSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode MAX_QUEUE_READERS() { return getToken(MocaSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(MocaSqlParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAXDOP() { return getToken(MocaSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(MocaSqlParser.MAXRECURSION, 0); }
		public TerminalNode MAXSIZE() { return getToken(MocaSqlParser.MAXSIZE, 0); }
		public TerminalNode MB() { return getToken(MocaSqlParser.MB, 0); }
		public TerminalNode MEDIUM() { return getToken(MocaSqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(MocaSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode MESSAGE() { return getToken(MocaSqlParser.MESSAGE, 0); }
		public TerminalNode MIN() { return getToken(MocaSqlParser.MIN, 0); }
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(MocaSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode MIN_CPU_PERCENT() { return getToken(MocaSqlParser.MIN_CPU_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(MocaSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(MocaSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MINUTES() { return getToken(MocaSqlParser.MINUTES, 0); }
		public TerminalNode MIRROR_ADDRESS() { return getToken(MocaSqlParser.MIRROR_ADDRESS, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(MocaSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode MODE() { return getToken(MocaSqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MocaSqlParser.MODIFY, 0); }
		public TerminalNode MOVE() { return getToken(MocaSqlParser.MOVE, 0); }
		public TerminalNode MULTI_USER() { return getToken(MocaSqlParser.MULTI_USER, 0); }
		public TerminalNode NAME() { return getToken(MocaSqlParser.NAME, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(MocaSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(MocaSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_BROKER() { return getToken(MocaSqlParser.NEW_BROKER, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(MocaSqlParser.NEW_PASSWORD, 0); }
		public TerminalNode NEXT() { return getToken(MocaSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MocaSqlParser.NO, 0); }
		public TerminalNode NO_TRUNCATE() { return getToken(MocaSqlParser.NO_TRUNCATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(MocaSqlParser.NO_WAIT, 0); }
		public TerminalNode NOCOUNT() { return getToken(MocaSqlParser.NOCOUNT, 0); }
		public TerminalNode NODES() { return getToken(MocaSqlParser.NODES, 0); }
		public TerminalNode NOEXPAND() { return getToken(MocaSqlParser.NOEXPAND, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(MocaSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(MocaSqlParser.NORECOMPUTE, 0); }
		public TerminalNode NORECOVERY() { return getToken(MocaSqlParser.NORECOVERY, 0); }
		public TerminalNode NOWAIT() { return getToken(MocaSqlParser.NOWAIT, 0); }
		public TerminalNode NTILE() { return getToken(MocaSqlParser.NTILE, 0); }
		public TerminalNode NUMANODE() { return getToken(MocaSqlParser.NUMANODE, 0); }
		public TerminalNode NUMBER() { return getToken(MocaSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(MocaSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode OBJECT() { return getToken(MocaSqlParser.OBJECT, 0); }
		public TerminalNode OFFLINE() { return getToken(MocaSqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MocaSqlParser.OFFSET, 0); }
		public TerminalNode OFFSETS() { return getToken(MocaSqlParser.OFFSETS, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(MocaSqlParser.OLD_ACCOUNT, 0); }
		public TerminalNode ONLINE() { return getToken(MocaSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MocaSqlParser.ONLY, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(MocaSqlParser.OPEN_EXISTING, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(MocaSqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(MocaSqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(MocaSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(MocaSqlParser.OUTPUT, 0); }
		public TerminalNode OWNER() { return getToken(MocaSqlParser.OWNER, 0); }
		public TerminalNode PAGE() { return getToken(MocaSqlParser.PAGE, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(MocaSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(MocaSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(MocaSqlParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(MocaSqlParser.PARTITIONS, 0); }
		public TerminalNode PARTNER() { return getToken(MocaSqlParser.PARTNER, 0); }
		public TerminalNode PATH() { return getToken(MocaSqlParser.PATH, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(MocaSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode POOL() { return getToken(MocaSqlParser.POOL, 0); }
		public TerminalNode PORT() { return getToken(MocaSqlParser.PORT, 0); }
		public TerminalNode PRECEDING() { return getToken(MocaSqlParser.PRECEDING, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(MocaSqlParser.PRIMARY_ROLE, 0); }
		public TerminalNode PRIOR() { return getToken(MocaSqlParser.PRIOR, 0); }
		public TerminalNode PRIORITY() { return getToken(MocaSqlParser.PRIORITY, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(MocaSqlParser.PRIORITY_LEVEL, 0); }
		public TerminalNode PRIVATE() { return getToken(MocaSqlParser.PRIVATE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(MocaSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MocaSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(MocaSqlParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROPERTY() { return getToken(MocaSqlParser.PROPERTY, 0); }
		public TerminalNode PROVIDER() { return getToken(MocaSqlParser.PROVIDER, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(MocaSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode PUBLIC() { return getToken(MocaSqlParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(MocaSqlParser.QUERY, 0); }
		public TerminalNode QUEUE() { return getToken(MocaSqlParser.QUEUE, 0); }
		public TerminalNode QUEUE_DELAY() { return getToken(MocaSqlParser.QUEUE_DELAY, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(MocaSqlParser.QUOTED_IDENTIFIER, 0); }
		public List<TerminalNode> R() { return getTokens(MocaSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(MocaSqlParser.R, i);
		}
		public TerminalNode RANGE() { return getToken(MocaSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(MocaSqlParser.RANK, 0); }
		public List<TerminalNode> RAW() { return getTokens(MocaSqlParser.RAW); }
		public TerminalNode RAW(int i) {
			return getToken(MocaSqlParser.RAW, i);
		}
		public TerminalNode RC2() { return getToken(MocaSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(MocaSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(MocaSqlParser.RC4_128, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(MocaSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode READ_ONLY() { return getToken(MocaSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(MocaSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode READ_WRITE() { return getToken(MocaSqlParser.READ_WRITE, 0); }
		public TerminalNode READONLY() { return getToken(MocaSqlParser.READONLY, 0); }
		public TerminalNode REBUILD() { return getToken(MocaSqlParser.REBUILD, 0); }
		public TerminalNode RECEIVE() { return getToken(MocaSqlParser.RECEIVE, 0); }
		public TerminalNode RECOMPILE() { return getToken(MocaSqlParser.RECOMPILE, 0); }
		public TerminalNode RECOVERY() { return getToken(MocaSqlParser.RECOVERY, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(MocaSqlParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode RELATIVE() { return getToken(MocaSqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(MocaSqlParser.REMOTE, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(MocaSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode REMOVE() { return getToken(MocaSqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MocaSqlParser.REORGANIZE, 0); }
		public TerminalNode REPEATABLE() { return getToken(MocaSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(MocaSqlParser.REPLICA, 0); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC() { return getToken(MocaSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getToken(MocaSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getToken(MocaSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(MocaSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode RESERVE_DISK_SPACE() { return getToken(MocaSqlParser.RESERVE_DISK_SPACE, 0); }
		public TerminalNode RESOURCE() { return getToken(MocaSqlParser.RESOURCE, 0); }
		public TerminalNode RESOURCE_MANAGER_LOCATION() { return getToken(MocaSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(MocaSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode RETENTION() { return getToken(MocaSqlParser.RETENTION, 0); }
		public TerminalNode RETURN() { return getToken(MocaSqlParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(MocaSqlParser.RETURNS, 0); }
		public TerminalNode ROBUST() { return getToken(MocaSqlParser.ROBUST, 0); }
		public TerminalNode ROOT() { return getToken(MocaSqlParser.ROOT, 0); }
		public TerminalNode ROUTE() { return getToken(MocaSqlParser.ROUTE, 0); }
		public TerminalNode ROW() { return getToken(MocaSqlParser.ROW, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MocaSqlParser.ROW_NUMBER, 0); }
		public TerminalNode ROWCOUNT() { return getToken(MocaSqlParser.ROWCOUNT, 0); }
		public TerminalNode ROWGUID() { return getToken(MocaSqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(MocaSqlParser.ROWS, 0); }
		public TerminalNode SAFETY() { return getToken(MocaSqlParser.SAFETY, 0); }
		public TerminalNode SAMPLE() { return getToken(MocaSqlParser.SAMPLE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(MocaSqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCOPED() { return getToken(MocaSqlParser.SCOPED, 0); }
		public TerminalNode SCROLL() { return getToken(MocaSqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(MocaSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SEARCH() { return getToken(MocaSqlParser.SEARCH, 0); }
		public TerminalNode SECONDARY() { return getToken(MocaSqlParser.SECONDARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(MocaSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY_ROLE() { return getToken(MocaSqlParser.SECONDARY_ROLE, 0); }
		public TerminalNode SECONDS() { return getToken(MocaSqlParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(MocaSqlParser.SECRET, 0); }
		public TerminalNode SECURITY() { return getToken(MocaSqlParser.SECURITY, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(MocaSqlParser.SECURITY_LOG, 0); }
		public TerminalNode SEEDING_MODE() { return getToken(MocaSqlParser.SEEDING_MODE, 0); }
		public TerminalNode SELF() { return getToken(MocaSqlParser.SELF, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(MocaSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode SEND() { return getToken(MocaSqlParser.SEND, 0); }
		public TerminalNode SENT() { return getToken(MocaSqlParser.SENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(MocaSqlParser.SEQUENCE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MocaSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(MocaSqlParser.SERVER, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(MocaSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode SETERROR() { return getToken(MocaSqlParser.SETERROR, 0); }
		public TerminalNode SHARE() { return getToken(MocaSqlParser.SHARE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(MocaSqlParser.SHOWPLAN, 0); }
		public List<TerminalNode> SID() { return getTokens(MocaSqlParser.SID); }
		public TerminalNode SID(int i) {
			return getToken(MocaSqlParser.SID, i);
		}
		public TerminalNode SIGNATURE() { return getToken(MocaSqlParser.SIGNATURE, 0); }
		public TerminalNode SIMPLE() { return getToken(MocaSqlParser.SIMPLE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(MocaSqlParser.SINGLE_USER, 0); }
		public TerminalNode SIZE() { return getToken(MocaSqlParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(MocaSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MocaSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOURCE() { return getToken(MocaSqlParser.SOURCE, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(MocaSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode SPLIT() { return getToken(MocaSqlParser.SPLIT, 0); }
		public TerminalNode STANDBY() { return getToken(MocaSqlParser.STANDBY, 0); }
		public TerminalNode START() { return getToken(MocaSqlParser.START, 0); }
		public TerminalNode START_DATE() { return getToken(MocaSqlParser.START_DATE, 0); }
		public TerminalNode STATE() { return getToken(MocaSqlParser.STATE, 0); }
		public TerminalNode STATIC() { return getToken(MocaSqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(MocaSqlParser.STATS_STREAM, 0); }
		public TerminalNode STATUS() { return getToken(MocaSqlParser.STATUS, 0); }
		public TerminalNode STDEV() { return getToken(MocaSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(MocaSqlParser.STDEVP, 0); }
		public TerminalNode STOPLIST() { return getToken(MocaSqlParser.STOPLIST, 0); }
		public TerminalNode STRING_AGG() { return getToken(MocaSqlParser.STRING_AGG, 0); }
		public TerminalNode STUFF() { return getToken(MocaSqlParser.STUFF, 0); }
		public TerminalNode SUBJECT() { return getToken(MocaSqlParser.SUBJECT, 0); }
		public TerminalNode SUM() { return getToken(MocaSqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MocaSqlParser.SUSPEND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(MocaSqlParser.SYMMETRIC, 0); }
		public TerminalNode SYNCHRONOUS_COMMIT() { return getToken(MocaSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public TerminalNode SYNONYM() { return getToken(MocaSqlParser.SYNONYM, 0); }
		public TerminalNode SYSTEM() { return getToken(MocaSqlParser.SYSTEM, 0); }
		public TerminalNode TAKE() { return getToken(MocaSqlParser.TAKE, 0); }
		public TerminalNode TARGET() { return getToken(MocaSqlParser.TARGET, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(MocaSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode TB() { return getToken(MocaSqlParser.TB, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(MocaSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(MocaSqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(MocaSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(MocaSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(MocaSqlParser.TIMEOUT, 0); }
		public TerminalNode TIMER() { return getToken(MocaSqlParser.TIMER, 0); }
		public TerminalNode TINYINT() { return getToken(MocaSqlParser.TINYINT, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(MocaSqlParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(MocaSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(MocaSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(MocaSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(MocaSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode TRY() { return getToken(MocaSqlParser.TRY, 0); }
		public TerminalNode TSQL() { return getToken(MocaSqlParser.TSQL, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(MocaSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode TYPE() { return getToken(MocaSqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(MocaSqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MocaSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MocaSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(MocaSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLIMITED() { return getToken(MocaSqlParser.UNLIMITED, 0); }
		public TerminalNode USING() { return getToken(MocaSqlParser.USING, 0); }
		public TerminalNode VALID_XML() { return getToken(MocaSqlParser.VALID_XML, 0); }
		public TerminalNode VALIDATION() { return getToken(MocaSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MocaSqlParser.VALUE, 0); }
		public TerminalNode VAR() { return getToken(MocaSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(MocaSqlParser.VARP, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(MocaSqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(MocaSqlParser.VIEWS, 0); }
		public TerminalNode WAIT() { return getToken(MocaSqlParser.WAIT, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(MocaSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode WORK() { return getToken(MocaSqlParser.WORK, 0); }
		public TerminalNode WORKLOAD() { return getToken(MocaSqlParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(MocaSqlParser.XML, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(MocaSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode EXPIREDATE() { return getToken(MocaSqlParser.EXPIREDATE, 0); }
		public TerminalNode POLICY() { return getToken(MocaSqlParser.POLICY, 0); }
		public TerminalNode PRECISION() { return getToken(MocaSqlParser.PRECISION, 0); }
		public TerminalNode ROLE() { return getToken(MocaSqlParser.ROLE, 0); }
		public TerminalNode RULE() { return getToken(MocaSqlParser.RULE, 0); }
		public TerminalNode STOP() { return getToken(MocaSqlParser.STOP, 0); }
		public TerminalNode TRAN() { return getToken(MocaSqlParser.TRAN, 0); }
		public TerminalNode URL() { return getToken(MocaSqlParser.URL, 0); }
		public TerminalNode USER() { return getToken(MocaSqlParser.USER, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitSimple_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitSimple_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10874);
			_la = _input.LA(1);
			if ( !(_la==CALLED || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (DATA_COMPRESSION - 82)) | (1L << (EVENTDATA - 82)) | (1L << (EXPIREDATE - 82)) | (1L << (FILENAME - 82)) | (1L << (FILLFACTOR - 82)) | (1L << (FORCESEEK - 82)))) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (INIT - 160)) | (1L << (KEY - 160)) | (1L << (MASTER - 160)) | (1L << (MAX_MEMORY - 160)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (OFFSETS - 227)) | (1L << (PAGE - 227)) | (1L << (POLICY - 227)) | (1L << (PRECISION - 227)) | (1L << (PUBLIC - 227)) | (1L << (R - 227)) | (1L << (RAW - 227)) | (1L << (RETURN - 227)) | (1L << (RETURNS - 227)) | (1L << (ROLE - 227)) | (1L << (ROWCOUNT - 227)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (SAFETY - 297)) | (1L << (RULE - 297)) | (1L << (SERVER - 297)) | (1L << (SID - 297)) | (1L << (SOURCE - 297)) | (1L << (SPLIT - 297)) | (1L << (STATE - 297)) | (1L << (START - 297)) | (1L << (STOP - 297)) | (1L << (TARGET - 297)) | (1L << (TRAN - 297)))) != 0) || ((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (USER - 366)) | (1L << (ABSOLUTE - 366)) | (1L << (ACCENT_SENSITIVITY - 366)) | (1L << (ACTION - 366)) | (1L << (ACTIVATION - 366)) | (1L << (ACTIVE - 366)) | (1L << (ADDRESS - 366)) | (1L << (AES_128 - 366)) | (1L << (AES_192 - 366)) | (1L << (AES_256 - 366)) | (1L << (AFFINITY - 366)) | (1L << (AFTER - 366)) | (1L << (AGGREGATE - 366)) | (1L << (ALGORITHM - 366)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 366)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 366)) | (1L << (ALLOWED - 366)) | (1L << (ANSI_NULL_DEFAULT - 366)) | (1L << (ANSI_NULLS - 366)) | (1L << (ANSI_PADDING - 366)) | (1L << (ANSI_WARNINGS - 366)) | (1L << (APPLICATION_LOG - 366)) | (1L << (APPLY - 366)) | (1L << (ARITHABORT - 366)) | (1L << (ASSEMBLY - 366)) | (1L << (AUDIT - 366)) | (1L << (AUDIT_GUID - 366)) | (1L << (AUTO - 366)) | (1L << (AUTO_CLEANUP - 366)) | (1L << (AUTO_CLOSE - 366)) | (1L << (AUTO_CREATE_STATISTICS - 366)) | (1L << (AUTO_SHRINK - 366)) | (1L << (AUTO_UPDATE_STATISTICS - 366)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 366)) | (1L << (AVAILABILITY - 366)) | (1L << (AVG - 366)) | (1L << (BACKUP_PRIORITY - 366)) | (1L << (BEGIN_DIALOG - 366)) | (1L << (BIGINT - 366)) | (1L << (BINARY_BASE64 - 366)) | (1L << (BINARY_CHECKSUM - 366)) | (1L << (BINDING - 366)) | (1L << (BLOB_STORAGE - 366)) | (1L << (BROKER - 366)) | (1L << (BROKER_INSTANCE - 366)) | (1L << (BULK_LOGGED - 366)) | (1L << (CALLER - 366)) | (1L << (CAP_CPU_PERCENT - 366)) | (1L << (CAST - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (CATALOG - 430)) | (1L << (CATCH - 430)) | (1L << (CHANGE_RETENTION - 430)) | (1L << (CHANGE_TRACKING - 430)) | (1L << (CHECKSUM - 430)) | (1L << (CHECKSUM_AGG - 430)) | (1L << (CLEANUP - 430)) | (1L << (COLLECTION - 430)) | (1L << (COLUMN_MASTER_KEY - 430)) | (1L << (COMMITTED - 430)) | (1L << (COMPATIBILITY_LEVEL - 430)) | (1L << (CONCAT - 430)) | (1L << (CONCAT_NULL_YIELDS_NULL - 430)) | (1L << (CONTENT - 430)) | (1L << (CONTROL - 430)) | (1L << (COOKIE - 430)) | (1L << (COUNT - 430)) | (1L << (COUNT_BIG - 430)) | (1L << (COUNTER - 430)) | (1L << (CPU - 430)) | (1L << (CREATE_NEW - 430)) | (1L << (CREATION_DISPOSITION - 430)) | (1L << (CREDENTIAL - 430)) | (1L << (CRYPTOGRAPHIC - 430)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 430)) | (1L << (CURSOR_DEFAULT - 430)) | (1L << (DATA - 430)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 430)) | (1L << (DATEADD - 430)) | (1L << (DATEDIFF - 430)) | (1L << (DATENAME - 430)) | (1L << (DATEPART - 430)) | (1L << (DAYS - 430)) | (1L << (DB_CHAINING - 430)) | (1L << (DB_FAILOVER - 430)) | (1L << (DECRYPTION - 430)) | (1L << (DEFAULT_DOUBLE_QUOTE - 430)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 430)) | (1L << (DEFAULT_LANGUAGE - 430)) | (1L << (DELAY - 430)) | (1L << (DELAYED_DURABILITY - 430)) | (1L << (DELETED - 430)) | (1L << (DENSE_RANK - 430)) | (1L << (DEPENDENTS - 430)) | (1L << (DES - 430)) | (1L << (DESCRIPTION - 430)) | (1L << (DESX - 430)) | (1L << (DHCP - 430)) | (1L << (DIALOG - 430)) | (1L << (DIRECTORY_NAME - 430)) | (1L << (DISABLE - 430)) | (1L << (DISABLE_BROKER - 430)) | (1L << (DISABLED - 430)) | (1L << (DISK_DRIVE - 430)) | (1L << (DOCUMENT - 430)) | (1L << (DYNAMIC - 430)) | (1L << (EMERGENCY - 430)) | (1L << (EMPTY - 430)) | (1L << (ENABLE - 430)) | (1L << (ENABLE_BROKER - 430)) | (1L << (ENCRYPTED_VALUE - 430)) | (1L << (ENCRYPTION - 430)) | (1L << (ENDPOINT_URL - 430)))) != 0) || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (ERROR_BROKER_CONVERSATIONS - 494)) | (1L << (EXCLUSIVE - 494)) | (1L << (EXECUTABLE - 494)) | (1L << (EXIST - 494)) | (1L << (EXPAND - 494)) | (1L << (EXPIRY_DATE - 494)) | (1L << (EXPLICIT - 494)) | (1L << (FAIL_OPERATION - 494)) | (1L << (FAILOVER_MODE - 494)) | (1L << (FAILURE - 494)) | (1L << (FAILURE_CONDITION_LEVEL - 494)) | (1L << (FAST - 494)) | (1L << (FAST_FORWARD - 494)) | (1L << (FILEGROUP - 494)) | (1L << (FILEGROWTH - 494)) | (1L << (FILEPATH - 494)) | (1L << (FILESTREAM - 494)) | (1L << (FILTER - 494)) | (1L << (FIRST - 494)) | (1L << (FIRST_VALUE - 494)) | (1L << (FOLLOWING - 494)) | (1L << (FORCE - 494)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 494)) | (1L << (FORCED - 494)) | (1L << (FORMAT - 494)) | (1L << (FORWARD_ONLY - 494)) | (1L << (FULLSCAN - 494)) | (1L << (FULLTEXT - 494)) | (1L << (GB - 494)) | (1L << (GETDATE - 494)) | (1L << (GETUTCDATE - 494)) | (1L << (GLOBAL - 494)) | (1L << (GO - 494)) | (1L << (GROUP_MAX_REQUESTS - 494)) | (1L << (GROUPING - 494)) | (1L << (GROUPING_ID - 494)) | (1L << (HADR - 494)) | (1L << (HASH - 494)) | (1L << (HEALTH_CHECK_TIMEOUT - 494)) | (1L << (HIGH - 494)) | (1L << (HONOR_BROKER_PRIORITY - 494)) | (1L << (HOURS - 494)) | (1L << (IDENTITY_VALUE - 494)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 494)) | (1L << (IMMEDIATE - 494)) | (1L << (IMPERSONATE - 494)) | (1L << (IMPORTANCE - 494)) | (1L << (INCREMENTAL - 494)) | (1L << (INITIATOR - 494)) | (1L << (INPUT - 494)) | (1L << (INSENSITIVE - 494)) | (1L << (INSERTED - 494)) | (1L << (INT - 494)) | (1L << (IP - 494)) | (1L << (ISOLATION - 494)) | (1L << (KB - 494)) | (1L << (KEEP - 494)) | (1L << (KEEPFIXED - 494)) | (1L << (KEY_SOURCE - 494)) | (1L << (KEYS - 494)) | (1L << (KEYSET - 494)))) != 0) || ((((_la - 558)) & ~0x3f) == 0 && ((1L << (_la - 558)) & ((1L << (LAG - 558)) | (1L << (LAST - 558)) | (1L << (LAST_VALUE - 558)) | (1L << (LEAD - 558)) | (1L << (LEVEL - 558)) | (1L << (LIST - 558)) | (1L << (LISTENER - 558)) | (1L << (LISTENER_URL - 558)) | (1L << (LOB_COMPACTION - 558)) | (1L << (LOCAL - 558)) | (1L << (LOCATION - 558)) | (1L << (LOCK - 558)) | (1L << (LOCK_ESCALATION - 558)) | (1L << (LOGIN - 558)) | (1L << (LOOP - 558)) | (1L << (LOW - 558)) | (1L << (MANUAL - 558)) | (1L << (MARK - 558)) | (1L << (MATERIALIZED - 558)) | (1L << (MAX - 558)) | (1L << (MAX_CPU_PERCENT - 558)) | (1L << (MAX_DOP - 558)) | (1L << (MAX_FILES - 558)) | (1L << (MAX_IOPS_PER_VOLUME - 558)) | (1L << (MAX_MEMORY_PERCENT - 558)) | (1L << (MAX_PROCESSES - 558)) | (1L << (MAX_QUEUE_READERS - 558)) | (1L << (MAX_ROLLOVER_FILES - 558)) | (1L << (MAXDOP - 558)) | (1L << (MAXRECURSION - 558)) | (1L << (MAXSIZE - 558)) | (1L << (MB - 558)) | (1L << (MEDIUM - 558)) | (1L << (MEMORY_OPTIMIZED_DATA - 558)) | (1L << (MESSAGE - 558)) | (1L << (MIN - 558)) | (1L << (MIN_ACTIVE_ROWVERSION - 558)) | (1L << (MIN_CPU_PERCENT - 558)) | (1L << (MIN_IOPS_PER_VOLUME - 558)) | (1L << (MIN_MEMORY_PERCENT - 558)) | (1L << (MINUTES - 558)) | (1L << (MIRROR_ADDRESS - 558)) | (1L << (MIXED_PAGE_ALLOCATION - 558)) | (1L << (MODE - 558)) | (1L << (MODIFY - 558)) | (1L << (MOVE - 558)) | (1L << (MULTI_USER - 558)) | (1L << (NAME - 558)) | (1L << (NESTED_TRIGGERS - 558)) | (1L << (NEW_ACCOUNT - 558)) | (1L << (NEW_BROKER - 558)) | (1L << (NEW_PASSWORD - 558)) | (1L << (NEXT - 558)) | (1L << (NO - 558)) | (1L << (NO_TRUNCATE - 558)) | (1L << (NO_WAIT - 558)) | (1L << (NOCOUNT - 558)) | (1L << (NODES - 558)) | (1L << (NOEXPAND - 558)) | (1L << (NON_TRANSACTED_ACCESS - 558)) | (1L << (NORECOMPUTE - 558)) | (1L << (NORECOVERY - 558)) | (1L << (NOWAIT - 558)) | (1L << (NTILE - 558)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (NUMANODE - 622)) | (1L << (NUMBER - 622)) | (1L << (NUMERIC_ROUNDABORT - 622)) | (1L << (OBJECT - 622)) | (1L << (OFFLINE - 622)) | (1L << (OFFSET - 622)) | (1L << (OLD_ACCOUNT - 622)) | (1L << (ONLINE - 622)) | (1L << (ONLY - 622)) | (1L << (OPEN_EXISTING - 622)) | (1L << (OPTIMISTIC - 622)) | (1L << (OPTIMIZE - 622)) | (1L << (OUT - 622)) | (1L << (OUTPUT - 622)) | (1L << (OWNER - 622)) | (1L << (PAGE_VERIFY - 622)) | (1L << (PARAMETERIZATION - 622)) | (1L << (PARTITION - 622)) | (1L << (PARTITIONS - 622)) | (1L << (PARTNER - 622)) | (1L << (PATH - 622)) | (1L << (POISON_MESSAGE_HANDLING - 622)) | (1L << (POOL - 622)) | (1L << (PORT - 622)) | (1L << (PRECEDING - 622)) | (1L << (PRIMARY_ROLE - 622)) | (1L << (PRIOR - 622)) | (1L << (PRIORITY - 622)) | (1L << (PRIORITY_LEVEL - 622)) | (1L << (PRIVATE - 622)) | (1L << (PRIVATE_KEY - 622)) | (1L << (PRIVILEGES - 622)) | (1L << (PROCEDURE_NAME - 622)) | (1L << (PROPERTY - 622)) | (1L << (PROVIDER - 622)) | (1L << (PROVIDER_KEY_NAME - 622)) | (1L << (QUERY - 622)) | (1L << (QUEUE - 622)) | (1L << (QUEUE_DELAY - 622)) | (1L << (QUOTED_IDENTIFIER - 622)) | (1L << (RANGE - 622)) | (1L << (RANK - 622)) | (1L << (RC2 - 622)) | (1L << (RC4 - 622)) | (1L << (RC4_128 - 622)) | (1L << (READ_COMMITTED_SNAPSHOT - 622)) | (1L << (READ_ONLY - 622)) | (1L << (READ_ONLY_ROUTING_LIST - 622)) | (1L << (READ_WRITE - 622)) | (1L << (READONLY - 622)) | (1L << (REBUILD - 622)) | (1L << (RECEIVE - 622)) | (1L << (RECOMPILE - 622)) | (1L << (RECOVERY - 622)) | (1L << (RECURSIVE_TRIGGERS - 622)) | (1L << (RELATIVE - 622)) | (1L << (REMOTE - 622)) | (1L << (REMOTE_SERVICE_NAME - 622)) | (1L << (REMOVE - 622)) | (1L << (REORGANIZE - 622)) | (1L << (REPEATABLE - 622)) | (1L << (REPLICA - 622)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 622)))) != 0) || ((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & ((1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 686)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 686)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 686)) | (1L << (RESERVE_DISK_SPACE - 686)) | (1L << (RESOURCE - 686)) | (1L << (RESOURCE_MANAGER_LOCATION - 686)) | (1L << (RESTRICTED_USER - 686)) | (1L << (RETENTION - 686)) | (1L << (ROBUST - 686)) | (1L << (ROOT - 686)) | (1L << (ROUTE - 686)) | (1L << (ROW - 686)) | (1L << (ROW_NUMBER - 686)) | (1L << (ROWGUID - 686)) | (1L << (ROWS - 686)) | (1L << (SAMPLE - 686)) | (1L << (SCHEMABINDING - 686)) | (1L << (SCOPED - 686)) | (1L << (SCROLL - 686)) | (1L << (SCROLL_LOCKS - 686)) | (1L << (SEARCH - 686)) | (1L << (SECONDARY - 686)) | (1L << (SECONDARY_ONLY - 686)) | (1L << (SECONDARY_ROLE - 686)) | (1L << (SECONDS - 686)) | (1L << (SECRET - 686)) | (1L << (SECURITY - 686)) | (1L << (SECURITY_LOG - 686)) | (1L << (SEEDING_MODE - 686)) | (1L << (SELF - 686)) | (1L << (SEMI_SENSITIVE - 686)) | (1L << (SEND - 686)) | (1L << (SENT - 686)) | (1L << (SEQUENCE - 686)) | (1L << (SERIALIZABLE - 686)) | (1L << (SESSION_TIMEOUT - 686)) | (1L << (SETERROR - 686)) | (1L << (SHARE - 686)) | (1L << (SHOWPLAN - 686)) | (1L << (SIGNATURE - 686)) | (1L << (SIMPLE - 686)) | (1L << (SINGLE_USER - 686)) | (1L << (SIZE - 686)) | (1L << (SMALLINT - 686)) | (1L << (SNAPSHOT - 686)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 686)) | (1L << (STANDBY - 686)) | (1L << (START_DATE - 686)) | (1L << (STATIC - 686)) | (1L << (STATS_STREAM - 686)) | (1L << (STATUS - 686)) | (1L << (STDEV - 686)) | (1L << (STDEVP - 686)) | (1L << (STOPLIST - 686)) | (1L << (STRING_AGG - 686)) | (1L << (STUFF - 686)) | (1L << (SUBJECT - 686)) | (1L << (SUM - 686)) | (1L << (SUSPEND - 686)) | (1L << (SYMMETRIC - 686)) | (1L << (SYNCHRONOUS_COMMIT - 686)) | (1L << (SYNONYM - 686)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (SYSTEM - 750)) | (1L << (TAKE - 750)) | (1L << (TARGET_RECOVERY_TIME - 750)) | (1L << (TB - 750)) | (1L << (TEXTIMAGE_ON - 750)) | (1L << (THROW - 750)) | (1L << (TIES - 750)) | (1L << (TIME - 750)) | (1L << (TIMEOUT - 750)) | (1L << (TIMER - 750)) | (1L << (TINYINT - 750)) | (1L << (TORN_PAGE_DETECTION - 750)) | (1L << (TRANSFORM_NOISE_WORDS - 750)) | (1L << (TRIPLE_DES - 750)) | (1L << (TRIPLE_DES_3KEY - 750)) | (1L << (TRUSTWORTHY - 750)) | (1L << (TRY - 750)) | (1L << (TSQL - 750)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 750)) | (1L << (TYPE - 750)) | (1L << (TYPE_WARNING - 750)) | (1L << (UNBOUNDED - 750)) | (1L << (UNCOMMITTED - 750)) | (1L << (UNKNOWN - 750)) | (1L << (UNLIMITED - 750)) | (1L << (USING - 750)) | (1L << (VALID_XML - 750)) | (1L << (VALIDATION - 750)) | (1L << (VALUE - 750)) | (1L << (VAR - 750)) | (1L << (VARP - 750)) | (1L << (VIEW_METADATA - 750)) | (1L << (VIEWS - 750)) | (1L << (WAIT - 750)) | (1L << (WELL_FORMED_XML - 750)) | (1L << (WORK - 750)) | (1L << (WORKLOAD - 750)) | (1L << (XML - 750)) | (1L << (XMLNAMESPACES - 750)) | (1L << (ID - 750)))) != 0) || _la==URL) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_comparison_operator);
		try {
			setState(10891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10876);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10877);
				match(GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10878);
				match(LESS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10879);
				match(LESS);
				setState(10880);
				match(EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10881);
				match(GREATER);
				setState(10882);
				match(EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10883);
				match(LESS);
				setState(10884);
				match(GREATER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10885);
				match(EXCLAMATION);
				setState(10886);
				match(EQUAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10887);
				match(EXCLAMATION);
				setState(10888);
				match(GREATER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10889);
				match(EXCLAMATION);
				setState(10890);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitAssignment_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitAssignment_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10893);
			_la = _input.LA(1);
			if ( !(((((_la - 821)) & ~0x3f) == 0 && ((1L << (_la - 821)) & ((1L << (PLUS_ASSIGN - 821)) | (1L << (MINUS_ASSIGN - 821)) | (1L << (MULT_ASSIGN - 821)) | (1L << (DIV_ASSIGN - 821)) | (1L << (MOD_ASSIGN - 821)) | (1L << (AND_ASSIGN - 821)) | (1L << (XOR_ASSIGN - 821)) | (1L << (OR_ASSIGN - 821)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sizeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(MocaSqlParser.DECIMAL, 0); }
		public TerminalNode KB() { return getToken(MocaSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(MocaSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(MocaSqlParser.GB, 0); }
		public TerminalNode TB() { return getToken(MocaSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).enterFile_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MocaSqlListener ) ((MocaSqlListener)listener).exitFile_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MocaSqlVisitor ) return ((MocaSqlVisitor<? extends T>)visitor).visitFile_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_sizeContext file_size() throws RecognitionException {
		File_sizeContext _localctx = new File_sizeContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_file_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10895);
			match(DECIMAL);
			setState(10897);
			_la = _input.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				setState(10896);
				_la = _input.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46:
			return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);
		case 363:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 5);
		case 2:
			return precpred(_ctx, 4);
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0354\u2a96\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\3\2\7\2\u0400\n\2\f\2\16\2\u0403\13\2\3\2\3\2\3\3\3\3\7\3\u0409"+
		"\n\3\f\3\16\3\u040c\13\3\3\3\5\3\u040f\n\3\3\3\3\3\7\3\u0413\n\3\f\3\16"+
		"\3\u0416\13\3\5\3\u0418\n\3\3\4\3\4\5\4\u041c\n\4\6\4\u041e\n\4\r\4\16"+
		"\4\u041f\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0429\n\5\3\6\3\6\3\6\3\6\3\6"+
		"\5\6\u0430\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\5\7\u04d1\n\7\3\b\3\b\3\b\3\b\3\b\5\b\u04d8\n\b\3"+
		"\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u04e6\n\t\3\n\3\n\5"+
		"\n\u04ea\n\n\3\n\5\n\u04ed\n\n\3\n\3\n\5\n\u04f1\n\n\3\13\3\13\5\13\u04f5"+
		"\n\13\3\f\3\f\5\f\u04f9\n\f\3\r\3\r\3\r\5\r\u04fe\n\r\3\r\3\r\3\r\5\r"+
		"\u0503\n\r\5\r\u0505\n\r\3\16\3\16\5\16\u0509\n\16\3\16\5\16\u050c\n\16"+
		"\3\17\3\17\3\17\3\17\3\17\5\17\u0513\n\17\3\17\5\17\u0516\n\17\3\20\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\5\20\u051f\n\20\3\20\5\20\u0522\n\20\3\21"+
		"\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\5\24\u052d\n\24\3\24\5\24\u0530"+
		"\n\24\3\24\3\24\3\24\5\24\u0535\n\24\3\24\3\24\3\24\5\24\u053a\n\24\3"+
		"\24\5\24\u053d\n\24\3\24\3\24\3\24\5\24\u0542\n\24\3\25\3\25\5\25\u0546"+
		"\n\25\3\25\5\25\u0549\n\25\3\25\3\25\5\25\u054d\n\25\3\25\5\25\u0550\n"+
		"\25\3\25\5\25\u0553\n\25\3\26\3\26\3\26\3\26\3\26\5\26\u055a\n\26\3\26"+
		"\3\26\5\26\u055e\n\26\5\26\u0560\n\26\3\27\3\27\3\27\5\27\u0565\n\27\3"+
		"\27\3\27\7\27\u0569\n\27\f\27\16\27\u056c\13\27\3\27\5\27\u056f\n\27\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u057a\n\30\f\30\16\30"+
		"\u057d\13\30\3\30\3\30\3\30\5\30\u0582\n\30\3\30\5\30\u0585\n\30\3\30"+
		"\3\30\3\30\3\30\3\30\7\30\u058c\n\30\f\30\16\30\u058f\13\30\5\30\u0591"+
		"\n\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\5\32\u05a5\n\32\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\5\33\u05ad\n\33\3\33\3\33\3\33\5\33\u05b2\n\33\3\33\5\33\u05b5\n\33\3"+
		"\33\3\33\3\33\5\33\u05ba\n\33\3\33\5\33\u05bd\n\33\3\33\3\33\3\33\5\33"+
		"\u05c2\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u05ca\n\34\3\34\3\34\3"+
		"\34\5\34\u05cf\n\34\3\34\5\34\u05d2\n\34\3\34\3\34\3\34\5\34\u05d7\n\34"+
		"\3\35\3\35\3\35\3\35\5\35\u05dd\n\35\3\35\3\35\3\35\5\35\u05e2\n\35\3"+
		"\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3!\5!\u05f3"+
		"\n!\3!\5!\u05f6\n!\3!\5!\u05f9\n!\3!\5!\u05fc\n!\3\"\3\"\3\"\5\"\u0601"+
		"\n\"\3#\3#\3$\3$\3$\3%\3%\5%\u060a\n%\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3"+
		")\3)\3)\3)\5)\u0619\n)\3*\3*\3+\3+\3+\3,\3,\3-\3-\3-\3.\3.\3/\3/\3/\5"+
		"/\u062a\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0635\n\60"+
		"\3\60\3\60\7\60\u0639\n\60\f\60\16\60\u063c\13\60\3\61\3\61\3\61\3\61"+
		"\3\62\3\62\3\63\3\63\3\64\3\64\3\64\3\64\5\64\u064a\n\64\3\65\3\65\3\66"+
		"\3\66\3\66\3\67\3\67\38\38\38\38\38\38\58\u0659\n8\39\39\3:\3:\3:\3:\3"+
		":\5:\u0662\n:\3:\3:\5:\u0666\n:\3:\6:\u0669\n:\r:\16:\u066a\3:\3:\3:\3"+
		":\5:\u0671\n:\3;\3;\3;\3;\5;\u0677\n;\3;\5;\u067a\n;\3;\6;\u067d\n;\r"+
		";\16;\u067e\3;\3;\3;\5;\u0684\n;\3<\3<\3<\3<\3<\3<\5<\u068c\n<\3=\3=\3"+
		"=\3=\3>\3>\3>\3>\5>\u0696\n>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3"+
		"@\3@\3@\3@\5@\u06a9\n@\3A\3A\3A\3A\3A\3A\5A\u06b1\nA\3A\3A\3A\3A\3A\3"+
		"A\3A\3A\3A\3A\3A\5A\u06be\nA\5A\u06c0\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3"+
		"A\5A\u06cc\nA\5A\u06ce\nA\3A\3A\3A\3A\3A\5A\u06d5\nA\3B\3B\3B\3B\3B\3"+
		"B\3B\5B\u06de\nB\3C\3C\3C\3C\5C\u06e4\nC\3C\3C\3C\3C\3D\3D\3D\5D\u06ed"+
		"\nD\3E\3E\3F\3F\3F\3G\3G\3G\3G\3H\3H\3H\3H\5H\u06fc\nH\3H\3H\3H\3H\3I"+
		"\3I\3I\3I\5I\u0706\nI\3I\3I\3I\3I\3J\3J\3J\3J\5J\u0710\nJ\3J\3J\3J\3J"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0738\nK\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u074f\nL\3M\3M\3N\3N\3O\3O"+
		"\3O\3O\3O\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\3R\3R\3R\5R\u0773\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\5R\u0785\nR\3R\5R\u0788\nR\3R\3R\3R\5R\u078d\nR\3R\5R\u0790\nR"+
		"\3R\3R\3R\5R\u0795\nR\3R\5R\u0798\nR\3R\3R\3R\5R\u079d\nR\3R\5R\u07a0"+
		"\nR\3R\3R\3R\5R\u07a5\nR\3R\5R\u07a8\nR\3R\3R\3R\3R\3R\3R\5R\u07b0\nR"+
		"\3R\5R\u07b3\nR\3R\3R\3R\3R\3R\3R\5R\u07bb\nR\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\3R\5R\u07c8\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07d3\nR\3R\7R\u07d6"+
		"\nR\fR\16R\u07d9\13R\3R\5R\u07dc\nR\3R\3R\3R\3R\5R\u07e2\nR\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07f9\nR\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0805\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0810"+
		"\nR\3R\7R\u0813\nR\fR\16R\u0816\13R\3R\5R\u0819\nR\3R\3R\3R\3R\5R\u081f"+
		"\nR\5R\u0821\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u082e\nR\3R\3R\3R"+
		"\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\6R\u0843\nR\rR\16R\u0844"+
		"\3R\3R\3R\3R\3R\5R\u084c\nR\3R\3R\3R\3R\3R\3R\3R\5R\u0855\nR\3R\3R\3R"+
		"\5R\u085a\nR\3R\5R\u085d\nR\3R\3R\3R\5R\u0862\nR\3R\5R\u0865\nR\3R\3R"+
		"\3R\5R\u086a\nR\3R\6R\u086d\nR\rR\16R\u086e\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u088b\nR\3R\3"+
		"R\3R\3R\3R\5R\u0892\nR\3R\6R\u0895\nR\rR\16R\u0896\3R\3R\3R\3R\3R\5R\u089e"+
		"\nR\5R\u08a0\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u08ab\nR\3R\3R\3R\3R\5R"+
		"\u08b1\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u08c0\nR\3S\3S\3S"+
		"\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u08ce\nS\3S\5S\u08d1\nS\5S\u08d3\nS\3S"+
		"\3S\3S\5S\u08d8\nS\3S\3S\5S\u08dc\nS\3S\5S\u08df\nS\5S\u08e1\nS\3S\3S"+
		"\3S\3S\5S\u08e7\nS\3S\5S\u08ea\nS\5S\u08ec\nS\3S\3S\3S\3S\5S\u08f2\nS"+
		"\5S\u08f4\nS\3S\3S\3T\3T\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U"+
		"\3U\5U\u090a\nU\3U\3U\3U\3U\3U\3U\5U\u0912\nU\3U\3U\3U\3U\3U\3U\5U\u091a"+
		"\nU\6U\u091c\nU\rU\16U\u091d\3U\3U\3U\3U\3U\3U\3U\5U\u0927\nU\3V\3V\3"+
		"V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u093c\nV\3V\3V\3"+
		"W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0949\nW\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3"+
		"W\3W\3W\5W\u0958\nW\6W\u095a\nW\rW\16W\u095b\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3"+
		"Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3^\3"+
		"^\3^\3^\5^\u097f\n^\3^\5^\u0982\n^\3^\6^\u0985\n^\r^\16^\u0986\3_\3_\3"+
		"_\3_\3_\3_\3`\3`\3`\3`\3`\3`\3a\3a\3a\3a\5a\u0999\na\3a\5a\u099c\na\3"+
		"a\3a\3a\5a\u09a1\na\3a\3a\3b\3b\3b\3b\3c\3c\3c\3c\3c\3c\3d\3d\3d\3d\3"+
		"d\3d\3e\3e\3e\3e\3e\3e\5e\u09bb\ne\3f\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3"+
		"g\5g\u09c9\ng\3g\3g\3g\5g\u09ce\ng\3g\3g\3h\3h\3h\3h\5h\u09d6\nh\3h\6"+
		"h\u09d9\nh\rh\16h\u09da\3h\3h\3h\3h\3h\5h\u09e2\nh\3i\3i\3i\3i\3i\3i\3"+
		"i\3j\3j\3j\3j\3j\3k\3k\3k\3k\3k\3k\3k\5k\u09f7\nk\3k\3k\3l\3l\3l\3l\3"+
		"l\3m\3m\3m\3m\3n\3n\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3q\3q\3q\3q\3"+
		"q\3r\3r\3r\3r\3r\5r\u0a1c\nr\3r\3r\3r\5r\u0a21\nr\3r\3r\3s\3s\3s\3s\3"+
		"s\3s\3t\3t\3t\3t\3t\3u\3u\3u\3u\5u\u0a34\nu\3u\3u\3v\3v\3v\3v\3w\3w\3"+
		"w\3w\5w\u0a40\nw\3w\5w\u0a43\nw\3w\3w\3w\5w\u0a48\nw\3w\5w\u0a4b\nw\3"+
		"x\3x\3x\3x\5x\u0a51\nx\3x\3x\3y\3y\3y\3y\3y\3y\3z\3z\3z\3z\3z\5z\u0a60"+
		"\nz\3z\3z\3z\5z\u0a65\nz\3z\3z\3{\3{\3{\3{\5{\u0a6d\n{\3{\5{\u0a70\n{"+
		"\3{\3{\3{\5{\u0a75\n{\3{\3{\3{\5{\u0a7a\n{\3{\5{\u0a7d\n{\3|\3|\3|\3|"+
		"\3|\3}\3}\3}\3}\3}\3}\3~\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\u0080\3"+
		"\u0080\5\u0080\u0a95\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5"+
		"\u0080\u0a9c\n\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0aa1\n\u0080\3\u0080"+
		"\3\u0080\3\u0080\5\u0080\u0aa6\n\u0080\3\u0080\3\u0080\3\u0080\6\u0080"+
		"\u0aab\n\u0080\r\u0080\16\u0080\u0aac\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\5\u0081\u0ab4\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0ac1\n\u0082"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0ac7\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u0acc\n\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u0ad4\n\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0ae4\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\5\u0087"+
		"\u0aeb\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0af0\n\u0087\3\u0087\6"+
		"\u0087\u0af3\n\u0087\r\u0087\16\u0087\u0af4\3\u0087\5\u0087\u0af8\n\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0afe\n\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0b04\n\u0087\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0b09\n\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0b0e\n\u0088\3\u0088\6"+
		"\u0088\u0b11\n\u0088\r\u0088\16\u0088\u0b12\3\u0088\5\u0088\u0b16\n\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0b1c\n\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0b22\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0b2d\n\u0089\3\u0089"+
		"\5\u0089\u0b30\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0b3a\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\5\u008a\u0b40\n\u008a\6\u008a\u0b42\n\u008a\r\u008a\16\u008a\u0b43\3"+
		"\u008a\3\u008a\5\u008a\u0b48\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0b65\n\u008c\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\5\u008d\u0b72\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d"+
		"\u0b78\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\5\u008e\u0b82\n\u008e\3\u008e\5\u008e\u0b85\n\u008e\3\u008f\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090"+
		"\u0b99\n\u0090\3\u0090\3\u0090\5\u0090\u0b9d\n\u0090\3\u0090\3\u0090\5"+
		"\u0090\u0ba1\n\u0090\3\u0090\6\u0090\u0ba4\n\u0090\r\u0090\16\u0090\u0ba5"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bb5\n\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\5\u0091\u0bbc\n\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bc5\n\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\7\u0091\u0bcb\n\u0091\f\u0091\16\u0091\u0bce\13\u0091"+
		"\5\u0091\u0bd0\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bd5\n\u0091\3"+
		"\u0091\3\u0091\3\u0091\5\u0091\u0bda\n\u0091\3\u0091\3\u0091\3\u0091\3"+
		"\u0091\6\u0091\u0be0\n\u0091\r\u0091\16\u0091\u0be1\3\u0091\3\u0091\6"+
		"\u0091\u0be6\n\u0091\r\u0091\16\u0091\u0be7\3\u0091\3\u0091\5\u0091\u0bec"+
		"\n\u0091\3\u0091\3\u0091\7\u0091\u0bf0\n\u0091\f\u0091\16\u0091\u0bf3"+
		"\13\u0091\7\u0091\u0bf5\n\u0091\f\u0091\16\u0091\u0bf8\13\u0091\3\u0091"+
		"\5\u0091\u0bfb\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u0c02\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0c08\n\u0091\f"+
		"\u0091\16\u0091\u0c0b\13\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0c12\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\5\u0091\u0c1b\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c20\n"+
		"\u0091\3\u0091\3\u0091\5\u0091\u0c24\n\u0091\3\u0091\5\u0091\u0c27\n\u0091"+
		"\6\u0091\u0c29\n\u0091\r\u0091\16\u0091\u0c2a\3\u0091\3\u0091\7\u0091"+
		"\u0c2f\n\u0091\f\u0091\16\u0091\u0c32\13\u0091\7\u0091\u0c34\n\u0091\f"+
		"\u0091\16\u0091\u0c37\13\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0c3e\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0c44\n"+
		"\u0091\f\u0091\16\u0091\u0c47\13\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u0c4c\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c52\n\u0091\3"+
		"\u0091\5\u0091\u0c55\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c5a\n\u0091"+
		"\3\u0091\5\u0091\u0c5d\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0c64\n\u0091\5\u0091\u0c66\n\u0091\3\u0091\5\u0091\u0c69\n\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c6f\n\u0091\3\u0091\5\u0091"+
		"\u0c72\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c77\n\u0091\3\u0091\5"+
		"\u0091\u0c7a\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c7f\n\u0091\3\u0091"+
		"\5\u0091\u0c82\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c87\n\u0091\3"+
		"\u0091\5\u0091\u0c8a\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c8f\n\u0091"+
		"\3\u0092\5\u0092\u0c92\n\u0092\3\u0092\5\u0092\u0c95\n\u0092\3\u0092\5"+
		"\u0092\u0c98\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0c9f"+
		"\n\u0092\6\u0092\u0ca1\n\u0092\r\u0092\16\u0092\u0ca2\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\5\u0093\u0caa\n\u0093\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\5\u0094\u0cb1\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0cb7\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cc4\n\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0cc8\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ccd\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0cd7\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0ce0\n\u0094\3\u0094\3\u0094\5\u0094\u0ce4\n\u0094\3"+
		"\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\5\u0095\u0cf0\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u0cf6\n\u0095\3\u0095\3\u0095\3\u0095\6\u0095\u0cfb\n\u0095\r\u0095\16"+
		"\u0095\u0cfc\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3"+
		"\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\5\u0095\u0d11\n\u0095\3\u0095\3\u0095\5\u0095\u0d15\n"+
		"\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d1d\n"+
		"\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096"+
		"\u0d26\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d2c\n\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0d32\n\u0096\3\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\6\u0096\u0d3a\n\u0096\r\u0096\16\u0096"+
		"\u0d3b\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\5\u0097\u0d46\n\u0097\3\u0097\3\u0097\5\u0097\u0d4a\n\u0097\3\u0097\5"+
		"\u0097\u0d4d\n\u0097\3\u0097\3\u0097\5\u0097\u0d51\n\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u0d56\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0d5c\n\u0097\3\u0097\5\u0097\u0d5f\n\u0097\3\u0097\3\u0097\5\u0097\u0d63"+
		"\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\6\u0097\u0d6b"+
		"\n\u0097\r\u0097\16\u0097\u0d6c\3\u0097\5\u0097\u0d70\n\u0097\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d78\n\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d80\n\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d87\n\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\6\u0098\u0d8e\n\u0098\r\u0098\16\u0098\u0d8f"+
		"\5\u0098\u0d92\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d97\n\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d9d\n\u0098\3\u0098\6\u0098\u0da0"+
		"\n\u0098\r\u0098\16\u0098\u0da1\5\u0098\u0da4\n\u0098\3\u0098\5\u0098"+
		"\u0da7\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0dac\n\u0098\3\u0098\5"+
		"\u0098\u0daf\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0db4\n\u0098\3\u0098"+
		"\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\5\u0099\u0dc3\n\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\5\u0099\u0dca\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\6\u0099\u0dd1\n\u0099\r\u0099\16\u0099\u0dd2\5\u0099\u0dd5\n"+
		"\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0dda\n\u0099\3\u0099\3\u0099\3"+
		"\u0099\3\u0099\5\u0099\u0de0\n\u0099\3\u0099\6\u0099\u0de3\n\u0099\r\u0099"+
		"\16\u0099\u0de4\5\u0099\u0de7\n\u0099\3\u0099\5\u0099\u0dea\n\u0099\3"+
		"\u0099\3\u0099\3\u0099\5\u0099\u0def\n\u0099\3\u0099\5\u0099\u0df2\n\u0099"+
		"\3\u0099\3\u0099\3\u0099\5\u0099\u0df7\n\u0099\3\u0099\3\u0099\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a"+
		"\u0e04\n\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0e09\n\u009a\3\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0e12\n\u009b\3"+
		"\u009b\3\u009b\3\u009b\5\u009b\u0e17\n\u009b\3\u009b\3\u009b\3\u009b\3"+
		"\u009b\5\u009b\u0e1d\n\u009b\3\u009b\3\u009b\5\u009b\u0e21\n\u009b\3\u009b"+
		"\3\u009b\5\u009b\u0e25\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\5\u009c\u0e36\n\u009c\5\u009c\u0e38\n\u009c\3\u009d\3\u009d\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e42\n\u009d\3"+
		"\u009d\3\u009d\3\u009d\5\u009d\u0e47\n\u009d\5\u009d\u0e49\n\u009d\3\u009d"+
		"\3\u009d\5\u009d\u0e4d\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e53\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e5b\n\u009e\3\u009e\7\u009e\u0e5e\n\u009e\f\u009e\16\u009e\u0e61\13"+
		"\u009e\5\u009e\u0e63\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0e69"+
		"\n\u009e\f\u009e\16\u009e\u0e6c\13\u009e\5\u009e\u0e6e\n\u009e\3\u009e"+
		"\3\u009e\3\u009e\5\u009e\u0e73\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e78\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e7d\n\u009e\3\u009e\3"+
		"\u009e\3\u009e\5\u009e\u0e82\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e87"+
		"\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e8c\n\u009e\3\u009e\3\u009e"+
		"\5\u009e\u0e90\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e95\n\u009e\3"+
		"\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u0ea0\n\u009f\3\u009f\7\u009f\u0ea3\n\u009f\f\u009f\16\u009f"+
		"\u0ea6\13\u009f\5\u009f\u0ea8\n\u009f\3\u009f\5\u009f\u0eab\n\u009f\3"+
		"\u009f\3\u009f\3\u009f\5\u009f\u0eb0\n\u009f\3\u009f\5\u009f\u0eb3\n\u009f"+
		"\3\u009f\3\u009f\3\u009f\5\u009f\u0eb8\n\u009f\3\u009f\5\u009f\u0ebb\n"+
		"\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0ec0\n\u009f\3\u009f\5\u009f\u0ec3"+
		"\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0ec8\n\u009f\3\u009f\5\u009f"+
		"\u0ecb\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0ed0\n\u009f\3\u009f\5"+
		"\u009f\u0ed3\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0ed8\n\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\5\u009f\u0ede\n\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u0ee3\n\u009f\3\u009f\5\u009f\u0ee6\n\u009f\3\u009f\3\u009f\3"+
		"\u009f\5\u009f\u0eeb\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5"+
		"\u009f\u0ef2\n\u009f\5\u009f\u0ef4\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\5\u00a0\u0efa\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\5\u00a0\u0f03\n\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0f08\n"+
		"\u00a0\5\u00a0\u0f0a\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0f16\n\u00a1\3\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f1c\n\u00a2\3\u00a2\3\u00a2\3\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0f26\n\u00a2\f\u00a2\16"+
		"\u00a2\u0f29\13\u00a2\5\u00a2\u0f2b\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5"+
		"\u00a2\u0f30\n\u00a2\5\u00a2\u0f32\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f3c\n\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\5\u00a3\u0f41\n\u00a3\5\u00a3\u0f43\n\u00a3\3\u00a3\3\u00a3\5"+
		"\u00a3\u0f47\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f4d\n\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f5f"+
		"\n\u00a4\5\u00a4\u0f61\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6"+
		"\u0f70\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\5\u00a6\u0f82\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\5\u00a6\u0f8a\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\5\u00a7\u0f94\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\5\u00a8\u0fa4\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0fb9\n\u00aa\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab"+
		"\u0fc4\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fca\n\u00ab\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0fd3\n"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0fdc\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0fe2\n\u00ac\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0feb\n"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ff0\n\u00ad\3\u00ad\5\u00ad\u0ff3"+
		"\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ff8\n\u00ad\3\u00ad\5\u00ad"+
		"\u0ffb\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u1000\n\u00ad\3\u00ad\5"+
		"\u00ad\u1003\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5"+
		"\u00ad\u100b\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u1011\n\u00ad"+
		"\6\u00ad\u1013\n\u00ad\r\u00ad\16\u00ad\u1014\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\5\u00ad\u101c\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\5\u00ad\u1022\n\u00ad\6\u00ad\u1024\n\u00ad\r\u00ad\16\u00ad\u1025\3"+
		"\u00ad\5\u00ad\u1029\n\u00ad\5\u00ad\u102b\n\u00ad\3\u00ad\5\u00ad\u102e"+
		"\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u1033\n\u00ad\3\u00ad\5\u00ad"+
		"\u1036\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u103b\n\u00ad\3\u00ad\5"+
		"\u00ad\u103e\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u1043\n\u00ad\3\u00ad"+
		"\5\u00ad\u1046\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u104b\n\u00ad\3"+
		"\u00ad\5\u00ad\u104e\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3"+
		"\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae"+
		"\u105d\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\5\u00ae\u1068\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u1074\n\u00af"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u107b\n\u00b0\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1082\n\u00b1\3\u00b1\3\u00b1"+
		"\5\u00b1\u1086\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u108b\n\u00b1\3"+
		"\u00b1\5\u00b1\u108e\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1093\n\u00b1"+
		"\3\u00b1\5\u00b1\u1096\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u109b\n"+
		"\u00b1\3\u00b1\5\u00b1\u109e\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\5\u00b1\u10a7\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b2\5\u00b2\u10ae\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\5\u00b3\u10bd\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u10c1\n\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b3\5\u00b3\u10c6\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10d1\n\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10db\n"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\5\u00b4\u10e7\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\7\u00b4\u10ed\n\u00b4\f\u00b4\16\u00b4\u10f0\13\u00b4\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u10f7\n\u00b5\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u1100\n\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u1105\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1110\n\u00b7\3\u00b7\5\u00b7"+
		"\u1113\n\u00b7\3\u00b7\3\u00b7\5\u00b7\u1117\n\u00b7\3\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u111f\n\u00b8\3\u00b8\3\u00b8\5"+
		"\u00b8\u1123\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u1127\n\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u112f\n\u00b8\3\u00b8\6\u00b8"+
		"\u1132\n\u00b8\r\u00b8\16\u00b8\u1133\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\5\u00b8\u113c\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8"+
		"\u1141\n\u00b8\3\u00b8\3\u00b8\7\u00b8\u1145\n\u00b8\f\u00b8\16\u00b8"+
		"\u1148\13\u00b8\6\u00b8\u114a\n\u00b8\r\u00b8\16\u00b8\u114b\3\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u1155\n\u00b8\3"+
		"\u00b8\5\u00b8\u1158\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u115d\n\u00b8"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1164\n\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u116a\n\u00b9\5\u00b9\u116c\n\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\5\u00b9\u1171\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\5\u00b9\u1177\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u117d"+
		"\n\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1182\n\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\5\u00b9\u1188\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u118f\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1194\n"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1199\n\u00ba\3\u00ba\3\u00ba\3"+
		"\u00ba\5\u00ba\u119e\n\u00ba\3\u00ba\5\u00ba\u11a1\n\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u11a5\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u11a9\n\u00ba\3\u00ba\3"+
		"\u00ba\5\u00ba\u11ad\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u11b1\n\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\5\u00ba\u11b6\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u11ba\n"+
		"\u00ba\3\u00ba\3\u00ba\5\u00ba\u11be\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11c8\n\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\5\u00bb\u11ce\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\5\u00bb\u11d5\n\u00bb\3\u00bb\5\u00bb\u11d8\n\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11de\n\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\5\u00bb\u11e4\n\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u11e9\n"+
		"\u00bb\f\u00bb\16\u00bb\u11ec\13\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb"+
		"\u11f1\n\u00bb\5\u00bb\u11f3\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11f8"+
		"\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11fe\n\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1204\n\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\7\u00bb\u1209\n\u00bb\f\u00bb\16\u00bb\u120c\13\u00bb\3\u00bb\5\u00bb"+
		"\u120f\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u1213\n\u00bb\3\u00bb\5\u00bb\u1216"+
		"\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1224\n\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\5\u00bb\u1229\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u122d\n\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\5\u00bb\u123a\n\u00bb\3\u00bb\5\u00bb\u123d\n\u00bb\5"+
		"\u00bb\u123f\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5"+
		"\u00bb\u1247\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\5\u00bc\u1251\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5"+
		"\u00bc\u1257\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u125e"+
		"\n\u00bc\3\u00bc\5\u00bc\u1261\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\5\u00bc\u1267\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u126d\n"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u1272\n\u00bc\f\u00bc\16\u00bc"+
		"\u1275\13\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u127a\n\u00bc\5\u00bc"+
		"\u127c\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1281\n\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\5\u00bc\u1287\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\5\u00bc\u128d\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1293"+
		"\n\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u1298\n\u00bc\f\u00bc\16\u00bc"+
		"\u129b\13\u00bc\3\u00bc\5\u00bc\u129e\n\u00bc\3\u00bc\3\u00bc\5\u00bc"+
		"\u12a2\n\u00bc\3\u00bc\5\u00bc\u12a5\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\5\u00bc\u12b3\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u12b8\n\u00bc\3"+
		"\u00bc\3\u00bc\5\u00bc\u12bc\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u12c9\n"+
		"\u00bc\3\u00bc\5\u00bc\u12cc\n\u00bc\5\u00bc\u12ce\n\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u12d6\n\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u12e1"+
		"\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u12e8\n\u00bd"+
		"\f\u00bd\16\u00bd\u12eb\13\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u12f3\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u12fe\n\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\7\u00be\u1305\n\u00be\f\u00be\16\u00be\u1308"+
		"\13\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1310"+
		"\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u131c\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u1320\n"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\6\u00bf\u1325\n\u00bf\r\u00bf\16\u00bf"+
		"\u1326\5\u00bf\u1329\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u132e\n\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u1332\n\u00bf\3\u00bf\3\u00bf\3\u00bf\6\u00bf"+
		"\u1337\n\u00bf\r\u00bf\16\u00bf\u1338\5\u00bf\u133b\n\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u1349\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u134e\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1364\n\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u137a\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u137f\n\u00bf\3"+
		"\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\5\u00c0\u138c\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\5\u00c1\u1394\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u13a8\n\u00c3\3\u00c3"+
		"\5\u00c3\u13ab\n\u00c3\3\u00c3\3\u00c3\7\u00c3\u13af\n\u00c3\f\u00c3\16"+
		"\u00c3\u13b2\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4"+
		"\u13b9\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u13c0\n"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u13c5\n\u00c4\3\u00c4\3\u00c4\5"+
		"\u00c4\u13c9\n\u00c4\6\u00c4\u13cb\n\u00c4\r\u00c4\16\u00c4\u13cc\3\u00c4"+
		"\5\u00c4\u13d0\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5"+
		"\u13d7\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\5\u00c5\u13e9\n\u00c5\5\u00c5\u13eb\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u13ff\n\u00c6"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u1407\n\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u140c\n\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u141e\n\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\5\u00c7\u142d\n\u00c7\5\u00c7\u142f\n\u00c7\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1436\n\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\5\u00c8\u143d\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5"+
		"\u00c8\u1442\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1447\n\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u144d\n\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u1452\n\u00c8\5\u00c8\u1454\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\5\u00c9\u145b\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5"+
		"\u00c9\u1461\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1467\n\u00c9"+
		"\3\u00c9\5\u00c9\u146a\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u1470\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\6\u00c9"+
		"\u1478\n\u00c9\r\u00c9\16\u00c9\u1479\3\u00c9\5\u00c9\u147d\n\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1484\n\u00c9\3\u00c9\5"+
		"\u00c9\u1487\n\u00c9\3\u00c9\3\u00c9\3\u00c9\6\u00c9\u148c\n\u00c9\r\u00c9"+
		"\16\u00c9\u148d\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca"+
		"\u1496\n\u00ca\3\u00ca\3\u00ca\5\u00ca\u149a\n\u00ca\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\5\u00ca\u14a0\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u14a5"+
		"\n\u00ca\f\u00ca\16\u00ca\u14a8\13\u00ca\5\u00ca\u14aa\n\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14b1\n\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\5\u00ca\u14b7\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\5\u00ca\u14be\n\u00ca\3\u00ca\5\u00ca\u14c1\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\5\u00ca\u14c7\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7"+
		"\u00ca\u14cc\n\u00ca\f\u00ca\16\u00ca\u14cf\13\u00ca\5\u00ca\u14d1\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14d9\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14df\n\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14e6\n\u00ca\3\u00ca\5\u00ca\u14e9\n"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14ef\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\7\u00ca\u14f4\n\u00ca\f\u00ca\16\u00ca\u14f7\13\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14fe\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1506\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\5\u00ca\u150c\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7"+
		"\u00ca\u1511\n\u00ca\f\u00ca\16\u00ca\u1514\13\u00ca\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u151d\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\5\u00ca\u1522\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u152c\n\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u1532\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u153e\n\u00cb\5"+
		"\u00cb\u1540\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1547"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u154d\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1553\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u1559\n\u00cc\3\u00cc\3\u00cc\3\u00cc\6\u00cc\u155e\n"+
		"\u00cc\r\u00cc\16\u00cc\u155f\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\5\u00cd\u1567\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\5\u00cd\u156f\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1575\n"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\6\u00cd\u1583\n\u00cd\r\u00cd\16\u00cd"+
		"\u1584\3\u00cd\5\u00cd\u1588\n\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u158d"+
		"\n\u00cd\5\u00cd\u158f\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u159b\n\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u15a1\n\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\6\u00ce\u15af\n\u00ce\r\u00ce\16\u00ce\u15b0\3\u00ce\5\u00ce\u15b4\n"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u15b9\n\u00ce\3\u00ce\5\u00ce\u15bc"+
		"\n\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u15c1\n\u00ce\5\u00ce\u15c3\n"+
		"\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf"+
		"\u15cc\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u15d3\n"+
		"\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15d9\n\u00d0\3\u00d0\5"+
		"\u00d0\u15dc\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15e1\n\u00d0\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15e8\n\u00d1\5\u00d1\u15ea\n"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15f0\n\u00d1\5\u00d1\u15f2"+
		"\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15fa"+
		"\n\u00d1\5\u00d1\u15fc\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u1602\n\u00d1\5\u00d1\u1604\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5"+
		"\u00d1\u160a\n\u00d1\5\u00d1\u160c\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\5\u00d1\u1613\n\u00d1\3\u00d1\5\u00d1\u1616\n\u00d1\5\u00d1\u1618"+
		"\n\u00d1\3\u00d1\5\u00d1\u161b\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u161f\n"+
		"\u00d1\5\u00d1\u1621\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\5\u00d1\u162a\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5"+
		"\u00d2\u1630\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u1634\n\u00d2\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u163c\n\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1643\n\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\5\u00d3\u1649\n\u00d3\5\u00d3\u164b\n\u00d3\3\u00d4\3\u00d4\3"+
		"\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1656\n"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u165b\n\u00d5\3\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\5\u00d5\u1661\n\u00d5\6\u00d5\u1663\n\u00d5\r\u00d5\16"+
		"\u00d5\u1664\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3"+
		"\u00d6\5\u00d6\u166f\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\5\u00d7\u1677\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1683\n\u00d7\3\u00d8\5"+
		"\u00d8\u1686\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5"+
		"\u00d8\u168e\n\u00d8\5\u00d8\u1690\n\u00d8\3\u00d8\5\u00d8\u1693\n\u00d8"+
		"\3\u00d8\3\u00d8\5\u00d8\u1697\n\u00d8\3\u00d8\5\u00d8\u169a\n\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u16a4\n\u00d8\3\u00d8\3\u00d8\7\u00d8\u16a8\n\u00d8\f\u00d8\16\u00d8"+
		"\u16ab\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u16b2"+
		"\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u16b6\n\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u16ba\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\5\u00d8\u16c3\n\u00d8\3\u00d8\3\u00d8\7\u00d8\u16c7\n\u00d8\f\u00d8\16"+
		"\u00d8\u16ca\13\u00d8\3\u00d8\5\u00d8\u16cd\n\u00d8\3\u00d8\5\u00d8\u16d0"+
		"\n\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9"+
		"\u16d9\n\u00d9\f\u00d9\16\u00d9\u16dc\13\u00d9\3\u00d9\5\u00d9\u16df\n"+
		"\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u16e6\n\u00da\3"+
		"\u00da\3\u00da\3\u00da\5\u00da\u16eb\n\u00da\3\u00db\5\u00db\u16ee\n\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u16f6\n\u00db"+
		"\3\u00db\3\u00db\5\u00db\u16fa\n\u00db\3\u00db\5\u00db\u16fd\n\u00db\3"+
		"\u00db\3\u00db\5\u00db\u1701\n\u00db\3\u00db\5\u00db\u1704\n\u00db\3\u00db"+
		"\3\u00db\5\u00db\u1708\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\5\u00db\u170f\n\u00db\3\u00db\3\u00db\5\u00db\u1713\n\u00db\5\u00db\u1715"+
		"\n\u00db\5\u00db\u1717\n\u00db\3\u00db\5\u00db\u171a\n\u00db\3\u00db\5"+
		"\u00db\u171d\n\u00db\3\u00db\5\u00db\u1720\n\u00db\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\5\u00dc\u1726\n\u00dc\3\u00dd\5\u00dd\u1729\n\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1731\n\u00dd\5\u00dd\u1733"+
		"\n\u00dd\3\u00dd\5\u00dd\u1736\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u173a\n"+
		"\u00dd\3\u00dd\5\u00dd\u173d\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5"+
		"\u00dd\u1743\n\u00dd\3\u00dd\5\u00dd\u1746\n\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u174a\n\u00dd\3\u00dd\5\u00dd\u174d\n\u00dd\3\u00dd\5\u00dd\u1750\n\u00dd"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1757\n\u00de\3\u00df"+
		"\5\u00df\u175a\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u1761\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1767\n\u00df\7"+
		"\u00df\u1769\n\u00df\f\u00df\16\u00df\u176c\13\u00df\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1775\n\u00df\3\u00df\5"+
		"\u00df\u1778\n\u00df\3\u00e0\5\u00e0\u177b\n\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u177f\n\u00e0\3\u00e0\5\u00e0\u1782\n\u00e0\3\u00e0\5\u00e0\u1785\n\u00e0"+
		"\3\u00e0\5\u00e0\u1788\n\u00e0\3\u00e1\3\u00e1\5\u00e1\u178c\n\u00e1\3"+
		"\u00e2\5\u00e2\u178f\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\5\u00e2\u1797\n\u00e2\5\u00e2\u1799\n\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u179d\n\u00e2\3\u00e2\5\u00e2\u17a0\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\7\u00e2\u17a6\n\u00e2\f\u00e2\16\u00e2\u17a9\13\u00e2\3\u00e2\5"+
		"\u00e2\u17ac\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u17b0\n\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u17b7\n\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u17bb\n\u00e2\5\u00e2\u17bd\n\u00e2\5\u00e2\u17bf\n\u00e2\3\u00e2\5\u00e2"+
		"\u17c2\n\u00e2\3\u00e2\5\u00e2\u17c5\n\u00e2\3\u00e2\5\u00e2\u17c8\n\u00e2"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u17ce\n\u00e3\f\u00e3\16\u00e3"+
		"\u17d1\13\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u17d6\n\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u17dc\n\u00e3\5\u00e3\u17de\n\u00e3\3"+
		"\u00e4\3\u00e4\5\u00e4\u17e2\n\u00e4\3\u00e4\5\u00e4\u17e5\n\u00e4\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u17ea\n\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5"+
		"\u17ef\n\u00e5\3\u00e5\5\u00e5\u17f2\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\5\u00e6\u17fa\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u17fe"+
		"\n\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u1803\n\u00e6\f\u00e6\16\u00e6"+
		"\u1806\13\u00e6\5\u00e6\u1808\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\7\u00e6\u180f\n\u00e6\f\u00e6\16\u00e6\u1812\13\u00e6\5\u00e6"+
		"\u1814\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u1818\n\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\7\u00e6\u181e\n\u00e6\f\u00e6\16\u00e6\u1821\13\u00e6\5"+
		"\u00e6\u1823\n\u00e6\3\u00e7\3\u00e7\5\u00e7\u1827\n\u00e7\3\u00e7\5\u00e7"+
		"\u182a\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u1838\n\u00e7\3\u00e7"+
		"\3\u00e7\5\u00e7\u183c\n\u00e7\3\u00e7\5\u00e7\u183f\n\u00e7\3\u00e7\3"+
		"\u00e7\5\u00e7\u1843\n\u00e7\3\u00e7\5\u00e7\u1846\n\u00e7\3\u00e8\3\u00e8"+
		"\3\u00e8\5\u00e8\u184b\n\u00e8\3\u00e8\5\u00e8\u184e\n\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u1854\n\u00e8\3\u00e8\5\u00e8\u1857\n\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u185c\n\u00e8\f\u00e8\16\u00e8\u185f"+
		"\13\u00e8\3\u00e8\5\u00e8\u1862\n\u00e8\5\u00e8\u1864\n\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u186a\n\u00e8\f\u00e8\16\u00e8\u186d"+
		"\13\u00e8\5\u00e8\u186f\n\u00e8\3\u00e8\3\u00e8\5\u00e8\u1873\n\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\5\u00e9\u187a\n\u00e9\3\u00ea"+
		"\3\u00ea\3\u00ea\5\u00ea\u187f\n\u00ea\3\u00ea\5\u00ea\u1882\n\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea"+
		"\u188c\n\u00ea\f\u00ea\16\u00ea\u188f\13\u00ea\5\u00ea\u1891\n\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1897\n\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\7\u00ea\u189c\n\u00ea\f\u00ea\16\u00ea\u189f\13\u00ea\3\u00ea\3"+
		"\u00ea\5\u00ea\u18a3\n\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u18a8\n\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\5\u00eb\u18af\n\u00eb\3\u00ec"+
		"\3\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u18b6\n\u00ed\3\u00ed\5\u00ed"+
		"\u18b9\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed"+
		"\u18c1\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u18c7\n\u00ed\f"+
		"\u00ed\16\u00ed\u18ca\13\u00ed\5\u00ed\u18cc\n\u00ed\3\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\7\u00ed\u18d2\n\u00ed\f\u00ed\16\u00ed\u18d5\13\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u18df\n\u00ef\3\u00ef\5\u00ef\u18e2\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\3\u00ef\7\u00ef\u18ea\n\u00ef\f\u00ef\16\u00ef\u18ed\13"+
		"\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u18f3\n\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\5\u00ef\u18f8\n\u00ef\3\u00ef\5\u00ef\u18fb\n\u00ef\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u1903\n\u00f0\f\u00f0"+
		"\16\u00f0\u1906\13\u00f0\5\u00f0\u1908\n\u00f0\3\u00f0\5\u00f0\u190b\n"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1913\n"+
		"\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1"+
		"\u191c\n\u00f1\f\u00f1\16\u00f1\u191f\13\u00f1\5\u00f1\u1921\n\u00f1\3"+
		"\u00f1\5\u00f1\u1924\n\u00f1\3\u00f1\3\u00f1\7\u00f1\u1928\n\u00f1\f\u00f1"+
		"\16\u00f1\u192b\13\u00f1\3\u00f1\3\u00f1\5\u00f1\u192f\n\u00f1\3\u00f1"+
		"\3\u00f1\5\u00f1\u1933\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\7\u00f2\u193b\n\u00f2\f\u00f2\16\u00f2\u193e\13\u00f2\5\u00f2"+
		"\u1940\n\u00f2\3\u00f2\5\u00f2\u1943\n\u00f2\3\u00f2\3\u00f2\7\u00f2\u1947"+
		"\n\u00f2\f\u00f2\16\u00f2\u194a\13\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2"+
		"\u194f\n\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
		"\u1957\n\u00f3\3\u00f3\5\u00f3\u195a\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u195e"+
		"\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u1962\n\u00f3\3\u00f3\5\u00f3\u1965\n"+
		"\u00f3\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u196a\n\u00f4\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\5\u00f5\u1978\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\5\u00f6\u1988\n\u00f6\3\u00f6\3\u00f6\5\u00f6\u198c\n\u00f6\3\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\5\u00f6\u1992\n\u00f6\5\u00f6\u1994\n\u00f6\3\u00f6"+
		"\5\u00f6\u1997\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u199b\n\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\5\u00f7\u19a0\n\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u19a5"+
		"\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u19ad"+
		"\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u19b2\n\u00f8\3\u00f8\7\u00f8"+
		"\u19b5\n\u00f8\f\u00f8\16\u00f8\u19b8\13\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\5\u00f8\u19bd\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u19c2\n\u00f8\3"+
		"\u00f8\5\u00f8\u19c5\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\7"+
		"\u00f9\u19cc\n\u00f9\f\u00f9\16\u00f9\u19cf\13\u00f9\3\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\7\u00f9\u19d6\n\u00f9\f\u00f9\16\u00f9\u19d9\13"+
		"\u00f9\5\u00f9\u19db\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\5\u00fa\u19e4\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7"+
		"\u00fa\u19ea\n\u00fa\f\u00fa\16\u00fa\u19ed\13\u00fa\5\u00fa\u19ef\n\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u19f6\n\u00fa\3\u00fa"+
		"\5\u00fa\u19f9\n\u00fa\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\5\u00fc\u1a27\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u1a2b\n"+
		"\u00fc\3\u00fc\5\u00fc\u1a2e\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5"+
		"\u00fd\u1a34\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1a40\n\u00fd\5\u00fd\u1a42\n\u00fd"+
		"\3\u00fd\5\u00fd\u1a45\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\5\u00fe\u1a5e\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a69\n\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a71\n\u00ff\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\7\u0100\u1a7a\n\u0100\f\u0100\16\u0100"+
		"\u1a7d\13\u0100\7\u0100\u1a7f\n\u0100\f\u0100\16\u0100\u1a82\13\u0100"+
		"\5\u0100\u1a84\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\5\u0101\u1a8c\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\5\u0103\u1a96\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u1a9d\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u1aa4\n\u0104\5\u0104\u1aa6\n\u0104\3\u0104\3\u0104\3\u0104\3"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1ab2\n"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u1abd\n\u0104\3\u0104\3\u0104\5\u0104\u1ac1\n\u0104\3"+
		"\u0104\3\u0104\3\u0104\5\u0104\u1ac6\n\u0104\3\u0104\5\u0104\u1ac9\n\u0104"+
		"\5\u0104\u1acb\n\u0104\3\u0104\5\u0104\u1ace\n\u0104\3\u0104\3\u0104\3"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104"+
		"\u1ada\n\u0104\5\u0104\u1adc\n\u0104\5\u0104\u1ade\n\u0104\3\u0104\5\u0104"+
		"\u1ae1\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1ae6\n\u0104\3\u0104\5"+
		"\u0104\u1ae9\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1aee\n\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1af8"+
		"\n\u0104\3\u0104\3\u0104\5\u0104\u1afc\n\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u1b01\n\u0104\3\u0104\5\u0104\u1b04\n\u0104\5\u0104\u1b06\n\u0104"+
		"\3\u0104\5\u0104\u1b09\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1b15\n\u0104\5\u0104"+
		"\u1b17\n\u0104\5\u0104\u1b19\n\u0104\3\u0104\5\u0104\u1b1c\n\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\5\u0104\u1b22\n\u0104\3\u0105\3\u0105\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u1b2c\n\u0106\3\u0107"+
		"\3\u0107\3\u0108\3\u0108\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a"+
		"\u1b40\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1b46\n\u010b\3"+
		"\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010e\3\u010e"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1b5f\n\u0111\5\u0111"+
		"\u1b61\n\u0111\3\u0112\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\3\u0114"+
		"\3\u0114\3\u0115\3\u0115\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118"+
		"\u1b7b\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1b81\n\u0118\3"+
		"\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\5\u0118\u1b8c\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\5\u0119\u1b94\n\u0119\3\u0119\5\u0119\u1b97\n\u0119\3\u011a\3\u011a\3"+
		"\u011a\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\5\u011c\u1ba5\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\5\u011d\u1bad\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u1bb4\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1bcb\n\u011f"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\5\u0121\u1bd8\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\5\u0122\u1bde\n\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u1be3\n\u0122\f"+
		"\u0122\16\u0122\u1be6\13\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u1beb\n"+
		"\u0122\f\u0122\16\u0122\u1bee\13\u0122\5\u0122\u1bf0\n\u0122\3\u0122\5"+
		"\u0122\u1bf3\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3"+
		"\u0124\5\u0124\u1bfc\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u1c06\n\u0125\3\u0125\3\u0125\3\u0125\7"+
		"\u0125\u1c0b\n\u0125\f\u0125\16\u0125\u1c0e\13\u0125\3\u0125\5\u0125\u1c11"+
		"\n\u0125\3\u0126\3\u0126\5\u0126\u1c15\n\u0126\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\5\u0127\u1c1b\n\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u1c20\n"+
		"\u0127\f\u0127\16\u0127\u1c23\13\u0127\3\u0127\5\u0127\u1c26\n\u0127\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1c2c\n\u0128\3\u0128\3\u0128\3"+
		"\u0128\7\u0128\u1c31\n\u0128\f\u0128\16\u0128\u1c34\13\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\5\u0128\u1c3a\n\u0128\3\u0128\5\u0128\u1c3d\n\u0128"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1c43\n\u0129\3\u0129\3\u0129"+
		"\3\u0129\7\u0129\u1c48\n\u0129\f\u0129\16\u0129\u1c4b\13\u0129\3\u0129"+
		"\5\u0129\u1c4e\n\u0129\3\u012a\3\u012a\3\u012a\5\u012a\u1c53\n\u012a\3"+
		"\u012a\3\u012a\3\u012a\5\u012a\u1c58\n\u012a\3\u012a\6\u012a\u1c5b\n\u012a"+
		"\r\u012a\16\u012a\u1c5c\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u1c65\n\u012b\3\u012b\3\u012b\5\u012b\u1c69\n\u012b\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\5\u012c\u1c6f\n\u012c\3\u012c\3\u012c\3\u012c\7"+
		"\u012c\u1c74\n\u012c\f\u012c\16\u012c\u1c77\13\u012c\3\u012c\5\u012c\u1c7a"+
		"\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u1c83\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u1c8b\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1c91\n\u012e\3"+
		"\u012e\3\u012e\3\u012f\3\u012f\5\u012f\u1c97\n\u012f\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1ca8\n\u0131\3\u0131\3\u0131"+
		"\5\u0131\u1cac\n\u0131\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u1cb4\n\u0132\3\u0132\3\u0132\5\u0132\u1cb8\n\u0132\3\u0132\3"+
		"\u0132\3\u0132\3\u0132\7\u0132\u1cbe\n\u0132\f\u0132\16\u0132\u1cc1\13"+
		"\u0132\3\u0132\5\u0132\u1cc4\n\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1cc9"+
		"\n\u0132\3\u0132\3\u0132\5\u0132\u1ccd\n\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\5\u0132\u1cd4\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u1cda\n\u0132\5\u0132\u1cdc\n\u0132\3\u0133\3\u0133\5\u0133\u1ce0"+
		"\n\u0133\3\u0133\3\u0133\5\u0133\u1ce4\n\u0133\3\u0133\3\u0133\5\u0133"+
		"\u1ce8\n\u0133\3\u0133\5\u0133\u1ceb\n\u0133\3\u0133\3\u0133\5\u0133\u1cef"+
		"\n\u0133\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1cf5\n\u0133\3\u0133"+
		"\3\u0133\5\u0133\u1cf9\n\u0133\5\u0133\u1cfb\n\u0133\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\5\u0134\u1d02\n\u0134\3\u0134\3\u0134\3\u0134\7"+
		"\u0134\u1d07\n\u0134\f\u0134\16\u0134\u1d0a\13\u0134\5\u0134\u1d0c\n\u0134"+
		"\3\u0134\5\u0134\u1d0f\n\u0134\3\u0134\3\u0134\3\u0134\7\u0134\u1d14\n"+
		"\u0134\f\u0134\16\u0134\u1d17\13\u0134\3\u0134\3\u0134\5\u0134\u1d1b\n"+
		"\u0134\3\u0134\6\u0134\u1d1e\n\u0134\r\u0134\16\u0134\u1d1f\3\u0134\3"+
		"\u0134\5\u0134\u1d24\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d2a"+
		"\n\u0134\6\u0134\u1d2c\n\u0134\r\u0134\16\u0134\u1d2d\5\u0134\u1d30\n"+
		"\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d35\n\u0134\3\u0134\6\u0134\u1d38"+
		"\n\u0134\r\u0134\16\u0134\u1d39\6\u0134\u1d3c\n\u0134\r\u0134\16\u0134"+
		"\u1d3d\3\u0134\3\u0134\3\u0134\5\u0134\u1d43\n\u0134\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\5\u0134\u1d49\n\u0134\6\u0134\u1d4b\n\u0134\r\u0134\16"+
		"\u0134\u1d4c\6\u0134\u1d4f\n\u0134\r\u0134\16\u0134\u1d50\5\u0134\u1d53"+
		"\n\u0134\3\u0134\3\u0134\5\u0134\u1d57\n\u0134\3\u0134\3\u0134\5\u0134"+
		"\u1d5b\n\u0134\3\u0134\3\u0134\5\u0134\u1d5f\n\u0134\3\u0134\3\u0134\5"+
		"\u0134\u1d63\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d69\n\u0134"+
		"\3\u0134\5\u0134\u1d6c\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134"+
		"\u1d72\n\u0134\3\u0134\3\u0134\5\u0134\u1d76\n\u0134\3\u0134\3\u0134\5"+
		"\u0134\u1d7a\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d80\n\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d86\n\u0134\5\u0134\u1d88\n"+
		"\u0134\3\u0134\5\u0134\u1d8b\n\u0134\3\u0134\3\u0134\5\u0134\u1d8f\n\u0134"+
		"\3\u0134\3\u0134\5\u0134\u1d93\n\u0134\3\u0134\3\u0134\5\u0134\u1d97\n"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d9d\n\u0134\3\u0134\5"+
		"\u0134\u1da0\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1da6\n\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1dac\n\u0134\3\u0134\5\u0134"+
		"\u1daf\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1db5\n\u0134\3"+
		"\u0134\5\u0134\u1db8\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1dbe"+
		"\n\u0134\3\u0134\5\u0134\u1dc1\n\u0134\3\u0134\3\u0134\5\u0134\u1dc5\n"+
		"\u0134\3\u0134\3\u0134\5\u0134\u1dc9\n\u0134\3\u0134\3\u0134\5\u0134\u1dcd"+
		"\n\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1dd2\n\u0134\3\u0134\5\u0134"+
		"\u1dd5\n\u0134\3\u0134\3\u0134\5\u0134\u1dd9\n\u0134\3\u0134\3\u0134\5"+
		"\u0134\u1ddd\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\5\u0134\u1dee\n\u0134\7\u0134\u1df0\n\u0134\f\u0134\16\u0134\u1df3\13"+
		"\u0134\5\u0134\u1df5\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5"+
		"\u0135\u1dfc\n\u0135\3\u0135\6\u0135\u1dff\n\u0135\r\u0135\16\u0135\u1e00"+
		"\3\u0135\3\u0135\5\u0135\u1e05\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u1e0b\n\u0135\6\u0135\u1e0d\n\u0135\r\u0135\16\u0135\u1e0e\5"+
		"\u0135\u1e11\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e16\n\u0135\3\u0135"+
		"\6\u0135\u1e19\n\u0135\r\u0135\16\u0135\u1e1a\6\u0135\u1e1d\n\u0135\r"+
		"\u0135\16\u0135\u1e1e\3\u0135\3\u0135\3\u0135\5\u0135\u1e24\n\u0135\3"+
		"\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e2a\n\u0135\6\u0135\u1e2c\n\u0135"+
		"\r\u0135\16\u0135\u1e2d\6\u0135\u1e30\n\u0135\r\u0135\16\u0135\u1e31\5"+
		"\u0135\u1e34\n\u0135\3\u0135\3\u0135\5\u0135\u1e38\n\u0135\3\u0135\3\u0135"+
		"\5\u0135\u1e3c\n\u0135\3\u0135\3\u0135\5\u0135\u1e40\n\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1e44\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e4a"+
		"\n\u0135\3\u0135\5\u0135\u1e4d\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u1e53\n\u0135\3\u0135\3\u0135\5\u0135\u1e57\n\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1e5b\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e61"+
		"\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e67\n\u0135\5\u0135"+
		"\u1e69\n\u0135\3\u0135\5\u0135\u1e6c\n\u0135\3\u0135\3\u0135\5\u0135\u1e70"+
		"\n\u0135\3\u0135\3\u0135\5\u0135\u1e74\n\u0135\3\u0135\3\u0135\5\u0135"+
		"\u1e78\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e7e\n\u0135\3"+
		"\u0135\5\u0135\u1e81\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e87"+
		"\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e8d\n\u0135\3\u0135"+
		"\5\u0135\u1e90\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e96\n"+
		"\u0135\3\u0135\5\u0135\u1e99\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5"+
		"\u0135\u1e9f\n\u0135\3\u0135\5\u0135\u1ea2\n\u0135\3\u0135\3\u0135\5\u0135"+
		"\u1ea6\n\u0135\3\u0135\3\u0135\5\u0135\u1eaa\n\u0135\3\u0135\3\u0135\5"+
		"\u0135\u1eae\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1eb3\n\u0135\3\u0135"+
		"\5\u0135\u1eb6\n\u0135\3\u0135\3\u0135\5\u0135\u1eba\n\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1ebe\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1ec4"+
		"\n\u0135\3\u0135\5\u0135\u1ec7\n\u0135\3\u0135\3\u0135\5\u0135\u1ecb\n"+
		"\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1edc"+
		"\n\u0135\7\u0135\u1ede\n\u0135\f\u0135\16\u0135\u1ee1\13\u0135\5\u0135"+
		"\u1ee3\n\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1ef1\n\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u1ef7\n\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u1eff\n\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\6\u0136\u1f06\n\u0136\r\u0136\16\u0136\u1f07\3\u0136"+
		"\5\u0136\u1f0b\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1f2c"+
		"\n\u0139\3\u013a\3\u013a\5\u013a\u1f30\n\u013a\3\u013a\3\u013a\5\u013a"+
		"\u1f34\n\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1f3b\n"+
		"\u013b\3\u013c\3\u013c\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013e"+
		"\3\u013e\5\u013e\u1f46\n\u013e\3\u013e\3\u013e\5\u013e\u1f4a\n\u013e\3"+
		"\u013e\3\u013e\3\u013e\7\u013e\u1f4f\n\u013e\f\u013e\16\u013e\u1f52\13"+
		"\u013e\5\u013e\u1f54\n\u013e\3\u013e\5\u013e\u1f57\n\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\7\u013e\u1f5d\n\u013e\f\u013e\16\u013e\u1f60\13\u013e"+
		"\3\u013e\3\u013e\5\u013e\u1f64\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e"+
		"\u1f69\n\u013e\3\u013e\5\u013e\u1f6c\n\u013e\5\u013e\u1f6e\n\u013e\3\u013f"+
		"\3\u013f\5\u013f\u1f72\n\u013f\3\u013f\3\u013f\5\u013f\u1f76\n\u013f\3"+
		"\u013f\5\u013f\u1f79\n\u013f\3\u013f\3\u013f\5\u013f\u1f7d\n\u013f\3\u0140"+
		"\3\u0140\3\u0141\3\u0141\5\u0141\u1f83\n\u0141\3\u0141\3\u0141\3\u0141"+
		"\5\u0141\u1f88\n\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141"+
		"\u1f8f\n\u0141\5\u0141\u1f91\n\u0141\3\u0141\3\u0141\5\u0141\u1f95\n\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\7\u0141\u1f9b\n\u0141\f\u0141\16\u0141"+
		"\u1f9e\13\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1fa3\n\u0141\3\u0141"+
		"\3\u0141\5\u0141\u1fa7\n\u0141\3\u0141\5\u0141\u1faa\n\u0141\3\u0141\3"+
		"\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1fb3\n\u0141\3"+
		"\u0141\5\u0141\u1fb6\n\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1fbc"+
		"\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u1fc3\n\u0142"+
		"\3\u0142\3\u0142\3\u0142\5\u0142\u1fc8\n\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\5\u0142\u1fd0\n\u0142\3\u0143\3\u0143\3\u0143"+
		"\5\u0143\u1fd5\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1fe1\n\u0143\5\u0143\u1fe3\n"+
		"\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\5\u0144\u1fee\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\5\u0145\u1ff5\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\7\u0145\u1ffd\n\u0145\f\u0145\16\u0145\u2000\13\u0145\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\5\u0147\u2016\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148\u2023\n\u0148\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u2033\n\u0149\3\u0149\3\u0149"+
		"\3\u0149\5\u0149\u2038\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\5\u0149\u203f\n\u0149\3\u0149\5\u0149\u2042\n\u0149\6\u0149\u2044\n\u0149"+
		"\r\u0149\16\u0149\u2045\5\u0149\u2048\n\u0149\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\5\u014a\u2059\n\u014a\3\u014b\3\u014b\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\5\u014c\u2068\n\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\5\u014d\u2070\n\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\5\u014d\u2079\n\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\5\u014d\u2081\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\3\u014e\5\u014e\u208a\n\u014e\3\u014e\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u2095\n\u014e"+
		"\3\u014e\3\u014e\5\u014e\u2099\n\u014e\5\u014e\u209b\n\u014e\5\u014e\u209d"+
		"\n\u014e\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u20a3\n\u014f\3\u014f"+
		"\3\u014f\3\u014f\5\u014f\u20a8\n\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\5\u014f\u20af\n\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u20bc\n\u014f"+
		"\5\u014f\u20be\n\u014f\5\u014f\u20c0\n\u014f\3\u014f\5\u014f\u20c3\n\u014f"+
		"\3\u014f\5\u014f\u20c6\n\u014f\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\5\u0150\u20cd\n\u0150\3\u0150\5\u0150\u20d0\n\u0150\3\u0150\3\u0150\3"+
		"\u0150\3\u0150\5\u0150\u20d6\n\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u20db"+
		"\n\u0150\5\u0150\u20dd\n\u0150\3\u0150\5\u0150\u20e0\n\u0150\3\u0150\3"+
		"\u0150\3\u0150\3\u0150\5\u0150\u20e6\n\u0150\3\u0150\3\u0150\3\u0150\3"+
		"\u0150\3\u0150\3\u0150\5\u0150\u20ee\n\u0150\5\u0150\u20f0\n\u0150\3\u0150"+
		"\5\u0150\u20f3\n\u0150\3\u0150\3\u0150\5\u0150\u20f7\n\u0150\3\u0150\5"+
		"\u0150\u20fa\n\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3"+
		"\u0150\3\u0150\5\u0150\u2104\n\u0150\3\u0150\5\u0150\u2107\n\u0150\3\u0150"+
		"\3\u0150\5\u0150\u210b\n\u0150\3\u0150\5\u0150\u210e\n\u0150\3\u0150\3"+
		"\u0150\3\u0150\3\u0150\5\u0150\u2114\n\u0150\3\u0150\5\u0150\u2117\n\u0150"+
		"\5\u0150\u2119\n\u0150\3\u0151\3\u0151\5\u0151\u211d\n\u0151\3\u0152\3"+
		"\u0152\3\u0152\5\u0152\u2122\n\u0152\3\u0153\3\u0153\5\u0153\u2126\n\u0153"+
		"\3\u0154\3\u0154\3\u0154\5\u0154\u212b\n\u0154\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u2130\n\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\5\u0156\u2138\n\u0156\3\u0156\3\u0156\5\u0156\u213c\n\u0156\3\u0156\5"+
		"\u0156\u213f\n\u0156\3\u0157\3\u0157\3\u0157\5\u0157\u2144\n\u0157\3\u0158"+
		"\3\u0158\3\u0158\3\u0158\3\u0159\3\u0159\5\u0159\u214c\n\u0159\3\u0159"+
		"\3\u0159\3\u0159\5\u0159\u2151\n\u0159\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015b\3\u015b\3\u015b\5\u015b\u215b\n\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015d\3\u015d\5\u015d\u2166"+
		"\n\u015d\3\u015d\7\u015d\u2169\n\u015d\f\u015d\16\u015d\u216c\13\u015d"+
		"\3\u015e\3\u015e\3\u015e\5\u015e\u2171\n\u015e\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\5\u015f\u2177\n\u015f\3\u015f\3\u015f\5\u015f\u217b\n\u015f\3"+
		"\u015f\5\u015f\u217e\n\u015f\3\u015f\3\u015f\5\u015f\u2182\n\u015f\3\u015f"+
		"\3\u015f\5\u015f\u2186\n\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\5\u015f\u218e\n\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u2193\n"+
		"\u015f\5\u015f\u2195\n\u015f\3\u015f\5\u015f\u2198\n\u015f\3\u015f\7\u015f"+
		"\u219b\n\u015f\f\u015f\16\u015f\u219e\13\u015f\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\5\u0160\u21a6\n\u0160\3\u0161\3\u0161\5\u0161"+
		"\u21aa\n\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u21af\n\u0161\3\u0161\5"+
		"\u0161\u21b2\n\u0161\3\u0161\5\u0161\u21b5\n\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\5\u0161\u21bb\n\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\5\u0161\u21c3\n\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\5\u0161\u21cb\n\u0161\3\u0161\5\u0161\u21ce\n\u0161\3\u0161\5"+
		"\u0161\u21d1\n\u0161\3\u0162\3\u0162\5\u0162\u21d5\n\u0162\3\u0162\3\u0162"+
		"\3\u0162\5\u0162\u21da\n\u0162\3\u0162\5\u0162\u21dd\n\u0162\3\u0162\3"+
		"\u0162\3\u0162\3\u0162\5\u0162\u21e3\n\u0162\3\u0162\3\u0162\5\u0162\u21e7"+
		"\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u21ed\n\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u21f5\n\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\6\u0162\u21fb\n\u0162\r\u0162\16\u0162\u21fc"+
		"\3\u0162\5\u0162\u2200\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162"+
		"\u220f\n\u0162\3\u0162\5\u0162\u2212\n\u0162\3\u0162\5\u0162\u2215\n\u0162"+
		"\5\u0162\u2217\n\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\5\u0163\u2222\n\u0163\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u222d\n\u0164"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\7\u0165\u2234\n\u0165\f\u0165"+
		"\16\u0165\u2237\13\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\5\u0166\u2240\n\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\5\u0167\u224a\n\u0167\5\u0167\u224c\n\u0167\5"+
		"\u0167\u224e\n\u0167\3\u0167\5\u0167\u2251\n\u0167\3\u0167\5\u0167\u2254"+
		"\n\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\5\u0167\u225f\n\u0167\5\u0167\u2261\n\u0167\5\u0167\u2263\n\u0167"+
		"\3\u0167\5\u0167\u2266\n\u0167\3\u0168\7\u0168\u2269\n\u0168\f\u0168\16"+
		"\u0168\u226c\13\u0168\3\u0168\3\u0168\3\u0168\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\5\u0169\u2276\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\3\u016a\3\u016a\5\u016a\u227f\n\u016a\3\u016a\5\u016a\u2282\n"+
		"\u016a\3\u016a\5\u016a\u2285\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3"+
		"\u016a\7\u016a\u228c\n\u016a\f\u016a\16\u016a\u228f\13\u016a\5\u016a\u2291"+
		"\n\u016a\3\u016a\5\u016a\u2294\n\u016a\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\5\u016b\u229b\n\u016b\3\u016b\5\u016b\u229e\n\u016b\3\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\5\u016b\u22ad\n\u016b\3\u016b\5\u016b\u22b0\n"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u22b7\n\u016b\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u22c7\n\u016b\3\u016c"+
		"\3\u016c\5\u016c\u22cb\n\u016c\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u22d7\n\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\7\u016d\u22ea"+
		"\n\u016d\f\u016d\16\u016d\u22ed\13\u016d\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u22f7\n\u016e\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u2302"+
		"\n\u016f\3\u0170\3\u0170\3\u0171\3\u0171\3\u0172\3\u0172\3\u0173\3\u0173"+
		"\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\3\u0176\3\u0176\5\u0176\u2313"+
		"\n\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017a\3\u017a\3\u017b"+
		"\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d"+
		"\5\u017d\u232f\n\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u2350"+
		"\n\u0185\3\u0186\3\u0186\3\u0186\6\u0186\u2355\n\u0186\r\u0186\16\u0186"+
		"\u2356\3\u0186\3\u0186\5\u0186\u235b\n\u0186\3\u0186\3\u0186\3\u0186\3"+
		"\u0186\6\u0186\u2361\n\u0186\r\u0186\16\u0186\u2362\3\u0186\3\u0186\5"+
		"\u0186\u2367\n\u0186\3\u0186\3\u0186\5\u0186\u236b\n\u0186\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\5\u0187\u2371\n\u0187\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u237b\n\u0188\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u2385\n\u0189"+
		"\3\u018a\3\u018a\3\u018b\3\u018b\3\u018b\5\u018b\u238c\n\u018b\3\u018b"+
		"\3\u018b\3\u018b\7\u018b\u2391\n\u018b\f\u018b\16\u018b\u2394\13\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u239c\n\u018b"+
		"\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u23a3\n\u018b\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u23aa\n\u018c\3\u018c\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\3\u018d\3\u018d\5\u018d\u23b3\n\u018d\3\u018d"+
		"\3\u018d\5\u018d\u23b7\n\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\5\u018d\u23c1\n\u018d\3\u018e\3\u018e\3\u018e"+
		"\7\u018e\u23c6\n\u018e\f\u018e\16\u018e\u23c9\13\u018e\3\u018f\3\u018f"+
		"\3\u018f\7\u018f\u23ce\n\u018f\f\u018f\16\u018f\u23d1\13\u018f\3\u0190"+
		"\3\u0190\3\u0190\7\u0190\u23d6\n\u0190\f\u0190\16\u0190\u23d9\13\u0190"+
		"\3\u0191\5\u0191\u23dc\n\u0191\3\u0191\3\u0191\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u23f2\n\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u23fb"+
		"\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u2401\n\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\5\u0192\u2407\n\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\5\u0192\u240d\n\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192"+
		"\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u2418\n\u0192\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\5\u0193\u241f\n\u0193\3\u0193\7\u0193\u2422\n"+
		"\u0193\f\u0193\16\u0193\u2425\13\u0193\3\u0194\3\u0194\5\u0194\u2429\n"+
		"\u0194\3\u0194\3\u0194\5\u0194\u242d\n\u0194\3\u0194\3\u0194\3\u0194\3"+
		"\u0194\3\u0194\5\u0194\u2434\n\u0194\3\u0195\3\u0195\5\u0195\u2438\n\u0195"+
		"\3\u0195\5\u0195\u243b\n\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u2440\n"+
		"\u0195\3\u0195\3\u0195\5\u0195\u2444\n\u0195\3\u0195\3\u0195\5\u0195\u2448"+
		"\n\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u244d\n\u0195\3\u0195\3\u0195"+
		"\3\u0195\7\u0195\u2452\n\u0195\f\u0195\16\u0195\u2455\13\u0195\5\u0195"+
		"\u2457\n\u0195\3\u0195\3\u0195\5\u0195\u245b\n\u0195\3\u0196\3\u0196\3"+
		"\u0196\5\u0196\u2460\n\u0196\3\u0196\3\u0196\5\u0196\u2464\n\u0196\3\u0197"+
		"\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\5\u0197\u246d\n\u0197"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u2474\n\u0198\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\7\u0199\u247b\n\u0199\f\u0199\16\u0199"+
		"\u247e\13\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\5\u0199\u2489\n\u0199\5\u0199\u248b\n\u0199\3\u019a\3"+
		"\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u2495\n"+
		"\u019a\3\u019a\5\u019a\u2498\n\u019a\3\u019a\7\u019a\u249b\n\u019a\f\u019a"+
		"\16\u019a\u249e\13\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\5\u019a\u24a6\n\u019a\5\u019a\u24a8\n\u019a\5\u019a\u24aa\n\u019a\3\u019a"+
		"\3\u019a\3\u019a\5\u019a\u24af\n\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\7\u019a\u24b5\n\u019a\f\u019a\16\u019a\u24b8\13\u019a\3\u019a\3\u019a"+
		"\5\u019a\u24bc\n\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\5\u019a\u24c4\n\u019a\3\u019a\7\u019a\u24c7\n\u019a\f\u019a\16\u019a"+
		"\u24ca\13\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u24cf\n\u019a\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u24d9"+
		"\n\u019a\5\u019a\u24db\n\u019a\3\u019a\3\u019a\5\u019a\u24df\n\u019a\3"+
		"\u019a\3\u019a\5\u019a\u24e3\n\u019a\5\u019a\u24e5\n\u019a\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\5\u019b\u24ee\n\u019b\5\u019b"+
		"\u24f0\n\u019b\3\u019c\3\u019c\5\u019c\u24f4\n\u019c\3\u019d\3\u019d\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\7\u019e\u24fd\n\u019e\f\u019e\16"+
		"\u019e\u2500\13\u019e\3\u019e\3\u019e\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\7\u019f\u251f\n\u019f\f\u019f"+
		"\16\u019f\u2522\13\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u2531"+
		"\n\u019f\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u2538\n\u01a0"+
		"\5\u01a0\u253a\n\u01a0\3\u01a1\3\u01a1\3\u01a1\7\u01a1\u253f\n\u01a1\f"+
		"\u01a1\16\u01a1\u2542\13\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\7\u01a2"+
		"\u2548\n\u01a2\f\u01a2\16\u01a2\u254b\13\u01a2\3\u01a2\3\u01a2\3\u01a3"+
		"\3\u01a3\3\u01a3\5\u01a3\u2552\n\u01a3\3\u01a3\3\u01a3\3\u01a4\3\u01a4"+
		"\3\u01a4\5\u01a4\u2559\n\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\5\u01a4\u2560\n\u01a4\3\u01a4\5\u01a4\u2563\n\u01a4\3\u01a4\5\u01a4\u2566"+
		"\n\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u256d\n\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u2574\n\u01a5\3\u01a5"+
		"\5\u01a5\u2577\n\u01a5\5\u01a5\u2579\n\u01a5\3\u01a6\3\u01a6\3\u01a6\3"+
		"\u01a6\3\u01a6\3\u01a6\5\u01a6\u2581\n\u01a6\5\u01a6\u2583\n\u01a6\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\5\u01a7\u2589\n\u01a7\3\u01a8\3\u01a8\3\u01a8"+
		"\7\u01a8\u258e\n\u01a8\f\u01a8\16\u01a8\u2591\13\u01a8\3\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\5\u01a9\u2598\n\u01a9\3\u01aa\3\u01aa\7\u01aa"+
		"\u259c\n\u01aa\f\u01aa\16\u01aa\u259f\13\u01aa\3\u01ab\3\u01ab\5\u01ab"+
		"\u25a3\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u25a7\n\u01ab\3\u01ab\3\u01ab\5"+
		"\u01ab\u25ab\n\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u25b0\n\u01ab\5\u01ab"+
		"\u25b2\n\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab"+
		"\u25ba\n\u01ab\5\u01ab\u25bc\n\u01ab\3\u01ab\3\u01ab\5\u01ab\u25c0\n\u01ab"+
		"\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u25c7\n\u01ab\5\u01ab"+
		"\u25c9\n\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5\u01ab\u25d0\n"+
		"\u01ab\5\u01ab\u25d2\n\u01ab\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3"+
		"\u01ac\3\u01ac\5\u01ac\u25db\n\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3"+
		"\u01ac\3\u01ac\5\u01ac\u25e3\n\u01ac\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u25e8"+
		"\n\u01ad\f\u01ad\16\u01ad\u25eb\13\u01ad\3\u01ae\3\u01ae\3\u01ae\5\u01ae"+
		"\u25f0\n\u01ae\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af"+
		"\3\u01af\3\u01b0\5\u01b0\u25fb\n\u01b0\3\u01b0\3\u01b0\5\u01b0\u25ff\n"+
		"\u01b0\5\u01b0\u2601\n\u01b0\3\u01b0\5\u01b0\u2604\n\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\5\u01b0\u261c\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3\7\u01b3"+
		"\u2633\n\u01b3\f\u01b3\16\u01b3\u2636\13\u01b3\3\u01b4\3\u01b4\5\u01b4"+
		"\u263a\n\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5"+
		"\7\u01b5\u264c\n\u01b5\f\u01b5\16\u01b5\u264f\13\u01b5\3\u01b5\5\u01b5"+
		"\u2652\n\u01b5\3\u01b5\3\u01b5\5\u01b5\u2656\n\u01b5\3\u01b6\3\u01b6\3"+
		"\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u2666\n\u01b7\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u267a\n\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\5\u01b8\u26b4\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u26b8\n"+
		"\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\5\u01b8\u26e8\n\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\5\u01b8\u26f8\n\u01b8\5\u01b8\u26fa\n\u01b8\3\u01b9\3\u01b9\3"+
		"\u01b9\3\u01b9\3\u01b9\5\u01b9\u2701\n\u01b9\3\u01ba\3\u01ba\3\u01ba\3"+
		"\u01ba\5\u01ba\u2707\n\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3"+
		"\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u2714\n\u01ba\3"+
		"\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u2723\n\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u272e"+
		"\n\u01ba\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u2733\n\u01bb\3\u01bb\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u273d\n\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u2746"+
		"\n\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c1\5\u01c1\u2768\n\u01c1"+
		"\3\u01c1\3\u01c1\3\u01c2\5\u01c2\u276d\n\u01c2\3\u01c2\3\u01c2\3\u01c3"+
		"\3\u01c3\5\u01c3\u2773\n\u01c3\3\u01c4\5\u01c4\u2776\n\u01c4\3\u01c4\3"+
		"\u01c4\3\u01c4\5\u01c4\u277b\n\u01c4\3\u01c4\7\u01c4\u277e\n\u01c4\f\u01c4"+
		"\16\u01c4\u2781\13\u01c4\3\u01c4\3\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\5\u01c5\u2789\n\u01c5\3\u01c5\7\u01c5\u278c\n\u01c5\f\u01c5\16\u01c5"+
		"\u278f\13\u01c5\3\u01c5\3\u01c5\3\u01c6\5\u01c6\u2794\n\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\7\u01c6\u279b\n\u01c6\f\u01c6\16\u01c6"+
		"\u279e\13\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\7\u01c6\u27a5"+
		"\n";
	private static final String _serializedATNSegment1 =
		"\u01c6\f\u01c6\16\u01c6\u27a8\13\u01c6\5\u01c6\u27aa\n\u01c6\3\u01c6\3"+
		"\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\7\u01c6\u27b6\n\u01c6\f\u01c6\16\u01c6\u27b9\13\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\5\u01c6\u27be\n\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\5\u01c6\u27c6\n\u01c6\3\u01c7\3\u01c7\5\u01c7\u27ca\n\u01c7\3"+
		"\u01c8\3\u01c8\3\u01c8\3\u01c8\7\u01c8\u27d0\n\u01c8\f\u01c8\16\u01c8"+
		"\u27d3\13\u01c8\3\u01c8\3\u01c8\3\u01c9\3\u01c9\5\u01c9\u27d9\n\u01c9"+
		"\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca"+
		"\7\u01ca\u27e4\n\u01ca\f\u01ca\16\u01ca\u27e7\13\u01ca\3\u01cb\3\u01cb"+
		"\3\u01cb\7\u01cb\u27ec\n\u01cb\f\u01cb\16\u01cb\u27ef\13\u01cb\3\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc"+
		"\5\u01cc\u27fb\n\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd"+
		"\u2802\n\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u2808\n\u01cd\3"+
		"\u01cd\3\u01cd\5\u01cd\u280c\n\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3"+
		"\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\5\u01cd\u281d\n\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\5\u01ce\u282c\n\u01ce\5\u01ce\u282e\n\u01ce\3\u01ce\3\u01ce\3\u01ce\5"+
		"\u01ce\u2833\n\u01ce\3\u01cf\5\u01cf\u2836\n\u01cf\3\u01cf\3\u01cf\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u283f\n\u01d0\3\u01d0\5\u01d0"+
		"\u2842\n\u01d0\3\u01d0\5\u01d0\u2845\n\u01d0\3\u01d0\3\u01d0\3\u01d1\3"+
		"\u01d1\3\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2"+
		"\u2852\n\u01d2\3\u01d3\3\u01d3\5\u01d3\u2856\n\u01d3\3\u01d4\3\u01d4\3"+
		"\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u285e\n\u01d4\3\u01d5\3\u01d5\3"+
		"\u01d5\3\u01d5\5\u01d5\u2864\n\u01d5\3\u01d6\3\u01d6\3\u01d6\3\u01d6\7"+
		"\u01d6\u286a\n\u01d6\f\u01d6\16\u01d6\u286d\13\u01d6\3\u01d6\3\u01d6\3"+
		"\u01d6\3\u01d6\5\u01d6\u2873\n\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5"+
		"\u01d6\u2879\n\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3"+
		"\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u2888\n"+
		"\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7"+
		"\u2891\n\u01d7\3\u01d7\3\u01d7\3\u01d8\3\u01d8\5\u01d8\u2897\n\u01d8\3"+
		"\u01d9\3\u01d9\3\u01d9\3\u01d9\5\u01d9\u289d\n\u01d9\3\u01d9\5\u01d9\u28a0"+
		"\n\u01d9\3\u01d9\3\u01d9\5\u01d9\u28a4\n\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\7\u01d9\u28a9\n\u01d9\f\u01d9\16\u01d9\u28ac\13\u01d9\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\5\u01da\u28b3\n\u01da\3\u01da\5\u01da\u28b6\n"+
		"\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u28bc\n\u01da\3\u01da\3"+
		"\u01da\3\u01da\3\u01da\5\u01da\u28c2\n\u01da\5\u01da\u28c4\n\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01da\5\u01da\u28ca\n\u01da\3\u01da\5\u01da\u28cd\n"+
		"\u01da\5\u01da\u28cf\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u28d5"+
		"\n\u01da\5\u01da\u28d7\n\u01da\3\u01da\3\u01da\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u28e5"+
		"\n\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db\u28ec\n\u01db"+
		"\3\u01db\3\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\5\u01dc\u28f5"+
		"\n\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd\u28fc\n\u01dd"+
		"\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de"+
		"\3\u01de\5\u01de\u2908\n\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de"+
		"\5\u01de\u290f\n\u01de\3\u01de\3\u01de\3\u01df\3\u01df\3\u01df\5\u01df"+
		"\u2916\n\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df\u291d\n"+
		"\u01df\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df\u2923\n\u01df\3\u01df\3"+
		"\u01df\3\u01df\3\u01df\3\u01df\5\u01df\u292a\n\u01df\3\u01df\5\u01df\u292d"+
		"\n\u01df\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u2932\n\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u2939\n\u01e1\3\u01e1\3\u01e1\3\u01e2"+
		"\3\u01e2\3\u01e2\3\u01e2\5\u01e2\u2941\n\u01e2\3\u01e2\3\u01e2\5\u01e2"+
		"\u2945\n\u01e2\3\u01e2\5\u01e2\u2948\n\u01e2\3\u01e3\3\u01e3\3\u01e3\3"+
		"\u01e3\3\u01e3\3\u01e3\5\u01e3\u2950\n\u01e3\3\u01e3\3\u01e3\5\u01e3\u2954"+
		"\n\u01e3\3\u01e3\5\u01e3\u2957\n\u01e3\3\u01e4\3\u01e4\5\u01e4\u295b\n"+
		"\u01e4\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u2960\n\u01e5\3\u01e5\3\u01e5\3"+
		"\u01e5\3\u01e5\5\u01e5\u2966\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5"+
		"\u01e5\u296c\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u2972\n\u01e5"+
		"\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u2978\n\u01e5\3\u01e5\3\u01e5"+
		"\3\u01e5\3\u01e5\5\u01e5\u297e\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5"+
		"\5\u01e5\u2984\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u298a\n"+
		"\u01e5\3\u01e5\5\u01e5\u298d\n\u01e5\3\u01e6\3\u01e6\5\u01e6\u2991\n\u01e6"+
		"\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u2996\n\u01e6\7\u01e6\u2998\n\u01e6\f"+
		"\u01e6\16\u01e6\u299b\13\u01e6\3\u01e7\3\u01e7\3\u01e7\7\u01e7\u29a0\n"+
		"\u01e7\f\u01e7\16\u01e7\u29a3\13\u01e7\3\u01e8\3\u01e8\5\u01e8\u29a7\n"+
		"\u01e8\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01eb\5\u01eb\u29ae\n\u01eb\3"+
		"\u01eb\3\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u29b7\n"+
		"\u01ec\5\u01ec\u29b9\n\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\5"+
		"\u01ed\u29c0\n\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3"+
		"\u01ee\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u29cc\n\u01ee\3\u01ef\3\u01ef\3"+
		"\u01ef\5\u01ef\u29d1\n\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3"+
		"\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u29dc\n\u01ef\3\u01ef\3\u01ef\3"+
		"\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u29e6\n\u01ef\5"+
		"\u01ef\u29e8\n\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u29ee\n\u01ef"+
		"\5\u01ef\u29f0\n\u01ef\3\u01ef\3\u01ef\3\u01ef\5\u01ef\u29f5\n\u01ef\5"+
		"\u01ef\u29f7\n\u01ef\3\u01ef\5\u01ef\u29fa\n\u01ef\3\u01f0\3\u01f0\5\u01f0"+
		"\u29fe\n\u01f0\3\u01f1\3\u01f1\5\u01f1\u2a02\n\u01f1\3\u01f2\3\u01f2\3"+
		"\u01f2\3\u01f2\5\u01f2\u2a08\n\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3"+
		"\u01f2\3\u01f2\3\u01f2\5\u01f2\u2a11\n\u01f2\3\u01f2\5\u01f2\u2a14\n\u01f2"+
		"\5\u01f2\u2a16\n\u01f2\3\u01f3\5\u01f3\u2a19\n\u01f3\3\u01f3\3\u01f3\3"+
		"\u01f3\3\u01f3\5\u01f3\u2a1f\n\u01f3\3\u01f3\3\u01f3\5\u01f3\u2a23\n\u01f3"+
		"\3\u01f3\5\u01f3\u2a26\n\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4"+
		"\3\u01f4\3\u01f4\5\u01f4\u2a2f\n\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f5"+
		"\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u2a38\n\u01f5\3\u01f6\3\u01f6\3\u01f6"+
		"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\5\u01f6\u2a44"+
		"\n\u01f6\3\u01f6\5\u01f6\u2a47\n\u01f6\3\u01f7\3\u01f7\5\u01f7\u2a4b\n"+
		"\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7\u2a51\n\u01f7\3\u01f7\5"+
		"\u01f7\u2a54\n\u01f7\3\u01f7\3\u01f7\5\u01f7\u2a58\n\u01f7\3\u01f7\3\u01f7"+
		"\3\u01f7\3\u01f7\5\u01f7\u2a5e\n\u01f7\3\u01f8\3\u01f8\3\u01f8\5\u01f8"+
		"\u2a63\n\u01f8\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u2a68\n\u01f9\3\u01f9\3"+
		"\u01f9\5\u01f9\u2a6c\n\u01f9\3\u01f9\3\u01f9\5\u01f9\u2a70\n\u01f9\3\u01f9"+
		"\3\u01f9\5\u01f9\u2a74\n\u01f9\3\u01fa\3\u01fa\3\u01fb\3\u01fb\3\u01fb"+
		"\5\u01fb\u2a7b\n\u01fb\3\u01fc\3\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\3\u01fd\3\u01fd\5\u01fd\u2a8e\n\u01fd\3\u01fe\3\u01fe\3\u01ff\3\u01ff"+
		"\5\u01ff\u2a94\n\u01ff\3\u01ff\2\4^\u02d8\u0200\2\4\6\b\n\f\16\20\22\24"+
		"\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtv"+
		"xz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4"+
		"\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc"+
		"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214"+
		"\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c"+
		"\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244"+
		"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c"+
		"\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274"+
		"\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c"+
		"\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4"+
		"\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc"+
		"\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4"+
		"\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec"+
		"\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304"+
		"\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c"+
		"\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334"+
		"\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c"+
		"\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364"+
		"\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c"+
		"\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394"+
		"\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac"+
		"\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4"+
		"\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc"+
		"\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4"+
		"\u03f6\u03f8\u03fa\u03fc\2\u008c\4\2\u0326\u0326\u032b\u032b\4\2\u0326"+
		"\u0326\u032f\u032f\4\2\u01d7\u01d7\u02f7\u02f8\5\2\u0326\u0326\u032b\u032b"+
		"\u032f\u032f\4\2\u00bd\u00bd\u02d4\u02d4\5\2\u0323\u0323\u0326\u0326\u032f"+
		"\u032f\5\2~~\u012d\u012d\u016a\u016a\4\2\u00e4\u00e4\u00e7\u00e7\3\2\u032f"+
		"\u0330\3\2\u0126\u012a\4\2\u01c4\u01c4\u0279\u0279\4\2\u0130\u0130\u0273"+
		"\u0273\5\2VV\u0130\u0130\u0273\u0273\5\2\u00d7\u00d7\u0102\u0102\u02c5"+
		"\u02c6\4\2\25\25\u02ee\u02ee\4\2\31\31\u0240\u0240\4\2\b\b\u02a1\u02a1"+
		"\5\2\b\b\u0265\u0265\u029f\u029f\4\2\f\fKK\4\2\6\6ii\4\2\u01f1\u01f1\u02d5"+
		"\u02d5\4\2\u01e2\u01e2\u01eb\u01eb\4\2\u032b\u032b\u032f\u032f\4\2\u022a"+
		"\u022a\u024f\u024f\4\2\n\13\u00dd\u00dd\5\2\u00d7\u00d7\u00f9\u00f9\u00fb"+
		"\u00fb\4\2\u014d\u014d\u0150\u0150\4\2\r\r\u00ef\u00ef\3\2\u032d\u032e"+
		"\4\2\6\6\u013d\u013d\4\2\u00b8\u00b8\u017a\u017a\3\2\u0108\u0109\4\2\u032b"+
		"\u032b\u032f\u0330\4\2\u00d0\u00d0\u0168\u0168\4\2\u00cb\u00cb\u0146\u0146"+
		"\4\2\u010f\u010f\u01e2\u01e2\4\2\u032d\u032d\u032f\u032f\4\2__\u0093\u0093"+
		"\6\2^^\u00a4\u00a4\u0133\u0133\u016b\u016b\4\2  \u0201\u0201\4\2\u00a4"+
		"\u00a4\u016b\u016b\4\2^^\u016b\u016b\5\2\u020c\u020c\u024f\u024f\u02f3"+
		"\u02f3\4\2\u0308\u0308\u032b\u032b\5\2DD\u013f\u013f\u01f7\u01f7\4\2["+
		"[\u032f\u032f\4\2[[\u032b\u032b\4\2\u0239\u0239\u032f\u032f\5\2\u020c"+
		"\u020c\u022a\u022a\u024f\u024f\7\2\u0186\u0188\u01dc\u01dc\u01de\u01de"+
		"\u029b\u029d\u02fd\u02fe\4\2\u0087\u0087\u008d\u008d\5\2\u0217\u0217\u023f"+
		"\u023f\u0250\u0250\5\2\17\17\u0158\u0158\u0221\u0221\4\2\u00d7\u00d7\u00f5"+
		"\u00f5\3\2\u0104\u0105\5\2^^\u00a4\u00a4\u016b\u016b\4\2\u0087\u0087\u018a"+
		"\u018a\4\2\u027c\u027d\u02a2\u02a2\4\2\u00f7\u00f7\u02be\u02be\4\2\b\b"+
		"\u00a0\u00a0\5\2\u01ee\u01ee\u02c0\u02c0\u0310\u0310\5\2\u0155\u0155\u019a"+
		"\u019a\u01e2\u01e2\5\2\u01d0\u01d0\u0219\u0219\u0258\u0258\4\2\u020f\u020f"+
		"\u0239\u0239\4\2\b\b\u00a8\u00a9\5\2\u00ad\u00ad\u00d2\u00d2\u00e0\u00e0"+
		"\5\2\u0115\u0115\u0153\u0153\u01e4\u01e4\4\2mm\u01e4\u01e4\5\2\b\b\u017e"+
		"\u017e\u0284\u0284\4\2\u008e\u008e\u00e4\u00e4\5\2\u01e9\u01e9\u0274\u0274"+
		"\u0277\u0277\4\2\u029f\u029f\u02a1\u02a1\5\2\u025e\u025e\u02b6\u02b6\u02d9"+
		"\u02d9\5\2\u018f\u018f\u01e4\u01e4\u0207\u0207\4\2\u011a\u011a\u02ec\u02ec"+
		"\4\2\u0207\u0207\u02d8\u02d8\5\2\u008e\u008e\u01ac\u01ac\u02d8\u02d8\5"+
		"\2\u00d7\u00d7\u01b4\u01b4\u02fb\u02fb\4\2\u0258\u0258\u02c8\u02c8\4\2"+
		"\u0083\u0083\u01fd\u01fd\5\2cc\u0157\u0157\u0354\u0354\4\2;;\u00dc\u00dc"+
		"\4\2\u00a2\u00a2\u00d5\u00d5\4\2\u00d9\u00d9\u0141\u0141\4\2\u00d4\u00d4"+
		"\u0208\u0208\4\2\u00db\u00db\u01b4\u01b4\4\2EE\u0152\u0152\4\2\u00d8\u00d8"+
		"\u0120\u0120\4\2\u00bb\u00bb\u00da\u00da\4\2\u0186\u0188\u02fe\u02fe\4"+
		"\2\u0170\u0170\u023d\u023d\3\2\u027c\u027d\4\2\u0083\u0083\u0330\u0330"+
		"\4\2\u01d3\u01d3\u01ee\u01ee\4\2\u01f5\u01f5\u02df\u02df\4\2\u0155\u0155"+
		"\u0174\u0174\3\2\u015f\u0160\6\2\u01ad\u01ad\u027f\u027f\u02cd\u02cd\u032f"+
		"\u032f\4\2\u01bd\u01bd\u01e6\u01e6\4\2\22\22==\4\2\u0223\u0223\u02ce\u02ce"+
		"\4\2\u0209\u0209\u02c2\u02c2\6\2\u01e7\u01e7\u01fc\u01fc\u022f\u022f\u02e0"+
		"\u02e0\5\2\u027a\u027a\u029f\u029f\u02c3\u02c3\4\2\u0180\u0180\u02a8\u02a8"+
		"\3\2\u034a\u034c\5\2\u033f\u033f\u034d\u034e\u0350\u0352\3\2\3\4\3\2\u034d"+
		"\u034e\5\2\b\b\17\17\u0143\u0143\4\2\b\bdd\3\2\u0331\u0332\4\2\u02bb\u02bb"+
		"\u02be\u02be\4\2\u0202\u0202\u0264\u0264\4\2\5\5\u031b\u031b\4\2\u019a"+
		"\u019a\u0285\u0285\4\2\23\23``\4\2\u00f0\u00f0\u0215\u0215\5\2\u00cb\u00cb"+
		"\u01bb\u01bb\u0215\u0215\5\2\u00cb\u00cb\u0215\u0215\u023e\u023e\5\2\u00e1"+
		"\u00e1\u0326\u0326\u032b\u032b\5\2\u008e\u008e\u00b3\u00b3\u0121\u0121"+
		"\6\2\u00cb\u00cb\u0215\u0215\u023e\u023e\u02a9\u02a9\4\2\u0326\u0326\u032c"+
		"\u032c\5\2\u01da\u01da\u029a\u029a\u02bc\u02bc\b\2\u01a2\u01a2\u0243\u0243"+
		"\u0253\u0253\u02e4\u02e5\u02eb\u02eb\u030e\u030f\3\2\u01c0\u01c1\4\2\u0203"+
		"\u0203\u0232\u0232\4\2\u0230\u0230\u0233\u0233\4\2\u0299\u0299\u02be\u02be"+
		"\5\2\u008e\u008e\u00e4\u00e4\u029f\u029f\4\2\67\67\u00d6\u00d6\3\2\u0112"+
		"\u0113\4\2\u0243\u0243\u032b\u032b\4\2\u032b\u032b\u0331\u0331*\2**TT"+
		"ttzz\u0084\u0085\u0088\u0088\u00a2\u00a2\u00ae\u00ae\u00bf\u00c0\u00e5"+
		"\u00e5\u00f3\u00f3\u00ff\u0100\u0107\u0107\u0109\u0109\u010b\u010b\u011c"+
		"\u011d\u0123\u0124\u012b\u012c\u0137\u0137\u0140\u0140\u0144\u0144\u0146"+
		"\u0146\u014b\u014b\u014d\u014d\u0150\u0150\u0158\u0158\u015f\u015f\u0170"+
		"\u0170\u0180\u01e7\u01e9\u021e\u0220\u0227\u022a\u027d\u027f\u02e2\u02e4"+
		"\u02e9\u02eb\u0308\u030a\u0313\u0315\u0317\u0319\u0319\u032c\u032c\u0354"+
		"\u0354\3\2\u0337\u033e\7\2\u020c\u020c\u022a\u022a\u024f\u024f\u02f3\u02f3"+
		"\u034c\u034c\u3171\2\u0401\3\2\2\2\4\u0417\3\2\2\2\6\u041d\3\2\2\2\b\u0428"+
		"\3\2\2\2\n\u042f\3\2\2\2\f\u04d0\3\2\2\2\16\u04d7\3\2\2\2\20\u04e5\3\2"+
		"\2\2\22\u04e7\3\2\2\2\24\u04f2\3\2\2\2\26\u04f6\3\2\2\2\30\u0504\3\2\2"+
		"\2\32\u0506\3\2\2\2\34\u050d\3\2\2\2\36\u0517\3\2\2\2 \u0523\3\2\2\2\""+
		"\u0525\3\2\2\2$\u0527\3\2\2\2&\u0529\3\2\2\2(\u0543\3\2\2\2*\u0554\3\2"+
		"\2\2,\u0561\3\2\2\2.\u0590\3\2\2\2\60\u0592\3\2\2\2\62\u05a4\3\2\2\2\64"+
		"\u05a6\3\2\2\2\66\u05c3\3\2\2\28\u05d8\3\2\2\2:\u05e5\3\2\2\2<\u05ea\3"+
		"\2\2\2>\u05ee\3\2\2\2@\u05f2\3\2\2\2B\u05fd\3\2\2\2D\u0602\3\2\2\2F\u0604"+
		"\3\2\2\2H\u0609\3\2\2\2J\u060b\3\2\2\2L\u060d\3\2\2\2N\u0610\3\2\2\2P"+
		"\u0614\3\2\2\2R\u061a\3\2\2\2T\u061c\3\2\2\2V\u061f\3\2\2\2X\u0621\3\2"+
		"\2\2Z\u0624\3\2\2\2\\\u0629\3\2\2\2^\u0634\3\2\2\2`\u063d\3\2\2\2b\u0641"+
		"\3\2\2\2d\u0643\3\2\2\2f\u0649\3\2\2\2h\u064b\3\2\2\2j\u064d\3\2\2\2l"+
		"\u0650\3\2\2\2n\u0658\3\2\2\2p\u065a\3\2\2\2r\u065c\3\2\2\2t\u0672\3\2"+
		"\2\2v\u0685\3\2\2\2x\u068d\3\2\2\2z\u0691\3\2\2\2|\u0699\3\2\2\2~\u06a8"+
		"\3\2\2\2\u0080\u06aa\3\2\2\2\u0082\u06d6\3\2\2\2\u0084\u06df\3\2\2\2\u0086"+
		"\u06ec\3\2\2\2\u0088\u06ee\3\2\2\2\u008a\u06f0\3\2\2\2\u008c\u06f3\3\2"+
		"\2\2\u008e\u06f7\3\2\2\2\u0090\u0701\3\2\2\2\u0092\u070b\3\2\2\2\u0094"+
		"\u0737\3\2\2\2\u0096\u074e\3\2\2\2\u0098\u0750\3\2\2\2\u009a\u0752\3\2"+
		"\2\2\u009c\u0754\3\2\2\2\u009e\u0759\3\2\2\2\u00a0\u075c\3\2\2\2\u00a2"+
		"\u08bf\3\2\2\2\u00a4\u08c1\3\2\2\2\u00a6\u08f7\3\2\2\2\u00a8\u08fc\3\2"+
		"\2\2\u00aa\u0928\3\2\2\2\u00ac\u093f\3\2\2\2\u00ae\u095d\3\2\2\2\u00b0"+
		"\u0961\3\2\2\2\u00b2\u0967\3\2\2\2\u00b4\u096d\3\2\2\2\u00b6\u0971\3\2"+
		"\2\2\u00b8\u0975\3\2\2\2\u00ba\u097a\3\2\2\2\u00bc\u0988\3\2\2\2\u00be"+
		"\u098e\3\2\2\2\u00c0\u0994\3\2\2\2\u00c2\u09a4\3\2\2\2\u00c4\u09a8\3\2"+
		"\2\2\u00c6\u09ae\3\2\2\2\u00c8\u09b4\3\2\2\2\u00ca\u09bc\3\2\2\2\u00cc"+
		"\u09c2\3\2\2\2\u00ce\u09d1\3\2\2\2\u00d0\u09e3\3\2\2\2\u00d2\u09ea\3\2"+
		"\2\2\u00d4\u09ef\3\2\2\2\u00d6\u09fa\3\2\2\2\u00d8\u09ff\3\2\2\2\u00da"+
		"\u0a03\3\2\2\2\u00dc\u0a07\3\2\2\2\u00de\u0a0c\3\2\2\2\u00e0\u0a11\3\2"+
		"\2\2\u00e2\u0a16\3\2\2\2\u00e4\u0a24\3\2\2\2\u00e6\u0a2a\3\2\2\2\u00e8"+
		"\u0a2f\3\2\2\2\u00ea\u0a37\3\2\2\2\u00ec\u0a3b\3\2\2\2\u00ee\u0a4c\3\2"+
		"\2\2\u00f0\u0a54\3\2\2\2\u00f2\u0a5a\3\2\2\2\u00f4\u0a68\3\2\2\2\u00f6"+
		"\u0a7e\3\2\2\2\u00f8\u0a83\3\2\2\2\u00fa\u0a89\3\2\2\2\u00fc\u0a8e\3\2"+
		"\2\2\u00fe\u0a92\3\2\2\2\u0100\u0aae\3\2\2\2\u0102\u0ab9\3\2\2\2\u0104"+
		"\u0ac2\3\2\2\2\u0106\u0acf\3\2\2\2\u0108\u0ad7\3\2\2\2\u010a\u0adc\3\2"+
		"\2\2\u010c\u0ae7\3\2\2\2\u010e\u0b05\3\2\2\2\u0110\u0b23\3\2\2\2\u0112"+
		"\u0b31\3\2\2\2\u0114\u0b49\3\2\2\2\u0116\u0b59\3\2\2\2\u0118\u0b66\3\2"+
		"\2\2\u011a\u0b79\3\2\2\2\u011c\u0b86\3\2\2\2\u011e\u0b8f\3\2\2\2\u0120"+
		"\u0bad\3\2\2\2\u0122\u0ca0\3\2\2\2\u0124\u0ca9\3\2\2\2\u0126\u0ce3\3\2"+
		"\2\2\u0128\u0d14\3\2\2\2\u012a\u0d16\3\2\2\2\u012c\u0d3f\3\2\2\2\u012e"+
		"\u0d71\3\2\2\2\u0130\u0db7\3\2\2\2\u0132\u0dfa\3\2\2\2\u0134\u0e0a\3\2"+
		"\2\2\u0136\u0e26\3\2\2\2\u0138\u0e39\3\2\2\2\u013a\u0e4e\3\2\2\2\u013c"+
		"\u0e96\3\2\2\2\u013e\u0ef5\3\2\2\2\u0140\u0f0b\3\2\2\2\u0142\u0f17\3\2"+
		"\2\2\u0144\u0f33\3\2\2\2\u0146\u0f48\3\2\2\2\u0148\u0f62\3\2\2\2\u014a"+
		"\u0f6b\3\2\2\2\u014c\u0f8b\3\2\2\2\u014e\u0f95\3\2\2\2\u0150\u0fa5\3\2"+
		"\2\2\u0152\u0fb1\3\2\2\2\u0154\u0fba\3\2\2\2\u0156\u0fcb\3\2\2\2\u0158"+
		"\u0fe3\3\2\2\2\u015a\u104f\3\2\2\2\u015c\u1069\3\2\2\2\u015e\u1075\3\2"+
		"\2\2\u0160\u107c\3\2\2\2\u0162\u10a8\3\2\2\2\u0164\u10b3\3\2\2\2\u0166"+
		"\u10c7\3\2\2\2\u0168\u10f1\3\2\2\2\u016a\u10f8\3\2\2\2\u016c\u1106\3\2"+
		"\2\2\u016e\u1118\3\2\2\2\u0170\u115e\3\2\2\2\u0172\u1189\3\2\2\2\u0174"+
		"\u11bf\3\2\2\2\u0176\u1248\3\2\2\2\u0178\u12d7\3\2\2\2\u017a\u12f4\3\2"+
		"\2\2\u017c\u1311\3\2\2\2\u017e\u1380\3\2\2\2\u0180\u138d\3\2\2\2\u0182"+
		"\u1395\3\2\2\2\u0184\u139d\3\2\2\2\u0186\u13b3\3\2\2\2\u0188\u13d1\3\2"+
		"\2\2\u018a\u13ec\3\2\2\2\u018c\u1400\3\2\2\2\u018e\u1430\3\2\2\2\u0190"+
		"\u1455\3\2\2\2\u0192\u1521\3\2\2\2\u0194\u153f\3\2\2\2\u0196\u1541\3\2"+
		"\2\2\u0198\u1561\3\2\2\2\u019a\u1590\3\2\2\2\u019c\u15c4\3\2\2\2\u019e"+
		"\u15d4\3\2\2\2\u01a0\u15e2\3\2\2\2\u01a2\u162b\3\2\2\2\u01a4\u164a\3\2"+
		"\2\2\u01a6\u164c\3\2\2\2\u01a8\u1650\3\2\2\2\u01aa\u166e\3\2\2\2\u01ac"+
		"\u1670\3\2\2\2\u01ae\u1685\3\2\2\2\u01b0\u16de\3\2\2\2\u01b2\u16e0\3\2"+
		"\2\2\u01b4\u16ed\3\2\2\2\u01b6\u1725\3\2\2\2\u01b8\u1728\3\2\2\2\u01ba"+
		"\u1756\3\2\2\2\u01bc\u1759\3\2\2\2\u01be\u177a\3\2\2\2\u01c0\u178b\3\2"+
		"\2\2\u01c2\u178e\3\2\2\2\u01c4\u17c9\3\2\2\2\u01c6\u17e1\3\2\2\2\u01c8"+
		"\u17f1\3\2\2\2\u01ca\u17f3\3\2\2\2\u01cc\u1824\3\2\2\2\u01ce\u184d\3\2"+
		"\2\2\u01d0\u1879\3\2\2\2\u01d2\u1881\3\2\2\2\u01d4\u18ae\3\2\2\2\u01d6"+
		"\u18b0\3\2\2\2\u01d8\u18b8\3\2\2\2\u01da\u18d9\3\2\2\2\u01dc\u18e1\3\2"+
		"\2\2\u01de\u18fc\3\2\2\2\u01e0\u1914\3\2\2\2\u01e2\u1934\3\2\2\2\u01e4"+
		"\u1952\3\2\2\2\u01e6\u1969\3\2\2\2\u01e8\u1977\3\2\2\2\u01ea\u1979\3\2"+
		"\2\2\u01ec\u1998\3\2\2\2\u01ee\u19a6\3\2\2\2\u01f0\u19c6\3\2\2\2\u01f2"+
		"\u19dc\3\2\2\2\u01f4\u19fa\3\2\2\2\u01f6\u19fc\3\2\2\2\u01f8\u1a2f\3\2"+
		"\2\2\u01fa\u1a5d\3\2\2\2\u01fc\u1a70\3\2\2\2\u01fe\u1a72\3\2\2\2\u0200"+
		"\u1a8b\3\2\2\2\u0202\u1a8d\3\2\2\2\u0204\u1a95\3\2\2\2\u0206\u1a97\3\2"+
		"\2\2\u0208\u1b23\3\2\2\2\u020a\u1b2b\3\2\2\2\u020c\u1b2d\3\2\2\2\u020e"+
		"\u1b2f\3\2\2\2\u0210\u1b31\3\2\2\2\u0212\u1b3f\3\2\2\2\u0214\u1b45\3\2"+
		"\2\2\u0216\u1b47\3\2\2\2\u0218\u1b49\3\2\2\2\u021a\u1b4e\3\2\2\2\u021c"+
		"\u1b50\3\2\2\2\u021e\u1b54\3\2\2\2\u0220\u1b60\3\2\2\2\u0222\u1b62\3\2"+
		"\2\2\u0224\u1b65\3\2\2\2\u0226\u1b68\3\2\2\2\u0228\u1b6a\3\2\2\2\u022a"+
		"\u1b6c\3\2\2\2\u022c\u1b6e\3\2\2\2\u022e\u1b8b\3\2\2\2\u0230\u1b8d\3\2"+
		"\2\2\u0232\u1b98\3\2\2\2\u0234\u1b9b\3\2\2\2\u0236\u1ba4\3\2\2\2\u0238"+
		"\u1bac\3\2\2\2\u023a\u1bb3\3\2\2\2\u023c\u1bca\3\2\2\2\u023e\u1bcc\3\2"+
		"\2\2\u0240\u1bd7\3\2\2\2\u0242\u1bd9\3\2\2\2\u0244\u1bf4\3\2\2\2\u0246"+
		"\u1bfb\3\2\2\2\u0248\u1c01\3\2\2\2\u024a\u1c14\3\2\2\2\u024c\u1c16\3\2"+
		"\2\2\u024e\u1c27\3\2\2\2\u0250\u1c3e\3\2\2\2\u0252\u1c4f\3\2\2\2\u0254"+
		"\u1c60\3\2\2\2\u0256\u1c6a\3\2\2\2\u0258\u1c7b\3\2\2\2\u025a\u1c8c\3\2"+
		"\2\2\u025c\u1c96\3\2\2\2\u025e\u1c98\3\2\2\2\u0260\u1c9f\3\2\2\2\u0262"+
		"\u1cdb\3\2\2\2\u0264\u1cfa\3\2\2\2\u0266\u1cfc\3\2\2\2\u0268\u1df6\3\2"+
		"\2\2\u026a\u1ee4\3\2\2\2\u026c\u1f0c\3\2\2\2\u026e\u1f19\3\2\2\2\u0270"+
		"\u1f27\3\2\2\2\u0272\u1f2f\3\2\2\2\u0274\u1f35\3\2\2\2\u0276\u1f3c\3\2"+
		"\2\2\u0278\u1f40\3\2\2\2\u027a\u1f6d\3\2\2\2\u027c\u1f71\3\2\2\2\u027e"+
		"\u1f7e\3\2\2\2\u0280\u1fbb\3\2\2\2\u0282\u1fbd\3\2\2\2\u0284\u1fe2\3\2"+
		"\2\2\u0286\u1fe4\3\2\2\2\u0288\u1ff4\3\2\2\2\u028a\u2001\3\2\2\2\u028c"+
		"\u2015\3\2\2\2\u028e\u2022\3\2\2\2\u0290\u2047\3\2\2\2\u0292\u2058\3\2"+
		"\2\2\u0294\u205a\3\2\2\2\u0296\u2067\3\2\2\2\u0298\u2080\3\2\2\2\u029a"+
		"\u209c\3\2\2\2\u029c\u20c5\3\2\2\2\u029e\u2118\3\2\2\2\u02a0\u211a\3\2"+
		"\2\2\u02a2\u211e\3\2\2\2\u02a4\u2123\3\2\2\2\u02a6\u2127\3\2\2\2\u02a8"+
		"\u212c\3\2\2\2\u02aa\u2131\3\2\2\2\u02ac\u2140\3\2\2\2\u02ae\u2145\3\2"+
		"\2\2\u02b0\u2149\3\2\2\2\u02b2\u2152\3\2\2\2\u02b4\u2157\3\2\2\2\u02b6"+
		"\u215f\3\2\2\2\u02b8\u2163\3\2\2\2\u02ba\u2170\3\2\2\2\u02bc\u2172\3\2"+
		"\2\2\u02be\u219f\3\2\2\2\u02c0\u21a9\3\2\2\2\u02c2\u21d4\3\2\2\2\u02c4"+
		"\u2218\3\2\2\2\u02c6\u2223\3\2\2\2\u02c8\u222e\3\2\2\2\u02ca\u223a\3\2"+
		"\2\2\u02cc\u2241\3\2\2\2\u02ce\u226a\3\2\2\2\u02d0\u2275\3\2\2\2\u02d2"+
		"\u2277\3\2\2\2\u02d4\u22c6\3\2\2\2\u02d6\u22ca\3\2\2\2\u02d8\u22d6\3\2"+
		"\2\2\u02da\u22f6\3\2\2\2\u02dc\u2301\3\2\2\2\u02de\u2303\3\2\2\2\u02e0"+
		"\u2305\3\2\2\2\u02e2\u2307\3\2\2\2\u02e4\u2309\3\2\2\2\u02e6\u230b\3\2"+
		"\2\2\u02e8\u230d\3\2\2\2\u02ea\u2312\3\2\2\2\u02ec\u2314\3\2\2\2\u02ee"+
		"\u2318\3\2\2\2\u02f0\u231c\3\2\2\2\u02f2\u2320\3\2\2\2\u02f4\u2324\3\2"+
		"\2\2\u02f6\u2328\3\2\2\2\u02f8\u232e\3\2\2\2\u02fa\u2330\3\2\2\2\u02fc"+
		"\u2334\3\2\2\2\u02fe\u2338\3\2\2\2\u0300\u233c\3\2\2\2\u0302\u2340\3\2"+
		"\2\2\u0304\u2344\3\2\2\2\u0306\u2348\3\2\2\2\u0308\u234f\3\2\2\2\u030a"+
		"\u236a\3\2\2\2\u030c\u2370\3\2\2\2\u030e\u237a\3\2\2\2\u0310\u2384\3\2"+
		"\2\2\u0312\u2386\3\2\2\2\u0314\u23a2\3\2\2\2\u0316\u23a4\3\2\2\2\u0318"+
		"\u23c0\3\2\2\2\u031a\u23c2\3\2\2\2\u031c\u23ca\3\2\2\2\u031e\u23d2\3\2"+
		"\2\2\u0320\u23db\3\2\2\2\u0322\u2417\3\2\2\2\u0324\u241e\3\2\2\2\u0326"+
		"\u242c\3\2\2\2\u0328\u2435\3\2\2\2\u032a\u245c\3\2\2\2\u032c\u246c\3\2"+
		"\2\2\u032e\u2473\3\2\2\2\u0330\u2475\3\2\2\2\u0332\u24e4\3\2\2\2\u0334"+
		"\u24e6\3\2\2\2\u0336\u24f1\3\2\2\2\u0338\u24f5\3\2\2\2\u033a\u24f7\3\2"+
		"\2\2\u033c\u2530\3\2\2\2\u033e\u2532\3\2\2\2\u0340\u253b\3\2\2\2\u0342"+
		"\u2543\3\2\2\2\u0344\u2551\3\2\2\2\u0346\u2562\3\2\2\2\u0348\u2578\3\2"+
		"\2\2\u034a\u2582\3\2\2\2\u034c\u2588\3\2\2\2\u034e\u258a\3\2\2\2\u0350"+
		"\u2597\3\2\2\2\u0352\u2599\3\2\2\2\u0354\u25d1\3\2\2\2\u0356\u25d3\3\2"+
		"\2\2\u0358\u25e4\3\2\2\2\u035a\u25ec\3\2\2\2\u035c\u25f1\3\2\2\2\u035e"+
		"\u261b\3\2\2\2\u0360\u261d\3\2\2\2\u0362\u2625\3\2\2\2\u0364\u262f\3\2"+
		"\2\2\u0366\u2637\3\2\2\2\u0368\u2655\3\2\2\2\u036a\u2657\3\2\2\2\u036c"+
		"\u2665\3\2\2\2\u036e\u26f9\3\2\2\2\u0370\u2700\3\2\2\2\u0372\u272d\3\2"+
		"\2\2\u0374\u2745\3\2\2\2\u0376\u2747\3\2\2\2\u0378\u274e\3\2\2\2\u037a"+
		"\u2755\3\2\2\2\u037c\u275c\3\2\2\2\u037e\u2761\3\2\2\2\u0380\u2767\3\2"+
		"\2\2\u0382\u276c\3\2\2\2\u0384\u2770\3\2\2\2\u0386\u2775\3\2\2\2\u0388"+
		"\u2784\3\2\2\2\u038a\u2793\3\2\2\2\u038c\u27c9\3\2\2\2\u038e\u27cb\3\2"+
		"\2\2\u0390\u27d8\3\2\2\2\u0392\u27da\3\2\2\2\u0394\u27e8\3\2\2\2\u0396"+
		"\u27fa\3\2\2\2\u0398\u281c\3\2\2\2\u039a\u2832\3\2\2\2\u039c\u2835\3\2"+
		"\2\2\u039e\u2839\3\2\2\2\u03a0\u2848\3\2\2\2\u03a2\u2851\3\2\2\2\u03a4"+
		"\u2855\3\2\2\2\u03a6\u285d\3\2\2\2\u03a8\u2863\3\2\2\2\u03aa\u2887\3\2"+
		"\2\2\u03ac\u2889\3\2\2\2\u03ae\u2896\3\2\2\2\u03b0\u2898\3\2\2\2\u03b2"+
		"\u28ad\3\2\2\2\u03b4\u28eb\3\2\2\2\u03b6\u28f4\3\2\2\2\u03b8\u28fb\3\2"+
		"\2\2\u03ba\u290e\3\2\2\2\u03bc\u292c\3\2\2\2\u03be\u2931\3\2\2\2\u03c0"+
		"\u2938\3\2\2\2\u03c2\u2947\3\2\2\2\u03c4\u2956\3\2\2\2\u03c6\u295a\3\2"+
		"\2\2\u03c8\u298c\3\2\2\2\u03ca\u298e\3\2\2\2\u03cc\u299c\3\2\2\2\u03ce"+
		"\u29a6\3\2\2\2\u03d0\u29a8\3\2\2\2\u03d2\u29aa\3\2\2\2\u03d4\u29ad\3\2"+
		"\2\2\u03d6\u29b8\3\2\2\2\u03d8\u29bf\3\2\2\2\u03da\u29c1\3\2\2\2\u03dc"+
		"\u29cd\3\2\2\2\u03de\u29fd\3\2\2\2\u03e0\u2a01\3\2\2\2\u03e2\u2a03\3\2"+
		"\2\2\u03e4\u2a18\3\2\2\2\u03e6\u2a27\3\2\2\2\u03e8\u2a37\3\2\2\2\u03ea"+
		"\u2a39\3\2\2\2\u03ec\u2a5d\3\2\2\2\u03ee\u2a62\3\2\2\2\u03f0\u2a73\3\2"+
		"\2\2\u03f2\u2a75\3\2\2\2\u03f4\u2a7a\3\2\2\2\u03f6\u2a7c\3\2\2\2\u03f8"+
		"\u2a8d\3\2\2\2\u03fa\u2a8f\3\2\2\2\u03fc\u2a91\3\2\2\2\u03fe\u0400\5\4"+
		"\3\2\u03ff\u03fe\3\2\2\2\u0400\u0403\3\2\2\2\u0401\u03ff\3\2\2\2\u0401"+
		"\u0402\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u0401\3\2\2\2\u0404\u0405\7\2"+
		"\2\3\u0405\3\3\2\2\2\u0406\u040a\5\u027a\u013e\2\u0407\u0409\5\u02a0\u0151"+
		"\2\u0408\u0407\3\2\2\2\u0409\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b"+
		"\3\2\2\2\u040b\u0418\3\2\2\2\u040c\u040a\3\2\2\2\u040d\u040f\5\u027a\u013e"+
		"\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0414"+
		"\5\6\4\2\u0411\u0413\5\u02a0\u0151\2\u0412\u0411\3\2\2\2\u0413\u0416\3"+
		"\2\2\2\u0414\u0412\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0418\3\2\2\2\u0416"+
		"\u0414\3\2\2\2\u0417\u0406\3\2\2\2\u0417\u040e\3\2\2\2\u0418\5\3\2\2\2"+
		"\u0419\u041b\5\b\5\2\u041a\u041c\7\u0348\2\2\u041b\u041a\3\2\2\2\u041b"+
		"\u041c\3\2\2\2\u041c\u041e\3\2\2\2\u041d\u0419\3\2\2\2\u041e\u041f\3\2"+
		"\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420\7\3\2\2\2\u0421\u0429"+
		"\5\n\6\2\u0422\u0429\5\f\7\2\u0423\u0429\5\20\t\2\u0424\u0429\5\u02aa"+
		"\u0156\2\u0425\u0429\5\60\31\2\u0426\u0429\5\62\32\2\u0427\u0429\5\16"+
		"\b\2\u0428\u0421\3\2\2\2\u0428\u0422\3\2\2\2\u0428\u0423\3\2\2\2\u0428"+
		"\u0424\3\2\2\2\u0428\u0425\3\2\2\2\u0428\u0426\3\2\2\2\u0428\u0427\3\2"+
		"\2\2\u0429\t\3\2\2\2\u042a\u0430\5\u01ae\u00d8\2\u042b\u0430\5\u01b4\u00db"+
		"\2\u042c\u0430\5\u01b8\u00dd\2\u042d\u0430\5\u01be\u00e0\2\u042e\u0430"+
		"\5\u01c2\u00e2\2\u042f\u042a\3\2\2\2\u042f\u042b\3\2\2\2\u042f\u042c\3"+
		"\2\2\2\u042f\u042d\3\2\2\2\u042f\u042e\3\2\2\2\u0430\13\3\2\2\2\u0431"+
		"\u04d1\5\64\33\2\u0432\u04d1\5<\37\2\u0433\u04d1\5v<\2\u0434\u04d1\5\u0084"+
		"C\2\u0435\u04d1\5\u0090I\2\u0436\u04d1\5\u0092J\2\u0437\u04d1\5\u008e"+
		"H\2\u0438\u04d1\5\u009eP\2\u0439\u04d1\5\u00a8U\2\u043a\u04d1\5\u00aa"+
		"V\2\u043b\u04d1\5\u0116\u008c\2\u043c\u04d1\5\u011a\u008e\2\u043d\u04d1"+
		"\5\u01f8\u00fd\2\u043e\u04d1\5\u015c\u00af\2\u043f\u04d1\5\u0206\u0104"+
		"\2\u0440\u04d1\5\u0120\u0091\2\u0441\u04d1\5\u0128\u0095\2\u0442\u04d1"+
		"\5\u012a\u0096\2\u0443\u04d1\5\u012e\u0098\2\u0444\u04d1\5\u0132\u009a"+
		"\2\u0445\u04d1\5\u0136\u009c\2\u0446\u04d1\5\u013e\u00a0\2\u0447\u04d1"+
		"\5\u0142\u00a2\2\u0448\u04d1\5\u013a\u009e\2\u0449\u04d1\5\u014a\u00a6"+
		"\2\u044a\u04d1\5\u0146\u00a4\2\u044b\u04d1\5\u014e\u00a8\2\u044c\u04d1"+
		"\5\u0150\u00a9\2\u044d\u04d1\5\u0152\u00aa\2\u044e\u04d1\5\u0154\u00ab"+
		"\2\u044f\u04d1\5\u015a\u00ae\2\u0450\u04d1\5\u016a\u00b6\2\u0451\u04d1"+
		"\5\u0164\u00b3\2\u0452\u04d1\5\u0170\u00b9\2\u0453\u04d1\5\u0174\u00bb"+
		"\2\u0454\u04d1\5\u0178\u00bd\2\u0455\u04d1\5\u017c\u00bf\2\u0456\u04d1"+
		"\5\u017e\u00c0\2\u0457\u04d1\5\u0182\u00c2\2\u0458\u04d1\5\u0184\u00c3"+
		"\2\u0459\u04d1\5\u0188\u00c5\2\u045a\u04d1\5\u018a\u00c6\2\u045b\u04d1"+
		"\5\u01f6\u00fc\2\u045c\u04d1\5\u0190\u00c9\2\u045d\u04d1\5\u0196\u00cc"+
		"\2\u045e\u04d1\5\u0198\u00cd\2\u045f\u04d1\5\66\34\2\u0460\u04d1\5r:\2"+
		"\u0461\u04d1\5\u0080A\2\u0462\u04d1\5\u00acW\2\u0463\u04d1\5\u0114\u008b"+
		"\2\u0464\u04d1\5\u0118\u008d\2\u0465\u04d1\5\u011c\u008f\2\u0466\u04d1"+
		"\5\u01ca\u00e6\2\u0467\u04d1\5\u015e\u00b0\2\u0468\u04d1\5\u011e\u0090"+
		"\2\u0469\u04d1\5\u012c\u0097\2\u046a\u04d1\5\u0130\u0099\2\u046b\u04d1"+
		"\5\u0134\u009b\2\u046c\u04d1\5\u0138\u009d\2\u046d\u04d1\5\u01cc\u00e7"+
		"\2\u046e\u04d1\5\u0140\u00a1\2\u046f\u04d1\5\u0144\u00a3\2\u0470\u04d1"+
		"\5\u013c\u009f\2\u0471\u04d1\5\u014c\u00a7\2\u0472\u04d1\5\u0148\u00a5"+
		"\2\u0473\u04d1\5\u00a4S\2\u0474\u04d1\5\u01dc\u00ef\2\u0475\u04d1\5\u01ce"+
		"\u00e8\2\u0476\u04d1\5\u01d0\u00e9\2\u0477\u04d1\5\u0156\u00ac\2\u0478"+
		"\u04d1\5\u0158\u00ad\2\u0479\u04d1\5\u0160\u00b1\2\u047a\u04d1\5\u0162"+
		"\u00b2\2\u047b\u04d1\5\u0166\u00b4\2\u047c\u04d1\5\u0168\u00b5\2\u047d"+
		"\u04d1\5\u016c\u00b7\2\u047e\u04d1\5\u016e\u00b8\2\u047f\u04d1\5\u0172"+
		"\u00ba\2\u0480\u04d1\5\u0176\u00bc\2\u0481\u04d1\5\u017a\u00be\2\u0482"+
		"\u04d1\5\u0180\u00c1\2\u0483\u04d1\5\u0186\u00c4\2\u0484\u04d1\5\u01ea"+
		"\u00f6\2\u0485\u04d1\5\u018c\u00c7\2\u0486\u04d1\5\u018e\u00c8\2\u0487"+
		"\u04d1\5\u01ee\u00f8\2\u0488\u04d1\5\u0258\u012d\2\u0489\u04d1\5\u0192"+
		"\u00ca\2\u048a\u04d1\5\u0194\u00cb\2\u048b\u04d1\5\u01f2\u00fa\2\u048c"+
		"\u04d1\5\u019a\u00ce\2\u048d\u04d1\5\u019c\u00cf\2\u048e\u04d1\58\35\2"+
		"\u048f\u04d1\5:\36\2\u0490\u04d1\5t;\2\u0491\u04d1\5\u0082B\2\u0492\u04d1"+
		"\5\u009cO\2\u0493\u04d1\5\u00a6T\2\u0494\u04d1\5\u00aeX\2\u0495\u04d1"+
		"\5\u00b0Y\2\u0496\u04d1\5\u00b2Z\2\u0497\u04d1\5\u00b4[\2\u0498\u04d1"+
		"\5\u00b6\\\2\u0499\u04d1\5\u00b8]\2\u049a\u04d1\5\u00ba^\2\u049b\u04d1"+
		"\5\u00bc_\2\u049c\u04d1\5\u00be`\2\u049d\u04d1\5\u00e8u\2\u049e\u04d1"+
		"\5\u00c0a\2\u049f\u04d1\5\u00c2b\2\u04a0\u04d1\5\u00ceh\2\u04a1\u04d1"+
		"\5\u00d0i\2\u04a2\u04d1\5\u00c4c\2\u04a3\u04d1\5\u00c6d\2\u04a4\u04d1"+
		"\5\u00c8e\2\u04a5\u04d1\5\u00caf\2\u04a6\u04d1\5\u00ccg\2\u04a7\u04d1"+
		"\5\u00d2j\2\u04a8\u04d1\5\u00d4k\2\u04a9\u04d1\5\u00d6l\2\u04aa\u04d1"+
		"\5\u0250\u0129\2\u04ab\u04d1\5\u0242\u0122\2\u04ac\u04d1\5\u00d8m\2\u04ad"+
		"\u04d1\5\u00dan\2\u04ae\u04d1\5\u00dco\2\u04af\u04d1\5\u00dep\2\u04b0"+
		"\u04d1\5\u00e0q\2\u04b1\u04d1\5\u0248\u0125\2\u04b2\u04d1\5\u00e2r\2\u04b3"+
		"\u04d1\5\u00e4s\2\u04b4\u04d1\5\u00e6t\2\u04b5\u04d1\5\u00eav\2\u04b6"+
		"\u04d1\5\u00ecw\2\u04b7\u04d1\5\u00eex\2\u04b8\u04d1\5\u00f0y\2\u04b9"+
		"\u04d1\5\u00f2z\2\u04ba\u04d1\5\u00f4{\2\u04bb\u04d1\5\u00f6|\2\u04bc"+
		"\u04d1\5\u00f8}\2\u04bd\u04d1\5\u00fa~\2\u04be\u04d1\5\u00fc\177\2\u04bf"+
		"\u04d1\5\u00fe\u0080\2\u04c0\u04d1\5\u0252\u012a\2\u04c1\u04d1\5\u0100"+
		"\u0081\2\u04c2\u04d1\5\u0102\u0082\2\u04c3\u04d1\5\u0104\u0083\2\u04c4"+
		"\u04d1\5\u0254\u012b\2\u04c5\u04d1\5\u024a\u0126\2\u04c6\u04d1\5\u025a"+
		"\u012e\2\u04c7\u04d1\5\u0106\u0084\2\u04c8\u04d1\5\u0256\u012c\2\u04c9"+
		"\u04d1\5\u0108\u0085\2\u04ca\u04d1\5\u010a\u0086\2\u04cb\u04d1\5\u010c"+
		"\u0087\2\u04cc\u04d1\5\u010e\u0088\2\u04cd\u04d1\5\u0110\u0089\2\u04ce"+
		"\u04d1\5\u0112\u008a\2\u04cf\u04d1\5\u01ec\u00f7\2\u04d0\u0431\3\2\2\2"+
		"\u04d0\u0432\3\2\2\2\u04d0\u0433\3\2\2\2\u04d0\u0434\3\2\2\2\u04d0\u0435"+
		"\3\2\2\2\u04d0\u0436\3\2\2\2\u04d0\u0437\3\2\2\2\u04d0\u0438\3\2\2\2\u04d0"+
		"\u0439\3\2\2\2\u04d0\u043a\3\2\2\2\u04d0\u043b\3\2\2\2\u04d0\u043c\3\2"+
		"\2\2\u04d0\u043d\3\2\2\2\u04d0\u043e\3\2\2\2\u04d0\u043f\3\2\2\2\u04d0"+
		"\u0440\3\2\2\2\u04d0\u0441\3\2\2\2\u04d0\u0442\3\2\2\2\u04d0\u0443\3\2"+
		"\2\2\u04d0\u0444\3\2\2\2\u04d0\u0445\3\2\2\2\u04d0\u0446\3\2\2\2\u04d0"+
		"\u0447\3\2\2\2\u04d0\u0448\3\2\2\2\u04d0\u0449\3\2\2\2\u04d0\u044a\3\2"+
		"\2\2\u04d0\u044b\3\2\2\2\u04d0\u044c\3\2\2\2\u04d0\u044d\3\2\2\2\u04d0"+
		"\u044e\3\2\2\2\u04d0\u044f\3\2\2\2\u04d0\u0450\3\2\2\2\u04d0\u0451\3\2"+
		"\2\2\u04d0\u0452\3\2\2\2\u04d0\u0453\3\2\2\2\u04d0\u0454\3\2\2\2\u04d0"+
		"\u0455\3\2\2\2\u04d0\u0456\3\2\2\2\u04d0\u0457\3\2\2\2\u04d0\u0458\3\2"+
		"\2\2\u04d0\u0459\3\2\2\2\u04d0\u045a\3\2\2\2\u04d0\u045b\3\2\2\2\u04d0"+
		"\u045c\3\2\2\2\u04d0\u045d\3\2\2\2\u04d0\u045e\3\2\2\2\u04d0\u045f\3\2"+
		"\2\2\u04d0\u0460\3\2\2\2\u04d0\u0461\3\2\2\2\u04d0\u0462\3\2\2\2\u04d0"+
		"\u0463\3\2\2\2\u04d0\u0464\3\2\2\2\u04d0\u0465\3\2\2\2\u04d0\u0466\3\2"+
		"\2\2\u04d0\u0467\3\2\2\2\u04d0\u0468\3\2\2\2\u04d0\u0469\3\2\2\2\u04d0"+
		"\u046a\3\2\2\2\u04d0\u046b\3\2\2\2\u04d0\u046c\3\2\2\2\u04d0\u046d\3\2"+
		"\2\2\u04d0\u046e\3\2\2\2\u04d0\u046f\3\2\2\2\u04d0\u0470\3\2\2\2\u04d0"+
		"\u0471\3\2\2\2\u04d0\u0472\3\2\2\2\u04d0\u0473\3\2\2\2\u04d0\u0474\3\2"+
		"\2\2\u04d0\u0475\3\2\2\2\u04d0\u0476\3\2\2\2\u04d0\u0477\3\2\2\2\u04d0"+
		"\u0478\3\2\2\2\u04d0\u0479\3\2\2\2\u04d0\u047a\3\2\2\2\u04d0\u047b\3\2"+
		"\2\2\u04d0\u047c\3\2\2\2\u04d0\u047d\3\2\2\2\u04d0\u047e\3\2\2\2\u04d0"+
		"\u047f\3\2\2\2\u04d0\u0480\3\2\2\2\u04d0\u0481\3\2\2\2\u04d0\u0482\3\2"+
		"\2\2\u04d0\u0483\3\2\2\2\u04d0\u0484\3\2\2\2\u04d0\u0485\3\2\2\2\u04d0"+
		"\u0486\3\2\2\2\u04d0\u0487\3\2\2\2\u04d0\u0488\3\2\2\2\u04d0\u0489\3\2"+
		"\2\2\u04d0\u048a\3\2\2\2\u04d0\u048b\3\2\2\2\u04d0\u048c\3\2\2\2\u04d0"+
		"\u048d\3\2\2\2\u04d0\u048e\3\2\2\2\u04d0\u048f\3\2\2\2\u04d0\u0490\3\2"+
		"\2\2\u04d0\u0491\3\2\2\2\u04d0\u0492\3\2\2\2\u04d0\u0493\3\2\2\2\u04d0"+
		"\u0494\3\2\2\2\u04d0\u0495\3\2\2\2\u04d0\u0496\3\2\2\2\u04d0\u0497\3\2"+
		"\2\2\u04d0\u0498\3\2\2\2\u04d0\u0499\3\2\2\2\u04d0\u049a\3\2\2\2\u04d0"+
		"\u049b\3\2\2\2\u04d0\u049c\3\2\2\2\u04d0\u049d\3\2\2\2\u04d0\u049e\3\2"+
		"\2\2\u04d0\u049f\3\2\2\2\u04d0\u04a0\3\2\2\2\u04d0\u04a1\3\2\2\2\u04d0"+
		"\u04a2\3\2\2\2\u04d0\u04a3\3\2\2\2\u04d0\u04a4\3\2\2\2\u04d0\u04a5\3\2"+
		"\2\2\u04d0\u04a6\3\2\2\2\u04d0\u04a7\3\2\2\2\u04d0\u04a8\3\2\2\2\u04d0"+
		"\u04a9\3\2\2\2\u04d0\u04aa\3\2\2\2\u04d0\u04ab\3\2\2\2\u04d0\u04ac\3\2"+
		"\2\2\u04d0\u04ad\3\2\2\2\u04d0\u04ae\3\2\2\2\u04d0\u04af\3\2\2\2\u04d0"+
		"\u04b0\3\2\2\2\u04d0\u04b1\3\2\2\2\u04d0\u04b2\3\2\2\2\u04d0\u04b3\3\2"+
		"\2\2\u04d0\u04b4\3\2\2\2\u04d0\u04b5\3\2\2\2\u04d0\u04b6\3\2\2\2\u04d0"+
		"\u04b7\3\2\2\2\u04d0\u04b8\3\2\2\2\u04d0\u04b9\3\2\2\2\u04d0\u04ba\3\2"+
		"\2\2\u04d0\u04bb\3\2\2\2\u04d0\u04bc\3\2\2\2\u04d0\u04bd\3\2\2\2\u04d0"+
		"\u04be\3\2\2\2\u04d0\u04bf\3\2\2\2\u04d0\u04c0\3\2\2\2\u04d0\u04c1\3\2"+
		"\2\2\u04d0\u04c2\3\2\2\2\u04d0\u04c3\3\2\2\2\u04d0\u04c4\3\2\2\2\u04d0"+
		"\u04c5\3\2\2\2\u04d0\u04c6\3\2\2\2\u04d0\u04c7\3\2\2\2\u04d0\u04c8\3\2"+
		"\2\2\u04d0\u04c9\3\2\2\2\u04d0\u04ca\3\2\2\2\u04d0\u04cb\3\2\2\2\u04d0"+
		"\u04cc\3\2\2\2\u04d0\u04cd\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04cf\3\2"+
		"\2\2\u04d1\r\3\2\2\2\u04d2\u04d8\5\u0266\u0134\2\u04d3\u04d8\5\u0268\u0135"+
		"\2\u04d4\u04d8\5\u026a\u0136\2\u04d5\u04d8\5\u026c\u0137\2\u04d6\u04d8"+
		"\5\u026e\u0138\2\u04d7\u04d2\3\2\2\2\u04d7\u04d3\3\2\2\2\u04d7\u04d4\3"+
		"\2\2\2\u04d7\u04d5\3\2\2\2\u04d7\u04d6\3\2\2\2\u04d8\17\3\2\2\2\u04d9"+
		"\u04e6\5\22\n\2\u04da\u04e6\5\24\13\2\u04db\u04e6\5\26\f\2\u04dc\u04e6"+
		"\5\30\r\2\u04dd\u04e6\5\34\17\2\u04de\u04e6\5\32\16\2\u04df\u04e6\5\36"+
		"\20\2\u04e0\u04e6\5&\24\2\u04e1\u04e6\5(\25\2\u04e2\u04e6\5*\26\2\u04e3"+
		"\u04e6\5,\27\2\u04e4\u04e6\5.\30\2\u04e5\u04d9\3\2\2\2\u04e5\u04da\3\2"+
		"\2\2\u04e5\u04db\3\2\2\2\u04e5\u04dc\3\2\2\2\u04e5\u04dd\3\2\2\2\u04e5"+
		"\u04de\3\2\2\2\u04e5\u04df\3\2\2\2\u04e5\u04e0\3\2\2\2\u04e5\u04e1\3\2"+
		"\2\2\u04e5\u04e2\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e5\u04e4\3\2\2\2\u04e6"+
		"\21\3\2\2\2\u04e7\u04e9\7\36\2\2\u04e8\u04ea\7\u0348\2\2\u04e9\u04e8\3"+
		"\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04ed\5\6\4\2\u04ec"+
		"\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f0\7n"+
		"\2\2\u04ef\u04f1\7\u0348\2\2\u04f0\u04ef\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1"+
		"\23\3\2\2\2\u04f2\u04f4\7#\2\2\u04f3\u04f5\7\u0348\2\2\u04f4\u04f3\3\2"+
		"\2\2\u04f4\u04f5\3\2\2\2\u04f5\25\3\2\2\2\u04f6\u04f8\7D\2\2\u04f7\u04f9"+
		"\7\u0348\2\2\u04f8\u04f7\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\27\3\2\2\2"+
		"\u04fa\u04fb\7\u0091\2\2\u04fb\u04fd\5\u03f4\u01fb\2\u04fc\u04fe\7\u0348"+
		"\2\2\u04fd\u04fc\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0505\3\2\2\2\u04ff"+
		"\u0500\5\u03f4\u01fb\2\u0500\u0502\7\u0349\2\2\u0501\u0503\7\u0348\2\2"+
		"\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0505\3\2\2\2\u0504\u04fa"+
		"\3\2\2\2\u0504\u04ff\3\2\2\2\u0505\31\3\2\2\2\u0506\u0508\7\u011c\2\2"+
		"\u0507\u0509\5\u02d8\u016d\2\u0508\u0507\3\2\2\2\u0508\u0509\3\2\2\2\u0509"+
		"\u050b\3\2\2\2\u050a\u050c\7\u0348\2\2\u050b\u050a\3\2\2\2\u050b\u050c"+
		"\3\2\2\2\u050c\33\3\2\2\2\u050d\u050e\7\u009b\2\2\u050e\u050f\5\u031c"+
		"\u018f\2\u050f\u0512\5\b\5\2\u0510\u0511\7l\2\2\u0511\u0513\5\b\5\2\u0512"+
		"\u0510\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0515\3\2\2\2\u0514\u0516\7\u0348"+
		"\2\2\u0515\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516\35\3\2\2\2\u0517\u051e"+
		"\7\u02f5\2\2\u0518\u0519\5 \21\2\u0519\u051a\7\u0347\2\2\u051a\u051b\5"+
		"\"\22\2\u051b\u051c\7\u0347\2\2\u051c\u051d\5$\23\2\u051d\u051f\3\2\2"+
		"\2\u051e\u0518\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0521\3\2\2\2\u0520\u0522"+
		"\7\u0348\2\2\u0521\u0520\3\2\2\2\u0521\u0522\3\2\2\2\u0522\37\3\2\2\2"+
		"\u0523\u0524\t\2\2\2\u0524!\3\2\2\2\u0525\u0526\t\3\2\2\u0526#\3\2\2\2"+
		"\u0527\u0528\t\2\2\2\u0528%\3\2\2\2\u0529\u052a\7\36\2\2\u052a\u052c\7"+
		"\u0300\2\2\u052b\u052d\7\u0348\2\2\u052c\u052b\3\2\2\2\u052c\u052d\3\2"+
		"\2\2\u052d\u052f\3\2\2\2\u052e\u0530\5\6\4\2\u052f\u052e\3\2\2\2\u052f"+
		"\u0530\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0532\7n\2\2\u0532\u0534\7\u0300"+
		"\2\2\u0533\u0535\7\u0348\2\2\u0534\u0533\3\2\2\2\u0534\u0535\3\2\2\2\u0535"+
		"\u0536\3\2\2\2\u0536\u0537\7\36\2\2\u0537\u0539\7\u01b1\2\2\u0538\u053a"+
		"\7\u0348\2\2\u0539\u0538\3\2\2\2\u0539\u053a\3\2\2\2\u053a\u053c\3\2\2"+
		"\2\u053b\u053d\5\6\4\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053e"+
		"\3\2\2\2\u053e\u053f\7n\2\2\u053f\u0541\7\u01b1\2\2\u0540\u0542\7\u0348"+
		"\2\2\u0541\u0540\3\2\2\2\u0541\u0542\3\2\2\2\u0542\'\3\2\2\2\u0543\u0545"+
		"\7\u0176\2\2\u0544\u0546\5\u01bc\u00df\2\u0545\u0544\3\2\2\2\u0545\u0546"+
		"\3\2\2\2\u0546\u0548\3\2\2\2\u0547\u0549\7\u0347\2\2\u0548\u0547\3\2\2"+
		"\2\u0548\u0549\3\2\2\2\u0549\u054c\3\2\2\2\u054a\u054b\t\4\2\2\u054b\u054d"+
		"\5\u01c0\u00e1\2\u054c\u054a\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054f\3"+
		"\2\2\2\u054e\u0550\5\u02d8\u016d\2\u054f\u054e\3\2\2\2\u054f\u0550\3\2"+
		"\2\2\u0550\u0552\3\2\2\2\u0551\u0553\7\u0348\2\2\u0552\u0551\3\2\2\2\u0552"+
		"\u0553\3\2\2\2\u0553)\3\2\2\2\u0554\u0555\7\u0179\2\2\u0555\u055f\5\u031c"+
		"\u018f\2\u0556\u0560\5\b\5\2\u0557\u0559\7#\2\2\u0558\u055a\7\u0348\2"+
		"\2\u0559\u0558\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u0560\3\2\2\2\u055b\u055d"+
		"\7D\2\2\u055c\u055e\7\u0348\2\2\u055d\u055c\3\2\2\2\u055d\u055e\3\2\2"+
		"\2\u055e\u0560\3\2\2\2\u055f\u0556\3\2\2\2\u055f\u0557\3\2\2\2\u055f\u055b"+
		"\3\2\2\2\u0560+\3\2\2\2\u0561\u0564\7\u0103\2\2\u0562\u0565\5\u02d8\u016d"+
		"\2\u0563\u0565\7\u0323\2\2\u0564\u0562\3\2\2\2\u0564\u0563\3\2\2\2\u0565"+
		"\u056a\3\2\2\2\u0566\u0567\7\u0347\2\2\u0567\u0569\7\u0326\2\2\u0568\u0566"+
		"\3\2\2\2\u0569\u056c\3\2\2\2\u056a\u0568\3\2\2\2\u056a\u056b\3\2\2\2\u056b"+
		"\u056e\3\2\2\2\u056c\u056a\3\2\2\2\u056d\u056f\7\u0348\2\2\u056e\u056d"+
		"\3\2\2\2\u056e\u056f\3\2\2\2\u056f-\3\2\2\2\u0570\u0571\7\u010a\2\2\u0571"+
		"\u0572\7\u0345\2\2\u0572\u0573\t\5\2\2\u0573\u0574\7\u0347\2\2\u0574\u0575"+
		"\5\u02d6\u016c\2\u0575\u0576\7\u0347\2\2\u0576\u057b\5\u02d6\u016c\2\u0577"+
		"\u0578\7\u0347\2\2\u0578\u057a\5\u02d6\u016c\2\u0579\u0577\3\2\2\2\u057a"+
		"\u057d\3\2\2\2\u057b\u0579\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057e\3\2"+
		"\2\2\u057d\u057b\3\2\2\2\u057e\u0581\7\u0346\2\2\u057f\u0580\7\u017b\2"+
		"\2\u0580\u0582\t\6\2\2\u0581\u057f\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584"+
		"\3\2\2\2\u0583\u0585\7\u0348\2\2\u0584\u0583\3\2\2\2\u0584\u0585\3\2\2"+
		"\2\u0585\u0591\3\2\2\2\u0586\u0587\7\u010a\2\2\u0587\u0588\7\u032b\2\2"+
		"\u0588\u058d\t\7\2\2\u0589\u058a\7\u0347\2\2\u058a\u058c\t\5\2\2\u058b"+
		"\u0589\3\2\2\2\u058c\u058f\3\2\2\2\u058d\u058b\3\2\2\2\u058d\u058e\3\2"+
		"\2\2\u058e\u0591\3\2\2\2\u058f\u058d\3\2\2\2\u0590\u0570\3\2\2\2\u0590"+
		"\u0586\3\2\2\2\u0591/\3\2\2\2\u0592\u0593\7\u0348\2\2\u0593\61\3\2\2\2"+
		"\u0594\u05a5\5\u0262\u0132\2\u0595\u05a5\5\u0264\u0133\2\u0596\u05a5\5"+
		"\u01aa\u00d6\2\u0597\u05a5\5\u01a8\u00d5\2\u0598\u05a5\5\u019e\u00d0\2"+
		"\u0599\u05a5\5\u01a2\u00d2\2\u059a\u05a5\5\u0278\u013d\2\u059b\u05a5\5"+
		"\u0270\u0139\2\u059c\u05a5\5\u01ac\u00d7\2\u059d\u05a5\5\u0280\u0141\2"+
		"\u059e\u05a5\5\u029c\u014f\2\u059f\u05a5\5\u029e\u0150\2\u05a0\u05a5\5"+
		"\u02a2\u0152\2\u05a1\u05a5\5\u02a4\u0153\2\u05a2\u05a5\5\u02a6\u0154\2"+
		"\u05a3\u05a5\5\u02a8\u0155\2\u05a4\u0594\3\2\2\2\u05a4\u0595\3\2\2\2\u05a4"+
		"\u0596\3\2\2\2\u05a4\u0597\3\2\2\2\u05a4\u0598\3\2\2\2\u05a4\u0599\3\2"+
		"\2\2\u05a4\u059a\3\2\2\2\u05a4\u059b\3\2\2\2\u05a4\u059c\3\2\2\2\u05a4"+
		"\u059d\3\2\2\2\u05a4\u059e\3\2\2\2\u05a4\u059f\3\2\2\2\u05a4\u05a0\3\2"+
		"\2\2\u05a4\u05a1\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a4\u05a3\3\2\2\2\u05a5"+
		"\63\3\2\2\2\u05a6\u05a7\7\f\2\2\u05a7\u05a8\7\21\2\2\u05a8\u05a9\7\u0123"+
		"\2\2\u05a9\u05aa\5\u03f4\u01fb\2\u05aa\u05b1\7\u017b\2\2\u05ab\u05ad\7"+
		"\u0347\2\2\u05ac\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2"+
		"\u05ae\u05af\7\u025f\2\2\u05af\u05b0\7\u0333\2\2\u05b0\u05b2\5\u03f4\u01fb"+
		"\2\u05b1\u05ac\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b9\3\2\2\2\u05b3\u05b5"+
		"\7\u0347\2\2\u05b4\u05b3\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6\3\2\2"+
		"\2\u05b6\u05b7\7\u00f6\2\2\u05b7\u05b8\7\u0333\2\2\u05b8\u05ba\7\u032f"+
		"\2\2\u05b9\u05b4\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05c1\3\2\2\2\u05bb"+
		"\u05bd\7\u0347\2\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be"+
		"\3\2\2\2\u05be\u05bf\7]\2\2\u05bf\u05c0\7\u0333\2\2\u05c0\u05c2\5\u03f4"+
		"\u01fb\2\u05c1\u05bc\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\65\3\2\2\2\u05c3"+
		"\u05c4\7K\2\2\u05c4\u05c5\7\21\2\2\u05c5\u05c6\7\u0123\2\2\u05c6\u05c7"+
		"\5\u03f4\u01fb\2\u05c7\u05ce\7\u017b\2\2\u05c8\u05ca\7\u0347\2\2\u05c9"+
		"\u05c8\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\7\u00f6"+
		"\2\2\u05cc\u05cd\7\u0333\2\2\u05cd\u05cf\7\u032f\2\2\u05ce\u05c9\3\2\2"+
		"\2\u05ce\u05cf\3\2\2\2\u05cf\u05d6\3\2\2\2\u05d0\u05d2\7\u0347\2\2\u05d1"+
		"\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\7]"+
		"\2\2\u05d4\u05d5\7\u0333\2\2\u05d5\u05d7\5\u03f4\u01fb\2\u05d6\u05d1\3"+
		"\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\67\3\2\2\2\u05d8\u05d9\7i\2\2\u05d9\u05dc"+
		"\7\u018b\2\2\u05da\u05db\7\u009b\2\2\u05db\u05dd\7y\2\2\u05dc\u05da\3"+
		"\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05e1\3\2\2\2\u05de\u05df\5\u03f4\u01fb"+
		"\2\u05df\u05e0\7\u0340\2\2\u05e0\u05e2\3\2\2\2\u05e1\u05de\3\2\2\2\u05e1"+
		"\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4\5\u03f4\u01fb\2\u05e49"+
		"\3\2\2\2\u05e5\u05e6\7i\2\2\u05e6\u05e7\7\21\2\2\u05e7\u05e8\7\u0123\2"+
		"\2\u05e8\u05e9\5\u03f4\u01fb\2\u05e9;\3\2\2\2\u05ea\u05eb\5> \2\u05eb"+
		"\u05ec\5\u03f4\u01fb\2\u05ec\u05ed\5@!\2\u05ed=\3\2\2\2\u05ee\u05ef\7"+
		"\f\2\2\u05ef\u05f0\7\u0197\2\2\u05f0?\3\2\2\2\u05f1\u05f3\5B\"\2\u05f2"+
		"\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f5\3\2\2\2\u05f4\u05f6\5X"+
		"-\2\u05f5\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f8\3\2\2\2\u05f7"+
		"\u05f9\5F$\2\u05f8\u05f7\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u05fb\3\2\2"+
		"\2\u05fa\u05fc\5L\'\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fcA\3"+
		"\2\2\2\u05fd\u0600\5D#\2\u05fe\u0601\5\\/\2\u05ff\u0601\5T+\2\u0600\u05fe"+
		"\3\2\2\2\u0600\u05ff\3\2\2\2\u0601C\3\2\2\2\u0602\u0603\7\u008d\2\2\u0603"+
		"E\3\2\2\2\u0604\u0605\5J&\2\u0605\u0606\5H%\2\u0606G\3\2\2\2\u0607\u060a"+
		"\7\b\2\2\u0608\u060a\5n8\2\u0609\u0607\3\2\2\2\u0609\u0608\3\2\2\2\u060a"+
		"I\3\2\2\2\u060b\u060c\7i\2\2\u060cK\3\2\2\2\u060d\u060e\5N(\2\u060e\u060f"+
		"\5P)\2\u060fM\3\2\2\2\u0610\u0611\7\6\2\2\u0611\u0612\7\u0083\2\2\u0612"+
		"\u0613\7\u008d\2\2\u0613O\3\2\2\2\u0614\u0618\5R*\2\u0615\u0616\5V,\2"+
		"\u0616\u0617\5\u03f4\u01fb\2\u0617\u0619\3\2\2\2\u0618\u0615\3\2\2\2\u0618"+
		"\u0619\3\2\2\2\u0619Q\3\2\2\2\u061a\u061b\7\u032f\2\2\u061bS\3\2\2\2\u061c"+
		"\u061d\5V,\2\u061d\u061e\5\u03f4\u01fb\2\u061eU\3\2\2\2\u061f\u0620\7"+
		"\22\2\2\u0620W\3\2\2\2\u0621\u0622\5Z.\2\u0622\u0623\5^\60\2\u0623Y\3"+
		"\2\2\2\u0624\u0625\7\u017b\2\2\u0625[\3\2\2\2\u0626\u062a\5`\61\2\u0627"+
		"\u062a\5j\66\2\u0628\u062a\7\u032f\2\2\u0629\u0626\3\2\2\2\u0629\u0627"+
		"\3\2\2\2\u0629\u0628\3\2\2\2\u062a]\3\2\2\2\u062b\u062c\b\60\1\2\u062c"+
		"\u062d\7\u00f8\2\2\u062d\u062e\7\u0333\2\2\u062e\u0635\t\b\2\2\u062f\u0630"+
		"\7\u0175\2\2\u0630\u0631\7\u0333\2\2\u0631\u0635\t\t\2\2\u0632\u0633\7"+
		"\u0165\2\2\u0633\u0635\7\u01ca\2\2\u0634\u062b\3\2\2\2\u0634\u062f\3\2"+
		"\2\2\u0634\u0632\3\2\2\2\u0635\u063a\3\2\2\2\u0636\u0637\f\3\2\2\u0637"+
		"\u0639\7\u0347\2\2\u0638\u0636\3\2\2\2\u0639\u063c\3\2\2\2\u063a\u0638"+
		"\3\2\2\2\u063a\u063b\3\2\2\2\u063b_\3\2\2\2\u063c\u063a\3\2\2\2\u063d"+
		"\u063e\5d\63\2\u063e\u063f\5b\62\2\u063f\u0640\5f\64\2\u0640a\3\2\2\2"+
		"\u0641\u0642\5\u03f4\u01fb\2\u0642c\3\2\2\2\u0643\u0644\7g\2\2\u0644e"+
		"\3\2\2\2\u0645\u0646\5h\65\2\u0646\u0647\5f\64\2\u0647\u064a\3\2\2\2\u0648"+
		"\u064a\5\u03f4\u01fb\2\u0649\u0645\3\2\2\2\u0649\u0648\3\2\2\2\u064ag"+
		"\3\2\2\2\u064b\u064c\7\33\2\2\u064ci\3\2\2\2\u064d\u064e\5l\67\2\u064e"+
		"\u064f\5f\64\2\u064fk\3\2\2\2\u0650\u0651\7\u01e5\2\2\u0651m\3\2\2\2\u0652"+
		"\u0653\5p9\2\u0653\u0654\5j\66\2\u0654\u0655\7\u0324\2\2\u0655\u0656\7"+
		"\u0347\2\2\u0656\u0659\3\2\2\2\u0657\u0659\5j\66\2\u0658\u0652\3\2\2\2"+
		"\u0658\u0657\3\2\2\2\u0659o\3\2\2\2\u065a\u065b\7\u0324\2\2\u065bq\3\2"+
		"\2\2\u065c\u065d\7K\2\2\u065d\u065e\7\u0197\2\2\u065e\u0661\5\u03f4\u01fb"+
		"\2\u065f\u0660\7\26\2\2\u0660\u0662\5\u03f4\u01fb\2\u0661\u065f\3\2\2"+
		"\2\u0661\u0662\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u0668\7\u008d\2\2\u0664"+
		"\u0666\7\u0347\2\2\u0665\u0664\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0667"+
		"\3\2\2\2\u0667\u0669\t\n\2\2\u0668\u0665\3\2\2\2\u0669\u066a\3\2\2\2\u066a"+
		"\u0668\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u0670\3\2\2\2\u066c\u066d\7\u017b"+
		"\2\2\u066d\u066e\7\u00f8\2\2\u066e\u066f\7\u0333\2\2\u066f\u0671\t\b\2"+
		"\2\u0670\u066c\3\2\2\2\u0670\u0671\3\2\2\2\u0671s\3\2\2\2\u0672\u0673"+
		"\7i\2\2\u0673\u0676\7\u0197\2\2\u0674\u0675\7\u009b\2\2\u0675\u0677\7"+
		"y\2\2\u0676\u0674\3\2\2\2\u0676\u0677\3\2\2\2\u0677\u067c\3\2\2\2\u0678"+
		"\u067a\7\u0347\2\2\u0679\u0678\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067b"+
		"\3\2\2\2\u067b\u067d\5\u03f4\u01fb\2\u067c\u0679\3\2\2\2\u067d\u067e\3"+
		"\2\2\2\u067e\u067c\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0683\3\2\2\2\u0680"+
		"\u0681\7\u017b\2\2\u0681\u0682\7\u0265\2\2\u0682\u0684\7\u01db\2\2\u0683"+
		"\u0680\3\2\2\2\u0683\u0684\3\2\2\2\u0684u\3\2\2\2\u0685\u0686\5x=\2\u0686"+
		"\u068b\5\u03f4\u01fb\2\u0687\u068c\5z>\2\u0688\u0689\7\u02ab\2\2\u0689"+
		"\u068a\7\u028e\2\2\u068a\u068c\7\u00ae\2\2\u068b\u0687\3\2\2\2\u068b\u0688"+
		"\3\2\2\2\u068cw\3\2\2\2\u068d\u068e\7\f\2\2\u068e\u068f\7\24\2\2\u068f"+
		"\u0690\7\u00ae\2\2\u0690y\3\2\2\2\u0691\u0692\5|?\2\u0692\u0695\5~@\2"+
		"\u0693\u0694\7\u0347\2\2\u0694\u0696\5~@\2\u0695\u0693\3\2\2\2\u0695\u0696"+
		"\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\7\u0346\2\2\u0698{\3\2\2\2\u0699"+
		"\u069a\7\u017b\2\2\u069a\u069b\7\u028e\2\2\u069b\u069c\7\u00ae\2\2\u069c"+
		"\u069d\7\u0345\2\2\u069d}\3\2\2\2\u069e\u069f\7\u01d3\2\2\u069f\u06a0"+
		"\7(\2\2\u06a0\u06a1\7\u00f6\2\2\u06a1\u06a2\7\u0333\2\2\u06a2\u06a9\7"+
		"\u032f\2\2\u06a3\u06a4\7\u01ee\2\2\u06a4\u06a5\7(\2\2\u06a5\u06a6\7\u00f6"+
		"\2\2\u06a6\u06a7\7\u0333\2\2\u06a7\u06a9\7\u032f\2\2\u06a8\u069e\3\2\2"+
		"\2\u06a8\u06a3\3\2\2\2\u06a9\177\3\2\2\2\u06aa\u06ab\7K\2\2\u06ab\u06ac"+
		"\7\24\2\2\u06ac\u06ad\7\u00ae\2\2\u06ad\u06b0\5\u03f4\u01fb\2\u06ae\u06af"+
		"\7\26\2\2\u06af\u06b1\5\u03f4\u01fb\2\u06b0\u06ae\3\2\2\2\u06b0\u06b1"+
		"\3\2\2\2\u06b1\u06bf\3\2\2\2\u06b2\u06bd\7\u008d\2\2\u06b3\u06b4\7\u0083"+
		"\2\2\u06b4\u06b5\7\u0333\2\2\u06b5\u06be\7\u032f\2\2\u06b6\u06b7\7w\2"+
		"\2\u06b7\u06b8\7\u0333\2\2\u06b8\u06be\7\u032f\2\2\u06b9\u06ba\7\u0197"+
		"\2\2\u06ba\u06be\5\u03f4\u01fb\2\u06bb\u06bc\7\u0293\2\2\u06bc\u06be\5"+
		"\u03f4\u01fb\2\u06bd\u06b3\3\2\2\2\u06bd\u06b6\3\2\2\2\u06bd\u06b9\3\2"+
		"\2\2\u06bd\u06bb\3\2\2\2\u06be\u06c0\3\2\2\2\u06bf\u06b2\3\2\2\2\u06bf"+
		"\u06c0\3\2\2\2\u06c0\u06cd\3\2\2\2\u06c1\u06cb\7\u017b\2\2\u06c2\u06c3"+
		"\7\u018c\2\2\u06c3\u06c4\7\u0333\2\2\u06c4\u06cc\t\13\2\2\u06c5\u06c6"+
		"\7\u0294\2\2\u06c6\u06c7\7\u0333\2\2\u06c7\u06cc\7\u032f\2\2\u06c8\u06c9"+
		"\7\u01c5\2\2\u06c9\u06ca\7\u0333\2\2\u06ca\u06cc\t\f\2\2\u06cb\u06c2\3"+
		"\2\2\2\u06cb\u06c5\3\2\2\2\u06cb\u06c8\3\2\2\2\u06cc\u06ce\3\2\2\2\u06cd"+
		"\u06c1\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d4\3\2\2\2\u06cf\u06d0\7\u01ee"+
		"\2\2\u06d0\u06d1\7(\2\2\u06d1\u06d2\7\u00f6\2\2\u06d2\u06d3\7\u0333\2"+
		"\2\u06d3\u06d5\7\u032f\2\2\u06d4\u06cf\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5"+
		"\u0081\3\2\2\2\u06d6\u06d7\7i\2\2\u06d7\u06d8\7\24\2\2\u06d8\u06d9\7\u00ae"+
		"\2\2\u06d9\u06dd\5\u03f4\u01fb\2\u06da\u06db\7\u02ab\2\2\u06db\u06dc\7"+
		"\u0293\2\2\u06dc\u06de\7\u00ae\2\2\u06dd\u06da\3\2\2\2\u06dd\u06de\3\2"+
		"\2\2\u06de\u0083\3\2\2\2\u06df\u06e3\5\u008cG\2\u06e0\u06e1\5\u0094K\2"+
		"\u06e1\u06e2\5\u008aF\2\u06e2\u06e4\3\2\2\2\u06e3\u06e0\3\2\2\2\u06e3"+
		"\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e6\5\u03b4\u01db\2\u06e6\u06e7"+
		"\5\u0088E\2\u06e7\u06e8\5\u0086D\2\u06e8\u0085\3\2\2\2\u06e9\u06ed\5\u03f4"+
		"\u01fb\2\u06ea\u06eb\7\u0130\2\2\u06eb\u06ed\7\u027f\2\2\u06ec\u06e9\3"+
		"\2\2\2\u06ec\u06ea\3\2\2\2\u06ed\u0087\3\2\2\2\u06ee\u06ef\7\u015c\2\2"+
		"\u06ef\u0089\3\2\2\2\u06f0\u06f1\7\u0349\2\2\u06f1\u06f2\7\u0349\2\2\u06f2"+
		"\u008b\3\2\2\2\u06f3\u06f4\7\f\2\2\u06f4\u06f5\7\26\2\2\u06f5\u06f6\7"+
		"\u00e7\2\2\u06f6\u008d\3\2\2\2\u06f7\u06fb\5\u008cG\2\u06f8\u06f9\5\u0096"+
		"L\2\u06f9\u06fa\5\u008aF\2\u06fa\u06fc\3\2\2\2\u06fb\u06f8\3\2\2\2\u06fb"+
		"\u06fc\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fd\u06fe\5\u03b4\u01db\2\u06fe\u06ff"+
		"\5\u0088E\2\u06ff\u0700\5\u0086D\2\u0700\u008f\3\2\2\2\u0701\u0705\5\u008c"+
		"G\2\u0702\u0703\5\u0098M\2\u0703\u0704\5\u008aF\2\u0704\u0706\3\2\2\2"+
		"\u0705\u0702\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0708"+
		"\5\u03b6\u01dc\2\u0708\u0709\5\u0088E\2\u0709\u070a\5\u0086D\2\u070a\u0091"+
		"\3\2\2\2\u070b\u070f\5\u008cG\2\u070c\u070d\5\u009aN\2\u070d\u070e\5\u008a"+
		"F\2\u070e\u0710\3\2\2\2\u070f\u070c\3\2\2\2\u070f\u0710\3\2\2\2\u0710"+
		"\u0711\3\2\2\2\u0711\u0712\5\u03b8\u01dd\2\u0712\u0713\5\u0088E\2\u0713"+
		"\u0714\5\u0086D\2\u0714\u0093\3\2\2\2\u0715\u0738\7\u0273\2\2\u0716\u0738"+
		"\7\u0197\2\2\u0717\u0718\7\24\2\2\u0718\u0738\7\u00ae\2\2\u0719\u071a"+
		"\7\u01a1\2\2\u071a\u0738\7\u0094\2\2\u071b\u0738\7-\2\2\u071c\u0738\7"+
		"F\2\2\u071d\u0738\7\u0303\2\2\u071e\u0738\7V\2\2\u071f\u0738\7o\2\2\u0720"+
		"\u0721\7\u020b\2\2\u0721\u0738\7\u01b0\2\2\u0722\u0723\7\u020b\2\2\u0723"+
		"\u0738\7\u02e6\2\2\u0724\u0725\7\u0252\2\2\u0725\u0738\7\u0303\2\2\u0726"+
		"\u0727\7\u02a9\2\2\u0727\u0728\7\u0138\2\2\u0728\u0738\7\u01a8\2\2\u0729"+
		"\u0738\7\u0123\2\2\u072a\u0738\7\u02ba\2\2\u072b\u0738\7\u0130\2\2\u072c"+
		"\u072d\7\u02c4\2\2\u072d\u072e\7\u0292\2\2\u072e\u0738\7\u0235\2\2\u072f"+
		"\u0730\7\u0137\2\2\u0730\u0738\7\u0123\2\2\u0731\u0738\7\u0138\2\2\u0732"+
		"\u0733\7\u02ed\2\2\u0733\u0738\7\u00ae\2\2\u0734\u0735\7\u0317\2\2\u0735"+
		"\u0736\7\u0130\2\2\u0736\u0738\7\u01b7\2\2\u0737\u0715\3\2\2\2\u0737\u0716"+
		"\3\2\2\2\u0737\u0717\3\2\2\2\u0737\u0719\3\2\2\2\u0737\u071b\3\2\2\2\u0737"+
		"\u071c\3\2\2\2\u0737\u071d\3\2\2\2\u0737\u071e\3\2\2\2\u0737\u071f\3\2"+
		"\2\2\u0737\u0720\3\2\2\2\u0737\u0722\3\2\2\2\u0737\u0724\3\2\2\2\u0737"+
		"\u0726\3\2\2\2\u0737\u0729\3\2\2\2\u0737\u072a\3\2\2\2\u0737\u072b\3\2"+
		"\2\2\u0737\u072c\3\2\2\2\u0737\u072f\3\2\2\2\u0737\u0731\3\2\2\2\u0737"+
		"\u0732\3\2\2\2\u0737\u0734\3\2\2\2\u0738\u0095\3\2\2\2\u0739\u074f\7\u0273"+
		"\2\2\u073a\u074f\7\u0197\2\2\u073b\u073c\7\24\2\2\u073c\u074f\7\u00ae"+
		"\2\2\u073d\u074f\7-\2\2\u073e\u074f\7\u0303\2\2\u073f\u074f\7V\2\2\u0740"+
		"\u0741\7\u020b\2\2\u0741\u074f\7\u01b0\2\2\u0742\u0743\7\u020b\2\2\u0743"+
		"\u074f\7\u02e6\2\2\u0744\u074f\7\u0123\2\2\u0745\u074f\7\u0130\2\2\u0746"+
		"\u0747\7\u02c4\2\2\u0747\u0748\7\u0292\2\2\u0748\u074f\7\u0235\2\2\u0749"+
		"\u074a\7\u02ed\2\2\u074a\u074f\7\u00ae\2\2\u074b\u074c\7\u0317\2\2\u074c"+
		"\u074d\7\u0130\2\2\u074d\u074f\7\u01b7\2\2\u074e\u0739\3\2\2\2\u074e\u073a"+
		"\3\2\2\2\u074e\u073b\3\2\2\2\u074e\u073d\3\2\2\2\u074e\u073e\3\2\2\2\u074e"+
		"\u073f\3\2\2\2\u074e\u0740\3\2\2\2\u074e\u0742\3\2\2\2\u074e\u0744\3\2"+
		"\2\2\u074e\u0745\3\2\2\2\u074e\u0746\3\2\2\2\u074e\u0749\3\2\2\2\u074e"+
		"\u074b\3\2\2\2\u074f\u0097\3\2\2\2\u0750\u0751\t\r\2\2\u0751\u0099\3\2"+
		"\2\2\u0752\u0753\t\16\2\2\u0753\u009b\3\2\2\2\u0754\u0755\7i\2\2\u0755"+
		"\u0756\7\u01a1\2\2\u0756\u0757\7\u0094\2\2\u0757\u0758\5\u03f4\u01fb\2"+
		"\u0758\u009d\3\2\2\2\u0759\u075a\5\u00a0Q\2\u075a\u075b\5\u00a2R\2\u075b"+
		"\u009f\3\2\2\2\u075c\u075d\7\f\2\2\u075d\u075e\7\u01a1\2\2\u075e\u075f"+
		"\7\u0094\2\2\u075f\u0760\5\u03f4\u01fb\2\u0760\u00a1\3\2\2\2\u0761\u0762"+
		"\7\u013d\2\2\u0762\u0772\7\u0345\2\2\u0763\u0764\7\30\2\2\u0764\u0765"+
		"\7\u0333\2\2\u0765\u0773\t\17\2\2\u0766\u0767\7\u01fa\2\2\u0767\u0768"+
		"\7\u0333\2\2\u0768\u0773\7\u032b\2\2\u0769\u076a\7\u0216\2\2\u076a\u076b"+
		"\7\u0333\2\2\u076b\u0773\7\u032b\2\2\u076c\u076d\7\u01d2\2\2\u076d\u076e"+
		"\7\u0333\2\2\u076e\u0773\t\t\2\2\u076f\u0770\7\u02b2\2\2\u0770\u0771\7"+
		"\u0333\2\2\u0771\u0773\7\u032b\2\2\u0772\u0763\3\2\2\2\u0772\u0766\3\2"+
		"\2\2\u0772\u0769\3\2\2\2\u0772\u076c\3\2\2\2\u0772\u076f\3\2\2\2\u0773"+
		"\u0774\3\2\2\2\u0774\u08c0\7\u0346\2\2\u0775\u0776\7\6\2\2\u0776\u0777"+
		"\7V\2\2\u0777\u08c0\5\u03f4\u01fb\2\u0778\u0779\7\u02ab\2\2\u0779\u077a"+
		"\7V\2\2\u077a\u08c0\5\u03f4\u01fb\2\u077b\u077c\7\6\2\2\u077c\u077d\7"+
		"\u02ae\2\2\u077d\u077e\7\u00e7\2\2\u077e\u077f\7\u032f\2\2\u077f\u0780"+
		"\7\u017b\2\2\u0780\u0784\7\u0345\2\2\u0781\u0782\7\u01ef\2\2\u0782\u0783"+
		"\7\u0333\2\2\u0783\u0785\7\u032f\2\2\u0784\u0781\3\2\2\2\u0784\u0785\3"+
		"\2\2\2\u0785\u078c\3\2\2\2\u0786\u0788\7\u0347\2\2\u0787\u0786\3\2\2\2"+
		"\u0787\u0788\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u078a\7\32\2\2\u078a\u078b"+
		"\7\u0333\2\2\u078b\u078d\t\20\2\2\u078c\u0787\3\2\2\2\u078c\u078d\3\2"+
		"\2\2\u078d\u0794\3\2\2\2\u078e\u0790\7\u0347\2\2\u078f\u078e\3\2\2\2\u078f"+
		"\u0790\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0792\7\u01f8\2\2\u0792\u0793"+
		"\7\u0333\2\2\u0793\u0795\t\21\2\2\u0794\u078f\3\2\2\2\u0794\u0795\3\2"+
		"\2\2\u0795\u079c\3\2\2\2\u0796\u0798\7\u0347\2\2\u0797\u0796\3\2\2\2\u0797"+
		"\u0798\3\2\2\2\u0798\u0799\3\2\2\2\u0799\u079a\7\u02cc\2\2\u079a\u079b"+
		"\7\u0333\2\2\u079b\u079d\t\21\2\2\u079c\u0797\3\2\2\2\u079c\u079d\3\2"+
		"\2\2\u079d\u07a4\3\2\2\2\u079e\u07a0\7\u0347\2\2\u079f\u079e\3\2\2\2\u079f"+
		"\u07a0\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\7\u01a3\2\2\u07a2\u07a3"+
		"\7\u0333\2\2\u07a3\u07a5\7\u032b\2\2\u07a4\u079f\3\2\2\2\u07a4\u07a5\3"+
		"\2\2\2\u07a5\u07af\3\2\2\2\u07a6\u07a8\7\u0347\2\2\u07a7\u07a6\3\2\2\2"+
		"\u07a7\u07a8\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07aa\7\u028a\2\2\u07aa"+
		"\u07ab\7\u0345\2\2\u07ab\u07ac\7\t\2\2\u07ac\u07ad\7\u0333\2\2\u07ad\u07ae"+
		"\t\22\2\2\u07ae\u07b0\7\u0346\2\2\u07af\u07a7\3\2\2\2\u07af\u07b0\3\2"+
		"\2\2\u07b0\u07ba\3\2\2\2\u07b1\u07b3\7\u0347\2\2\u07b2\u07b1\3\2\2\2\u07b2"+
		"\u07b3\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b5\7\u02c7\2\2\u07b5\u07b6"+
		"\7\u0345\2\2\u07b6\u07b7\7\t\2\2\u07b7\u07b8\7\u0333\2\2\u07b8\u07b9\7"+
		"\u029f\2\2\u07b9\u07bb\7\u0346\2\2\u07ba\u07b2\3\2\2\2\u07ba\u07bb\3\2"+
		"\2\2\u07bb\u07bc\3\2\2\2\u07bc\u08c0\7\u0346\2\2\u07bd\u07be\7\u02c7\2"+
		"\2\u07be\u07c7\7\u0345\2\2\u07bf\u07c0\7\t\2\2\u07c0\u07c1\7\u0333\2\2"+
		"\u07c1\u07c8\t\23\2\2\u07c2\u07c3\7\u02a0\2\2\u07c3\u07c4\7\u0333\2\2"+
		"\u07c4\u07c5\7\u0345\2\2\u07c5\u07c6\7\u032f\2\2\u07c6\u07c8\7\u0346\2"+
		"\2\u07c7\u07bf\3\2\2\2\u07c7\u07c2\3\2\2\2\u07c8\u08c0\3\2\2\2\u07c9\u07ca"+
		"\7\u028a\2\2\u07ca\u07e1\7\u0345\2\2\u07cb\u07cc\7\t\2\2\u07cc\u07cd\7"+
		"\u0333\2\2\u07cd\u07e2\t\23\2\2\u07ce\u07cf\7\u02a0\2\2\u07cf\u07d0\7"+
		"\u0333\2\2\u07d0\u07db\7\u0345\2\2\u07d1\u07d3\7\u0347\2\2\u07d2\u07d1"+
		"\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6\7\u032f\2"+
		"\2\u07d5\u07d2\3\2\2\2\u07d6\u07d9\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8"+
		"\3\2\2\2\u07d8\u07dc\3\2\2\2\u07d9\u07d7\3\2\2\2\u07da\u07dc\7\u00d7\2"+
		"\2\u07db\u07d7\3\2\2\2\u07db\u07da\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07e2"+
		"\7\u0346\2\2\u07de\u07df\7\u02d3\2\2\u07df\u07e0\7\u0333\2\2\u07e0\u07e2"+
		"\7\u032b\2\2\u07e1\u07cb\3\2\2\2\u07e1\u07ce\3\2\2\2\u07e1\u07de\3\2\2"+
		"\2\u07e2\u08c0\3\2\2\2\u07e3\u07e4\7\u025c\2\2\u07e4\u07e5\7\u02ae\2\2"+
		"\u07e5\u07e6\7\u00e7\2\2\u07e6\u0820\7\u032f\2\2\u07e7\u07e8\7\u017b\2"+
		"\2\u07e8\u07f8\7\u0345\2\2\u07e9\u07ea\7\u01ef\2\2\u07ea\u07eb\7\u0333"+
		"\2\2\u07eb\u07f9\7\u032f\2\2\u07ec\u07ed\7\32\2\2\u07ed\u07ee\7\u0333"+
		"\2\2\u07ee\u07f9\t\20\2\2\u07ef\u07f0\7\u01f8\2\2\u07f0\u07f1\7\u0333"+
		"\2\2\u07f1\u07f9\t\21\2\2\u07f2\u07f3\7\u02cc\2\2\u07f3\u07f4\7\u0333"+
		"\2\2\u07f4\u07f9\t\21\2\2\u07f5\u07f6\7\u01a3\2\2\u07f6\u07f7\7\u0333"+
		"\2\2\u07f7\u07f9\7\u032b\2\2\u07f8\u07e9\3\2\2\2\u07f8\u07ec\3\2\2\2\u07f8"+
		"\u07ef\3\2\2\2\u07f8\u07f2\3\2\2\2\u07f8\u07f5\3\2\2\2\u07f9\u0821\3\2"+
		"\2\2\u07fa\u07fb\7\u02c7\2\2\u07fb\u0804\7\u0345\2\2\u07fc\u07fd\7\t\2"+
		"\2\u07fd\u07fe\7\u0333\2\2\u07fe\u0805\t\23\2\2\u07ff\u0800\7\u02a0\2"+
		"\2\u0800\u0801\7\u0333\2\2\u0801\u0802\7\u0345\2\2\u0802\u0803\7\u032f"+
		"\2\2\u0803\u0805\7\u0346\2\2\u0804\u07fc\3\2\2\2\u0804\u07ff\3\2\2\2\u0805"+
		"\u0821\3\2\2\2\u0806\u0807\7\u028a\2\2\u0807\u081e\7\u0345\2\2\u0808\u0809"+
		"\7\t\2\2\u0809\u080a\7\u0333\2\2\u080a\u081f\t\23\2\2\u080b\u080c\7\u02a0"+
		"\2\2\u080c\u080d\7\u0333\2\2\u080d\u0818\7\u0345\2\2\u080e\u0810\7\u0347"+
		"\2\2\u080f\u080e\3\2\2\2\u080f\u0810\3\2\2\2\u0810\u0811\3\2\2\2\u0811"+
		"\u0813\7\u032f\2\2\u0812\u080f\3\2\2\2\u0813\u0816\3\2\2\2\u0814\u0812"+
		"\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0819\3\2\2\2\u0816\u0814\3\2\2\2\u0817"+
		"\u0819\7\u00d7\2\2\u0818\u0814\3\2\2\2\u0818\u0817\3\2\2\2\u0819\u081a"+
		"\3\2\2\2\u081a\u081f\7\u0346\2\2\u081b\u081c\7\u02d3\2\2\u081c\u081d\7"+
		"\u0333\2\2\u081d\u081f\7\u032b\2\2\u081e\u0808\3\2\2\2\u081e\u080b\3\2"+
		"\2\2\u081e\u081b\3\2\2\2\u081f\u0821\3\2\2\2\u0820\u07e7\3\2\2\2\u0820"+
		"\u07fa\3\2\2\2\u0820\u0806\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u08c0\7\u0346"+
		"\2\2\u0823\u0824\7\u02ab\2\2\u0824\u0825\7\u02ae\2\2\u0825\u0826\7\u00e7"+
		"\2\2\u0826\u08c0\7\u032f\2\2\u0827\u08c0\7\u00ac\2\2\u0828\u0829\7\u00ac"+
		"\2\2\u0829\u082a\7\u01a1\2\2\u082a\u082b\7\u0094\2\2\u082b\u0842\7\u00e7"+
		"\2\2\u082c\u082e\7\u0347\2\2\u082d\u082c\3\2\2\2\u082d\u082e\3\2\2\2\u082e"+
		"\u082f\3\2\2\2\u082f\u0830\7\u032f\2\2\u0830\u0831\7\u017b\2\2\u0831\u0832"+
		"\7\u0345\2\2\u0832\u0833\7\u0237\2\2\u0833\u0834\7\u0333\2\2\u0834\u0835"+
		"\7\u032f\2\2\u0835\u0836\7\u0347\2\2\u0836\u0837\7\32\2\2\u0837\u0838"+
		"\7\u0333\2\2\u0838\u0839\t\20\2\2\u0839\u083a\7\u0347\2\2\u083a\u083b"+
		"\7\u01f8\2\2\u083b\u083c\7\u0333\2\2\u083c\u083d\7\u0240\2\2\u083d\u083e"+
		"\7\u0347\2\2\u083e\u083f\7\u02cc\2\2\u083f\u0840\7\u0333\2\2\u0840\u0841"+
		"\t\21\2\2\u0841\u0843\7\u0346\2\2\u0842\u082d\3\2\2\2\u0843\u0844\3\2"+
		"\2\2\u0844\u0842\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u08c0\3\2\2\2\u0846"+
		"\u0847\7\u025c\2\2\u0847\u0848\7\u01a1\2\2\u0848\u0849\7\u0094\2\2\u0849"+
		"\u086c\7\u00e7\2\2\u084a\u084c\7\u0347\2\2\u084b\u084a\3\2\2\2\u084b\u084c"+
		"\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084e\7\u032f\2\2\u084e\u084f\7\u017b"+
		"\2\2\u084f\u0850\7\u0345\2\2\u0850\u0851\7\u0237\2\2\u0851\u0852\7\u0333"+
		"\2\2\u0852\u0859\7\u032f\2\2\u0853\u0855\7\u0347\2\2\u0854\u0853\3\2\2"+
		"\2\u0854\u0855\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0857\7\32\2\2\u0857"+
		"\u0858\7\u0333\2\2\u0858\u085a\t\20\2\2\u0859\u0854\3\2\2\2\u0859\u085a"+
		"\3\2\2\2\u085a\u0861\3\2\2\2\u085b\u085d\7\u0347\2\2\u085c\u085b\3\2\2"+
		"\2\u085c\u085d\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u085f\7\u01f8\2\2\u085f"+
		"\u0860\7\u0333\2\2\u0860\u0862\7\u0240\2\2\u0861\u085c\3\2\2\2\u0861\u0862"+
		"\3\2\2\2\u0862\u0869\3\2\2\2\u0863\u0865\7\u0347\2\2\u0864\u0863\3\2\2"+
		"\2\u0864\u0865\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u0867\7\u02cc\2\2\u0867"+
		"\u0868\7\u0333\2\2\u0868\u086a\t\21\2\2\u0869\u0864\3\2\2\2\u0869\u086a"+
		"\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u086d\7\u0346\2\2\u086c\u084b\3\2\2"+
		"\2\u086d\u086e\3\2\2\2\u086e\u086c\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u08c0"+
		"\3\2\2\2\u0870\u0871\7\u0093\2\2\u0871\u0872\7K\2\2\u0872\u0873\7\17\2"+
		"\2\u0873\u08c0\7V\2\2\u0874\u0875\7_\2\2\u0875\u0876\7K\2\2\u0876\u0877"+
		"\7\17\2\2\u0877\u08c0\7V\2\2\u0878\u08c0\7\177\2\2\u0879\u08c0\7\u0206"+
		"\2\2\u087a\u087b\7\6\2\2\u087b\u087c\7\u0236\2\2\u087c\u087d\7\u032f\2"+
		"\2\u087d\u089f\7\u0345\2\2\u087e\u087f\7\u017b\2\2\u087f\u0880\7\u01df"+
		"\2\2\u0880\u0881\7\u00e7\2\2\u0881\u0882\7\u0345\2\2\u0882\u0883\7\u00a8"+
		"\2\2\u0883\u0884\7\u00a8\2\2\u0884\u0885\3\2\2\2\u0885\u08a0\7\u0346\2"+
		"\2\u0886\u0887\7\u017b\2\2\u0887\u0888\7\u0226\2\2\u0888\u0894\7\u0345"+
		"\2\2\u0889\u088b\7\u0347\2\2\u088a\u0889\3\2\2\2\u088a\u088b\3\2\2\2\u088b"+
		"\u088c\3\2\2\2\u088c\u0891\7\u0345\2\2\u088d\u088e\7\u00a8\2\2\u088e\u088f"+
		"\7\u0347\2\2\u088f\u0892\7\u00a8\2\2\u0890\u0892\7\u00a9\2\2\u0891\u088d"+
		"\3\2\2\2\u0891\u0890\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0895\7\u0346\2"+
		"\2\u0894\u088a\3\2\2\2\u0895\u0896\3\2\2\2\u0896\u0894\3\2\2\2\u0896\u0897"+
		"\3\2\2\2\u0897\u0898\3\2\2\2\u0898\u089d\7\u0346\2\2\u0899\u089a\7\u0347"+
		"\2\2\u089a\u089b\7\u0288\2\2\u089b\u089c\7\u0333\2\2\u089c\u089e\7\u032b"+
		"\2\2\u089d\u0899\3\2\2\2\u089d\u089e\3\2\2\2\u089e\u08a0\3\2\2\2\u089f"+
		"\u087e\3\2\2\2\u089f\u0886\3\2\2\2\u08a0\u08a1\3\2\2\2\u08a1\u08c0\7\u0346"+
		"\2\2\u08a2\u08a3\7\u025c\2\2\u08a3\u08b0\7\u0236\2\2\u08a4\u08a5\7\6\2"+
		"\2\u08a5\u08a6\7\u0226\2\2\u08a6\u08aa\7\u0345\2\2\u08a7\u08a8\7\u00a8"+
		"\2\2\u08a8\u08ab\7\u00a8\2\2\u08a9\u08ab\7\u00a9\2\2\u08aa\u08a7\3\2\2"+
		"\2\u08aa\u08a9\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08b1\7\u0346\2\2\u08ad"+
		"\u08ae\7\u0288\2\2\u08ae\u08af\7\u0333\2\2\u08af\u08b1\7\u032b\2\2\u08b0"+
		"\u08a4\3\2\2\2\u08b0\u08ad\3\2\2\2\u08b1\u08c0\3\2\2\2\u08b2\u08b3\7\u0117"+
		"\2\2\u08b3\u08b4\7\u0236\2\2\u08b4\u08c0\7\u032f\2\2\u08b5\u08b6\7\u02ab"+
		"\2\2\u08b6\u08b7\7\u0236\2\2\u08b7\u08c0\7\u032f\2\2\u08b8\u08c0\7\u0274"+
		"\2\2\u08b9\u08ba\7\u017b\2\2\u08ba\u08bb\7\u0345\2\2\u08bb\u08bc\7j\2"+
		"\2\u08bc\u08bd\7\u0333\2\2\u08bd\u08be\7\u00fa\2\2\u08be\u08c0\7\u0346"+
		"\2\2\u08bf\u0761\3\2\2\2\u08bf\u0775\3\2\2\2\u08bf\u0778\3\2\2\2\u08bf"+
		"\u077b\3\2\2\2\u08bf\u07bd\3\2\2\2\u08bf\u07c9\3\2\2\2\u08bf\u07e3\3\2"+
		"\2\2\u08bf\u0823\3\2\2\2\u08bf\u0827\3\2\2\2\u08bf\u0828\3\2\2\2\u08bf"+
		"\u0846\3\2\2\2\u08bf\u0870\3\2\2\2\u08bf\u0874\3\2\2\2\u08bf\u0878\3\2"+
		"\2\2\u08bf\u0879\3\2\2\2\u08bf\u087a\3\2\2\2\u08bf\u08a2\3\2\2\2\u08bf"+
		"\u08b2\3\2\2\2\u08bf\u08b5\3\2\2\2\u08bf\u08b8\3\2\2\2\u08bf\u08b9\3\2"+
		"\2\2\u08c0\u00a3\3\2\2\2\u08c1\u08c2\t\24\2\2\u08c2\u08c3\7\u01aa\2\2"+
		"\u08c3\u08c4\7\u028c\2\2\u08c4\u08c5\5\u03f4\u01fb\2\u08c5\u08c6\7\u0087"+
		"\2\2\u08c6\u08c7\7H\2\2\u08c7\u08c8\7\u013d\2\2\u08c8\u08d2\7\u0345\2"+
		"\2\u08c9\u08ca\7G\2\2\u08ca\u08cd\7\u0333\2\2\u08cb\u08ce\5\u03f4\u01fb"+
		"\2\u08cc\u08ce\7\17\2\2\u08cd\u08cb\3\2\2\2\u08cd\u08cc\3\2\2\2\u08ce"+
		"\u08d0\3\2\2\2\u08cf\u08d1\7\u0347\2\2\u08d0\u08cf\3\2\2\2\u08d0\u08d1"+
		"\3\2\2\2\u08d1\u08d3\3\2\2\2\u08d2\u08c9\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3"+
		"\u08e0\3\2\2\2\u08d4\u08d5\7\u00bc\2\2\u08d5\u08db\7\u0333\2\2\u08d6\u08d8"+
		"\7h\2\2\u08d7\u08d6\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9"+
		"\u08dc\5\u03f4\u01fb\2\u08da\u08dc\7\17\2\2\u08db\u08d7\3\2\2\2\u08db"+
		"\u08da\3\2\2\2\u08dc\u08de\3\2\2\2\u08dd\u08df\7\u0347\2\2\u08de\u08dd"+
		"\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e1\3\2\2\2\u08e0\u08d4\3\2\2\2\u08e0"+
		"\u08e1\3\2\2\2\u08e1\u08eb\3\2\2\2\u08e2\u08e3\7\u02aa\2\2\u08e3\u08e6"+
		"\7\u0333\2\2\u08e4\u08e7\7\u032f\2\2\u08e5\u08e7\7\17\2\2\u08e6\u08e4"+
		"\3\2\2\2\u08e6\u08e5\3\2\2\2\u08e7\u08e9\3\2\2\2\u08e8\u08ea\7\u0347\2"+
		"\2\u08e9\u08e8\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08ec\3\2\2\2\u08eb\u08e2"+
		"\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec\u08f3\3\2\2\2\u08ed\u08ee\7\u028d\2"+
		"\2\u08ee\u08f1\7\u0333\2\2\u08ef\u08f2\7\u032b\2\2\u08f0\u08f2\7[\2\2"+
		"\u08f1\u08ef\3\2\2\2\u08f1\u08f0\3\2\2\2\u08f2\u08f4\3\2\2\2\u08f3\u08ed"+
		"\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f6\7\u0346\2"+
		"\2\u08f6\u00a5\3\2\2\2\u08f7\u08f8\7i\2\2\u08f8\u08f9\7\u01aa\2\2\u08f9"+
		"\u08fa\7\u028c\2\2\u08fa\u08fb\5\u03f4\u01fb\2\u08fb\u00a7\3\2\2\2\u08fc"+
		"\u08fd\7\f\2\2\u08fd\u08fe\7-\2\2\u08fe\u0926\5\u03f4\u01fb\2\u08ff\u0900"+
		"\7\u02ab\2\2\u0900\u0927\7\u028f\2\2\u0901\u0902\7\u017b\2\2\u0902\u0903"+
		"\7\u028e\2\2\u0903\u0904\7\u00ae\2\2\u0904\u091b\7\u0345\2\2\u0905\u0906"+
		"\7\u0083\2\2\u0906\u0907\7\u0333\2\2\u0907\u0909\7\u032f\2\2\u0908\u090a"+
		"\7\u0347\2\2\u0909\u0908\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u091c\3\2\2"+
		"\2\u090b\u090c\7\u01d3\2\2\u090c\u090d\7(\2\2\u090d\u090e\7\u00f6\2\2"+
		"\u090e\u090f\7\u0333\2\2\u090f\u0911\7\u032f\2\2\u0910\u0912\7\u0347\2"+
		"\2\u0911\u0910\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u091c\3\2\2\2\u0913\u0914"+
		"\7\u01ee\2\2\u0914\u0915\7(\2\2\u0915\u0916\7\u00f6\2\2\u0916\u0917\7"+
		"\u0333\2\2\u0917\u0919\7\u032f\2\2\u0918\u091a\7\u0347\2\2\u0919\u0918"+
		"\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091c\3\2\2\2\u091b\u0905\3\2\2\2\u091b"+
		"\u090b\3\2\2\2\u091b\u0913\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091b\3\2"+
		"\2\2\u091d\u091e\3\2\2\2\u091e\u091f\3\2\2\2\u091f\u0927\7\u0346\2\2\u0920"+
		"\u0921\7\u017b\2\2\u0921\u0922\7\u0184\2\2\u0922\u0923\7\u0087\2\2\u0923"+
		"\u0924\7\u01a4\2\2\u0924\u0925\7\u0333\2\2\u0925\u0927\t\t\2\2\u0926\u08ff"+
		"\3\2\2\2\u0926\u0901\3\2\2\2\u0926\u0920\3\2\2\2\u0927\u00a9\3\2\2\2\u0928"+
		"\u0929\7\f\2\2\u0929\u092a\7:\2\2\u092a\u092b\7\u01ee\2\2\u092b\u092c"+
		"\7\u00ae\2\2\u092c\u092d\5\u03f4\u01fb\2\u092d\u092e\t\25\2\2\u092e\u092f"+
		"\7\u030d\2\2\u092f\u0930\7\u0345\2\2\u0930\u0931\7\u01b8\2\2\u0931\u0932"+
		"\7\u0333\2\2\u0932\u093b\5\u03f4\u01fb\2\u0933\u0934\7\u0347\2\2\u0934"+
		"\u0935\7\u018c\2\2\u0935\u0936\7\u0333\2\2\u0936\u0937\7\u032f\2\2\u0937"+
		"\u0938\7\u0347\2\2\u0938\u0939\7\u01ed\2\2\u0939\u093a\7\u0333\2\2\u093a"+
		"\u093c\7\u0330\2\2\u093b\u0933\3\2\2\2\u093b\u093c\3\2\2\2\u093c\u093d"+
		"\3\2\2\2\u093d\u093e\7\u0346\2\2\u093e\u00ab\3\2\2\2\u093f\u0940\7K\2"+
		"\2\u0940\u0941\7:\2\2\u0941\u0942\7\u01ee\2\2\u0942\u0943\7\u00ae\2\2"+
		"\u0943\u0944\5\u03f4\u01fb\2\u0944\u0945\7\u017b\2\2\u0945\u0959\7\u0171"+
		"\2\2\u0946\u0948\7\u0345\2\2\u0947\u0949\7\u0347\2\2\u0948\u0947\3\2\2"+
		"\2\u0948\u0949\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094b\7\u01b8\2\2\u094b"+
		"\u094c\7\u0333\2\2\u094c\u094d\5\u03f4\u01fb\2\u094d\u094e\7\u0347\2\2"+
		"\u094e\u094f\7\u018c\2\2\u094f\u0950\7\u0333\2\2\u0950\u0951\7\u032f\2"+
		"\2\u0951\u0952\7\u0347\2\2\u0952\u0953\7\u01ed\2\2\u0953\u0954\7\u0333"+
		"\2\2\u0954\u0955\7\u0330\2\2\u0955\u0957\7\u0346\2\2\u0956\u0958\7\u0347"+
		"\2\2\u0957\u0956\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u095a\3\2\2\2\u0959"+
		"\u0946\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u0959\3\2\2\2\u095b\u095c\3\2"+
		"\2\2\u095c\u00ad\3\2\2\2\u095d\u095e\7i\2\2\u095e\u095f\7-\2\2\u095f\u0960"+
		"\5\u03f4\u01fb\2\u0960\u00af\3\2\2\2\u0961\u0962\7i\2\2\u0962\u0963\7"+
		":\2\2\u0963\u0964\7\u01ee\2\2\u0964\u0965\7\u00ae\2\2\u0965\u0966\5\u03f4"+
		"\u01fb\2\u0966\u00b1\3\2\2\2\u0967\u0968\7i\2\2\u0968\u0969\7:\2\2\u0969"+
		"\u096a\7\u00bf\2\2\u096a\u096b\7\u00ae\2\2\u096b\u096c\5\u03f4\u01fb\2"+
		"\u096c\u00b3\3\2\2\2\u096d\u096e\7i\2\2\u096e\u096f\7F\2\2\u096f\u0970"+
		"\5\u03f4\u01fb\2\u0970\u00b5\3\2\2\2\u0971\u0972\7i\2\2\u0972\u0973\7"+
		"\u01c6\2\2\u0973\u0974\5\u03f4\u01fb\2\u0974\u00b7\3\2\2\2\u0975\u0976"+
		"\7i\2\2\u0976\u0977\7\u01c7\2\2\u0977\u0978\7\u0293\2\2\u0978\u0979\5"+
		"\u03f4\u01fb\2\u0979\u00b9\3\2\2\2\u097a\u097b\7i\2\2\u097b\u097e\7V\2"+
		"\2\u097c\u097d\7\u009b\2\2\u097d\u097f\7y\2\2\u097e\u097c\3\2\2\2\u097e"+
		"\u097f\3\2\2\2\u097f\u0984\3\2\2\2\u0980\u0982\7\u0347\2\2\u0981\u0980"+
		"\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0985\5\u03f4\u01fb"+
		"\2\u0984\u0981\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u0984\3\2\2\2\u0986\u0987"+
		"\3\2\2\2\u0987\u00bb\3\2\2\2\u0988\u0989\7i\2\2\u0989\u098a\7V\2\2\u098a"+
		"\u098b\7\u0198\2\2\u098b\u098c\7\u0145\2\2\u098c\u098d\5\u03f4\u01fb\2"+
		"\u098d\u00bd\3\2\2\2\u098e\u098f\7i\2\2\u098f\u0990\7V\2\2\u0990\u0991"+
		"\7\u02c1\2\2\u0991\u0992\7\u01c6\2\2\u0992\u0993\5\u03f4\u01fb\2\u0993"+
		"\u00bf\3\2\2\2\u0994\u0995\7i\2\2\u0995\u0998\7[\2\2\u0996\u0997\7\u009b"+
		"\2\2\u0997\u0999\7y\2\2\u0998\u0996\3\2\2\2\u0998\u0999\3\2\2\2\u0999"+
		"\u099b\3\2\2\2\u099a\u099c\7\u0347\2\2\u099b\u099a\3\2\2\2\u099b\u099c"+
		"\3\2\2\2\u099c\u09a0\3\2\2\2\u099d\u099e\5\u03f4\u01fb\2\u099e\u099f\7"+
		"\u0340\2\2\u099f\u09a1\3\2\2\2\u09a0\u099d\3\2\2\2\u09a0\u09a1\3\2\2\2"+
		"\u09a1\u09a2\3\2\2\2\u09a2\u09a3\5\u03f4\u01fb\2\u09a3\u00c1\3\2\2\2\u09a4"+
		"\u09a5\7i\2\2\u09a5\u09a6\7o\2\2\u09a6\u09a7\5\u03f4\u01fb\2\u09a7\u00c3"+
		"\3\2\2\2\u09a8\u09a9\7i\2\2\u09a9\u09aa\7}\2\2\u09aa\u09ab\7\u01ca\2\2"+
		"\u09ab\u09ac\7\u0144\2\2\u09ac\u09ad\5\u03f4\u01fb\2\u09ad\u00c5\3\2\2"+
		"\2\u09ae\u09af\7i\2\2\u09af\u09b0\7}\2\2\u09b0\u09b1\7\u0083\2\2\u09b1"+
		"\u09b2\7\u0208\2\2\u09b2\u09b3\5\u03f4\u01fb\2\u09b3\u00c7\3\2\2\2\u09b4"+
		"\u09b5\7i\2\2\u09b5\u09b6\7}\2\2\u09b6\u09b7\7\u00b4\2\2\u09b7\u09ba\5"+
		"\u03f4\u01fb\2\u09b8\u09b9\7\26\2\2\u09b9\u09bb\5\u03f4\u01fb\2\u09ba"+
		"\u09b8\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u00c9\3\2\2\2\u09bc\u09bd\7i"+
		"\2\2\u09bd\u09be\7}\2\2\u09be\u09bf\7\u02b4\2\2\u09bf\u09c0\7\u0287\2"+
		"\2\u09c0\u09c1\5\u03f4\u01fb\2\u09c1\u00cb\3\2\2\2\u09c2\u09c3\7i\2\2"+
		"\u09c3\u09c4\7}\2\2\u09c4\u09c8\7\u0155\2\2\u09c5\u09c6\5\u03f4\u01fb"+
		"\2\u09c6\u09c7\7\u0340\2\2\u09c7\u09c9\3\2\2\2\u09c8\u09c5\3\2\2\2\u09c8"+
		"\u09c9\3\2\2\2\u09c9\u09cd\3\2\2\2\u09ca\u09cb\5\u03f4\u01fb\2\u09cb\u09cc"+
		"\7\u0340\2\2\u09cc\u09ce\3\2\2\2\u09cd\u09ca\3\2\2\2\u09cd\u09ce\3\2\2"+
		"\2\u09ce\u09cf\3\2\2\2\u09cf\u09d0\5\u03f4\u01fb\2\u09d0\u00cd\3\2\2\2"+
		"\u09d1\u09d2\7i\2\2\u09d2\u09d3\7s\2\2\u09d3\u09d8\7\u00df\2\2\u09d4\u09d6"+
		"\7\u0347\2\2\u09d5\u09d4\3\2\2\2\u09d5\u09d6\3\2\2\2\u09d6\u09d7\3\2\2"+
		"\2\u09d7\u09d9\5\u03f4\u01fb\2\u09d8\u09d5\3\2\2\2\u09d9\u09da\3\2\2\2"+
		"\u09da\u09d8\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc\u09e1"+
		"\7\u00e7\2\2\u09dd\u09e2\7\u0137\2\2\u09de\u09e2\7V\2\2\u09df\u09e0\7"+
		"\u0296\2\2\u09e0\u09e2\5\u03f4\u01fb\2\u09e1\u09dd\3\2\2\2\u09e1\u09de"+
		"\3\2\2\2\u09e1\u09df\3\2\2\2\u09e2\u00cf\3\2\2\2\u09e3\u09e4\7i\2\2\u09e4"+
		"\u09e5\7s\2\2\u09e5\u09e6\7\u013b\2\2\u09e6\u09e7\5\u03f4\u01fb\2\u09e7"+
		"\u09e8\7\u00e7\2\2\u09e8\u09e9\7\u0137\2\2\u09e9\u00d1\3\2\2\2\u09ea\u09eb"+
		"\7i\2\2\u09eb\u09ec\7\u020b\2\2\u09ec\u09ed\7\u01b0\2\2\u09ed\u09ee\5"+
		"\u03f4\u01fb\2\u09ee\u00d3\3\2\2\2\u09ef\u09f0\7i\2\2\u09f0\u09f1\7\u020b"+
		"\2\2\u09f1\u09f2\7\u00a0\2\2\u09f2\u09f6\7\u00e7\2\2\u09f3\u09f4\5\u03f4"+
		"\u01fb\2\u09f4\u09f5\7\u0340\2\2\u09f5\u09f7\3\2\2\2\u09f6\u09f3\3\2\2"+
		"\2\u09f6\u09f7\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09f9\5\u03f4\u01fb\2"+
		"\u09f9\u00d5\3\2\2\2\u09fa\u09fb\7i\2\2\u09fb\u09fc\7\u020b\2\2\u09fc"+
		"\u09fd\7\u02e6\2\2\u09fd\u09fe\5\u03f4\u01fb\2\u09fe\u00d7\3\2\2\2\u09ff"+
		"\u0a00\7i\2\2\u0a00\u0a01\7\u023d\2\2\u0a01\u0a02\5\u03f4\u01fb\2\u0a02"+
		"\u00d9\3\2\2\2\u0a03\u0a04\7i\2\2\u0a04\u0a05\7\u00bf\2\2\u0a05\u0a06"+
		"\7\u00ae\2\2\u0a06\u00db\3\2\2\2\u0a07\u0a08\7i\2\2\u0a08\u0a09\7\u0252"+
		"\2\2\u0a09\u0a0a\7\u0303\2\2\u0a0a\u0a0b\5\u03f4\u01fb\2\u0a0b\u00dd\3"+
		"\2\2\2\u0a0c\u0a0d\7i\2\2\u0a0d\u0a0e\7\u0282\2\2\u0a0e\u0a0f\7\u008f"+
		"\2\2\u0a0f\u0a10\5\u03f4\u01fb\2\u0a10\u00df\3\2\2\2\u0a11\u0a12\7i\2"+
		"\2\u0a12\u0a13\7\u0282\2\2\u0a13\u0a14\7\u0131\2\2\u0a14\u0a15\5\u03f4"+
		"\u01fb\2\u0a15\u00e1\3\2\2\2\u0a16\u0a17\7i\2\2\u0a17\u0a1b\7\u0296\2"+
		"\2\u0a18\u0a19\5\u03f4\u01fb\2\u0a19\u0a1a\7\u0340\2\2\u0a1a\u0a1c\3\2"+
		"\2\2\u0a1b\u0a18\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a20\3\2\2\2\u0a1d"+
		"\u0a1e\5\u03f4\u01fb\2\u0a1e\u0a1f\7\u0340\2\2\u0a1f\u0a21\3\2\2\2\u0a20"+
		"\u0a1d\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a23\5\u03f4"+
		"\u01fb\2\u0a23\u00e3\3\2\2\2\u0a24\u0a25\7i\2\2\u0a25\u0a26\7\u02a9\2"+
		"\2\u0a26\u0a27\7\u0138\2\2\u0a27\u0a28\7\u01a8\2\2\u0a28\u0a29\5\u03f4"+
		"\u01fb\2\u0a29\u00e5\3\2\2\2\u0a2a\u0a2b\7i\2\2\u0a2b\u0a2c\7\u02b4\2"+
		"\2\u0a2c\u0a2d\7\u0287\2\2\u0a2d\u0a2e\5\u03f4\u01fb\2\u0a2e\u00e7\3\2"+
		"\2\2\u0a2f\u0a30\7i\2\2\u0a30\u0a33\7\u0123\2\2\u0a31\u0a32\7\u009b\2"+
		"\2\u0a32\u0a34\7y\2\2\u0a33\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35"+
		"\3\2\2\2\u0a35\u0a36\5\u03f4\u01fb\2\u0a36\u00e9\3\2\2\2\u0a37\u0a38\7"+
		"i\2\2\u0a38\u0a39\7\u02ba\2\2\u0a39\u0a3a\5\u03f4\u01fb\2\u0a3a\u00eb"+
		"\3\2\2\2\u0a3b\u0a3c\7i\2\2\u0a3c\u0a3f\7\u012c\2\2\u0a3d\u0a3e\7\u009b"+
		"\2\2\u0a3e\u0a40\7y\2\2\u0a3f\u0a3d\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40"+
		"\u0a4a\3\2\2\2\u0a41\u0a43\7\u0347\2\2\u0a42\u0a41\3\2\2\2\u0a42\u0a43"+
		"\3\2\2\2\u0a43\u0a47\3\2\2\2\u0a44\u0a45\5\u03f4\u01fb\2\u0a45\u0a46\7"+
		"\u0340\2\2\u0a46\u0a48\3\2\2\2\u0a47\u0a44\3\2\2\2\u0a47\u0a48\3\2\2\2"+
		"\u0a48\u0a49\3\2\2\2\u0a49\u0a4b\5\u03f4\u01fb\2\u0a4a\u0a42\3\2\2\2\u0a4a"+
		"\u0a4b\3\2\2\2\u0a4b\u00ed\3\2\2\2\u0a4c\u0a4d\7i\2\2\u0a4d\u0a50\7\u0130"+
		"\2\2\u0a4e\u0a4f\7\u009b\2\2\u0a4f\u0a51\7y\2\2\u0a50\u0a4e\3\2\2\2\u0a50"+
		"\u0a51\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a53\5\u03f4\u01fb\2\u0a53\u00ef"+
		"\3\2\2\2\u0a54\u0a55\7i\2\2\u0a55\u0a56\7\u02c4\2\2\u0a56\u0a57\7\u0292"+
		"\2\2\u0a57\u0a58\7\u0235\2\2\u0a58\u0a59\5\u03f4\u01fb\2\u0a59\u00f1\3"+
		"\2\2\2\u0a5a\u0a5b\7i\2\2\u0a5b\u0a5c\7\u02ca\2\2\u0a5c\u0a5f\7\u00ff"+
		"\2\2\u0a5d\u0a5e\7\u009b\2\2\u0a5e\u0a60\7y\2\2\u0a5f\u0a5d\3\2\2\2\u0a5f"+
		"\u0a60\3\2\2\2\u0a60\u0a64\3\2\2\2\u0a61\u0a62\5\u03f4\u01fb\2\u0a62\u0a63"+
		"\7\u0340\2\2\u0a63\u0a65\3\2\2\2\u0a64\u0a61\3\2\2\2\u0a64\u0a65\3\2\2"+
		"\2\u0a65\u0a66\3\2\2\2\u0a66\u0a67\5\u03f4\u01fb\2\u0a67\u00f3\3\2\2\2"+
		"\u0a68\u0a69\7i\2\2\u0a69\u0a6c\7\u02d1\2\2\u0a6a\u0a6b\7\u009b\2\2\u0a6b"+
		"\u0a6d\7y\2\2\u0a6c\u0a6a\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a7c\3\2"+
		"\2\2\u0a6e\u0a70\7\u0347\2\2\u0a6f\u0a6e\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70"+
		"\u0a74\3\2\2\2\u0a71\u0a72\5\u03f4\u01fb\2\u0a72\u0a73\7\u0340\2\2\u0a73"+
		"\u0a75\3\2\2\2\u0a74\u0a71\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a79\3\2"+
		"\2\2\u0a76\u0a77\5\u03f4\u01fb\2\u0a77\u0a78\7\u0340\2\2\u0a78\u0a7a\3"+
		"\2\2\2\u0a79\u0a76\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b"+
		"\u0a7d\5\u03f4\u01fb\2\u0a7c\u0a6f\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u00f5"+
		"\3\2\2\2\u0a7e\u0a7f\7i\2\2\u0a7f\u0a80\7\u0137\2\2\u0a80\u0a81\7\u0198"+
		"\2\2\u0a81\u0a82\5\u03f4\u01fb\2\u0a82\u00f7\3\2\2\2\u0a83\u0a84\7i\2"+
		"\2\u0a84\u0a85\7\u0137\2\2\u0a85\u0a86\7\u0198\2\2\u0a86\u0a87\7\u0145"+
		"\2\2\u0a87\u0a88\5\u03f4\u01fb\2\u0a88\u00f9\3\2\2\2\u0a89\u0a8a\7i\2"+
		"\2\u0a8a\u0a8b\7\u0137\2\2\u0a8b\u0a8c\7\u0123\2\2\u0a8c\u0a8d\5\u03f4"+
		"\u01fb\2\u0a8d\u00fb\3\2\2\2\u0a8e\u0a8f\7i\2\2\u0a8f\u0a90\7\u0138\2"+
		"\2\u0a90\u0a91\5\u03f4\u01fb\2\u0a91\u00fd\3\2\2\2\u0a92\u0a94\7i\2\2"+
		"\u0a93\u0a95\7\u01c2\2\2\u0a94\u0a93\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95"+
		"\u0a96\3\2\2\2\u0a96\u0a97\7\u02d7\2\2\u0a97\u0a9b\7\u008d\2\2\u0a98\u0a99"+
		"\5\u03f4\u01fb\2\u0a99\u0a9a\7\u0340\2\2\u0a9a\u0a9c\3\2\2\2\u0a9b\u0a98"+
		"\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0a9e\5\u03f4\u01fb"+
		"\2\u0a9e\u0aaa\7(\2\2\u0a9f\u0aa1\7\u0347\2\2\u0aa0\u0a9f\3\2\2\2\u0aa0"+
		"\u0aa1\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0aa3\7-\2\2\u0aa3\u0aab\5\u03f4"+
		"\u01fb\2\u0aa4\u0aa6\7\u0347\2\2\u0aa5\u0aa4\3\2\2\2\u0aa5\u0aa6\3\2\2"+
		"\2\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aa8\7\24\2\2\u0aa8\u0aa9\7\u00ae\2\2\u0aa9"+
		"\u0aab\5\u03f4\u01fb\2\u0aaa\u0aa0\3\2\2\2\u0aaa\u0aa5\3\2\2\2\u0aab\u0aac"+
		"\3\2\2\2\u0aac\u0aaa\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u00ff\3\2\2\2\u0aae"+
		"\u0aaf\7i\2\2\u0aaf\u0ab3\7\u014a\2\2\u0ab0\u0ab1\5\u03f4\u01fb\2\u0ab1"+
		"\u0ab2\7\u0340\2\2\u0ab2\u0ab4\3\2\2\2\u0ab3\u0ab0\3\2\2\2\u0ab3\u0ab4"+
		"\3\2\2\2\u0ab4\u0ab5\3\2\2\2\u0ab5\u0ab6\5\u03f4\u01fb\2\u0ab6\u0ab7\7"+
		"\u0340\2\2\u0ab7\u0ab8\5\u03f4\u01fb\2\u0ab8\u0101\3\2\2\2\u0ab9\u0aba"+
		"\7i\2\2\u0aba\u0abb\7\u02ed\2\2\u0abb\u0abc\7\u00ae\2\2\u0abc\u0ac0\5"+
		"\u03f4\u01fb\2\u0abd\u0abe\7\u02ab\2\2\u0abe\u0abf\7\u0293\2\2\u0abf\u0ac1"+
		"\7\u00ae\2\2\u0ac0\u0abd\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0103\3\2\2"+
		"\2\u0ac2\u0ac3\7i\2\2\u0ac3\u0ac6\7\u02ef\2\2\u0ac4\u0ac5\7\u009b\2\2"+
		"\u0ac5\u0ac7\7y\2\2\u0ac6\u0ac4\3\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u0acb"+
		"\3\2\2\2\u0ac8\u0ac9\5\u03f4\u01fb\2\u0ac9\u0aca\7\u0340\2\2\u0aca\u0acc"+
		"\3\2\2\2\u0acb\u0ac8\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd"+
		"\u0ace\5\u03f4\u01fb\2\u0ace\u0105\3\2\2\2\u0acf\u0ad0\7i\2\2\u0ad0\u0ad3"+
		"\7\u0170\2\2\u0ad1\u0ad2\7\u009b\2\2\u0ad2\u0ad4\7y\2\2\u0ad3\u0ad1\3"+
		"\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad5\3\2\2\2\u0ad5\u0ad6\5\u03f4\u01fb"+
		"\2\u0ad6\u0107\3\2\2\2\u0ad7\u0ad8\7i\2\2\u0ad8\u0ad9\7\u0316\2\2\u0ad9"+
		"\u0ada\7\u0094\2\2\u0ada\u0adb\5\u03f4\u01fb\2\u0adb\u0109\3\2\2\2\u0adc"+
		"\u0add\7i\2\2\u0add\u0ade\7\u0317\2\2\u0ade\u0adf\7\u0130\2\2\u0adf\u0ae3"+
		"\7\u01b7\2\2\u0ae0\u0ae1\5\u03f4\u01fb\2\u0ae1\u0ae2\7\u0340\2\2\u0ae2"+
		"\u0ae4\3\2\2\2\u0ae3\u0ae0\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae5\3\2"+
		"\2\2\u0ae5\u0ae6\5\u03f4\u01fb\2\u0ae6\u010b\3\2\2\2\u0ae7\u0ae8\7\u01e2"+
		"\2\2\u0ae8\u0af7\7\u0162\2\2\u0ae9\u0aeb\7\u0347\2\2\u0aea\u0ae9\3\2\2"+
		"\2\u0aea\u0aeb\3\2\2\2\u0aeb\u0aef\3\2\2\2\u0aec\u0aed\5\u03f4\u01fb\2"+
		"\u0aed\u0aee\7\u0340\2\2\u0aee\u0af0\3\2\2\2\u0aef\u0aec\3\2\2\2\u0aef"+
		"\u0af0\3\2\2\2\u0af0\u0af1\3\2\2\2\u0af1\u0af3\5\u03f4\u01fb\2\u0af2\u0aea"+
		"\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0af2\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5"+
		"\u0af8\3\2\2\2\u0af6\u0af8\7\b\2\2\u0af7\u0af2\3\2\2\2\u0af7\u0af6\3\2"+
		"\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0b03\7\u00e7\2\2\u0afa\u0afb\5\u03f4\u01fb"+
		"\2\u0afb\u0afc\7\u0340\2\2\u0afc\u0afe\3\2\2\2\u0afd\u0afa\3\2\2\2\u0afd"+
		"\u0afe\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b04\5\u03f4\u01fb\2\u0b00\u0b04"+
		"\7V\2\2\u0b01\u0b02\7\b\2\2\u0b02\u0b04\7\u0137\2\2\u0b03\u0afd\3\2\2"+
		"\2\u0b03\u0b00\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b04\u010d\3\2\2\2\u0b05\u0b06"+
		"\7\u01eb\2\2\u0b06\u0b15\7\u0162\2\2\u0b07\u0b09\7\u0347\2\2\u0b08\u0b07"+
		"\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09\u0b0d\3\2\2\2\u0b0a\u0b0b\5\u03f4\u01fb"+
		"\2\u0b0b\u0b0c\7\u0340\2\2\u0b0c\u0b0e\3\2\2\2\u0b0d\u0b0a\3\2\2\2\u0b0d"+
		"\u0b0e\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b11\5\u03f4\u01fb\2\u0b10\u0b08"+
		"\3\2\2\2\u0b11\u0b12\3\2\2\2\u0b12\u0b10\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13"+
		"\u0b16\3\2\2\2\u0b14\u0b16\7\b\2\2\u0b15\u0b10\3\2\2\2\u0b15\u0b14\3\2"+
		"\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b21\7\u00e7\2\2\u0b18\u0b19\5\u03f4\u01fb"+
		"\2\u0b19\u0b1a\7\u0340\2\2\u0b1a\u0b1c\3\2\2\2\u0b1b\u0b18\3\2\2\2\u0b1b"+
		"\u0b1c\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b22\5\u03f4\u01fb\2\u0b1e\u0b22"+
		"\7V\2\2\u0b1f\u0b20\7\b\2\2\u0b20\u0b22\7\u0137\2\2\u0b21\u0b1b\3\2\2"+
		"\2\u0b21\u0b1e\3\2\2\2\u0b21\u0b1f\3\2\2\2\u0b22\u010f\3\2\2\2\u0b23\u0b24"+
		"\7\u023b\2\2\u0b24\u0b25\7\u0155\2\2\u0b25\u0b26\5\u03bc\u01df\2\u0b26"+
		"\u0b27\7\u009d\2\2\u0b27\u0b28\t\26\2\2\u0b28\u0b2c\7\u025b\2\2\u0b29"+
		"\u0b2a\7\u0312\2\2\u0b2a\u0b2d\7\u032b\2\2\u0b2b\u0b2d\7\u026e\2\2\u0b2c"+
		"\u0b29\3\2\2\2\u0b2c\u0b2b\3\2\2\2\u0b2c\u0b2d\3\2\2\2\u0b2d\u0b2f\3\2"+
		"\2\2\u0b2e\u0b30\7\u0348\2\2\u0b2f\u0b2e\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30"+
		"\u0111\3\2\2\2\u0b31\u0b32\7\u0163\2\2\u0b32\u0b33\7\u0155\2\2\u0b33\u0b47"+
		"\5\u03bc\u01df\2\u0b34\u0b35\7\u017b\2\2\u0b35\u0b36\7\u0345\2\2\u0b36"+
		"\u0b37\7\u0283\2\2\u0b37\u0b41\7\u0345\2\2\u0b38\u0b3a\7\u0347\2\2\u0b39"+
		"\u0b38\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b3f\3\2\2\2\u0b3b\u0b40\7\u032b"+
		"\2\2\u0b3c\u0b3d\7\u032b\2\2\u0b3d\u0b3e\7\u015c\2\2\u0b3e\u0b40\7\u032b"+
		"\2\2\u0b3f\u0b3b\3\2\2\2\u0b3f\u0b3c\3\2\2\2\u0b40\u0b42\3\2\2\2\u0b41"+
		"\u0b39\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u0b41\3\2\2\2\u0b43\u0b44\3\2"+
		"\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b46\7\u0346\2\2\u0b46\u0b48\7\u0346\2"+
		"\2\u0b47\u0b34\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u0113\3\2\2\2\u0b49\u0b4a"+
		"\7K\2\2\u0b4a\u0b4b\7:\2\2\u0b4b\u0b4c\7\u00bf\2\2\u0b4c\u0b4d\7\u00ae"+
		"\2\2\u0b4d\u0b4e\5\u03f4\u01fb\2\u0b4e\u0b4f\7\u017b\2\2\u0b4f\u0b50\7"+
		"\u0345\2\2\u0b50\u0b51\7\u00b0\2\2\u0b51\u0b52\7\u0333\2\2\u0b52\u0b53"+
		"\7\u032f\2\2\u0b53\u0b54\7\u0347\2\2\u0b54\u0b55\7\u00af\2\2\u0b55\u0b56"+
		"\7\u0333\2\2\u0b56\u0b57\7\u032f\2\2\u0b57\u0b58\7\u0346\2\2\u0b58\u0115"+
		"\3\2\2\2\u0b59\u0b5a\7\f\2\2\u0b5a\u0b5b\7\u01c6\2\2\u0b5b\u0b5c\5\u03f4"+
		"\u01fb\2\u0b5c\u0b5d\7\u017b\2\2\u0b5d\u0b5e\7\u0098\2\2\u0b5e\u0b5f\7"+
		"\u0333\2\2\u0b5f\u0b64\7\u032f\2\2\u0b60\u0b61\7\u0347\2\2\u0b61\u0b62"+
		"\7\u02c9\2\2\u0b62\u0b63\7\u0333\2\2\u0b63\u0b65\7\u032f\2\2\u0b64\u0b60"+
		"\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0117\3\2\2\2\u0b66\u0b67\7K\2\2\u0b67"+
		"\u0b68\7\u01c6\2\2\u0b68\u0b69\5\u03f4\u01fb\2\u0b69\u0b6a\7\u017b\2\2"+
		"\u0b6a\u0b6b\7\u0098\2\2\u0b6b\u0b6c\7\u0333\2\2\u0b6c\u0b71\7\u032f\2"+
		"\2\u0b6d\u0b6e\7\u0347\2\2\u0b6e\u0b6f\7\u02c9\2\2\u0b6f\u0b70\7\u0333"+
		"\2\2\u0b70\u0b72\7\u032f\2\2\u0b71\u0b6d\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72"+
		"\u0b77\3\2\2\2\u0b73\u0b74\7\u0087\2\2\u0b74\u0b75\7\u01c7\2\2\u0b75\u0b76"+
		"\7\u0293\2\2\u0b76\u0b78\5\u03f4\u01fb\2\u0b77\u0b73\3\2\2\2\u0b77\u0b78"+
		"\3\2\2\2\u0b78\u0119\3\2\2\2\u0b79\u0b7a\7\f\2\2\u0b7a\u0b7b\7\u01c7\2"+
		"\2\u0b7b\u0b7c\7\u0293\2\2\u0b7c\u0b81\5\u03f4\u01fb\2\u0b7d\u0b7e\7\u008d"+
		"\2\2\u0b7e\u0b7f\7\u0083\2\2\u0b7f\u0b80\7\u0333\2\2\u0b80\u0b82\7\u032f"+
		"\2\2\u0b81\u0b7d\3\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b84\3\2\2\2\u0b83"+
		"\u0b85\t\27\2\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u011b\3"+
		"\2\2\2\u0b86\u0b87\7K\2\2\u0b87\u0b88\7\u01c7\2\2\u0b88\u0b89\7\u0293"+
		"\2\2\u0b89\u0b8a\5\u03f4\u01fb\2\u0b8a\u0b8b\7\u008d\2\2\u0b8b\u0b8c\7"+
		"\u0083\2\2\u0b8c\u0b8d\7\u0333\2\2\u0b8d\u0b8e\7\u032f\2\2\u0b8e\u011d"+
		"\3\2\2\2\u0b8f\u0b90\7K\2\2\u0b90\u0b91\7s\2\2\u0b91\u0b92\7\u00df\2\2"+
		"\u0b92\u0b93\5\u03f4\u01fb\2\u0b93\u0b98\7\u00e7\2\2\u0b94\u0b99\7\u0137"+
		"\2\2\u0b95\u0b99\7V\2\2\u0b96\u0b97\7\u0296\2\2\u0b97\u0b99\5\u03f4\u01fb"+
		"\2\u0b98\u0b94\3\2\2\2\u0b98\u0b95\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b99\u0b9c"+
		"\3\2\2\2\u0b9a\u0b9b\7\u017b\2\2\u0b9b\u0b9d\7\u0081\2\2\u0b9c\u0b9a\3"+
		"\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0ba3\7\u0087\2\2"+
		"\u0b9f\u0ba1\7\u0347\2\2\u0ba0\u0b9f\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1"+
		"\u0ba2\3\2\2\2\u0ba2\u0ba4\5\u03f4\u01fb\2\u0ba3\u0ba0\3\2\2\2\u0ba4\u0ba5"+
		"\3\2\2\2\u0ba5\u0ba3\3\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7"+
		"\u0ba8\7\u015c\2\2\u0ba8\u0ba9\7\u0138\2\2\u0ba9\u0baa\7\u032f\2\2\u0baa"+
		"\u0bab\7\u0347\2\2\u0bab\u0bac\7\u032f\2\2\u0bac\u011f\3\2\2\2\u0bad\u0bae"+
		"\t\24\2\2\u0bae\u0baf\7s\2\2\u0baf\u0bb0\7\u013b\2\2\u0bb0\u0bb1\5\u03f4"+
		"\u01fb\2\u0bb1\u0bb2\7\u00e7\2\2\u0bb2\u0bf6\7\u0137\2\2\u0bb3\u0bb5\7"+
		"\u0347\2\2\u0bb4\u0bb3\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb6\3\2\2\2"+
		"\u0bb6\u0bb7\7\6\2\2\u0bb7\u0bbb\7s\2\2\u0bb8\u0bb9\5\u03f4\u01fb\2\u0bb9"+
		"\u0bba\7\u0340\2\2\u0bba\u0bbc\3\2\2\2\u0bbb\u0bb8\3\2\2\2\u0bbb\u0bbc"+
		"\3\2\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u0bbe\5\u03f4\u01fb\2\u0bbe\u0bbf\7"+
		"\u0340\2\2\u0bbf\u0bc0\5\u03f4\u01fb\2\u0bc0\u0bf1\3\2\2\2\u0bc1\u0bcf"+
		"\7\u0345\2\2\u0bc2\u0bcc\7\u013d\2\2\u0bc3\u0bc5\7\u0347\2\2\u0bc4\u0bc3"+
		"\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc7\5\u03f4\u01fb"+
		"\2\u0bc7\u0bc8\7\u0333\2\2\u0bc8\u0bc9\t\30\2\2\u0bc9\u0bcb\3\2\2\2\u0bca"+
		"\u0bc4\3\2\2\2\u0bcb\u0bce\3\2\2\2\u0bcc\u0bca\3\2\2\2\u0bcc\u0bcd\3\2"+
		"\2\2\u0bcd\u0bd0\3\2\2\2\u0bce\u0bcc\3\2\2\2\u0bcf\u0bc2\3\2\2\2\u0bcf"+
		"\u0bd0\3\2\2\2\u0bd0\u0be5\3\2\2\2\u0bd1\u0bd2\7\u0182\2\2\u0bd2\u0bdf"+
		"\7\u0345\2\2\u0bd3\u0bd5\7\u0347\2\2\u0bd4\u0bd3\3\2\2\2\u0bd4\u0bd5\3"+
		"\2\2\2\u0bd5\u0bd9\3\2\2\2\u0bd6\u0bd7\5\u03f4\u01fb\2\u0bd7\u0bd8\7\u0340"+
		"\2\2\u0bd8\u0bda\3\2\2\2\u0bd9\u0bd6\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda"+
		"\u0bdb\3\2\2\2\u0bdb\u0bdc\5\u03f4\u01fb\2\u0bdc\u0bdd\7\u0340\2\2\u0bdd"+
		"\u0bde\5\u03f4\u01fb\2\u0bde\u0be0\3\2\2\2\u0bdf\u0bd4\3\2\2\2\u0be0\u0be1"+
		"\3\2\2\2\u0be1\u0bdf\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3"+
		"\u0be4\7\u0346\2\2\u0be4\u0be6\3\2\2\2\u0be5\u0bd1\3\2\2\2\u0be6\u0be7"+
		"\3\2\2\2\u0be7\u0be5\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0beb\3\2\2\2\u0be9"+
		"\u0bea\7\u0178\2\2\u0bea\u0bec\5\u0122\u0092\2\u0beb\u0be9\3\2\2\2\u0beb"+
		"\u0bec\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0bee\7\u0346\2\2\u0bee\u0bf0"+
		"\3\2\2\2\u0bef\u0bc1\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bef\3\2\2\2\u0bf1"+
		"\u0bf2\3\2\2\2\u0bf2\u0bf5\3\2\2\2\u0bf3\u0bf1\3\2\2\2\u0bf4\u0bb4\3\2"+
		"\2\2\u0bf5\u0bf8\3\2\2\2\u0bf6\u0bf4\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7"+
		"\u0c09\3\2\2\2\u0bf8\u0bf6\3\2\2\2\u0bf9\u0bfb\7\u0347\2\2\u0bfa\u0bf9"+
		"\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfd\7i\2\2\u0bfd"+
		"\u0c01\7s\2\2\u0bfe\u0bff\5\u03f4\u01fb\2\u0bff\u0c00\7\u0340\2\2\u0c00"+
		"\u0c02\3\2\2\2\u0c01\u0bfe\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c03\3\2"+
		"\2\2\u0c03\u0c04\5\u03f4\u01fb\2\u0c04\u0c05\7\u0340\2\2\u0c05\u0c06\5"+
		"\u03f4\u01fb\2\u0c06\u0c08\3\2\2\2\u0c07\u0bfa\3\2\2\2\u0c08\u0c0b\3\2"+
		"\2\2\u0c09\u0c07\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c35\3\2\2\2\u0c0b"+
		"\u0c09\3\2\2\2\u0c0c\u0c0d\7\6\2\2\u0c0d\u0c11\7\u0158\2\2\u0c0e\u0c0f"+
		"\5\u03f4\u01fb\2\u0c0f\u0c10\7\u0340\2\2\u0c10\u0c12\3\2\2\2\u0c11\u0c0e"+
		"\3\2\2\2\u0c11\u0c12\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c14\5\u03f4\u01fb"+
		"\2\u0c14\u0c15\7\u0340\2\2\u0c15\u0c16\5\u03f4\u01fb\2\u0c16\u0c30\3\2"+
		"\2\2\u0c17\u0c18\7\u0345\2\2\u0c18\u0c28\7\u013d\2\2\u0c19\u0c1b\7\u0347"+
		"\2\2\u0c1a\u0c19\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c"+
		"\u0c1d\5\u03f4\u01fb\2\u0c1d\u0c26\7\u0333\2\2\u0c1e\u0c20\7\u0345\2\2"+
		"\u0c1f\u0c1e\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0c21\3\2\2\2\u0c21\u0c23"+
		"\7\u032b\2\2\u0c22\u0c24\7\u0346\2\2\u0c23\u0c22\3\2\2\2\u0c23\u0c24\3"+
		"\2\2\2\u0c24\u0c27\3\2\2\2\u0c25\u0c27\7\u032f\2\2\u0c26\u0c1f\3\2\2\2"+
		"\u0c26\u0c25\3\2\2\2\u0c27\u0c29\3\2\2\2\u0c28\u0c1a\3\2\2\2\u0c29\u0c2a"+
		"\3\2\2\2\u0c2a\u0c28\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2c\3\2\2";
	private static final String _serializedATNSegment2 =
		"\2\u0c2c\u0c2d\7\u0346\2\2\u0c2d\u0c2f\3\2\2\2\u0c2e\u0c17\3\2\2\2\u0c2f"+
		"\u0c32\3\2\2\2\u0c30\u0c2e\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c34\3\2"+
		"\2\2\u0c32\u0c30\3\2\2\2\u0c33\u0c0c\3\2\2\2\u0c34\u0c37\3\2\2\2\u0c35"+
		"\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c45\3\2\2\2\u0c37\u0c35\3\2"+
		"\2\2\u0c38\u0c39\7i\2\2\u0c39\u0c3d\7\u0158\2\2\u0c3a\u0c3b\5\u03f4\u01fb"+
		"\2\u0c3b\u0c3c\7\u0340\2\2\u0c3c\u0c3e\3\2\2\2\u0c3d\u0c3a\3\2\2\2\u0c3d"+
		"\u0c3e\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c40\5\u03f4\u01fb\2\u0c40\u0c41"+
		"\7\u0340\2\2\u0c41\u0c42\5\u03f4\u01fb\2\u0c42\u0c44\3\2\2\2\u0c43\u0c38"+
		"\3\2\2\2\u0c44\u0c47\3\2\2\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46\3\2\2\2\u0c46"+
		"\u0c89\3\2\2\2\u0c47\u0c45\3\2\2\2\u0c48\u0c49\7\u017b\2\2\u0c49\u0c51"+
		"\7\u0345\2\2\u0c4a\u0c4c\7\u0347\2\2\u0c4b\u0c4a\3\2\2\2\u0c4b\u0c4c\3"+
		"\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c4e\7\u00c0\2\2\u0c4e\u0c4f\7\u0333"+
		"\2\2\u0c4f\u0c50\7\u032b\2\2\u0c50\u0c52\t\31\2\2\u0c51\u0c4b\3\2\2\2"+
		"\u0c51\u0c52\3\2\2\2\u0c52\u0c59\3\2\2\2\u0c53\u0c55\7\u0347\2\2\u0c54"+
		"\u0c53\3\2\2\2\u0c54\u0c55\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c57\7u"+
		"\2\2\u0c57\u0c58\7\u0333\2\2\u0c58\u0c5a\t\32\2\2\u0c59\u0c54\3\2\2\2"+
		"\u0c59\u0c5a\3\2\2\2\u0c5a\u0c65\3\2\2\2\u0c5b\u0c5d\7\u0347\2\2\u0c5c"+
		"\u0c5b\3\2\2\2\u0c5c\u0c5d\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e\u0c5f\7\u00c3"+
		"\2\2\u0c5f\u0c63\7\u0333\2\2\u0c60\u0c61\7\u032b\2\2\u0c61\u0c64\7\u02c8"+
		"\2\2\u0c62\u0c64\7\u00a1\2\2\u0c63\u0c60\3\2\2\2\u0c63\u0c62\3\2\2\2\u0c64"+
		"\u0c66\3\2\2\2\u0c65\u0c5c\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c6e\3\2"+
		"\2\2\u0c67\u0c69\7\u0347\2\2\u0c68\u0c67\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69"+
		"\u0c6a\3\2\2\2\u0c6a\u0c6b\7\u00c4\2\2\u0c6b\u0c6c\7\u0333\2\2\u0c6c\u0c6d"+
		"\7\u032b\2\2\u0c6d\u0c6f\t\31\2\2\u0c6e\u0c68\3\2\2\2\u0c6e\u0c6f\3\2"+
		"\2\2\u0c6f\u0c76\3\2\2\2\u0c70\u0c72\7\u0347\2\2\u0c71\u0c70\3\2\2\2\u0c71"+
		"\u0c72\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c74\7\u00ca\2\2\u0c74\u0c75"+
		"\7\u0333\2\2\u0c75\u0c77\t\33\2\2\u0c76\u0c71\3\2\2\2\u0c76\u0c77\3\2"+
		"\2\2\u0c77\u0c7e\3\2\2\2\u0c78\u0c7a\7\u0347\2\2\u0c79\u0c78\3\2\2\2\u0c79"+
		"\u0c7a\3\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7c\7\u015e\2\2\u0c7c\u0c7d"+
		"\7\u0333\2\2\u0c7d\u0c7f\t\t\2\2\u0c7e\u0c79\3\2\2\2\u0c7e\u0c7f\3\2\2"+
		"\2\u0c7f\u0c86\3\2\2\2\u0c80\u0c82\7\u0347\2\2\u0c81\u0c80\3\2\2\2\u0c81"+
		"\u0c82\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c84\7\u014f\2\2\u0c84\u0c85"+
		"\7\u0333\2\2\u0c85\u0c87\t\t\2\2\u0c86\u0c81\3\2\2\2\u0c86\u0c87\3\2\2"+
		"\2\u0c87\u0c88\3\2\2\2\u0c88\u0c8a\7\u0346\2\2\u0c89\u0c48\3\2\2\2\u0c89"+
		"\u0c8a\3\2\2\2\u0c8a\u0c8e\3\2\2\2\u0c8b\u0c8c\7\u014b\2\2\u0c8c\u0c8d"+
		"\7\u0333\2\2\u0c8d\u0c8f\t\34\2\2\u0c8e\u0c8b\3\2\2\2\u0c8e\u0c8f\3\2"+
		"\2\2\u0c8f\u0121\3\2\2\2\u0c90\u0c92\7\u0347\2\2\u0c91\u0c90\3\2\2\2\u0c91"+
		"\u0c92\3\2\2\2\u0c92\u0c94\3\2\2\2\u0c93\u0c95\t\35\2\2\u0c94\u0c93\3"+
		"\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u0c97\3\2\2\2\u0c96\u0c98\7\u00de\2\2"+
		"\u0c97\u0c96\3\2\2\2\u0c97\u0c98\3\2\2\2\u0c98\u0c9e\3\2\2\2\u0c99\u0c9f"+
		"\5\u0124\u0093\2\u0c9a\u0c9b\7\u0345\2\2\u0c9b\u0c9c\5\u0122\u0092\2\u0c9c"+
		"\u0c9d\7\u0346\2\2\u0c9d\u0c9f\3\2\2\2\u0c9e\u0c99\3\2\2\2\u0c9e\u0c9a"+
		"\3\2\2\2\u0c9f\u0ca1\3\2\2\2\u0ca0\u0c91\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2"+
		"\u0ca0\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0123\3\2\2\2\u0ca4\u0caa\5\u0126"+
		"\u0094\2\u0ca5\u0ca6\7\u0345\2\2\u0ca6\u0ca7\5\u0122\u0092\2\u0ca7\u0ca8"+
		"\7\u0346\2\2\u0ca8\u0caa\3\2\2\2\u0ca9\u0ca4\3\2\2\2\u0ca9\u0ca5\3\2\2"+
		"\2\u0caa\u0125\3\2\2\2\u0cab\u0cc8\5\u03f4\u01fb\2\u0cac\u0cb7\5\u03f4"+
		"\u01fb\2\u0cad\u0cae\5\u03f4\u01fb\2\u0cae\u0caf\7\u0340\2\2\u0caf\u0cb1"+
		"\3\2\2\2\u0cb0\u0cad\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cb2\3\2\2\2\u0cb2"+
		"\u0cb3\5\u03f4\u01fb\2\u0cb3\u0cb4\7\u0340\2\2\u0cb4\u0cb5\5\u03f4\u01fb"+
		"\2\u0cb5\u0cb7\3\2\2\2\u0cb6\u0cac\3\2\2\2\u0cb6\u0cb0\3\2\2\2\u0cb7\u0cc3"+
		"\3\2\2\2\u0cb8\u0cc4\7\u0333\2\2\u0cb9\u0cba\7\u0335\2\2\u0cba\u0cc4\7"+
		"\u0334\2\2\u0cbb\u0cbc\7\u0336\2\2\u0cbc\u0cc4\7\u0333\2\2\u0cbd\u0cc4"+
		"\7\u0334\2\2\u0cbe\u0cbf\7\u0334\2\2\u0cbf\u0cc4\7\u0333\2\2\u0cc0\u0cc4"+
		"\7\u0335\2\2\u0cc1\u0cc2\7\u0335\2\2\u0cc2\u0cc4\7\u0333\2\2\u0cc3\u0cb8"+
		"\3\2\2\2\u0cc3\u0cb9\3\2\2\2\u0cc3\u0cbb\3\2\2\2\u0cc3\u0cbd\3\2\2\2\u0cc3"+
		"\u0cbe\3\2\2\2\u0cc3\u0cc0\3\2\2\2\u0cc3\u0cc1\3\2\2\2\u0cc4\u0cc5\3\2"+
		"\2\2\u0cc5\u0cc6\t\30\2\2\u0cc6\u0cc8\3\2\2\2\u0cc7\u0cab\3\2\2\2\u0cc7"+
		"\u0cb6\3\2\2\2\u0cc8\u0ce4\3\2\2\2\u0cc9\u0cca\5\u03f4\u01fb\2\u0cca\u0ccb"+
		"\7\u0340\2\2\u0ccb\u0ccd\3\2\2\2\u0ccc\u0cc9\3\2\2\2\u0ccc\u0ccd\3\2\2"+
		"\2\u0ccd\u0cce\3\2\2\2\u0cce\u0ccf\5\u03f4\u01fb\2\u0ccf\u0cd0\7\u0340"+
		"\2\2\u0cd0\u0cd1\5\u03f4\u01fb\2\u0cd1\u0cdf\7\u0345\2\2\u0cd2\u0ce0\5"+
		"\u03f4\u01fb\2\u0cd3\u0cd4\5\u03f4\u01fb\2\u0cd4\u0cd5\7\u0340\2\2\u0cd5"+
		"\u0cd7\3\2\2\2\u0cd6\u0cd3\3\2\2\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u0cd8\3\2"+
		"\2\2\u0cd8\u0cd9\5\u03f4\u01fb\2\u0cd9\u0cda\7\u0340\2\2\u0cda\u0cdb\5"+
		"\u03f4\u01fb\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0cdd\7\u0347\2\2\u0cdd\u0cde"+
		"\t\30\2\2\u0cde\u0ce0\3\2\2\2\u0cdf\u0cd2\3\2\2\2\u0cdf\u0cd6\3\2\2\2"+
		"\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce2\7\u0346\2\2\u0ce2\u0ce4\3\2\2\2\u0ce3"+
		"\u0cc7\3\2\2\2\u0ce3\u0ccc\3\2\2\2\u0ce4\u0127\3\2\2\2\u0ce5\u0ce6\7\f"+
		"\2\2\u0ce6\u0ce7\7}\2\2\u0ce7\u0ce8\7\u01ca\2\2\u0ce8\u0ce9\7\u0144\2"+
		"\2\u0ce9\u0cea\5\u03f4\u01fb\2\u0cea\u0cfa\7\u013d\2\2\u0ceb\u0cec\7\u023a"+
		"\2\2\u0cec\u0ced\7\u0333\2\2\u0ced\u0cef\t\36\2\2\u0cee\u0cf0\7\u0347"+
		"\2\2\u0cef\u0cee\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u0cfb\3\2\2\2\u0cf1"+
		"\u0cf2\7\u02b5\2\2\u0cf2\u0cf3\7\u0333\2\2\u0cf3\u0cf5\t\36\2\2\u0cf4"+
		"\u0cf6\7\u0347\2\2\u0cf5\u0cf4\3\2\2\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u0cfb"+
		"\3\2\2\2\u0cf7\u0cf8\7\u01c6\2\2\u0cf8\u0cf9\7\u0333\2\2\u0cf9\u0cfb\5"+
		"\u03f4\u01fb\2\u0cfa\u0ceb\3\2\2\2\u0cfa\u0cf1\3\2\2\2\u0cfa\u0cf7\3\2"+
		"\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfa\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd"+
		"\u0d15\3\2\2\2\u0cfe\u0cff\7\f\2\2\u0cff\u0d00\7}\2\2\u0d00\u0d01\7\u01ca"+
		"\2\2\u0d01\u0d02\7\u0144\2\2\u0d02\u0d03\5\u03f4\u01fb\2\u0d03\u0d04\7"+
		"\u017b\2\2\u0d04\u0d05\7\u0345\2\2\u0d05\u0d06\7\u0303\2\2\u0d06\u0d07"+
		"\7\u0333\2\2\u0d07\u0d08\7\u01a9\2\2\u0d08\u0d09\7\u0347\2\2\u0d09\u0d0a"+
		"\7\u023a\2\2\u0d0a\u0d0b\7\u0333\2\2\u0d0b\u0d10\7\u032f\2\2\u0d0c\u0d0d"+
		"\7\u0347\2\2\u0d0d\u0d0e\7\u01c6\2\2\u0d0e\u0d0f\7\u0333\2\2\u0d0f\u0d11"+
		"\5\u03f4\u01fb\2\u0d10\u0d0c\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d12\3"+
		"\2\2\2\u0d12\u0d13\7\u0346\2\2\u0d13\u0d15\3\2\2\2\u0d14\u0ce5\3\2\2\2"+
		"\u0d14\u0cfe\3\2\2\2\u0d15\u0129\3\2\2\2\u0d16\u0d17\7\f\2\2\u0d17\u0d18"+
		"\7}\2\2\u0d18\u0d19\7\u00b4\2\2\u0d19\u0d1c\5\u03f4\u01fb\2\u0d1a\u0d1b"+
		"\7\26\2\2\u0d1b\u0d1d\5\u03f4\u01fb\2\u0d1c\u0d1a\3\2\2\2\u0d1c\u0d1d"+
		"\3\2\2\2\u0d1d\u0d1e\3\2\2\2\u0d1e\u0d1f\t\37\2\2\u0d1f\u0d20\7\u0345"+
		"\2\2\u0d20\u0d21\7\u01bd\2\2\u0d21\u0d25\7\u0333\2\2\u0d22\u0d26\7\u032f"+
		"\2\2\u0d23\u0d26\7\u0330\2\2\u0d24\u0d26\7\u00d7\2\2\u0d25\u0d22\3\2\2"+
		"\2\u0d25\u0d23\3\2\2\2\u0d25\u0d24\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27\u0d28"+
		"\7\u0347\2\2\u0d28\u0d29\7\u00fe\2\2\u0d29\u0d2b\7\u0333\2\2\u0d2a\u0d2c"+
		"\t \2\2\u0d2b\u0d2a\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d"+
		"\u0d2e\7\u0346\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d39\7\u017b\2\2\u0d30\u0d32"+
		"\7\u0347\2\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u0d33\3\2\2"+
		"\2\u0d33\u0d34\7\u00b2\2\2\u0d34\u0d35\7\u0333\2\2\u0d35\u0d3a\t!\2\2"+
		"\u0d36\u0d37\7U\2\2\u0d37\u0d38\7\u0333\2\2\u0d38\u0d3a\5\u03f4\u01fb"+
		"\2\u0d39\u0d31\3\2\2\2\u0d39\u0d36\3\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d39"+
		"\3\2\2\2\u0d3b\u0d3c\3\2\2\2\u0d3c\u0d3d\3\2\2\2\u0d3d\u0d3e\7\u0346\2"+
		"\2\u0d3e\u012b\3\2\2\2\u0d3f\u0d40\7K\2\2\u0d40\u0d41\7}\2\2\u0d41\u0d42"+
		"\7\u00b4\2\2\u0d42\u0d45\5\u03f4\u01fb\2\u0d43\u0d44\7\26\2\2\u0d44\u0d46"+
		"\5\u03f4\u01fb\2\u0d45\u0d43\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46\u0d47\3"+
		"\2\2\2\u0d47\u0d49\7\u008d\2\2\u0d48\u0d4a\7\u0347\2\2\u0d49\u0d48\3\2"+
		"\2\2\u0d49\u0d4a\3\2\2\2\u0d4a\u0d4c\3\2\2\2\u0d4b\u0d4d\7\u0345\2\2\u0d4c"+
		"\u0d4b\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0d50\3\2\2\2\u0d4e\u0d4f\7\u01bd"+
		"\2\2\u0d4f\u0d51\7\u0333\2\2\u0d50\u0d4e\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51"+
		"\u0d55\3\2\2\2\u0d52\u0d56\7\u032f\2\2\u0d53\u0d56\7\u0330\2\2\u0d54\u0d56"+
		"\7\u00d7\2\2\u0d55\u0d52\3\2\2\2\u0d55\u0d53\3\2\2\2\u0d55\u0d54\3\2\2"+
		"\2\u0d56\u0d5e\3\2\2\2\u0d57\u0d58\7\u0347\2\2\u0d58\u0d59\7\u00fe\2\2"+
		"\u0d59\u0d5b\7\u0333\2\2\u0d5a\u0d5c\t \2\2\u0d5b\u0d5a\3\2\2\2\u0d5b"+
		"\u0d5c\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5f\7\u0346\2\2\u0d5e\u0d57"+
		"\3\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f\u0d6f\3\2\2\2\u0d60\u0d6a\7\u017b\2"+
		"\2\u0d61\u0d63\7\u0347\2\2\u0d62\u0d61\3\2\2\2\u0d62\u0d63\3\2\2\2\u0d63"+
		"\u0d64\3\2\2\2\u0d64\u0d65\7\u00b2\2\2\u0d65\u0d66\7\u0333\2\2\u0d66\u0d6b"+
		"\t!\2\2\u0d67\u0d68\7U\2\2\u0d68\u0d69\7\u0333\2\2\u0d69\u0d6b\5\u03f4"+
		"\u01fb\2\u0d6a\u0d62\3\2\2\2\u0d6a\u0d67\3\2\2\2\u0d6b\u0d6c\3\2\2\2\u0d6c"+
		"\u0d6a\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d70\7\u0346"+
		"\2\2\u0d6f\u0d60\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u012d\3\2\2\2\u0d71"+
		"\u0d72\7\f\2\2\u0d72\u0d73\7}\2\2\u0d73\u0d74\7\u02b4\2\2\u0d74\u0d77"+
		"\7\u0287\2\2\u0d75\u0d78\5\u03f4\u01fb\2\u0d76\u0d78\7\u01d4\2\2\u0d77"+
		"\u0d75\3\2\2\2\u0d77\u0d76\3\2\2\2\u0d78\u0d79\3\2\2\2\u0d79\u0d7a\7\u017b"+
		"\2\2\u0d7a\u0d7b\7\u0345\2\2\u0d7b\u0d7c\7\u0244\2\2\u0d7c\u0d7d\7\u0333"+
		"\2\2\u0d7d\u0da3\7\u032b\2\2\u0d7e\u0d80\7\u0347\2\2\u0d7f\u0d7e\3\2\2"+
		"\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d82\7\u0189\2\2\u0d82"+
		"\u0d83\7\u01c3\2\2\u0d83\u0d91\7\u0333\2\2\u0d84\u0d92\7\u019a\2\2\u0d85"+
		"\u0d87\7\u0347\2\2\u0d86\u0d85\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0d88"+
		"\3\2\2\2\u0d88\u0d89\7\u032b\2\2\u0d89\u0d8a\7\u015c\2\2\u0d8a\u0d8e\7"+
		"\u032b\2\2\u0d8b\u0d8c\7\u0347\2\2\u0d8c\u0d8e\7\u032b\2\2\u0d8d\u0d86"+
		"\3\2\2\2\u0d8d\u0d8b\3\2\2\2\u0d8e\u0d8f\3\2\2\2\u0d8f\u0d8d\3\2\2\2\u0d8f"+
		"\u0d90\3\2\2\2\u0d90\u0d92\3\2\2\2\u0d91\u0d84\3\2\2\2\u0d91\u0d8d\3\2"+
		"\2\2\u0d92\u0da4\3\2\2\2\u0d93\u0d94\7\u0270\2\2\u0d94\u0d9f\7\u0333\2"+
		"\2\u0d95\u0d97\7\u0347\2\2\u0d96\u0d95\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97"+
		"\u0d98\3\2\2\2\u0d98\u0d99\7\u032b\2\2\u0d99\u0d9a\7\u015c\2\2\u0d9a\u0da0"+
		"\7\u032b\2\2\u0d9b\u0d9d\7\u0347\2\2\u0d9c\u0d9b\3\2\2\2\u0d9c\u0d9d\3"+
		"\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0da0\7\u032b\2\2\u0d9f\u0d96\3\2\2\2"+
		"\u0d9f\u0d9c\3\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u0d9f\3\2\2\2\u0da1\u0da2"+
		"\3\2\2\2\u0da2\u0da4\3\2\2\2\u0da3\u0d7f\3\2\2\2\u0da3\u0d93\3\2\2\2\u0da4"+
		"\u0dab\3\2\2\2\u0da5\u0da7\7\u0347\2\2\u0da6\u0da5\3\2\2\2\u0da6\u0da7"+
		"\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0da9\7\u0248\2\2\u0da9\u0daa\7\u0333"+
		"\2\2\u0daa\u0dac\7\u032b\2\2\u0dab\u0da6\3\2\2\2\u0dab\u0dac\3\2\2\2\u0dac"+
		"\u0db3\3\2\2\2\u0dad\u0daf\7\u0347\2\2\u0dae\u0dad\3\2\2\2\u0dae\u0daf"+
		"\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db1\7\u0249\2\2\u0db1\u0db2\7\u0333"+
		"\2\2\u0db2\u0db4\7\u032b\2\2\u0db3\u0dae\3\2\2\2\u0db3\u0db4\3\2\2\2\u0db4"+
		"\u0db5\3\2\2\2\u0db5\u0db6\7\u0346\2\2\u0db6\u012f\3\2\2\2\u0db7\u0db8"+
		"\7K\2\2\u0db8\u0db9\7}\2\2\u0db9\u0dba\7\u02b4\2\2\u0dba\u0dbb\7\u0287"+
		"\2\2\u0dbb\u0dbc\5\u03f4\u01fb\2\u0dbc\u0dbd\7\u017b\2\2\u0dbd\u0dbe\7"+
		"\u0345\2\2\u0dbe\u0dbf\7\u0244\2\2\u0dbf\u0dc0\7\u0333\2\2\u0dc0\u0de6"+
		"\7\u032b\2\2\u0dc1\u0dc3\7\u0347\2\2\u0dc2\u0dc1\3\2\2\2\u0dc2\u0dc3\3"+
		"\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc5\7\u0189\2\2\u0dc5\u0dc6\7\u01c3"+
		"\2\2\u0dc6\u0dd4\7\u0333\2\2\u0dc7\u0dd5\7\u019a\2\2\u0dc8\u0dca\7\u0347"+
		"\2\2\u0dc9\u0dc8\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb"+
		"\u0dcc\7\u032b\2\2\u0dcc\u0dcd\7\u015c\2\2\u0dcd\u0dd1\7\u032b\2\2\u0dce"+
		"\u0dcf\7\u0347\2\2\u0dcf\u0dd1\7\u032b\2\2\u0dd0\u0dc9\3\2\2\2\u0dd0\u0dce"+
		"\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u0dd0\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3"+
		"\u0dd5\3\2\2\2\u0dd4\u0dc7\3\2\2\2\u0dd4\u0dd0\3\2\2\2\u0dd5\u0de7\3\2"+
		"\2\2\u0dd6\u0dd7\7\u0270\2\2\u0dd7\u0de2\7\u0333\2\2\u0dd8\u0dda\7\u0347"+
		"\2\2\u0dd9\u0dd8\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb"+
		"\u0ddc\7\u032b\2\2\u0ddc\u0ddd\7\u015c\2\2\u0ddd\u0de3\7\u032b\2\2\u0dde"+
		"\u0de0\7\u0347\2\2\u0ddf\u0dde\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de1"+
		"\3\2\2\2\u0de1\u0de3\7\u032b\2\2\u0de2\u0dd9\3\2\2\2\u0de2\u0ddf\3\2\2"+
		"\2\u0de3\u0de4\3\2\2\2\u0de4\u0de2\3\2\2\2\u0de4\u0de5\3\2\2\2\u0de5\u0de7"+
		"\3\2\2\2\u0de6\u0dc2\3\2\2\2\u0de6\u0dd6\3\2\2\2\u0de7\u0dee\3\2\2\2\u0de8"+
		"\u0dea\7\u0347\2\2\u0de9\u0de8\3\2\2\2\u0de9\u0dea\3\2\2\2\u0dea\u0deb"+
		"\3\2\2\2\u0deb\u0dec\7\u0248\2\2\u0dec\u0ded\7\u0333\2\2\u0ded\u0def\7"+
		"\u032b\2\2\u0dee\u0de9\3\2\2\2\u0dee\u0def\3\2\2\2\u0def\u0df6\3\2\2\2"+
		"\u0df0\u0df2\7\u0347\2\2\u0df1\u0df0\3\2\2\2\u0df1\u0df2\3\2\2\2\u0df2"+
		"\u0df3\3\2\2\2\u0df3\u0df4\7\u0249\2\2\u0df4\u0df5\7\u0333\2\2\u0df5\u0df7"+
		"\7\u032b\2\2\u0df6\u0df1\3\2\2\2\u0df6\u0df7\3\2\2\2\u0df7\u0df8\3\2\2"+
		"\2\u0df8\u0df9\7\u0346\2\2\u0df9\u0131\3\2\2\2\u0dfa\u0dfb\7\f\2\2\u0dfb"+
		"\u0dfc\7\u020b\2\2\u0dfc\u0dfd\7\u01b0\2\2\u0dfd\u0e08\5\u03f4\u01fb\2"+
		"\u0dfe\u0e03\7\u02a3\2\2\u0dff\u0e00\7\u017b\2\2\u0e00\u0e01\7\u0181\2"+
		"\2\u0e01\u0e02\7\u0333\2\2\u0e02\u0e04\t\t\2\2\u0e03\u0dff\3\2\2\2\u0e03"+
		"\u0e04\3\2\2\2\u0e04\u0e09\3\2\2\2\u0e05\u0e09\7\u02ac\2\2\u0e06\u0e07"+
		"\7\22\2\2\u0e07\u0e09\7[\2\2\u0e08\u0dfe\3\2\2\2\u0e08\u0e05\3\2\2\2\u0e08"+
		"\u0e06\3\2\2\2\u0e09\u0133\3\2\2\2\u0e0a\u0e0b\7K\2\2\u0e0b\u0e0c\7\u020b"+
		"\2\2\u0e0c\u0e0d\7\u01b0\2\2\u0e0d\u0e11\5\u03f4\u01fb\2\u0e0e\u0e0f\7"+
		"\u00e7\2\2\u0e0f\u0e10\7\u01fd\2\2\u0e10\u0e12\5\u03f4\u01fb\2\u0e11\u0e0e"+
		"\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e16\3\2\2\2\u0e13\u0e14\7\u009d\2"+
		"\2\u0e14\u0e15\7\u0285\2\2\u0e15\u0e17\7\u032f\2\2\u0e16\u0e13\3\2\2\2"+
		"\u0e16\u0e17\3\2\2\2\u0e17\u0e1c\3\2\2\2\u0e18\u0e19\7\u017b\2\2\u0e19"+
		"\u0e1a\7\u0181\2\2\u0e1a\u0e1b\7\u0333\2\2\u0e1b\u0e1d\t\t\2\2\u0e1c\u0e18"+
		"\3\2\2\2\u0e1c\u0e1d\3\2\2\2\u0e1d\u0e20\3\2\2\2\u0e1e\u0e1f\7\22\2\2"+
		"\u0e1f\u0e21\7[\2\2\u0e20\u0e1e\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e24"+
		"\3\2\2\2\u0e22\u0e23\7\26\2\2\u0e23\u0e25\5\u03f4\u01fb\2\u0e24\u0e22"+
		"\3\2\2\2\u0e24\u0e25\3\2\2\2\u0e25\u0135\3\2\2\2\u0e26\u0e27\7\f\2\2\u0e27"+
		"\u0e28\7\u020b\2\2\u0e28\u0e29\7\u02e6\2\2\u0e29\u0e37\5\u03f4\u01fb\2"+
		"\u0e2a\u0e2b\7\6\2\2\u0e2b\u0e2c\7\u032f\2\2\u0e2c\u0e2d\7\u00b2\2\2\u0e2d"+
		"\u0e38\t\"\2\2\u0e2e\u0e35\7i\2\2\u0e2f\u0e30\7\u032f\2\2\u0e30\u0e31"+
		"\7\u00b2\2\2\u0e31\u0e36\t\"\2\2\u0e32\u0e33\7\b\2\2\u0e33\u0e36\t\"\2"+
		"\2\u0e34\u0e36\7\b\2\2\u0e35\u0e2f\3\2\2\2\u0e35\u0e32\3\2\2\2\u0e35\u0e34"+
		"\3\2\2\2\u0e36\u0e38\3\2\2\2\u0e37\u0e2a\3\2\2\2\u0e37\u0e2e\3\2\2\2\u0e38"+
		"\u0137\3\2\2\2\u0e39\u0e3a\7K\2\2\u0e3a\u0e3b\7\u020b\2\2\u0e3b\u0e3c"+
		"\7\u02e6\2\2\u0e3c\u0e48\5\u03f4\u01fb\2\u0e3d\u0e46\7\u008d\2\2\u0e3e"+
		"\u0e3f\5\u03f4\u01fb\2\u0e3f\u0e40\7\u0340\2\2\u0e40\u0e42\3\2\2\2\u0e41"+
		"\u0e3e\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e47\5\u03f4"+
		"\u01fb\2\u0e44\u0e45\7\u02f0\2\2\u0e45\u0e47\7\u02e6\2\2\u0e46\u0e41\3"+
		"\2\2\2\u0e46\u0e44\3\2\2\2\u0e47\u0e49\3\2\2\2\u0e48\u0e3d\3\2\2\2\u0e48"+
		"\u0e49\3\2\2\2\u0e49\u0e4c\3\2\2\2\u0e4a\u0e4b\7\26\2\2\u0e4b\u0e4d\5"+
		"\u03f4\u01fb\2\u0e4c\u0e4a\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d\u0139\3\2"+
		"\2\2\u0e4e\u0e4f\7\f\2\2\u0e4f\u0e50\7\u023d\2\2\u0e50\u0e94\5\u03f4\u01fb"+
		"\2\u0e51\u0e53\t\27\2\2\u0e52\u0e51\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53"+
		"\u0e95\3\2\2\2\u0e54\u0e62\7\u017b\2\2\u0e55\u0e56\7\u00f6\2\2\u0e56\u0e5a"+
		"\7\u0333\2\2\u0e57\u0e5b\7\u032f\2\2\u0e58\u0e59\7\u0330\2\2\u0e59\u0e5b"+
		"\7\u0096\2\2\u0e5a\u0e57\3\2\2\2\u0e5a\u0e58\3\2\2\2\u0e5b\u0e5f\3\2\2"+
		"\2\u0e5c\u0e5e\t#\2\2\u0e5d\u0e5c\3\2\2\2\u0e5e\u0e61\3\2\2\2\u0e5f\u0e5d"+
		"\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60\u0e63\3\2\2\2\u0e61\u0e5f\3\2\2\2\u0e62"+
		"\u0e55\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e6d\3\2\2\2\u0e64\u0e65\7\u00e6"+
		"\2\2\u0e65\u0e66\7\u0333\2\2\u0e66\u0e6a\7\u032f\2\2\u0e67\u0e69\t#\2"+
		"\2\u0e68\u0e67\3\2\2\2\u0e69\u0e6c\3\2\2\2\u0e6a\u0e68\3\2\2\2\u0e6a\u0e6b"+
		"\3\2\2\2\u0e6b\u0e6e\3\2\2\2\u0e6c\u0e6a\3\2\2\2\u0e6d\u0e64\3\2\2\2\u0e6d"+
		"\u0e6e\3\2\2\2\u0e6e\u0e72\3\2\2\2\u0e6f\u0e70\7\\\2\2\u0e70\u0e71\7\u0333"+
		"\2\2\u0e71\u0e73\5\u03f4\u01fb\2\u0e72\u0e6f\3\2\2\2\u0e72\u0e73\3\2\2"+
		"\2\u0e73\u0e77\3\2\2\2\u0e74\u0e75\7\u01d6\2\2\u0e75\u0e76\7\u0333\2\2"+
		"\u0e76\u0e78\5\u03f4\u01fb\2\u0e77\u0e74\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78"+
		"\u0e7c\3\2\2\2\u0e79\u0e7a\7\u025f\2\2\u0e7a\u0e7b\7\u0333\2\2\u0e7b\u0e7d"+
		"\5\u03f4\u01fb\2\u0e7c\u0e79\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e81\3"+
		"\2\2\2\u0e7e\u0e7f\7\62\2\2\u0e7f\u0e80\7\u0333\2\2\u0e80\u0e82\t\t\2"+
		"\2\u0e81\u0e7e\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e86\3\2\2\2\u0e83\u0e84"+
		"\7\63\2\2\u0e84\u0e85\7\u0333\2\2\u0e85\u0e87\t\t\2\2\u0e86\u0e83\3\2"+
		"\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e8b\3\2\2\2\u0e88\u0e89\7\u01c6\2\2\u0e89"+
		"\u0e8a\7\u0333\2\2\u0e8a\u0e8c\5\u03f4\u01fb\2\u0e8b\u0e88\3\2\2\2\u0e8b"+
		"\u0e8c\3\2\2\2\u0e8c\u0e8f\3\2\2\2\u0e8d\u0e8e\7\u0265\2\2\u0e8e\u0e90"+
		"\7\u01c6\2\2\u0e8f\u0e8d\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90\u0e95\3\2\2"+
		"\2\u0e91\u0e92\t\25\2\2\u0e92\u0e93\7\u01c6\2\2\u0e93\u0e95\5\u03f4\u01fb"+
		"\2\u0e94\u0e52\3\2\2\2\u0e94\u0e54\3\2\2\2\u0e94\u0e91\3\2\2\2\u0e95\u013b"+
		"\3\2\2\2\u0e96\u0e97\7K\2\2\u0e97\u0e98\7\u023d\2\2\u0e98\u0ef3\5\u03f4"+
		"\u01fb\2\u0e99\u0ea7\7\u017b\2\2\u0e9a\u0e9b\7\u00f6\2\2\u0e9b\u0e9f\7"+
		"\u0333\2\2\u0e9c\u0ea0\7\u032f\2\2\u0e9d\u0e9e\7\u0330\2\2\u0e9e\u0ea0"+
		"\7\u0096\2\2\u0e9f\u0e9c\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0ea0\u0ea4\3\2\2"+
		"\2\u0ea1\u0ea3\t#\2\2\u0ea2\u0ea1\3\2\2\2\u0ea3\u0ea6\3\2\2\2\u0ea4\u0ea2"+
		"\3\2\2\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u0ea8\3\2\2\2\u0ea6\u0ea4\3\2\2\2\u0ea7"+
		"\u0e9a\3\2\2\2\u0ea7\u0ea8\3\2\2\2\u0ea8\u0eaf\3\2\2\2\u0ea9\u0eab\7\u0347"+
		"\2\2\u0eaa\u0ea9\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac"+
		"\u0ead\7\u0140\2\2\u0ead\u0eae\7\u0333\2\2\u0eae\u0eb0\7\u0330\2\2\u0eaf"+
		"\u0eaa\3\2\2\2\u0eaf\u0eb0\3\2\2\2\u0eb0\u0eb7\3\2\2\2\u0eb1\u0eb3\7\u0347"+
		"\2\2\u0eb2\u0eb1\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0eb4\3\2\2\2\u0eb4"+
		"\u0eb5\7\\\2\2\u0eb5\u0eb6\7\u0333\2\2\u0eb6\u0eb8\5\u03f4\u01fb\2\u0eb7"+
		"\u0eb2\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8\u0ebf\3\2\2\2\u0eb9\u0ebb\7\u0347"+
		"\2\2\u0eba\u0eb9\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0ebc\3\2\2\2\u0ebc"+
		"\u0ebd\7\u01d6\2\2\u0ebd\u0ebe\7\u0333\2\2\u0ebe\u0ec0\5\u03f4\u01fb\2"+
		"\u0ebf\u0eba\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0ec7\3\2\2\2\u0ec1\u0ec3"+
		"\7\u0347\2\2\u0ec2\u0ec1\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u0ec4\3\2\2"+
		"\2\u0ec4\u0ec5\7\63\2\2\u0ec5\u0ec6\7\u0333\2\2\u0ec6\u0ec8\t\t\2\2\u0ec7"+
		"\u0ec2\3\2\2\2\u0ec7\u0ec8\3\2\2\2\u0ec8\u0ecf\3\2\2\2\u0ec9\u0ecb\7\u0347"+
		"\2\2\u0eca\u0ec9\3\2\2\2\u0eca\u0ecb\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc"+
		"\u0ecd\7\62\2\2\u0ecd\u0ece\7\u0333\2\2\u0ece\u0ed0\t\t\2\2\u0ecf\u0eca"+
		"\3\2\2\2\u0ecf\u0ed0\3\2\2\2\u0ed0\u0ed7\3\2\2\2\u0ed1\u0ed3\7\u0347\2"+
		"\2\u0ed2\u0ed1\3\2\2\2\u0ed2\u0ed3\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u0ed5"+
		"\7\u01c6\2\2\u0ed5\u0ed6\7\u0333\2\2\u0ed6\u0ed8\5\u03f4\u01fb\2\u0ed7"+
		"\u0ed2\3\2\2\2\u0ed7\u0ed8\3\2\2\2\u0ed8\u0ef4\3\2\2\2\u0ed9\u0ef1\7\u008d"+
		"\2\2\u0eda\u0edb\7\u017a\2\2\u0edb\u0ee2\7\u017b\2\2\u0edc\u0ede\7\u0347"+
		"\2\2\u0edd\u0edc\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf"+
		"\u0ee0\7\\\2\2\u0ee0\u0ee1\7\u0333\2\2\u0ee1\u0ee3\5\u03f4\u01fb\2\u0ee2"+
		"\u0edd\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0eea\3\2\2\2\u0ee4\u0ee6\7\u0347"+
		"\2\2\u0ee5\u0ee4\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7"+
		"\u0ee8\7\u01d6\2\2\u0ee8\u0ee9\7\u0333\2\2\u0ee9\u0eeb\7\u032f\2\2\u0eea"+
		"\u0ee5\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0ef2\3\2\2\2\u0eec\u0eed\7-"+
		"\2\2\u0eed\u0ef2\5\u03f4\u01fb\2\u0eee\u0eef\7\24\2\2\u0eef\u0ef0\7\u00ae"+
		"\2\2\u0ef0\u0ef2\5\u03f4\u01fb\2\u0ef1\u0eda\3\2\2\2\u0ef1\u0eec\3\2\2"+
		"\2\u0ef1\u0eee\3\2\2\2\u0ef2\u0ef4\3\2\2\2\u0ef3\u0e99\3\2\2\2\u0ef3\u0ed9"+
		"\3\2\2\2\u0ef4\u013d\3\2\2\2\u0ef5\u0ef6\7\f\2\2\u0ef6\u0ef7\7\u023d\2"+
		"\2\u0ef7\u0f09\5\u03f4\u01fb\2\u0ef8\u0efa\t\27\2\2\u0ef9\u0ef8\3\2\2"+
		"\2\u0ef9\u0efa\3\2\2\2\u0efa\u0f0a\3\2\2\2\u0efb\u0f07\7\u017b\2\2\u0efc"+
		"\u0efd\7\u00f6\2\2\u0efd\u0efe\7\u0333\2\2\u0efe\u0f02\7\u032f\2\2\u0eff"+
		"\u0f00\7\u00e6\2\2\u0f00\u0f01\7\u0333\2\2\u0f01\u0f03\7\u032f\2\2\u0f02"+
		"\u0eff\3\2\2\2\u0f02\u0f03\3\2\2\2\u0f03\u0f08\3\2\2\2\u0f04\u0f05\7\u025f"+
		"\2\2\u0f05\u0f06\7\u0333\2\2\u0f06\u0f08\5\u03f4\u01fb\2\u0f07\u0efc\3"+
		"\2\2\2\u0f07\u0f04\3\2\2\2\u0f08\u0f0a\3\2\2\2\u0f09\u0ef9\3\2\2\2\u0f09"+
		"\u0efb\3\2\2\2\u0f0a\u013f\3\2\2\2\u0f0b\u0f0c\7K\2\2\u0f0c\u0f0d\7\u023d"+
		"\2\2\u0f0d\u0f0e\5\u03f4\u01fb\2\u0f0e\u0f0f\7\u017b\2\2\u0f0f\u0f10\7"+
		"\u00f6\2\2\u0f10\u0f11\7\u0333\2\2\u0f11\u0f15\7\u032f\2\2\u0f12\u0f13"+
		"\7\u0140\2\2\u0f13\u0f14\7\u0333\2\2\u0f14\u0f16\7\u0330\2\2\u0f15\u0f12"+
		"\3\2\2\2\u0f15\u0f16\3\2\2\2\u0f16\u0141\3\2\2\2\u0f17\u0f18\7\f\2\2\u0f18"+
		"\u0f19\7\u023d\2\2\u0f19\u0f31\5\u03f4\u01fb\2\u0f1a\u0f1c\t\27\2\2\u0f1b"+
		"\u0f1a\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f32\3\2\2\2\u0f1d\u0f2f\7\u017b"+
		"\2\2\u0f1e\u0f1f\7\u00f6\2\2\u0f1f\u0f20\7\u0333\2\2\u0f20\u0f2a\7\u032f"+
		"\2\2\u0f21\u0f22\7\u00e6\2\2\u0f22\u0f23\7\u0333\2\2\u0f23\u0f27\7\u032f"+
		"\2\2\u0f24\u0f26\t#\2\2\u0f25\u0f24\3\2\2\2\u0f26\u0f29\3\2\2\2\u0f27"+
		"\u0f25\3\2\2\2\u0f27\u0f28\3\2\2\2\u0f28\u0f2b\3\2\2\2\u0f29\u0f27\3\2"+
		"\2\2\u0f2a\u0f21\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f30\3\2\2\2\u0f2c"+
		"\u0f2d\7\u025f\2\2\u0f2d\u0f2e\7\u0333\2\2\u0f2e\u0f30\5\u03f4\u01fb\2"+
		"\u0f2f\u0f1e\3\2\2\2\u0f2f\u0f2c\3\2\2\2\u0f30\u0f32\3\2\2\2\u0f31\u0f1b"+
		"\3\2\2\2\u0f31\u0f1d\3\2\2\2\u0f32\u0143\3\2\2\2\u0f33\u0f34\7K\2\2\u0f34"+
		"\u0f35\7\u023d\2\2\u0f35\u0f46\5\u03f4\u01fb\2\u0f36\u0f37\7\u017b\2\2"+
		"\u0f37\u0f38\7\u00f6\2\2\u0f38\u0f39\7\u0333\2\2\u0f39\u0f3b\7\u032f\2"+
		"\2\u0f3a\u0f3c\7\u00d0\2\2\u0f3b\u0f3a\3\2\2\2\u0f3b\u0f3c\3\2\2\2\u0f3c"+
		"\u0f42\3\2\2\2\u0f3d\u0f3e\7\62\2\2\u0f3e\u0f40\7\u0333\2\2\u0f3f\u0f41"+
		"\t\t\2\2\u0f40\u0f3f\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41\u0f43\3\2\2\2\u0f42"+
		"\u0f3d\3\2\2\2\u0f42\u0f43\3\2\2\2\u0f43\u0f47\3\2\2\2\u0f44\u0f45\7\u008d"+
		"\2\2\u0f45\u0f47\7\u017a\2\2\u0f46\u0f36\3\2\2\2\u0f46\u0f44\3\2\2\2\u0f47"+
		"\u0145\3\2\2\2\u0f48\u0f49\7\f\2\2\u0f49\u0f4a\7\u00bf\2\2\u0f4a\u0f60"+
		"\7\u00ae\2\2\u0f4b\u0f4d\7\u0205\2\2\u0f4c\u0f4b\3\2\2\2\u0f4c\u0f4d\3"+
		"\2\2\2\u0f4d\u0f4e\3\2\2\2\u0f4e\u0f4f\7\u0111\2\2\u0f4f\u0f50\7\u017b"+
		"\2\2\u0f50\u0f51\7\u01ee\2\2\u0f51\u0f52\7(\2\2\u0f52\u0f53\7\u00f6\2"+
		"\2\u0f53\u0f54\7\u0333\2\2\u0f54\u0f61\7\u032f\2\2\u0f55\u0f56\t\25\2"+
		"\2\u0f56\u0f57\7\u01ee\2\2\u0f57\u0f5e\7(\2\2\u0f58\u0f59\7\u0138\2\2"+
		"\u0f59\u0f5a\7\u00bf\2\2\u0f5a\u0f5f\7\u00ae\2\2\u0f5b\u0f5c\7\u00f6\2"+
		"\2\u0f5c\u0f5d\7\u0333\2\2\u0f5d\u0f5f\7\u032f\2\2\u0f5e\u0f58\3\2\2\2"+
		"\u0f5e\u0f5b\3\2\2\2\u0f5f\u0f61\3\2\2\2\u0f60\u0f4c\3\2\2\2\u0f60\u0f55"+
		"\3\2\2\2\u0f61\u0147\3\2\2\2\u0f62\u0f63\7K\2\2\u0f63\u0f64\7\u00bf\2"+
		"\2\u0f64\u0f65\7\u00ae\2\2\u0f65\u0f66\7\u01ee\2\2\u0f66\u0f67\7(\2\2"+
		"\u0f67\u0f68\7\u00f6\2\2\u0f68\u0f69\7\u0333\2\2\u0f69\u0f6a\7\u032f\2"+
		"\2\u0f6a\u0149\3\2\2\2\u0f6b\u0f6c\7\f\2\2\u0f6c\u0f6d\7\u00bf\2\2\u0f6d"+
		"\u0f89\7\u00ae\2\2\u0f6e\u0f70\7\u0205\2\2\u0f6f\u0f6e\3\2\2\2\u0f6f\u0f70"+
		"\3\2\2\2\u0f70\u0f71\3\2\2\2\u0f71\u0f72\7\u0111\2\2\u0f72\u0f73\7\u017b"+
		"\2\2\u0f73\u0f74\7\u01ee\2\2\u0f74\u0f75\7(\2\2\u0f75\u0f76\7\u00f6\2"+
		"\2\u0f76\u0f77\7\u0333\2\2\u0f77\u0f8a\7\u032f\2\2\u0f78\u0f79\7\6\2\2"+
		"\u0f79\u0f7a\7\u01ee\2\2\u0f7a\u0f81\7(\2\2\u0f7b\u0f7c\7\u0138\2\2\u0f7c"+
		"\u0f7d\7\u00bf\2\2\u0f7d\u0f82\7\u00ae\2\2\u0f7e\u0f7f\7\u00f6\2\2\u0f7f"+
		"\u0f80\7\u0333\2\2\u0f80\u0f82\7\u032f\2\2\u0f81\u0f7b\3\2\2\2\u0f81\u0f7e"+
		"\3\2\2\2\u0f82\u0f8a\3\2\2\2\u0f83\u0f84\7i\2\2\u0f84\u0f85\7\u01ee\2"+
		"\2\u0f85\u0f86\7(\2\2\u0f86\u0f87\7\u00f6\2\2\u0f87\u0f88\7\u0333\2\2"+
		"\u0f88\u0f8a\7\u032f\2\2\u0f89\u0f6f\3\2\2\2\u0f89\u0f78\3\2\2\2\u0f89"+
		"\u0f83\3\2\2\2\u0f8a\u014b\3\2\2\2\u0f8b\u0f8c\7K\2\2\u0f8c\u0f8d\7\u00bf"+
		"\2\2\u0f8d\u0f93\7\u00ae\2\2\u0f8e\u0f8f\7\u01ee\2\2\u0f8f\u0f90\7(\2"+
		"\2\u0f90\u0f91\7\u00f6\2\2\u0f91\u0f92\7\u0333\2\2\u0f92\u0f94\7\u032f"+
		"\2\2\u0f93\u0f8e\3\2\2\2\u0f93\u0f94\3\2\2\2\u0f94\u014d\3\2\2\2\u0f95"+
		"\u0f96\7\f\2\2\u0f96\u0f97\7\u0252\2\2\u0f97\u0f98\7\u0303\2\2\u0f98\u0f99"+
		"\5\u03f4\u01fb\2\u0f99\u0f9a\7\u030c\2\2\u0f9a\u0fa3\7\u0333\2\2\u0f9b"+
		"\u0fa4\7\u00d7\2\2\u0f9c\u0fa4\7\u01ea\2\2\u0f9d\u0fa4\7\u0313\2\2\u0f9e"+
		"\u0f9f\7\u030b\2\2\u0f9f\u0fa0\7\u017b\2\2\u0fa0\u0fa1\7\u0130\2\2\u0fa1"+
		"\u0fa2\7\u01b7\2\2\u0fa2\u0fa4\5\u03f4\u01fb\2\u0fa3\u0f9b\3\2\2\2\u0fa3"+
		"\u0f9c\3\2\2\2\u0fa3\u0f9d\3\2\2\2\u0fa3\u0f9e\3\2\2\2\u0fa4\u014f\3\2"+
		"\2\2\u0fa5\u0fa6\7\f\2\2\u0fa6\u0fa7\7\u0282\2\2\u0fa7\u0fa8\7\u008f\2"+
		"\2\u0fa8\u0fa9\5\u03f4\u01fb\2\u0fa9\u0faa\7\u0345\2\2\u0faa\u0fab\7\u0346"+
		"\2\2\u0fab\u0fac\t$\2\2\u0fac\u0fad\7\u0299\2\2\u0fad\u0fae\7\u0345\2"+
		"\2\u0fae\u0faf\7\u032b\2\2\u0faf\u0fb0\7\u0346\2\2\u0fb0\u0151\3\2\2\2"+
		"\u0fb1\u0fb2\7\f\2\2\u0fb2\u0fb3\7\u0282\2\2\u0fb3\u0fb4\7\u0131\2\2\u0fb4"+
		"\u0fb5\5\u03f4\u01fb\2\u0fb5\u0fb6\7\u0264\2\2\u0fb6\u0fb8\7\u016f\2\2"+
		"\u0fb7\u0fb9\5\u03f4\u01fb\2\u0fb8\u0fb7\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9"+
		"\u0153\3\2\2\2\u0fba\u0fbb\7\f\2\2\u0fbb\u0fbc\7\u02a9\2\2\u0fbc\u0fbd"+
		"\7\u0138\2\2\u0fbd\u0fbe\7\u01a8\2\2\u0fbe\u0fbf\5\u03f4\u01fb\2\u0fbf"+
		"\u0fc3\7\u017b\2\2\u0fc0\u0fc1\7\u0170\2\2\u0fc1\u0fc2\7\u0333\2\2\u0fc2"+
		"\u0fc4\5\u03f4\u01fb\2\u0fc3\u0fc0\3\2\2\2\u0fc3\u0fc4\3\2\2\2\u0fc4\u0fc9"+
		"\3\2\2\2\u0fc5\u0fc6\7\u0347\2\2\u0fc6\u0fc7\7\16\2\2\u0fc7\u0fc8\7\u0333"+
		"\2\2\u0fc8\u0fca\t\t\2\2\u0fc9\u0fc5\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca"+
		"\u0155\3\2\2\2\u0fcb\u0fcc\7K\2\2\u0fcc\u0fcd\7\u02a9\2\2\u0fcd\u0fce"+
		"\7\u0138\2\2\u0fce\u0fcf\7\u01a8\2\2\u0fcf\u0fd2\5\u03f4\u01fb\2\u0fd0"+
		"\u0fd1\7\26\2\2\u0fd1\u0fd3\5\u03f4\u01fb\2\u0fd2\u0fd0\3\2\2\2\u0fd2"+
		"\u0fd3\3\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd5\7\u015c\2\2\u0fd5\u0fd6"+
		"\7\u0138\2\2\u0fd6\u0fd7\7\u032f\2\2\u0fd7\u0fdb\7\u017b\2\2\u0fd8\u0fd9"+
		"\7\u0170\2\2\u0fd9\u0fda\7\u0333\2\2\u0fda\u0fdc\5\u03f4\u01fb\2\u0fdb"+
		"\u0fd8\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc\u0fe1\3\2\2\2\u0fdd\u0fde\7\u0347"+
		"\2\2\u0fde\u0fdf\7\16\2\2\u0fdf\u0fe0\7\u0333\2\2\u0fe0\u0fe2\t\t\2\2"+
		"\u0fe1\u0fdd\3\2\2\2\u0fe1\u0fe2\3\2\2\2\u0fe2\u0157\3\2\2\2\u0fe3\u0fe4"+
		"\7K\2\2\u0fe4\u0fe5\7\u02b4\2\2\u0fe5\u0fe6\7\u0287\2\2\u0fe6\u104d\5"+
		"\u03f4\u01fb\2\u0fe7\u0fe8\7\u017b\2\2\u0fe8\u0fef\7\u0345\2\2\u0fe9\u0feb"+
		"\7\u0347\2\2\u0fea\u0fe9\3\2\2\2\u0fea\u0feb\3\2\2\2\u0feb\u0fec\3\2\2"+
		"\2\u0fec\u0fed\7\u0255\2\2\u0fed\u0fee\7\u0333\2\2\u0fee\u0ff0\7\u032b"+
		"\2\2\u0fef\u0fea\3\2\2\2\u0fef\u0ff0\3\2\2\2\u0ff0\u0ff7\3\2\2\2\u0ff1"+
		"\u0ff3\7\u0347\2\2\u0ff2\u0ff1\3\2\2\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u0ff4"+
		"\3\2\2\2\u0ff4\u0ff5\7\u0244\2\2\u0ff5\u0ff6\7\u0333\2\2\u0ff6\u0ff8\7"+
		"\u032b\2\2\u0ff7\u0ff2\3\2\2\2\u0ff7\u0ff8\3\2\2\2\u0ff8\u0fff\3\2\2\2"+
		"\u0ff9\u0ffb\7\u0347\2\2\u0ffa\u0ff9\3\2\2\2\u0ffa\u0ffb\3\2\2\2\u0ffb"+
		"\u0ffc\3\2\2\2\u0ffc\u0ffd\7\u01ae\2\2\u0ffd\u0ffe\7\u0333\2\2\u0ffe\u1000"+
		"\7\u032b\2\2\u0fff\u0ffa\3\2\2\2\u0fff\u1000\3\2\2\2\u1000\u102a\3\2\2"+
		"\2\u1001\u1003\7\u0347\2\2\u1002\u1001\3\2\2\2\u1002\u1003\3\2\2\2\u1003"+
		"\u1004\3\2\2\2\u1004\u1005\7\u0189\2\2\u1005\u1006\7\u012f\2\2\u1006\u1028"+
		"\7\u0333\2\2\u1007\u1029\7\u019a\2\2\u1008\u1012\7\u0345\2\2\u1009\u100b"+
		"\7\u0347\2\2\u100a\u1009\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u1010\3\2\2"+
		"\2\u100c\u1011\7\u032b\2\2\u100d\u100e\7\u032b\2\2\u100e\u100f\7\u015c"+
		"\2\2\u100f\u1011\7\u032b\2\2\u1010\u100c\3\2\2\2\u1010\u100d\3\2\2\2\u1011"+
		"\u1013\3\2\2\2\u1012\u100a\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1012\3\2"+
		"\2\2\u1014\u1015\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u1029\7\u0346\2\2\u1017"+
		"\u1018\7\u0270\2\2\u1018\u1019\7\u0333\2\2\u1019\u1023\7\u0345\2\2\u101a"+
		"\u101c\7\u0347\2\2\u101b\u101a\3\2\2\2\u101b\u101c\3\2\2\2\u101c\u1021"+
		"\3\2\2\2\u101d\u1022\7\u032b\2\2\u101e\u101f\7\u032b\2\2\u101f\u1020\7"+
		"\u015c\2\2\u1020\u1022\7\u032b\2\2\u1021\u101d\3\2\2\2\u1021\u101e\3\2"+
		"\2\2\u1022\u1024\3\2\2\2\u1023\u101b\3\2\2\2\u1024\u1025\3\2\2\2\u1025"+
		"\u1023\3\2\2\2\u1025\u1026\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u1029\7\u0346"+
		"\2\2\u1028\u1007\3\2\2\2\u1028\u1008\3\2\2\2\u1028\u1017\3\2\2\2\u1029"+
		"\u102b\3\2\2\2\u102a\u1002\3\2\2\2\u102a\u102b\3\2\2\2\u102b\u1032\3\2"+
		"\2\2\u102c\u102e\7\u0347\2\2\u102d\u102c\3\2\2\2\u102d\u102e\3\2\2\2\u102e"+
		"\u102f\3\2\2\2\u102f\u1030\7\u0257\2\2\u1030\u1031\7\u0333\2\2\u1031\u1033"+
		"\7\u032b\2\2\u1032\u102d\3\2\2\2\u1032\u1033\3\2\2\2\u1033\u103a\3\2\2"+
		"\2\u1034\u1036\7\u0347\2\2\u1035\u1034\3\2\2\2\u1035\u1036\3\2\2\2\u1036"+
		"\u1037\3\2\2\2\u1037\u1038\7\u0248\2\2\u1038\u1039\7\u0333\2\2\u1039\u103b"+
		"\7\u032b\2\2\u103a\u1035\3\2\2\2\u103a\u103b\3\2\2\2\u103b\u1042\3\2\2"+
		"\2\u103c\u103e\7\u0347\2\2\u103d\u103c\3\2\2\2\u103d\u103e\3\2\2\2\u103e"+
		"\u103f\3\2\2\2\u103f\u1040\7\u0256\2\2\u1040\u1041\7\u0333\2\2\u1041\u1043"+
		"\7\u032b\2\2\u1042\u103d\3\2\2\2\u1042\u1043\3\2\2\2\u1043\u104a\3\2\2"+
		"\2\u1044\u1046\7\u0347\2\2\u1045\u1044\3\2\2\2\u1045\u1046\3\2\2\2\u1046"+
		"\u1047\3\2\2\2\u1047\u1048\7\u0247\2\2\u1048\u1049\7\u0333\2\2\u1049\u104b"+
		"\7\u032b\2\2\u104a\u1045\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104c\3\2\2"+
		"\2\u104c\u104e\7\u0346\2\2\u104d\u0fe7\3\2\2\2\u104d\u104e\3\2\2\2\u104e"+
		"\u0159\3\2\2\2\u104f\u1050\7\f\2\2\u1050\u1051\7\u02b4\2\2\u1051\u1067"+
		"\7\u0092\2\2\u1052\u1068\t%\2\2\u1053\u1054\7\u017b\2\2\u1054\u1055\7"+
		"\u0345\2\2\u1055\u1056\7\64\2\2\u1056\u105c\7\u0333\2\2\u1057\u1058\5"+
		"\u03f4\u01fb\2\u1058\u1059\7\u0340\2\2\u1059\u105a\5\u03f4\u01fb\2\u105a"+
		"\u105d\3\2\2\2\u105b\u105d\7\u00e1\2\2\u105c\u1057\3\2\2\2\u105c\u105b"+
		"\3\2\2\2\u105d\u105e\3\2\2\2\u105e\u1068\7\u0346\2\2\u105f\u1060\7\u0116"+
		"\2\2\u1060\u1068\7\u014a\2\2\u1061\u1062\7\u017b\2\2\u1062\u1063\7\u0345"+
		"\2\2\u1063\u1064\7\u00c6\2\2\u1064\u1065\7\u0333\2\2\u1065\u1066\7\u032b"+
		"\2\2\u1066\u1068\7\u0346\2\2\u1067\u1052\3\2\2\2\u1067\u1053\3\2\2\2\u1067"+
		"\u105f\3\2\2\2\u1067\u1061\3\2\2\2\u1068\u015b\3\2\2\2\u1069\u106a\7\f"+
		"\2\2\u106a\u106b\7\u0123\2\2\u106b\u1073\5\u03f4\u01fb\2\u106c\u106d\t"+
		"\25\2\2\u106d\u106e\7\u00c9\2\2\u106e\u1074\5\u03f4\u01fb\2\u106f\u1070"+
		"\7\u017b\2\2\u1070\u1071\7\u025f\2\2\u1071\u1072\7\u0333\2\2\u1072\u1074"+
		"\5\u03f4\u01fb\2\u1073\u106c\3\2\2\2\u1073\u106f\3\2\2\2\u1074\u015d\3"+
		"\2\2\2\u1075\u1076\7K\2\2\u1076\u1077\7\u0123\2\2\u1077\u107a\5\u03f4"+
		"\u01fb\2\u1078\u1079\7\26\2\2\u1079\u107b\5\u03f4\u01fb\2\u107a\u1078"+
		"\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u015f\3\2\2\2\u107c\u107d\7K\2\2\u107d"+
		"\u107e\7\u02ba\2\2\u107e\u1081\5\u03f4\u01fb\2\u107f\u1080\7\26\2\2\u1080"+
		"\u1082\5\u03f4\u01fb\2\u1081\u107f\3\2\2\2\u1081\u1082\3\2\2\2\u1082\u1083"+
		"\3\2\2\2\u1083\u108a\7\u017b\2\2\u1084\u1086\7\u0347\2\2\u1085\u1084\3"+
		"\2\2\2\u1085\u1086\3\2\2\2\u1086\u1087\3\2\2\2\u1087\u1088\7\u013a\2\2"+
		"\u1088\u1089\7\u0333\2\2\u1089\u108b\7\u032f\2\2\u108a\u1085\3\2\2\2\u108a"+
		"\u108b\3\2\2\2\u108b\u1092\3\2\2\2\u108c\u108e\7\u0347\2\2\u108d\u108c"+
		"\3\2\2\2\u108d\u108e\3\2\2\2\u108e\u108f\3\2\2\2\u108f\u1090\7\u01ab\2"+
		"\2\u1090\u1091\7\u0333\2\2\u1091\u1093\7\u032f\2\2\u1092\u108d\3\2\2\2"+
		"\u1092\u1093\3\2\2\2\u1093\u109a\3\2\2\2\u1094\u1096\7\u0347\2\2\u1095"+
		"\u1094\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u1098\7\u00b5"+
		"\2\2\u1098\u1099\7\u0333\2\2\u1099\u109b\7\u032b\2\2\u109a\u1095\3\2\2"+
		"\2\u109a\u109b\3\2\2\2\u109b\u109d\3\2\2\2\u109c\u109e\7\u0347\2\2\u109d"+
		"\u109c\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u109f\3\2\2\2\u109f\u10a0\7\u0185"+
		"\2\2\u10a0\u10a1\7\u0333\2\2\u10a1\u10a6\t&\2\2\u10a2\u10a3\7\u0347\2"+
		"\2\u10a3\u10a4\7\u0259\2\2\u10a4\u10a5\7\u0333\2\2\u10a5\u10a7\t&\2\2"+
		"\u10a6\u10a2\3\2\2\2\u10a6\u10a7\3\2\2\2\u10a7\u0161\3\2\2\2\u10a8\u10a9"+
		"\7K\2\2\u10a9\u10ad\7\u012c\2\2\u10aa\u10ab\5\u03f4\u01fb\2\u10ab\u10ac"+
		"\7\u0340\2\2\u10ac\u10ae\3\2\2\2\u10ad\u10aa\3\2\2\2\u10ad\u10ae\3\2\2"+
		"\2\u10ae\u10af\3\2\2\2\u10af\u10b0\5\u03f4\u01fb\2\u10b0\u10b1\7\22\2"+
		"\2\u10b1\u10b2\5\u031c\u018f\2\u10b2\u0163\3\2\2\2\u10b3\u10b4\7\f\2\2"+
		"\u10b4\u10b5\7\u0130\2\2\u10b5\u10b6\5\u03f4\u01fb\2\u10b6\u10c0\7\u0161"+
		"\2\2\u10b7\u10bd\7\u0273\2\2\u10b8\u10bd\7\u0303\2\2\u10b9\u10ba\7\u0317"+
		"\2\2\u10ba\u10bb\7\u0130\2\2\u10bb\u10bd\7\u01b7\2\2\u10bc\u10b7\3\2\2"+
		"\2\u10bc\u10b8\3\2\2\2\u10bc\u10b9\3\2\2\2\u10bd\u10be\3\2\2\2\u10be\u10bf"+
		"\7\u0349\2\2\u10bf\u10c1\7\u0349\2\2\u10c0\u10bc\3\2\2\2\u10c0\u10c1\3"+
		"\2\2\2\u10c1\u10c2\3\2\2\2\u10c2\u10c5\5\u03f4\u01fb\2\u10c3\u10c4\7\u0340"+
		"\2\2\u10c4\u10c6\5\u03f4\u01fb\2\u10c5\u10c3\3\2\2\2\u10c5\u10c6\3\2\2"+
		"\2\u10c6\u0165\3\2\2\2\u10c7\u10c8\7K\2\2\u10c8\u10d0\7\u0130\2\2\u10c9"+
		"\u10d1\5\u03f4\u01fb\2\u10ca\u10cb\7\26\2\2\u10cb\u10d1\5\u03f4\u01fb"+
		"\2\u10cc\u10cd\5\u03f4\u01fb\2\u10cd\u10ce\7\26\2\2\u10ce\u10cf\5\u03f4"+
		"\u01fb\2\u10cf\u10d1\3\2\2\2\u10d0\u10c9\3\2\2\2\u10d0\u10ca\3\2\2\2\u10d0"+
		"\u10cc\3\2\2\2\u10d1\u10ee\3\2\2\2\u10d2\u10ed\5\u01ee\u00f8\2\u10d3\u10ed"+
		"\5\u01f2\u00fa\2\u10d4\u10d5\t\'\2\2\u10d5\u10d6\t(\2\2\u10d6\u10da\7"+
		"\u00e7\2\2\u10d7\u10d8\7\u0130\2\2\u10d8\u10d9\7\u0349\2\2\u10d9\u10db"+
		"\7\u0349\2\2\u10da\u10d7\3\2\2\2\u10da\u10db\3\2\2\2\u10db\u10dc\3\2\2"+
		"\2\u10dc\u10dd\5\u03f4\u01fb\2\u10dd\u10de\7\u015c\2\2\u10de\u10df\5\u03f4"+
		"\u01fb\2\u10df\u10ed\3\2\2\2\u10e0\u10e1\7\u011f\2\2\u10e1\u10e2\t(\2"+
		"\2\u10e2\u10e6\7\u00e7\2\2\u10e3\u10e4\7\u0130\2\2\u10e4\u10e5\7\u0349"+
		"\2\2\u10e5\u10e7\7\u0349\2\2\u10e6\u10e3\3\2\2\2\u10e6\u10e7\3\2\2\2\u10e7"+
		"\u10e8\3\2\2\2\u10e8\u10e9\5\u03f4\u01fb\2\u10e9\u10ea\7\u008d\2\2\u10ea"+
		"\u10eb\5\u03f4\u01fb\2\u10eb\u10ed\3\2\2\2\u10ec\u10d2\3\2\2\2\u10ec\u10d3"+
		"\3\2\2\2\u10ec\u10d4\3\2\2\2\u10ec\u10e0\3\2\2\2\u10ed\u10f0\3\2\2\2\u10ee"+
		"\u10ec\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u0167\3\2\2\2\u10f0\u10ee\3\2"+
		"\2\2\u10f1\u10f2\7K\2\2\u10f2\u10f3\7\u0130\2\2\u10f3\u10f6\5\u03f4\u01fb"+
		"\2\u10f4\u10f5\7\26\2\2\u10f5\u10f7\5\u03f4\u01fb\2\u10f6\u10f4\3\2\2"+
		"\2\u10f6\u10f7\3\2\2\2\u10f7\u0169\3\2\2\2\u10f8\u10f9\7\f\2\2\u10f9\u10fa"+
		"\7\u0130\2\2\u10fa\u10fb\5\u03f4\u01fb\2\u10fb\u10ff\7\u0161\2\2\u10fc"+
		"\u10fd\7\u0273\2\2\u10fd\u10fe\7\u0349\2\2\u10fe\u1100\7\u0349\2\2\u10ff"+
		"\u10fc\3\2\2\2\u10ff\u1100\3\2\2\2\u1100\u1101\3\2\2\2\u1101\u1104\5\u03f4"+
		"\u01fb\2\u1102\u1103\7\u0340\2\2\u1103\u1105\7\u032c\2\2\u1104\u1102\3"+
		"\2\2\2\u1104\u1105\3\2\2\2\u1105\u016b\3\2\2\2\u1106\u1107\7K\2\2\u1107"+
		"\u1108\7\u02c4\2\2\u1108\u1109\7\u0292\2\2\u1109\u110a\7\u0235\2\2\u110a"+
		"\u1112\5\u03f4\u01fb\2\u110b\u110f\7\u008d\2\2\u110c\u110d\5\u03f4\u01fb"+
		"\2\u110d\u110e\7\u0340\2\2\u110e\u1110\3\2\2\2\u110f\u110c\3\2\2\2\u110f"+
		"\u1110\3\2\2\2\u1110\u1111\3\2\2\2\u1111\u1113\5\u03f4\u01fb\2\u1112\u110b"+
		"\3\2\2\2\u1112\u1113\3\2\2\2\u1113\u1116\3\2\2\2\u1114\u1115\7\26\2\2"+
		"\u1115\u1117\5\u03f4\u01fb\2\u1116\u1114\3\2\2\2\u1116\u1117\3\2\2\2\u1117"+
		"\u016d\3\2\2\2\u1118\u1119\7K\2\2\u1119\u111a\7\u02ca\2\2\u111a\u111e"+
		"\7\u00ff\2\2\u111b\u111c\5\u03f4\u01fb\2\u111c\u111d\7\u0340\2\2\u111d"+
		"\u111f\3\2\2\2\u111e\u111b\3\2\2\2\u111e\u111f\3\2\2\2\u111f\u1120\3\2"+
		"\2\2\u1120\u1149\5\u03f4\u01fb\2\u1121\u1123\7\u0347\2\2\u1122\u1121\3"+
		"\2\2\2\u1122\u1123\3\2\2\2\u1123\u1124\3\2\2\2\u1124\u1126\7\6\2\2\u1125"+
		"\u1127\t)\2\2\u1126\u1125\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u1128\3\2"+
		"\2\2\u1128\u1129\7\u0101\2\2\u1129\u112a\5\u03f4\u01fb\2\u112a\u112b\7"+
		"\u0340\2\2\u112b\u112c\5\u03f4\u01fb\2\u112c\u1131\7\u0345\2\2\u112d\u112f"+
		"\7\u0347\2\2\u112e\u112d\3\2\2\2\u112e\u112f\3\2\2\2\u112f\u1130\3\2\2"+
		"\2\u1130\u1132\5\u03f4\u01fb\2\u1131\u112e\3\2\2\2\u1132\u1133\3\2\2\2"+
		"\u1133\u1131\3\2\2\2\u1133\u1134\3\2\2\2\u1134\u1135\3\2\2\2\u1135\u1136"+
		"\7\u0346\2\2\u1136\u1137\7\u00e7\2\2\u1137\u1138\5\u03f4\u01fb\2\u1138"+
		"\u1139\7\u0340\2\2\u1139\u1146\5\u03f4\u01fb\2\u113a\u113c\7\u0347\2\2"+
		"\u113b\u113a\3\2\2\2\u113b\u113c\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u113e"+
		"\7\u018a\2\2\u113e\u1145\t*\2\2\u113f\u1141\7\u0347\2\2\u1140\u113f\3"+
		"\2\2\2\u1140\u1141\3\2\2\2\u1141\u1142\3\2\2\2\u1142\u1143\7\35\2\2\u1143"+
		"\u1145\t+\2\2\u1144\u113b\3\2\2\2\u1144\u1140\3\2\2\2\u1145\u1148\3\2"+
		"\2\2\u1146\u1144\3\2\2\2\u1146\u1147\3\2\2\2\u1147\u114a\3\2\2\2\u1148"+
		"\u1146\3\2\2\2\u1149\u1122\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u1149\3\2"+
		"\2\2\u114b\u114c\3\2\2\2\u114c\u1157\3\2\2\2\u114d\u114e\7\u017b\2\2\u114e"+
		"\u114f\7\u0345\2\2\u114f\u1150\7\u014b\2\2\u1150\u1151\7\u0333\2\2\u1151"+
		"\u1154\t\t\2\2\u1152\u1153\7\u02c0\2\2\u1153\u1155\t\t\2\2\u1154\u1152"+
		"\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u1158\7\u0346\2"+
		"\2\u1157\u114d\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u115c\3\2\2\2\u1159\u115a"+
		"\7\u00de\2\2\u115a\u115b\7\u0087\2\2\u115b\u115d\7\u0114\2\2\u115c\u1159"+
		"\3\2\2\2\u115c\u115d\3\2\2\2\u115d\u016f\3\2\2\2\u115e\u115f\7\f\2\2\u115f"+
		"\u1163\7\u02d1\2\2\u1160\u1161\5\u03f4\u01fb\2\u1161\u1162\7\u0340\2\2"+
		"\u1162\u1164\3\2\2\2\u1163\u1160\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u1165"+
		"\3\2\2\2\u1165\u116b\5\u03f4\u01fb\2\u1166\u1169\7\u0117\2\2\u1167\u1168"+
		"\7\u017b\2\2\u1168\u116a\7\u032b\2\2\u1169\u1167\3\2\2\2\u1169\u116a\3"+
		"\2\2\2\u116a\u116c\3\2\2\2\u116b\u1166\3\2\2\2\u116b\u116c\3\2\2\2\u116c"+
		"\u1170\3\2\2\2\u116d\u116e\7\u009f\2\2\u116e\u116f\7(\2\2\u116f\u1171"+
		"\7\u032b\2\2\u1170\u116d\3\2\2\2\u1170\u1171\3\2\2\2\u1171\u1176\3\2\2"+
		"\2\u1172\u1173\7\u00ce\2\2\u1173\u1177\7\u032b\2\2\u1174\u1175\7\u0265"+
		"\2\2\u1175\u1177\7\u00ce\2\2\u1176\u1172\3\2\2\2\u1176\u1174\3\2\2\2\u1176"+
		"\u1177\3\2\2\2\u1177\u117c\3\2\2\2\u1178\u1179\7\u00c2\2\2\u1179\u117d"+
		"\7\u032b\2\2\u117a\u117b\7\u0265\2\2\u117b\u117d\7\u00c2\2\2\u117c\u1178"+
		"\3\2\2\2\u117c\u117a\3\2\2\2\u117c\u117d\3\2\2\2\u117d\u1181\3\2\2\2\u117e"+
		"\u1182\7S\2\2\u117f\u1180\7\u0265\2\2\u1180\u1182\7S\2\2\u1181\u117e\3"+
		"\2\2\2\u1181\u117f\3\2\2\2\u1181\u1182\3\2\2\2\u1182\u1187\3\2\2\2\u1183"+
		"\u1184\7)\2\2\u1184\u1188\7\u032b\2\2\u1185\u1186\7\u0265\2\2\u1186\u1188"+
		"\7)\2\2\u1187\u1183\3\2\2\2\u1187\u1185\3\2\2\2\u1187\u1188\3\2\2\2\u1188"+
		"\u0171\3\2\2\2\u1189\u118a\7K\2\2\u118a\u118e\7\u02d1\2\2\u118b\u118c"+
		"\5\u03f4\u01fb\2\u118c\u118d\7\u0340\2\2\u118d\u118f\3\2\2\2\u118e\u118b"+
		"\3\2\2\2\u118e\u118f\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u1193\5\u03f4\u01fb"+
		"\2\u1191\u1192\7\22\2\2\u1192\u1194\5\u03ec\u01f7\2\u1193\u1191\3\2\2"+
		"\2\u1193\u1194\3\2\2\2\u1194\u1198\3\2\2\2\u1195\u1196\7\u014d\2\2\u1196"+
		"\u1197\7\u017b\2\2\u1197\u1199\7\u032b\2\2\u1198\u1195\3\2\2\2\u1198\u1199"+
		"\3\2\2\2\u1199\u11a0\3\2\2\2\u119a\u119b\7\u009f\2\2\u119b\u119d\7(\2"+
		"\2\u119c\u119e\7\u034e\2\2\u119d\u119c\3\2\2\2\u119d\u119e\3\2\2\2\u119e"+
		"\u119f\3\2\2\2\u119f\u11a1\7\u032b\2\2\u11a0\u119a\3\2\2\2\u11a0\u11a1"+
		"\3\2\2\2\u11a1\u11a8\3\2\2\2\u11a2\u11a4\7\u00ce\2\2\u11a3\u11a5\7\u032b"+
		"\2\2\u11a4\u11a3\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5\u11a9\3\2\2\2\u11a6"+
		"\u11a7\7\u0265\2\2\u11a7\u11a9\7\u00ce\2\2\u11a8\u11a2\3\2\2\2\u11a8\u11a6"+
		"\3\2\2\2\u11a8\u11a9\3\2\2\2\u11a9\u11b0\3\2\2\2\u11aa\u11ac\7\u00c2\2"+
		"\2\u11ab\u11ad\7\u032b\2\2\u11ac\u11ab\3\2\2\2\u11ac\u11ad\3\2\2\2\u11ad"+
		"\u11b1\3\2\2\2\u11ae\u11af\7\u0265\2\2\u11af\u11b1\7\u00c2\2\2\u11b0\u11aa"+
		"\3\2\2\2\u11b0\u11ae\3\2\2\2\u11b0\u11b1\3\2\2\2\u11b1\u11b5\3\2\2\2\u11b2"+
		"\u11b6\7S\2\2\u11b3\u11b4\7\u0265\2\2\u11b4\u11b6\7S\2\2\u11b5\u11b2\3"+
		"\2\2\2\u11b5\u11b3\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6\u11bd\3\2\2\2\u11b7"+
		"\u11b9\7)\2\2\u11b8\u11ba\7\u032b\2\2\u11b9\u11b8\3\2\2\2\u11b9\u11ba"+
		"\3\2\2\2\u11ba\u11be\3\2\2\2\u11bb\u11bc\7\u0265\2\2\u11bc\u11be\7)\2"+
		"\2\u11bd\u11b7\3\2\2\2\u11bd\u11bb\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u0173"+
		"\3\2\2\2\u11bf\u11c0\7\f\2\2\u11c0\u11c1\7\u0137\2\2\u11c1\u11c2\7\u0198"+
		"\2\2\u11c2\u1246\5\u03f4\u01fb\2\u11c3\u11f0\7\u015c\2\2\u11c4\u11c5\7"+
		"\u0083\2\2\u11c5\u11ea\7\u0345\2\2\u11c6\u11c8\7\u0347\2\2\u11c7\u11c6"+
		"\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11ca\7\u01ff\2"+
		"\2\u11ca\u11cb\7\u0333\2\2\u11cb\u11e9\7\u032f\2\2\u11cc\u11ce\7\u0347"+
		"\2\2\u11cd\u11cc\3\2\2\2\u11cd\u11ce\3\2\2\2\u11ce\u11cf\3\2\2\2\u11cf"+
		"\u11d0\7\u024e\2\2\u11d0\u11d4\7\u0333\2\2\u11d1\u11d2\7\u032b\2\2\u11d2"+
		"\u11d5\t,\2\2\u11d3\u11d5\7\u0308\2\2\u11d4\u11d1\3\2\2\2\u11d4\u11d3"+
		"\3\2\2\2\u11d5\u11e9\3\2\2\2\u11d6\u11d8\7\u0347\2\2\u11d7\u11d6\3\2\2"+
		"\2\u11d7\u11d8\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11da\7\u024b\2\2\u11da"+
		"\u11db\7\u0333\2\2\u11db\u11e9\t-\2\2\u11dc\u11de\7\u0347\2\2\u11dd\u11dc"+
		"\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11df\3\2\2\2\u11df\u11e0\7\u0246\2"+
		"\2\u11e0\u11e1\7\u0333\2\2\u11e1\u11e9\7\u032b\2\2\u11e2\u11e4\7\u0347"+
		"\2\2\u11e3\u11e2\3\2\2\2\u11e3\u11e4\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5"+
		"\u11e6\7\u02b3\2\2\u11e6\u11e7\7\u0333\2\2\u11e7\u11e9\t\t\2\2\u11e8\u11c7"+
		"\3\2\2\2\u11e8\u11cd\3\2\2\2\u11e8\u11d7\3\2\2\2\u11e8\u11dd\3\2\2\2\u11e8"+
		"\u11e3\3\2\2\2\u11e9\u11ec\3\2\2\2\u11ea\u11e8\3\2\2\2\u11ea\u11eb\3\2"+
		"\2\2\u11eb\u11ed\3\2\2\2\u11ec\u11ea\3\2\2\2\u11ed\u11f1\7\u0346\2\2\u11ee"+
		"\u11f1\7\u0194\2\2\u11ef\u11f1\7\u02cb\2\2\u11f0\u11c4\3\2\2\2\u11f0\u11ee"+
		"\3\2\2\2\u11f0\u11ef\3\2\2\2\u11f1\u11f3\3\2\2\2\u11f2\u11c3\3\2\2\2\u11f2"+
		"\u11f3\3\2\2\2\u11f3\u120e\3\2\2\2\u11f4\u11f5\7\u017b\2\2\u11f5\u120a"+
		"\7\u0345\2\2\u11f6\u11f8\7\u0347\2\2\u11f7\u11f6\3\2\2\2\u11f7\u11f8\3"+
		"\2\2\2\u11f8\u11f9\3\2\2\2\u11f9\u11fa\7\u0297\2\2\u11fa\u11fb\7\u0333"+
		"\2\2\u11fb\u1209\7\u032b\2\2\u11fc\u11fe\7\u0347\2\2\u11fd\u11fc\3\2\2"+
		"\2\u11fd\u11fe\3\2\2\2\u11fe\u11ff\3\2\2\2\u11ff\u1200\7\u00e8\2\2\u1200"+
		"\u1201\7\u0333\2\2\u1201\u1209\t.\2\2\u1202\u1204\7\u0347\2\2\u1203\u1202"+
		"\3\2\2\2\u1203\u1204\3\2\2\2\u1204\u1205\3\2\2\2\u1205\u1206\7\u014b\2"+
		"\2\u1206\u1207\7\u0333\2\2\u1207\u1209\t\t\2\2\u1208\u11f7\3\2\2\2\u1208"+
		"\u11fd\3\2\2\2\u1208\u1203\3\2\2\2\u1209\u120c\3\2\2\2\u120a\u1208\3\2"+
		"\2\2\u120a\u120b\3\2\2\2\u120b\u120d\3\2\2\2\u120c\u120a\3\2\2\2\u120d"+
		"\u120f\7\u0346\2\2\u120e\u11f4\3\2\2\2\u120e\u120f\3\2\2\2\u120f\u123e"+
		"\3\2\2\2\u1210\u123c\7\u0178\2\2\u1211\u1213\7\u0347\2\2\u1212\u1211\3"+
		"\2\2\2\u1212\u1213\3\2\2\2\u1213\u1215\3\2\2\2\u1214\u1216\7\u00de\2\2"+
		"\u1215\u1214\3\2\2\2\u1215\u1216\3\2\2\2\u1216\u1217\3\2\2\2\u1217\u1223"+
		"\5\u03f4\u01fb\2\u1218\u1224\7\u0333\2\2\u1219\u121a\7\u0335\2\2\u121a"+
		"\u1224\7\u0334\2\2\u121b\u121c\7\u0336\2\2\u121c\u1224\7\u0333\2\2\u121d"+
		"\u1224\7\u0334\2\2\u121e\u121f\7\u0334\2\2\u121f\u1224\7\u0333\2\2\u1220"+
		"\u1224\7\u0335\2\2\u1221\u1222\7\u0335\2\2\u1222\u1224\7\u0333\2\2\u1223"+
		"\u1218\3\2\2\2\u1223\u1219\3\2\2\2\u1223\u121b\3\2\2\2\u1223\u121d\3\2"+
		"\2\2\u1223\u121e\3\2\2\2\u1223\u1220\3\2\2\2\u1223\u1221\3\2\2\2\u1224"+
		"\u1225\3\2\2\2\u1225\u1226\t\30\2\2\u1226\u123d\3\2\2\2\u1227\u1229\7"+
		"\u0347\2\2\u1228\u1227\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u122a\3\2\2\2"+
		"\u122a\u122c\t\35\2\2\u122b\u122d\7\u00de\2\2\u122c\u122b\3\2\2\2\u122c"+
		"\u122d\3\2\2\2\u122d\u1239\3\2\2\2\u122e\u123a\7\u0333\2\2\u122f\u1230"+
		"\7\u0335\2\2\u1230\u123a\7\u0334\2\2\u1231\u1232\7\u0336\2\2\u1232\u123a"+
		"\7\u0333\2\2\u1233\u123a\7\u0334\2\2\u1234\u1235\7\u0334\2\2\u1235\u123a"+
		"\7\u0333\2\2\u1236\u123a\7\u0335\2\2\u1237\u1238\7\u0335\2\2\u1238\u123a"+
		"\7\u0333\2\2\u1239\u122e\3\2\2\2\u1239\u122f\3\2\2\2\u1239\u1231\3\2\2"+
		"\2\u1239\u1233\3\2\2\2\u1239\u1234\3\2\2\2\u1239\u1236\3\2\2\2\u1239\u1237"+
		"\3\2\2\2\u123a\u123b\3\2\2\2\u123b\u123d\t\30\2\2\u123c\u1212\3\2\2\2"+
		"\u123c\u1228\3\2\2\2\u123d\u123f\3\2\2\2\u123e\u1210\3\2\2\2\u123e\u123f"+
		"\3\2\2\2\u123f\u1247\3\2\2\2\u1240\u1241\7\u02ab\2\2\u1241\u1247\7\u0178"+
		"\2\2\u1242\u1243\7\u025c\2\2\u1243\u1244\7\u025f\2\2\u1244\u1245\7\u0333"+
		"\2\2\u1245\u1247\5\u03f4\u01fb\2\u1246\u11f2\3\2\2\2\u1246\u1240\3\2\2"+
		"\2\u1246\u1242\3\2\2\2\u1247\u0175\3\2\2\2\u1248\u1249\7K\2\2\u1249\u124a"+
		"\7\u0137\2\2\u124a\u124b\7\u0198\2\2\u124b\u12d5\5\u03f4\u01fb\2\u124c"+
		"\u1279\7\u015c\2\2\u124d\u124e\7\u0083\2\2\u124e\u1273\7\u0345\2\2\u124f"+
		"\u1251\7\u0347\2\2\u1250\u124f\3\2\2\2\u1250\u1251\3\2\2\2\u1251\u1252"+
		"\3\2\2\2\u1252\u1253\7\u01ff\2\2\u1253\u1254\7\u0333\2\2\u1254\u1272\7"+
		"\u032f\2\2\u1255\u1257\7\u0347\2\2\u1256\u1255\3\2\2\2\u1256\u1257\3\2"+
		"\2\2\u1257\u1258\3\2\2\2\u1258\u1259\7\u024e\2\2\u1259\u125d\7\u0333\2"+
		"\2\u125a\u125b\7\u032b\2\2\u125b\u125e\t,\2\2\u125c\u125e\7\u0308\2\2"+
		"\u125d\u125a\3\2\2\2\u125d\u125c\3\2\2\2\u125e\u1272\3\2\2\2\u125f\u1261"+
		"\7\u0347\2\2\u1260\u125f\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1262\3\2\2"+
		"\2\u1262\u1263\7\u024b\2\2\u1263\u1264\7\u0333\2\2\u1264\u1272\t-\2\2"+
		"\u1265\u1267\7\u0347\2\2\u1266\u1265\3\2\2\2\u1266\u1267\3\2\2\2\u1267"+
		"\u1268\3\2\2\2\u1268\u1269\7\u0246\2\2\u1269\u126a\7\u0333\2\2\u126a\u1272"+
		"\7\u032b\2\2\u126b\u126d\7\u0347\2\2\u126c\u126b\3\2\2\2\u126c\u126d\3"+
		"\2\2\2\u126d\u126e\3\2\2\2\u126e\u126f\7\u02b3\2\2\u126f\u1270\7\u0333"+
		"\2\2\u1270\u1272\t\t\2\2\u1271\u1250\3\2\2\2\u1271\u1256\3\2\2\2\u1271"+
		"\u1260\3\2\2\2\u1271\u1266\3\2\2\2\u1271\u126c\3\2\2\2\u1272\u1275\3\2"+
		"\2\2\u1273\u1271\3\2\2\2\u1273\u1274\3\2\2\2\u1274\u1276\3\2\2\2\u1275"+
		"\u1273\3\2\2\2\u1276\u127a\7\u0346\2\2\u1277\u127a\7\u0194\2\2\u1278\u127a"+
		"\7\u02cb\2\2\u1279\u124d\3\2\2\2\u1279\u1277\3\2\2\2\u1279\u1278\3\2\2"+
		"\2\u127a\u127c\3\2\2\2\u127b\u124c\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u129d"+
		"\3\2\2\2\u127d\u127e\7\u017b\2\2\u127e\u1299\7\u0345\2\2\u127f\u1281\7"+
		"\u0347\2\2\u1280\u127f\3\2\2\2\u1280\u1281\3\2\2\2\u1281\u1282\3\2\2\2"+
		"\u1282\u1283\7\u0297\2\2\u1283\u1284\7\u0333\2\2\u1284\u1298\7\u032b\2"+
		"\2\u1285\u1287\7\u0347\2\2\u1286\u1285\3\2\2\2\u1286\u1287\3\2\2\2\u1287"+
		"\u1288\3\2\2\2\u1288\u1289\7\u00e8\2\2\u1289\u128a\7\u0333\2\2\u128a\u1298"+
		"\t.\2\2\u128b\u128d\7\u0347\2\2\u128c\u128b\3\2\2\2\u128c\u128d\3\2\2"+
		"\2\u128d\u128e\3\2\2\2\u128e\u128f\7\u014b\2\2\u128f\u1290\7\u0333\2\2"+
		"\u1290\u1298\t\t\2\2\u1291\u1293\7\u0347\2\2\u1292\u1291\3\2\2\2\u1292"+
		"\u1293\3\2\2\2\u1293\u1294\3\2\2\2\u1294\u1295\7\u0199\2\2\u1295\u1296"+
		"\7\u0333\2\2\u1296\u1298\5\u03f4\u01fb\2\u1297\u1280\3\2\2\2\u1297\u1286"+
		"\3\2\2\2\u1297\u128c\3\2\2\2\u1297\u1292\3\2\2\2\u1298\u129b\3\2\2\2\u1299"+
		"\u1297\3\2\2\2\u1299\u129a\3\2\2\2\u129a\u129c\3\2\2\2\u129b\u1299\3\2"+
		"\2\2\u129c\u129e\7\u0346\2\2\u129d\u127d\3\2\2\2\u129d\u129e\3\2\2\2\u129e"+
		"\u12cd\3\2\2\2\u129f\u12cb\7\u0178\2\2\u12a0\u12a2\7\u0347\2\2\u12a1\u12a0"+
		"\3\2\2\2\u12a1\u12a2\3\2\2\2\u12a2\u12a4\3\2\2\2\u12a3\u12a5\7\u00de\2"+
		"\2\u12a4\u12a3\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u12a6\3\2\2\2\u12a6\u12b2"+
		"\5\u03f4\u01fb\2\u12a7\u12b3\7\u0333\2\2\u12a8\u12a9\7\u0335\2\2\u12a9"+
		"\u12b3\7\u0334\2\2\u12aa\u12ab\7\u0336\2\2\u12ab\u12b3\7\u0333\2\2\u12ac"+
		"\u12b3\7\u0334\2\2\u12ad\u12ae\7\u0334\2\2\u12ae\u12b3\7\u0333\2\2\u12af"+
		"\u12b3\7\u0335\2\2\u12b0\u12b1\7\u0335\2\2\u12b1\u12b3\7\u0333\2\2\u12b2"+
		"\u12a7\3\2\2\2\u12b2\u12a8\3\2\2\2\u12b2\u12aa\3\2\2\2\u12b2\u12ac\3\2"+
		"\2\2\u12b2\u12ad\3\2\2\2\u12b2\u12af\3\2\2\2\u12b2\u12b0\3\2\2\2\u12b3"+
		"\u12b4\3\2\2\2\u12b4\u12b5\t\30\2\2\u12b5\u12cc\3\2\2\2\u12b6\u12b8\7"+
		"\u0347\2\2\u12b7\u12b6\3\2\2\2\u12b7\u12b8\3\2\2\2\u12b8\u12b9\3\2\2\2"+
		"\u12b9\u12bb\t\35\2\2\u12ba\u12bc\7\u00de\2\2\u12bb\u12ba\3\2\2\2\u12bb"+
		"\u12bc\3\2\2\2\u12bc\u12c8\3\2\2\2\u12bd\u12c9\7\u0333\2\2\u12be\u12bf"+
		"\7\u0335\2\2\u12bf\u12c9\7\u0334\2\2\u12c0\u12c1\7\u0336\2\2\u12c1\u12c9"+
		"\7\u0333\2\2\u12c2\u12c9\7\u0334\2\2\u12c3\u12c4\7\u0334\2\2\u12c4\u12c9"+
		"\7\u0333\2\2\u12c5\u12c9\7\u0335\2\2\u12c6\u12c7\7\u0335\2\2\u12c7\u12c9"+
		"\7\u0333\2\2\u12c8\u12bd\3\2\2\2\u12c8\u12be\3\2\2\2\u12c8\u12c0\3\2\2"+
		"\2\u12c8\u12c2\3\2\2\2\u12c8\u12c3\3\2\2\2\u12c8\u12c5\3\2\2\2\u12c8\u12c6"+
		"\3\2\2\2\u12c9\u12ca\3\2\2\2\u12ca\u12cc\t\30\2\2\u12cb\u12a1\3\2\2\2"+
		"\u12cb\u12b7\3\2\2\2\u12cc\u12ce\3\2\2\2\u12cd\u129f\3\2\2\2\u12cd\u12ce"+
		"\3\2\2\2\u12ce\u12d6\3\2\2\2\u12cf\u12d0\7\u02ab\2\2\u12d0\u12d6\7\u0178"+
		"\2\2\u12d1\u12d2\7\u025c\2\2\u12d2\u12d3\7\u025f\2\2\u12d3\u12d4\7\u0333"+
		"\2\2\u12d4\u12d6\5\u03f4\u01fb\2\u12d5\u127b\3\2\2\2\u12d5\u12cf\3\2\2"+
		"\2\u12d5\u12d1\3\2\2\2\u12d6\u0177\3\2\2\2\u12d7\u12d8\7\f\2\2\u12d8\u12d9"+
		"\7\u0137\2\2\u12d9\u12da\7\u0198\2\2\u12da\u12db\7\u0145\2\2\u12db\u12e0"+
		"\5\u03f4\u01fb\2\u12dc\u12dd\7\u0087\2\2\u12dd\u12de\7\u0137\2\2\u12de"+
		"\u12df\7\u0198\2\2\u12df\u12e1\5\u03f4\u01fb\2\u12e0\u12dc\3\2\2\2\u12e0"+
		"\u12e1\3\2\2\2\u12e1\u12e9\3\2\2\2\u12e2\u12e3\t\25\2\2\u12e3\u12e4\7"+
		"\u0345\2\2\u12e4\u12e5\5\u03f4\u01fb\2\u12e5\u12e6\7\u0346\2\2\u12e6\u12e8"+
		"\3\2\2\2\u12e7\u12e2\3\2\2\2\u12e8\u12eb\3\2\2\2\u12e9\u12e7\3\2\2\2\u12e9"+
		"\u12ea\3\2\2\2\u12ea\u12f2\3\2\2\2\u12eb\u12e9\3\2\2\2\u12ec\u12ed\7\u017b"+
		"\2\2\u12ed\u12ee\7\u0345\2\2\u12ee\u12ef\7\u014b\2\2\u12ef\u12f0\7\u0333"+
		"\2\2\u12f0\u12f1\t\t\2\2\u12f1\u12f3\7\u0346\2\2\u12f2\u12ec\3\2\2\2\u12f2"+
		"\u12f3\3\2\2\2\u12f3\u0179\3\2\2\2\u12f4\u12f5\7K\2\2\u12f5\u12f6\7\u0137"+
		"\2\2\u12f6\u12f7\7\u0198\2\2\u12f7\u12f8\7\u0145\2\2\u12f8\u12fd\5\u03f4"+
		"\u01fb\2\u12f9\u12fa\7\u0087\2\2\u12fa\u12fb\7\u0137\2\2\u12fb\u12fc\7"+
		"\u0198\2\2\u12fc\u12fe\5\u03f4\u01fb\2\u12fd\u12f9\3\2\2\2\u12fd\u12fe"+
		"\3\2\2\2\u12fe\u1306\3\2\2\2\u12ff\u1300\7\6\2\2\u1300\u1301\7\u0345\2"+
		"\2\u1301\u1302\5\u03f4\u01fb\2\u1302\u1303\7\u0346\2\2\u1303\u1305\3\2"+
		"\2\2\u1304\u12ff\3\2\2\2\u1305\u1308\3\2\2\2\u1306\u1304\3\2\2\2\u1306"+
		"\u1307\3\2\2\2\u1307\u130f\3\2\2\2\u1308\u1306\3\2\2\2\u1309\u130a\7\u017b"+
		"\2\2\u130a\u130b\7\u0345\2\2\u130b\u130c\7\u014b\2\2\u130c\u130d\7\u0333"+
		"\2\2\u130d\u130e\t\t\2\2\u130e\u1310\7\u0346\2\2\u130f\u1309\3\2\2\2\u130f"+
		"\u1310\3\2\2\2\u1310\u017b\3\2\2\2\u1311\u1312\7\f\2\2\u1312\u1313\7\u0137"+
		"\2\2\u1313\u1314\7>\2\2\u1314\u137e\7\u013d\2\2\u1315\u1316\7\u0106\2"+
		"\2\u1316\u133a\7\u0189\2\2\u1317\u1318\7\u01c3\2\2\u1318\u1328\7\u0333"+
		"\2\2\u1319\u1329\7\u019a\2\2\u131a\u131c\7\u0347\2\2\u131b\u131a\3\2\2"+
		"\2\u131b\u131c\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u1325\7\u032b\2\2\u131e"+
		"\u1320\7\u0347\2\2\u131f\u131e\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u1321"+
		"\3\2\2\2\u1321\u1322\7\u032b\2\2\u1322\u1323\7\u015c\2\2\u1323\u1325\7"+
		"\u032b\2\2\u1324\u131b\3\2\2\2\u1324\u131f\3\2\2\2\u1325\u1326\3\2\2\2"+
		"\u1326\u1324\3\2\2\2\u1326\u1327\3\2\2\2\u1327\u1329\3\2\2\2\u1328\u1319"+
		"\3\2\2\2\u1328\u1324\3\2\2\2\u1329\u133b\3\2\2\2\u132a\u132b\7\u0270\2"+
		"\2\u132b\u1336\7\u0333\2\2\u132c\u132e\7\u0347\2\2\u132d\u132c\3\2\2\2"+
		"\u132d\u132e\3\2\2\2\u132e\u132f\3\2\2\2\u132f\u1337\7\u032b\2\2\u1330"+
		"\u1332\7\u0347\2\2\u1331\u1330\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1333"+
		"\3\2\2\2\u1333\u1334\7\u032b\2\2\u1334\u1335\7\u015c\2\2\u1335\u1337\7"+
		"\u032b\2\2\u1336\u132d\3\2\2\2\u1336\u1331\3\2\2\2\u1337\u1338\3\2\2\2"+
		"\u1338\u1336\3\2\2\2\u1338\u1339\3\2\2\2\u1339\u133b\3\2\2\2\u133a\u1317"+
		"\3\2\2\2\u133a\u132a\3\2\2\2\u133b\u137f\3\2\2\2\u133c\u133d\7a\2\2\u133d"+
		"\u134d\7\u00bd\2\2\u133e\u134e\7\u00e7\2\2\u133f\u134e\7\u00e4\2\2\u1340"+
		"\u1341\7\u0285\2\2\u1341\u1342\7\u0333\2\2\u1342\u134e\t/\2\2\u1343\u1344"+
		"\7\u00c5\2\2\u1344\u1348\7\u0333\2\2\u1345\u1346\7\u032b\2\2\u1346\u1349"+
		"\7\u024f\2\2\u1347\u1349\7[\2\2\u1348\u1345\3\2\2\2\u1348\u1347\3\2\2"+
		"\2\u1349\u134e\3\2\2\2\u134a\u134b\7\u0246\2\2\u134b\u134c\7\u0333\2\2"+
		"\u134c\u134e\t\60\2\2\u134d\u133e\3\2\2\2\u134d\u133f\3\2\2\2\u134d\u1340"+
		"\3\2\2\2\u134d\u1343\3\2\2\2\u134d\u134a\3\2\2\2\u134e\u137f\3\2\2\2\u134f"+
		"\u1350\7\177\2\2\u1350\u1351\7\66\2\2\u1351\u1363\7\u0292\2\2\u1352\u1353"+
		"\7\u0173\2\2\u1353\u1354\7\u0333\2\2\u1354\u1364\t/\2\2\u1355\u1356\7"+
		"\u0147\2\2\u1356\u1357\7\u0333\2\2\u1357\u1364\t/\2\2\u1358\u1359\7\u0148"+
		"\2\2\u1359\u135a\7\u0333\2\2\u135a\u1364\t/\2\2\u135b\u135c\7\u0149\2"+
		"\2\u135c\u1364\t/\2\2\u135d\u135e\7\u0080\2\2\u135e\u135f\7\u0333\2\2"+
		"\u135f\u1364\t/\2\2\u1360\u1361\7\u0097\2\2\u1361\u1362\7\u0333\2\2\u1362"+
		"\u1364\t\60\2\2\u1363\u1352\3\2\2\2\u1363\u1355\3\2\2\2\u1363\u1358\3"+
		"\2\2\2\u1363\u135b\3\2\2\2\u1363\u135d\3\2\2\2\u1363\u1360\3\2\2\2\u1364"+
		"\u137f\3\2\2\2\u1365\u1366\7\u0214\2\2\u1366\u1367\7\66\2\2\u1367\u1368"+
		"\7C\2\2\u1368\u1369\7\u0333\2\2\u1369\u137f\t\61\2\2\u136a\u136b\7%\2"+
		"\2\u136b\u136c\7\u0287\2\2\u136c\u1379\7|\2\2\u136d\u136e\7\u00e7\2\2"+
		"\u136e\u136f\7\u0345\2\2\u136f\u1370\7\u0084\2\2\u1370\u1371\7\u0333\2"+
		"\2\u1371\u1372\7\u032f\2\2\u1372\u1373\7\u0347\2\2\u1373\u1374\7\u02da"+
		"\2\2\u1374\u1375\7\u0333\2\2\u1375\u1376\7\u032b\2\2\u1376\u1377\t\62"+
		"\2\2\u1377\u137a\7\u0346\2\2\u1378\u137a\7\u00e4\2\2\u1379\u136d\3\2\2"+
		"\2\u1379\u1378\3\2\2\2\u137a\u137f\3\2\2\2\u137b\u137c\7\u013d\2\2\u137c"+
		"\u137d\7\u0142\2\2\u137d\u137f\t\t\2\2\u137e\u1315\3\2\2\2\u137e\u133c"+
		"\3\2\2\2\u137e\u134f\3\2\2\2\u137e\u1365\3\2\2\2\u137e\u136a\3\2\2\2\u137e"+
		"\u137b\3\2\2\2\u137f\u017d\3\2\2\2\u1380\u1381\7\f\2\2\u1381\u1382\7\u0137"+
		"\2\2\u1382\u1383\7\u0123\2\2\u1383\u138b\5\u03f4\u01fb\2\u1384\u1385\t"+
		"\25\2\2\u1385\u1386\7\u00c9\2\2\u1386\u138c\5\u03f4\u01fb\2\u1387\u1388"+
		"\7\u017b\2\2\u1388\u1389\7\u025f\2\2\u1389\u138a\7\u0333\2\2\u138a\u138c"+
		"\5\u03f4\u01fb\2\u138b\u1384\3\2\2\2\u138b\u1387\3\2\2\2\u138c\u017f\3"+
		"\2\2\2\u138d\u138e\7K\2\2\u138e\u138f\7\u0137\2\2\u138f\u1390\7\u0123"+
		"\2\2\u1390\u1393\5\u03f4\u01fb\2\u1391\u1392\7\26\2\2\u1392\u1394\5\u03f4"+
		"\u01fb\2\u1393\u1391\3\2\2\2\u1393\u1394\3\2\2\2\u1394\u0181\3\2\2\2\u1395"+
		"\u1396\7\f\2\2\u1396\u1397\7\u0137\2\2\u1397\u1398\7\u0123\2\2\u1398\u1399"+
		"\5\u03f4\u01fb\2\u1399\u139a\t\25\2\2\u139a\u139b\7\u00c9\2\2\u139b\u139c"+
		"\5\u03f4\u01fb\2\u139c\u0183\3\2\2\2\u139d\u139e\7\f\2\2\u139e\u139f\7"+
		"\u0138\2\2\u139f\u13a7\5\u03f4\u01fb\2\u13a0\u13a1\7\u00e7\2\2\u13a1\u13a2"+
		"\7\u0296\2\2\u13a2\u13a3\5\u03f4\u01fb\2\u13a3\u13a4\7\u0340\2\2\u13a4"+
		"\u13a5\3\2\2\2\u13a5\u13a6\5\u03f4\u01fb\2\u13a6\u13a8\3\2\2\2\u13a7\u13a0"+
		"\3\2\2\2\u13a7\u13a8\3\2\2\2\u13a8\u13b0\3\2\2\2\u13a9\u13ab\7\u0347\2"+
		"\2\u13aa\u13a9\3\2\2\2\u13aa\u13ab\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13ad"+
		"\t\25\2\2\u13ad\u13af\5\u03f4\u01fb\2\u13ae\u13aa\3\2\2\2\u13af\u13b2"+
		"\3\2\2\2\u13b0\u13ae\3\2\2\2\u13b0\u13b1\3\2\2\2\u13b1\u0185\3\2\2\2\u13b2"+
		"\u13b0\3\2\2\2\u13b3\u13b4\7K\2\2\u13b4\u13b5\7\u0138\2\2\u13b5\u13b8"+
		"\5\u03f4\u01fb\2\u13b6\u13b7\7\26\2\2\u13b7\u13b9\5\u03f4\u01fb\2\u13b8"+
		"\u13b6\3\2\2\2\u13b8\u13b9\3\2\2\2\u13b9\u13ba\3\2\2\2\u13ba\u13bb\7\u00e7"+
		"\2\2\u13bb\u13bf\7\u0296\2\2\u13bc\u13bd\5\u03f4\u01fb\2\u13bd\u13be\7"+
		"\u0340\2\2\u13be\u13c0\3\2\2\2\u13bf\u13bc\3\2\2\2\u13bf\u13c0\3\2\2\2"+
		"\u13c0\u13c1\3\2\2\2\u13c1\u13cf\5\u03f4\u01fb\2\u13c2\u13ca\7\u0345\2"+
		"\2\u13c3\u13c5\7\u0347\2\2\u13c4\u13c3\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5"+
		"\u13c8\3\2\2\2\u13c6\u13c9\5\u03f4\u01fb\2\u13c7\u13c9\7[\2\2\u13c8\u13c6"+
		"\3\2\2\2\u13c8\u13c7\3\2\2\2\u13c9\u13cb\3\2\2\2\u13ca\u13c4\3\2\2\2\u13cb"+
		"\u13cc\3\2\2\2\u13cc\u13ca\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd\u13ce\3\2"+
		"\2\2\u13ce\u13d0\7\u0346\2\2\u13cf\u13c2\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0"+
		"\u0187\3\2\2\2\u13d1\u13d2\7\f\2\2\u13d2\u13d3\7\u0138\2\2\u13d3\u13d4"+
		"\7\u00bf\2\2\u13d4\u13ea\7\u00ae\2\2\u13d5\u13d7\7\u0205\2\2\u13d6\u13d5"+
		"\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7\u13d8\3\2\2\2\u13d8\u13eb\7\u0111\2"+
		"\2\u13d9\u13e8\7\u017b\2\2\u13da\u13db\7\u0276\2\2\u13db\u13dc\7\u0333"+
		"\2\2\u13dc\u13dd\7\u032f\2\2\u13dd\u13de\7\u0347\2\2\u13de\u13df\7\u00e6"+
		"\2\2\u13df\u13e0\7\u0333\2\2\u13e0\u13e9\7\u032f\2\2\u13e1\u13e2\7\u0261"+
		"\2\2\u13e2\u13e3\7\u0333\2\2\u13e3\u13e4\7\u032f\2\2\u13e4\u13e5\7\u0347"+
		"\2\2\u13e5\u13e6\7\u0263\2\2\u13e6\u13e7\7\u0333\2\2\u13e7\u13e9\7\u032f"+
		"\2\2\u13e8\u13da\3\2\2\2\u13e8\u13e1\3\2\2\2\u13e8\u13e9\3\2\2\2\u13e9"+
		"\u13eb\3\2\2\2\u13ea\u13d6\3\2\2\2\u13ea\u13d9\3\2\2\2\u13eb\u0189\3\2"+
		"\2\2\u13ec\u13ed\7\f\2\2\u13ed\u13ee\7\u02ed\2\2\u13ee\u13ef\7\u00ae\2"+
		"\2\u13ef\u13f0\5\u03f4\u01fb\2\u13f0\u13f1\t\25\2\2\u13f1\u13f2\7\u01ee"+
		"\2\2\u13f2\u13fe\7(\2\2\u13f3\u13f4\7-\2\2\u13f4\u13ff\5\u03f4\u01fb\2"+
		"\u13f5\u13f6\7\u00f6\2\2\u13f6\u13f7\7\u0333\2\2\u13f7\u13ff\7\u032f\2"+
		"\2\u13f8\u13f9\7\u02ed\2\2\u13f9\u13fa\7\u00ae\2\2\u13fa\u13ff\5\u03f4"+
		"\u01fb\2\u13fb\u13fc\7\24\2\2\u13fc\u13fd\7\u00ae\2\2\u13fd\u13ff\5\u03f4"+
		"\u01fb\2\u13fe\u13f3\3\2\2\2\u13fe\u13f5\3\2\2\2\u13fe\u13f8\3\2\2\2\u13fe"+
		"\u13fb\3\2\2\2\u13ff\u018b\3\2\2\2\u1400\u1401\7\f\2\2\u1401\u1402\7\u02ed"+
		"\2\2\u1402\u1403\7\u00ae\2\2\u1403\u1406\5\u03f4\u01fb\2\u1404\u1405\7"+
		"\26\2\2\u1405\u1407\5\u03f4\u01fb\2\u1406\u1404\3\2\2\2\u1406\u1407\3"+
		"\2\2\2\u1407\u140b\3\2\2\2\u1408\u1409\7\u008d\2\2\u1409\u140a\7\u0293"+
		"\2\2\u140a\u140c\5\u03f4\u01fb\2\u140b\u1408\3\2\2\2\u140b\u140c\3\2\2"+
		"\2\u140c\u140d\3\2\2\2\u140d\u142e\7\u017b\2\2\u140e\u140f\7\u022d\2\2"+
		"\u140f\u1410\7\u0333\2\2\u1410\u141e\7\u032f\2\2\u1411\u1412\7\u018c\2"+
		"\2\u1412\u1413\7\u0333\2\2\u1413\u141e\t\63\2\2\u1414\u1415\7\u021a\2"+
		"\2\u1415\u1416\7\u0333\2\2\u1416\u141e\7\u032f\2\2\u1417\u1418\7\u0294"+
		"\2\2\u1418\u1419\7\u0333\2\2\u1419\u141e\7\u032f\2\2\u141a\u141b\7\u01c5"+
		"\2\2\u141b\u141c\7\u0333\2\2\u141c\u141e\t\f\2\2\u141d\u140e\3\2\2\2\u141d"+
		"\u1411\3\2\2\2\u141d\u1414\3\2\2\2\u141d\u1417\3\2\2\2\u141d\u141a\3\2"+
		"\2\2\u141e\u142f\3\2\2\2\u141f\u1420\7\u01ee\2\2\u1420\u142c\7(\2\2\u1421"+
		"\u1422\7-\2\2\u1422\u142d\5\u03f4\u01fb\2\u1423\u1424\7\u00f6\2\2\u1424"+
		"\u1425\7\u0333\2\2\u1425\u142d\7\u032f\2\2\u1426\u1427\7\u02ed\2\2\u1427"+
		"\u1428\7\u00ae\2\2\u1428\u142d\5\u03f4\u01fb\2\u1429\u142a\7\24\2\2\u142a"+
		"\u142b\7\u00ae\2\2\u142b\u142d\5\u03f4\u01fb\2\u142c\u1421\3\2\2\2\u142c"+
		"\u1423\3\2\2\2\u142c\u1426\3\2\2\2\u142c\u1429\3\2\2\2\u142d\u142f\3\2"+
		"\2\2\u142e\u141d\3\2\2\2\u142e\u141f\3\2\2\2\u142f\u018d\3\2\2\2\u1430"+
		"\u1431\7K\2\2\u1431\u1435\7\u02ef\2\2\u1432\u1433\5\u03f4\u01fb\2\u1433"+
		"\u1434\7\u0340\2\2\u1434\u1436\3\2\2\2\u1435\u1432\3\2\2\2\u1435\u1436"+
		"\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u1438\5\u03f4\u01fb\2\u1438\u1453\7"+
		"\u0087\2\2\u1439\u143a\5\u03f4\u01fb\2\u143a\u143b\7\u0340\2\2\u143b\u143d"+
		"\3\2\2\2\u143c\u1439\3\2\2\2\u143c\u143d\3\2\2\2\u143d\u1441\3\2\2\2\u143e"+
		"\u143f\5\u03f4\u01fb\2\u143f\u1440\7\u0340\2\2\u1440\u1442\3\2\2\2\u1441"+
		"\u143e\3\2\2\2\u1441\u1442\3\2\2\2\u1442\u1446\3\2\2\2\u1443\u1444\5\u03f4"+
		"\u01fb\2\u1444\u1445\7\u0340\2\2\u1445\u1447\3\2\2\2\u1446\u1443\3\2\2"+
		"\2\u1446\u1447\3\2\2\2\u1447\u1448\3\2\2\2\u1448\u1454\5\u03f4\u01fb\2"+
		"\u1449\u144a\5\u03f4\u01fb\2\u144a\u144b\7\u0340\2\2\u144b\u144d\3\2\2"+
		"\2\u144c\u1449\3\2\2\2\u144c\u144d\3\2\2\2\u144d\u1451\3\2\2\2\u144e\u144f"+
		"\5\u03f4\u01fb\2\u144f\u1450\7\u0340\2\2\u1450\u1452\3\2\2\2\u1451\u144e"+
		"\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u1454\3\2\2\2\u1453\u143c\3\2\2\2\u1453"+
		"\u144c\3\2\2\2\u1454\u018f\3\2\2\2\u1455\u1456\7\f\2\2\u1456\u1457\7\u0170"+
		"\2\2\u1457\u1458\5\u03f4\u01fb\2\u1458\u148b\7\u017b\2\2\u1459\u145b\7"+
		"\u0347\2\2\u145a\u1459\3\2\2\2\u145a\u145b\3\2\2\2\u145b\u145c\3\2\2\2"+
		"\u145c\u145d\7\u025f\2\2\u145d\u145e\7\u0333\2\2\u145e\u148c\5\u03f4\u01fb"+
		"\2\u145f\u1461\7\u0347\2\2\u1460\u145f\3\2\2\2\u1460\u1461\3\2\2\2\u1461"+
		"\u1462\3\2\2\2\u1462\u1463\7]\2\2\u1463\u1466\7\u0333\2\2\u1464\u1467"+
		"\5\u03f4\u01fb\2\u1465\u1467\7\u00e1\2\2\u1466\u1464\3\2\2\2\u1466\u1465"+
		"\3\2\2\2\u1467\u148c\3\2\2\2\u1468\u146a\7\u0347\2\2\u1469\u1468\3\2\2"+
		"\2\u1469\u146a\3\2\2\2\u146a\u146b\3\2\2\2\u146b\u146c\7\u023d\2\2\u146c"+
		"\u146d\7\u0333\2\2\u146d\u148c\5\u03f4\u01fb\2\u146e\u1470\7\u0347\2\2"+
		"\u146f\u146e\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u1471\3\2\2\2\u1471\u1472"+
		"\7\u00f6\2\2\u1472\u1473\7\u0333\2\2\u1473\u1477\7\u032f\2\2\u1474\u1475"+
		"\7\u00e6\2\2\u1475\u1476\7\u0333\2\2\u1476\u1478\7\u032f\2\2\u1477\u1474"+
		"\3\2\2\2\u1478\u1479\3\2\2\2\u1479\u1477\3\2\2\2\u1479\u147a\3\2\2\2\u147a"+
		"\u148c\3\2\2\2\u147b\u147d\7\u0347\2\2\u147c\u147b\3\2\2\2\u147c\u147d"+
		"\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u147f\7\u01d6\2\2\u147f\u1483\7\u0333"+
		"\2\2\u1480\u1484\7\u00d7\2\2\u1481\u1484\7\u032b\2\2\u1482\u1484\5\u03f4"+
		"\u01fb\2\u1483\u1480\3\2\2\2\u1483\u1481\3\2\2\2\u1483\u1482\3\2\2\2\u1484"+
		"\u148c\3\2\2\2\u1485\u1487\7\u0347\2\2\u1486\u1485\3\2\2\2\u1486\u1487"+
		"\3\2\2\2\u1487\u1488\3\2\2\2\u1488\u1489\7\u018d\2\2\u1489\u148a\7\u0333"+
		"\2\2\u148a\u148c\t\t\2\2\u148b\u145a\3\2\2\2\u148b\u1460\3\2\2\2\u148b"+
		"\u1469\3\2\2\2\u148b\u146f\3\2\2\2\u148b\u147c\3\2\2\2\u148b\u1486\3\2"+
		"\2\2\u148c\u148d\3\2\2\2\u148d\u148b\3\2\2\2\u148d\u148e\3\2\2\2\u148e"+
		"\u0191\3\2\2\2\u148f\u1490\7K\2\2\u1490\u1491\7\u0170\2\2\u1491\u1495"+
		"\5\u03f4\u01fb\2\u1492\u1493\t\64\2\2\u1493\u1494\7\u023d\2\2\u1494\u1496"+
		"\5\u03f4\u01fb\2\u1495\u1492\3\2\2\2\u1495\u1496\3\2\2\2\u1496\u14a9\3"+
		"\2\2\2\u1497\u14a6\7\u017b\2\2\u1498\u149a\7\u0347\2\2\u1499\u1498\3\2"+
		"\2\2\u1499\u149a\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u149c\7]\2\2\u149c"+
		"\u149d\7\u0333\2\2\u149d\u14a5\5\u03f4\u01fb\2\u149e\u14a0\7\u0347\2\2"+
		"\u149f\u149e\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0\u14a1\3\2\2\2\u14a1\u14a2"+
		"\7\u018d\2\2\u14a2\u14a3\7\u0333\2\2\u14a3\u14a5\t\t\2\2\u14a4\u1499\3"+
		"\2\2\2\u14a4\u149f\3\2\2\2\u14a5\u14a8\3\2\2\2\u14a6\u14a4\3\2\2\2\u14a6"+
		"\u14a7\3\2\2\2\u14a7\u14aa\3\2\2\2\u14a8\u14a6\3\2\2\2\u14a9\u1497\3\2"+
		"\2\2\u14a9\u14aa\3\2\2\2\u14aa\u1522\3\2\2\2\u14ab\u14ac\7K\2\2\u14ac"+
		"\u14fd\7\u0170\2\2\u14ad\u14d0\5\u03f4\u01fb\2\u14ae\u14cd\7\u017b\2\2"+
		"\u14af\u14b1\7\u0347\2\2\u14b0\u14af\3\2\2\2\u14b0\u14b1\3\2\2\2\u14b1"+
		"\u14b2\3\2\2\2\u14b2\u14b3\7]\2\2\u14b3\u14b4\7\u0333\2\2\u14b4\u14cc"+
		"\5\u03f4\u01fb\2\u14b5\u14b7\7\u0347\2\2\u14b6\u14b5\3\2\2\2\u14b6\u14b7"+
		"\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14b9\7\u01d6\2\2\u14b9\u14bd\7\u0333"+
		"\2\2\u14ba\u14be\7\u00d7\2\2\u14bb\u14be\7\u032b\2\2\u14bc\u14be\5\u03f4"+
		"\u01fb\2\u14bd\u14ba\3\2\2\2\u14bd\u14bb\3\2\2\2\u14bd\u14bc\3\2\2\2\u14be"+
		"\u14cc\3\2\2\2\u14bf\u14c1\7\u0347\2\2\u14c0\u14bf\3\2\2\2\u14c0\u14c1"+
		"\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u14c3\7\u0140\2\2\u14c3\u14c4\7\u0333"+
		"\2\2\u14c4\u14cc\7\u0330\2\2\u14c5\u14c7\7\u0347\2\2\u14c6\u14c5\3\2\2"+
		"\2\u14c6\u14c7\3\2\2\2\u14c7\u14c8\3\2\2\2\u14c8\u14c9\7\u018d\2\2\u14c9"+
		"\u14ca\7\u0333\2\2\u14ca\u14cc\t\t\2\2\u14cb\u14b0\3\2\2\2\u14cb\u14b6"+
		"\3\2\2\2\u14cb\u14c0\3\2\2\2\u14cb\u14c6\3\2\2\2\u14cc\u14cf\3\2\2\2\u14cd"+
		"\u14cb\3\2\2\2\u14cd\u14ce\3\2\2\2\u14ce\u14d1\3\2\2\2\u14cf\u14cd\3\2"+
		"\2\2\u14d0\u14ae\3\2\2\2\u14d0\u14d1\3\2\2\2\u14d1\u14fe\3\2\2\2\u14d2"+
		"\u14d3\5\u03f4\u01fb\2\u14d3\u14d4\7\u017b\2\2\u14d4\u14d5\7\u00f6\2\2"+
		"\u14d5\u14d6\7\u0333\2\2\u14d6\u14f5\7\u032f\2\2\u14d7\u14d9\7\u0347\2"+
		"\2\u14d8\u14d7\3\2\2\2\u14d8\u14d9\3\2\2\2\u14d9\u14da\3\2\2\2\u14da\u14db"+
		"\7]\2\2\u14db\u14dc\7\u0333\2\2\u14dc\u14f4\5\u03f4\u01fb\2\u14dd\u14df"+
		"\7\u0347\2\2\u14de\u14dd\3\2\2\2\u14de\u14df\3\2\2\2\u14df\u14e0\3\2\2"+
		"\2\u14e0\u14e1\7\u01d6\2\2\u14e1\u14e5\7\u0333\2\2\u14e2\u14e6\7\u00d7"+
		"\2\2\u14e3\u14e6\7\u032b\2\2\u14e4\u14e6\5\u03f4\u01fb\2\u14e5\u14e2\3"+
		"\2\2\2\u14e5\u14e3\3\2\2\2\u14e5\u14e4\3\2\2\2\u14e6\u14f4\3\2\2\2\u14e7"+
		"\u14e9\7\u0347\2\2\u14e8\u14e7\3\2\2\2\u14e8\u14e9\3\2\2\2\u14e9\u14ea"+
		"\3\2\2\2\u14ea\u14eb\7\u0140\2\2\u14eb\u14ec\7\u0333\2\2\u14ec\u14f4\7"+
		"\u0330\2\2\u14ed\u14ef\7\u0347\2\2\u14ee\u14ed\3\2\2\2\u14ee\u14ef\3\2"+
		"\2\2\u14ef\u14f0\3\2\2\2\u14f0\u14f1\7\u018d\2\2\u14f1\u14f2\7\u0333\2"+
		"\2\u14f2\u14f4\t\t\2\2\u14f3\u14d8\3\2\2\2\u14f3\u14de\3\2\2\2\u14f3\u14e8"+
		"\3\2\2\2\u14f3\u14ee\3\2\2\2\u14f4\u14f7\3\2\2\2\u14f5\u14f3\3\2\2\2\u14f5"+
		"\u14f6\3\2\2\2\u14f6\u14fe\3\2\2\2\u14f7\u14f5\3\2\2\2\u14f8\u14f9\5\u03f4"+
		"\u01fb\2\u14f9\u14fa\7\u008d\2\2\u14fa\u14fb\7}\2\2\u14fb\u14fc\7\u0293"+
		"\2\2\u14fc\u14fe\3\2\2\2\u14fd\u14ad\3\2\2\2\u14fd\u14d2\3\2\2\2\u14fd"+
		"\u14f8\3\2\2\2\u14fe\u1522\3\2\2\2\u14ff\u1500\7K\2\2\u1500\u1501\7\u0170"+
		"\2\2\u1501\u151c\5\u03f4\u01fb\2\u1502\u1503\7\u017d\2\2\u1503\u1512\7"+
		"\u023d\2\2\u1504\u1506\7\u0347\2\2\u1505\u1504\3\2\2\2\u1505\u1506\3\2"+
		"\2\2\u1506\u1507\3\2\2\2\u1507\u1508\7]\2\2\u1508\u1509\7\u0333\2\2\u1509"+
		"\u1511\5\u03f4\u01fb\2\u150a\u150c\7\u0347\2\2\u150b\u150a\3\2\2\2\u150b"+
		"\u150c\3\2\2\2\u150c\u150d\3\2\2\2\u150d\u150e\7\u018d\2\2\u150e\u150f"+
		"\7\u0333\2\2\u150f\u1511\t\t\2\2\u1510\u1505\3\2\2\2\u1510\u150b\3\2\2"+
		"\2\u1511\u1514\3\2\2\2\u1512\u1510\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u151d"+
		"\3\2\2\2\u1514\u1512\3\2\2\2\u1515\u1516\t\64\2\2\u1516\u1517\7-\2\2\u1517"+
		"\u151d\5\u03f4\u01fb\2\u1518\u1519\t\64\2\2\u1519\u151a\7\24\2\2\u151a"+
		"\u151b\7\u00ae\2\2\u151b\u151d\5\u03f4\u01fb\2\u151c\u1502\3\2\2\2\u151c"+
		"\u1515\3\2\2\2\u151c\u1518\3\2\2\2\u151d\u1522\3\2\2\2\u151e\u151f\7K"+
		"\2\2\u151f\u1520\7\u0170\2\2\u1520\u1522\5\u03f4\u01fb\2\u1521\u148f\3"+
		"\2\2\2\u1521\u14ab\3\2\2\2\u1521\u14ff\3\2\2\2\u1521\u151e\3\2\2\2\u1522"+
		"\u0193\3\2\2\2\u1523\u1524\7K\2\2\u1524\u1525\7\u0170\2\2\u1525\u152b"+
		"\5\u03f4\u01fb\2\u1526\u1527\t\64\2\2\u1527\u1528\7\u023d\2\2\u1528\u152c"+
		"\5\u03f4\u01fb\2\u1529\u152a\7\u017d\2\2\u152a\u152c\7\u023d\2\2\u152b"+
		"\u1526\3\2\2\2\u152b\u1529\3\2\2\2\u152b\u152c\3\2\2\2\u152c\u1531\3\2"+
		"\2\2\u152d\u152e\7\u017b\2\2\u152e\u152f\7]\2\2\u152f\u1530\7\u0333\2"+
		"\2\u1530\u1532\5\u03f4\u01fb\2\u1531\u152d\3\2\2\2\u1531\u1532\3\2\2\2"+
		"\u1532\u1540\3\2\2\2\u1533\u1534\7K\2\2\u1534\u1535\7\u0170\2\2\u1535"+
		"\u1536\5\u03f4\u01fb\2\u1536\u1537\7\u008d\2\2\u1537\u1538\7}\2\2\u1538"+
		"\u153d\7\u0293\2\2\u1539\u153a\7\u017b\2\2\u153a\u153b\7]\2\2\u153b\u153c"+
		"\7\u0333\2\2\u153c\u153e\5\u03f4\u01fb\2\u153d\u1539\3\2\2\2\u153d\u153e"+
		"\3\2\2\2\u153e\u1540\3\2\2\2\u153f\u1523\3\2\2\2\u153f\u1533\3\2\2\2\u1540"+
		"\u0195\3\2\2\2\u1541\u1542\7\f\2\2\u1542\u1543\7\u0170\2\2\u1543\u1544"+
		"\5\u03f4\u01fb\2\u1544\u155d\7\u017b\2\2\u1545\u1547\7\u0347\2\2\u1546"+
		"\u1545\3\2\2\2\u1546\u1547\3\2\2\2\u1547\u1548\3\2\2\2\u1548\u1549\7\u025f"+
		"\2\2\u1549\u154a\7\u0333\2\2\u154a\u155e\5\u03f4\u01fb\2\u154b\u154d\7"+
		"\u0347\2\2\u154c\u154b\3\2\2\2\u154c\u154d\3\2\2\2\u154d\u154e\3\2\2\2"+
		"\u154e\u154f\7]\2\2\u154f\u1550\7\u0333\2\2\u1550\u155e\5\u03f4\u01fb"+
		"\2\u1551\u1553\7\u0347\2\2\u1552\u1551\3\2\2\2\u1552\u1553\3\2\2\2\u1553"+
		"\u1554\3\2\2\2\u1554\u1555\7\u023d\2\2\u1555\u1556\7\u0333\2\2\u1556\u155e"+
		"\5\u03f4\u01fb\2\u1557\u1559\7\u0347\2\2\u1558\u1557\3\2\2\2\u1558\u1559"+
		"\3\2\2\2\u1559\u155a\3\2\2\2\u155a\u155b\7\u018d\2\2\u155b\u155c\7\u0333"+
		"\2\2\u155c\u155e\t\t\2\2\u155d\u1546\3\2\2\2\u155d\u154c\3\2\2\2\u155d"+
		"\u1552\3\2\2\2\u155d\u1558\3\2\2\2\u155e\u155f\3\2\2\2\u155f\u155d\3\2"+
		"\2\2\u155f\u1560\3\2\2\2\u1560\u0197\3\2\2\2\u1561\u1562\7\f\2\2\u1562"+
		"\u1563\7\u0316\2\2\u1563\u1566\7\u0094\2\2\u1564\u1567\5\u03f4\u01fb\2"+
		"\u1565\u1567\7\u01d4\2\2\u1566\u1564\3\2\2\2\u1566\u1565\3\2\2\2\u1567"+
		"\u1587\3\2\2\2\u1568\u1569\7\u017b\2\2\u1569\u1582\7\u0345\2\2\u156a\u156b"+
		"\7\u021e\2\2\u156b\u156c\7\u0333\2\2\u156c\u1583\t\65\2\2\u156d\u156f"+
		"\7\u0347\2\2\u156e\u156d\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u1570\3\2\2"+
		"\2\u1570\u1571\7\u02b0\2\2\u1571\u1572\7\u0333\2\2\u1572\u1583\7\u032b"+
		"\2\2\u1573\u1575\7\u0347\2\2\u1574\u1573\3\2\2\2\u1574\u1575\3\2\2\2\u1575"+
		"\u1576\3\2\2\2\u1576\u1577\7\u02af\2\2\u1577\u1578\7\u0333\2\2\u1578\u1583"+
		"\7\u032b\2\2\u1579\u157a\7\u02b1\2\2\u157a\u157b\7\u0333\2\2\u157b\u1583"+
		"\7\u032b\2\2\u157c\u157d\7\u0245\2\2\u157d\u157e\7\u0333\2\2\u157e\u1583"+
		"\7\u032b\2\2\u157f\u1580\7\u0211\2\2\u1580\u1581\7\u0333\2\2\u1581\u1583"+
		"\7\u032b\2\2\u1582\u156a\3\2\2\2\u1582\u156e\3\2\2\2\u1582\u1574\3\2\2"+
		"\2\u1582\u1579\3\2\2\2\u1582\u157c\3\2\2\2\u1582\u157f\3\2\2\2\u1583\u1584"+
		"\3\2\2\2\u1584\u1582\3\2\2\2\u1584\u1585\3\2\2\2\u1585\u1586\3\2\2\2\u1586"+
		"\u1588\7\u0346\2\2\u1587\u1568\3\2\2\2\u1587\u1588\3\2\2\2\u1588\u158e"+
		"\3\2\2\2\u1589\u158c\7\u030a\2\2\u158a\u158d\5\u03f4\u01fb\2\u158b\u158d"+
		"\7\u01d4\2\2\u158c\u158a\3\2\2\2\u158c\u158b\3\2\2\2\u158d\u158f\3\2\2"+
		"\2\u158e\u1589\3\2\2\2\u158e\u158f\3\2\2\2\u158f\u0199\3\2\2\2\u1590\u1591"+
		"\7K\2\2\u1591\u1592\7\u0316\2\2\u1592\u1593\7\u0094\2\2\u1593\u15b3\5"+
		"\u03f4\u01fb\2\u1594\u1595\7\u017b\2\2\u1595\u15ae\7\u0345\2\2\u1596\u1597"+
		"\7\u021e\2\2\u1597\u1598\7\u0333\2\2\u1598\u15af\t\65\2\2\u1599\u159b"+
		"\7\u0347\2\2\u159a\u1599\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u159c\3\2\2"+
		"\2\u159c\u159d\7\u02b0\2\2\u159d\u159e\7\u0333\2\2\u159e\u15af\7\u032b"+
		"\2\2\u159f\u15a1\7\u0347\2\2\u15a0\u159f\3\2\2\2\u15a0\u15a1\3\2\2\2\u15a1"+
		"\u15a2\3\2\2\2\u15a2\u15a3\7\u02af\2\2\u15a3\u15a4\7\u0333\2\2\u15a4\u15af"+
		"\7\u032b\2\2\u15a5\u15a6\7\u02b1\2\2\u15a6\u15a7\7\u0333\2\2\u15a7\u15af"+
		"\7\u032b\2\2\u15a8\u15a9\7\u0245\2\2\u15a9\u15aa\7\u0333\2\2\u15aa\u15af"+
		"\7\u032b\2\2\u15ab\u15ac\7\u0211\2\2\u15ac\u15ad\7\u0333\2\2\u15ad\u15af"+
		"\7\u032b\2\2\u15ae\u1596\3\2\2\2\u15ae\u159a\3\2\2\2\u15ae\u15a0\3\2\2"+
		"\2\u15ae\u15a5\3\2\2\2\u15ae\u15a8\3\2\2\2\u15ae\u15ab\3\2\2\2\u15af\u15b0"+
		"\3\2\2\2\u15b0\u15ae\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u15b2\3\2\2\2\u15b2"+
		"\u15b4\7\u0346\2\2\u15b3\u1594\3\2\2\2\u15b3\u15b4\3\2\2\2\u15b4\u15c2"+
		"\3\2\2\2\u15b5\u15b8\7\u030a\2\2\u15b6\u15b9\5\u03f4\u01fb\2\u15b7\u15b9"+
		"\7\u01d4\2\2\u15b8\u15b6\3\2\2\2\u15b8\u15b7\3\2\2\2\u15b8\u15b9\3\2\2"+
		"\2\u15b9\u15c0\3\2\2\2\u15ba\u15bc\7\u0347\2\2\u15bb\u15ba\3\2\2\2\u15bb"+
		"\u15bc\3\2\2\2\u15bc\u15bd\3\2\2\2\u15bd\u15be\7}\2\2\u15be\u15c1\5\u03f4"+
		"\u01fb\2\u15bf\u15c1\7\u01d4\2\2\u15c0\u15bb\3\2\2\2\u15c0\u15bf\3\2\2"+
		"\2\u15c0\u15c1\3\2\2\2\u15c1\u15c3\3\2\2\2\u15c2\u15b5\3\2\2\2\u15c2\u15c3"+
		"\3\2\2\2\u15c3\u019b\3\2\2\2\u15c4\u15c5\7K\2\2\u15c5\u15c6\7\u0317\2"+
		"\2\u15c6\u15c7\7\u0130\2\2\u15c7\u15cb\7\u01b7\2\2\u15c8\u15c9\5\u03f4"+
		"\u01fb\2\u15c9\u15ca\7\u0340\2\2\u15ca\u15cc\3\2\2\2\u15cb\u15c8\3\2\2"+
		"\2\u15cb\u15cc\3\2\2\2\u15cc\u15cd\3\2\2\2\u15cd\u15ce\5\u03f4\u01fb\2"+
		"\u15ce\u15d2\7\22\2\2\u15cf\u15d3\7\u032f\2\2\u15d0\u15d3\5\u03f4\u01fb"+
		"\2\u15d1\u15d3\7\u0326\2\2\u15d2\u15cf\3\2\2\2\u15d2\u15d0\3\2\2\2\u15d2"+
		"\u15d1\3\2\2\2\u15d3\u019d\3\2\2\2\u15d4\u15d5\7K\2\2\u15d5\u15d8\7\u0296"+
		"\2\2\u15d6\u15d9\5\u03ba\u01de\2\u15d7\u15d9\5\u03f4\u01fb\2\u15d8\u15d6"+
		"\3\2\2\2\u15d8\u15d7\3\2\2\2\u15d9\u15db\3\2\2\2\u15da\u15dc\5\u01a0\u00d1"+
		"\2\u15db\u15da\3\2\2\2\u15db\u15dc\3\2\2\2\u15dc\u15e0\3\2\2\2\u15dd\u15de"+
		"\7\u00e7\2\2\u15de\u15e1\5\u03f4\u01fb\2\u15df\u15e1\7[\2\2\u15e0\u15dd"+
		"\3\2\2\2\u15e0\u15df\3\2\2\2\u15e0\u15e1\3\2\2\2\u15e1\u019f\3\2\2\2\u15e2"+
		"\u15e9\7\u017b\2\2\u15e3\u15e4\7\u02e2\2\2\u15e4\u15e5\7\u0333\2\2\u15e5"+
		"\u15e7\t\t\2\2\u15e6\u15e8\7\u0347\2\2\u15e7\u15e6\3\2\2\2\u15e7\u15e8"+
		"\3\2\2\2\u15e8\u15ea\3\2\2\2\u15e9\u15e3\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea"+
		"\u15f1\3\2\2\2\u15eb\u15ec\7\u02b7\2\2\u15ec\u15ed\7\u0333\2\2\u15ed\u15ef"+
		"\t\t\2\2\u15ee\u15f0\7\u0347\2\2\u15ef\u15ee\3\2\2\2\u15ef\u15f0\3\2\2"+
		"\2\u15f0\u15f2\3\2\2\2\u15f1\u15eb\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2\u1620"+
		"\3\2\2\2\u15f3\u15f4\7\u0183\2\2\u15f4\u161a\7\u0345\2\2\u15f5\u15f6\7"+
		"\u02e2\2\2\u15f6\u15f7\7\u0333\2\2\u15f7\u15f9\t\t\2\2\u15f8\u15fa\7\u0347"+
		"\2\2\u15f9\u15f8\3\2\2\2\u15f9\u15fa\3\2\2\2\u15fa\u15fc\3\2\2\2\u15fb"+
		"\u15f5\3\2\2\2\u15fb\u15fc\3\2\2\2\u15fc\u1603\3\2\2\2\u15fd\u15fe\7\u0291"+
		"\2\2\u15fe\u15ff\7\u0333\2\2\u15ff\u1601\5\u03c2\u01e2\2\u1600\u1602\7"+
		"\u0347\2\2\u1601\u1600\3\2\2\2\u1601\u1602\3\2\2\2\u1602\u1604\3\2\2\2"+
		"\u1603\u15fd\3\2\2\2\u1603\u1604\3\2\2\2\u1604\u160b\3\2\2\2\u1605\u1606"+
		"\7\u024a\2\2\u1606\u1607\7\u0333\2\2\u1607\u1609\7\u032b\2\2\u1608\u160a"+
		"\7\u0347\2\2\u1609\u1608\3\2\2\2\u1609\u160a\3\2\2\2\u160a\u160c\3\2\2"+
		"\2\u160b\u1605\3\2\2\2\u160b\u160c\3\2\2\2\u160c\u1617\3\2\2\2\u160d\u160e"+
		"\7x\2\2\u160e\u1612\7\22\2\2\u160f\u1613\7\u02cd\2\2\u1610\u1613\7\u032f"+
		"\2\2\u1611\u1613\7\u027f\2\2\u1612\u160f\3\2\2\2\u1612\u1610\3\2\2\2\u1612"+
		"\u1611\3\2\2\2\u1613\u1615\3\2\2\2\u1614\u1616\7\u0347\2\2\u1615\u1614"+
		"\3\2\2\2\u1615\u1616\3\2\2\2\u1616\u1618\3\2\2\2\u1617\u160d\3\2\2\2\u1617"+
		"\u1618\3\2\2\2\u1618\u161b\3\2\2\2\u1619\u161b\7i\2\2\u161a\u15fb\3\2"+
		"\2\2\u161a\u1619\3\2\2\2\u161b\u161c\3\2\2\2\u161c\u161e\7\u0346\2\2\u161d"+
		"\u161f\7\u0347\2\2\u161e\u161d\3\2\2\2\u161e\u161f\3\2\2\2\u161f\u1621"+
		"\3\2\2\2\u1620\u15f3\3\2\2\2\u1620\u1621\3\2\2\2\u1621\u1629\3\2\2\2\u1622"+
		"\u1623\7\u0286\2\2\u1623\u1624\7\u0345\2\2\u1624\u1625\7\u02e2\2\2\u1625"+
		"\u1626\7\u0333\2\2\u1626\u1627\t\t\2\2\u1627\u1628\3\2\2\2\u1628\u162a"+
		"\7\u0346\2\2\u1629\u1622\3\2\2\2\u1629\u162a\3\2\2\2\u162a\u01a1\3\2\2"+
		"\2\u162b\u162c\7\f\2\2\u162c\u162f\7\u0296\2\2\u162d\u1630\5\u03ba\u01de"+
		"\2\u162e\u1630\5\u03f4\u01fb\2\u162f\u162d\3\2\2\2\u162f\u162e\3\2\2\2"+
		"\u1630\u1633\3\2\2\2\u1631\u1634\5\u01a0\u00d1\2\u1632\u1634\5\u01a4\u00d3"+
		"\2\u1633\u1631\3\2\2\2\u1633\u1632\3\2\2\2\u1634\u01a3\3\2\2\2\u1635\u163b"+
		"\7\u02a3\2\2\u1636\u1637\7\u017b\2\2\u1637\u1638\7\u0345\2\2\u1638\u1639"+
		"\5\u01a6\u00d4\2\u1639\u163a\7\u0346\2\2\u163a\u163c\3\2\2\2\u163b\u1636"+
		"\3\2\2\2\u163b\u163c\3\2\2\2\u163c\u164b\3\2\2\2\u163d\u1642\7\u02ac\2"+
		"\2\u163e\u163f\7\u017b\2\2\u163f\u1640\7\u0238\2\2\u1640\u1641\7\u0333"+
		"\2\2\u1641\u1643\t\t\2\2\u1642\u163e\3\2\2\2\u1642\u1643\3\2\2\2\u1643"+
		"\u164b\3\2\2\2\u1644\u1645\7\u025d\2\2\u1645\u1648\7\u015c\2\2\u1646\u1649"+
		"\5\u03f4\u01fb\2\u1647\u1649\7[\2\2\u1648\u1646\3\2\2\2\u1648\u1647\3"+
		"\2\2\2\u1649\u164b\3\2\2\2\u164a\u1635\3\2\2\2\u164a\u163d\3\2\2\2\u164a"+
		"\u1644\3\2\2\2\u164b\u01a5\3\2\2\2\u164c\u164d\7\u024c\2\2\u164d\u164e"+
		"\7\u0333\2\2\u164e\u164f\7\u032b\2\2\u164f\u01a7\3\2\2\2\u1650\u1651\7"+
		"K\2\2\u1651\u1652\7F\2\2\u1652\u1655\5\u03de\u01f0\2\u1653\u1654\7\26"+
		"\2\2\u1654\u1656\5\u03f4\u01fb\2\u1655\u1653\3\2\2\2\u1655\u1656\3\2\2"+
		"\2\u1656\u1657\3\2\2\2\u1657\u1662\7\u0345\2\2\u1658\u165b\5\u03f4\u01fb"+
		"\2\u1659\u165b\7[\2\2\u165a\u1658\3\2\2\2\u165a\u1659\3\2\2\2\u165b\u165c"+
		"\3\2\2\2\u165c\u165d\7\u02d0\2\2\u165d\u165e\7(\2\2\u165e\u1660\t\66\2"+
		"\2\u165f\u1661\7\u0347\2\2\u1660\u165f\3\2\2\2\u1660\u1661\3\2\2\2\u1661"+
		"\u1663\3\2\2\2\u1662\u165a\3\2\2\2\u1663\u1664\3\2\2\2\u1664\u1662\3\2"+
		"\2\2\u1664\u1665\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u1667\7\u0346\2\2\u1667"+
		"\u01a9\3\2\2\2\u1668\u166f\5\u03da\u01ee\2\u1669\u166f\5\u03dc\u01ef\2"+
		"\u166a\u166f\5\u03e2\u01f2\2\u166b\u166f\5\u03e6\u01f4\2\u166c\u166f\5"+
		"\u03ea\u01f6\2\u166d\u166f\5\u03e4\u01f3\2\u166e\u1668\3\2\2\2\u166e\u1669"+
		"\3\2\2\2\u166e\u166a\3\2\2\2\u166e\u166b\3\2\2\2\u166e\u166c\3\2\2\2\u166e"+
		"\u166d\3\2\2\2\u166f\u01ab\3\2\2\2\u1670\u1671\7K\2\2\u1671\u1672\7\u0252"+
		"\2\2\u1672\u1673\7\u0303\2\2\u1673\u1676\5\u03f4\u01fb\2\u1674\u1675\7"+
		"\26\2\2\u1675\u1677\5\u03f4\u01fb\2\u1676\u1674\3\2\2\2\u1676\u1677\3"+
		"\2\2\2\u1677\u1678\3\2\2\2\u1678\u1679\7\u030c\2\2\u1679\u1682\7\u0333"+
		"\2\2\u167a\u1683\7\u00d7\2\2\u167b\u1683\7\u01ea\2\2\u167c\u1683\7\u0313"+
		"\2\2\u167d\u167e\7\u030b\2\2\u167e\u167f\7\u017b\2\2\u167f\u1680\7\u0130"+
		"\2\2\u1680\u1681\7\u01b7\2\2\u1681\u1683\5\u03f4\u01fb\2\u1682\u167a\3"+
		"\2\2\2\u1682\u167b\3\2\2\2\u1682\u167c\3\2\2\2\u1682\u167d\3\2\2\2\u1683"+
		"\u01ad\3\2\2\2\u1684\u1686\5\u0314\u018b\2\u1685\u1684\3\2\2\2\u1685\u1686"+
		"\3\2\2\2\u1686\u1687\3\2\2\2\u1687\u168f\7\u00cb\2\2\u1688\u1689\7\u015d"+
		"\2\2\u1689\u168a\7\u0345\2\2\u168a\u168b\5\u02d8\u016d\2\u168b\u168d\7"+
		"\u0346\2\2\u168c\u168e\7\u00f7\2\2\u168d\u168c\3\2\2\2\u168d\u168e\3\2"+
		"\2\2\u168e\u1690\3\2\2\2\u168f\u1688\3\2\2\2\u168f\u1690\3\2\2\2\u1690"+
		"\u1692\3\2\2\2\u1691\u1693\7\u00a7\2\2\u1692\u1691\3\2\2\2\u1692\u1693"+
		"\3\2\2\2\u1693\u1694\3\2\2\2\u1694\u1696\5\u03c6\u01e4\2\u1695\u1697\5"+
		"\u0388\u01c5\2\u1696\u1695\3\2\2\2\u1696\u1697\3\2\2\2\u1697\u1699\3\2"+
		"\2\2\u1698\u169a\5\u0382\u01c2\2\u1699\u1698\3\2\2\2\u1699\u169a\3\2\2"+
		"\2\u169a\u169b\3\2\2\2\u169b\u169c\7\u030a\2\2\u169c\u169d\5\u034e\u01a8"+
		"\2\u169d\u169e\7\u00e7\2\2\u169e\u16a9\5\u031c\u018f\2\u169f\u16a0\7\u0177"+
		"\2\2\u16a0\u16a3\7\u00be\2\2\u16a1\u16a2\7\r\2\2\u16a2\u16a4\5\u031c\u018f"+
		"\2\u16a3\u16a1\3\2\2\2\u16a3\u16a4\3\2\2\2\u16a4\u16a5\3\2\2\2\u16a5\u16a6"+
		"\7\u015b\2\2\u16a6\u16a8\5\u01b0\u00d9\2\u16a7\u169f\3\2\2\2\u16a8\u16ab"+
		"\3\2\2\2\u16a9\u16a7\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa\u16b9\3\2\2\2\u16ab"+
		"\u16a9\3\2\2\2\u16ac\u16ad\7\u0177\2\2\u16ad\u16ae\7\u00de\2\2\u16ae\u16b1"+
		"\7\u00be\2\2\u16af\u16b0\7(\2\2\u16b0\u16b2\7\u0158\2\2\u16b1\u16af\3"+
		"\2\2\2\u16b1\u16b2\3\2\2\2\u16b2\u16b5\3\2\2\2\u16b3\u16b4\7\r\2\2\u16b4"+
		"\u16b6\5\u031c\u018f\2\u16b5\u16b3\3\2\2\2\u16b5\u16b6\3\2\2\2\u16b6\u16b7"+
		"\3\2\2\2\u16b7\u16b8\7\u015b\2\2\u16b8\u16ba\5\u01b2\u00da\2\u16b9\u16ac"+
		"\3\2\2\2\u16b9\u16ba\3\2\2\2\u16ba\u16c8\3\2\2\2\u16bb\u16bc\7\u0177\2"+
		"\2\u16bc\u16bd\7\u00de\2\2\u16bd\u16be\7\u00be\2\2\u16be\u16bf\7(\2\2"+
		"\u16bf\u16c2\7\u0144\2\2\u16c0\u16c1\7\r\2\2\u16c1\u16c3\5\u031c\u018f"+
		"\2\u16c2\u16c0\3\2\2\2\u16c2\u16c3\3\2\2\2\u16c3\u16c4\3\2\2\2\u16c4\u16c5"+
		"\7\u015b\2\2\u16c5\u16c7\5\u01b0\u00d9\2\u16c6\u16bb\3\2\2\2\u16c7\u16ca"+
		"\3\2\2\2\u16c8\u16c6\3\2\2\2\u16c8\u16c9\3\2\2\2\u16c9\u16cc\3\2\2\2\u16ca"+
		"\u16c8\3\2\2\2\u16cb\u16cd\5\u01c4\u00e3\2\u16cc\u16cb\3\2\2\2\u16cc\u16cd"+
		"\3\2\2\2\u16cd\u16cf\3\2\2\2\u16ce\u16d0\5\u033a\u019e\2\u16cf\u16ce\3"+
		"\2\2\2\u16cf\u16d0\3\2\2\2\u16d0\u16d1\3\2\2\2\u16d1\u16d2\7\u0348\2\2"+
		"\u16d2\u01af\3\2\2\2\u16d3\u16d4\7\u016b\2\2\u16d4\u16d5\7\u013d\2\2\u16d5"+
		"\u16da\5\u0318\u018d\2\u16d6\u16d7\7\u0347\2\2\u16d7\u16d9\5\u0318\u018d"+
		"\2\u16d8\u16d6\3\2\2\2\u16d9\u16dc\3\2\2\2\u16da\u16d8\3\2\2\2\u16da\u16db"+
		"\3\2\2\2\u16db\u16df\3\2\2\2\u16dc\u16da\3\2\2\2\u16dd\u16df\7^\2\2\u16de"+
		"\u16d3\3\2\2\2\u16de\u16dd\3\2\2\2\u16df\u01b1\3\2\2\2\u16e0\u16e5\7\u00a4"+
		"\2\2\u16e1\u16e2\7\u0345\2\2\u16e2\u16e3\5\u03cc\u01e7\2\u16e3\u16e4\7"+
		"\u0346\2\2\u16e4\u16e6\3\2\2\2\u16e5\u16e1\3\2\2\2\u16e5\u16e6\3\2\2\2"+
		"\u16e6\u16ea\3\2\2\2\u16e7\u16eb\5\u0392\u01ca\2\u16e8\u16e9\7[\2\2\u16e9"+
		"\u16eb\7\u0171\2\2\u16ea\u16e7\3\2\2\2\u16ea\u16e8\3\2\2\2\u16eb\u01b3"+
		"\3\2\2\2\u16ec\u16ee\5\u0314\u018b\2\u16ed\u16ec\3\2\2\2\u16ed\u16ee\3"+
		"\2\2\2\u16ee\u16ef\3\2\2\2\u16ef\u16f9\7^\2\2\u16f0\u16f1\7\u015d\2\2"+
		"\u16f1\u16f2\7\u0345\2\2\u16f2\u16f3\5\u02d8\u016d\2\u16f3\u16f5\7\u0346"+
		"\2\2\u16f4\u16f6\7\u00f7\2\2\u16f5\u16f4\3\2\2\2\u16f5\u16f6\3\2\2\2\u16f6"+
		"\u16fa\3\2\2\2\u16f7\u16f8\7\u015d\2\2\u16f8\u16fa\7\u032b\2\2\u16f9\u16f0"+
		"\3\2\2\2\u16f9\u16f7\3\2\2\2\u16f9\u16fa\3\2\2\2\u16fa\u16fc\3\2\2\2\u16fb"+
		"\u16fd\7\u008d\2\2\u16fc\u16fb\3\2\2\2\u16fc\u16fd\3\2\2\2\u16fd\u16fe"+
		"\3\2\2\2\u16fe\u1700\5\u01b6\u00dc\2\u16ff\u1701\5\u0388\u01c5\2\u1700"+
		"\u16ff\3\2\2\2\u1700\u1701\3\2\2\2\u1701\u1703\3\2\2\2\u1702\u1704\5\u01c4"+
		"\u00e3\2\u1703\u1702\3\2\2\2\u1703\u1704\3\2\2\2\u1704\u1707\3\2\2\2\u1705"+
		"\u1706\7\u008d\2\2\u1706\u1708\5\u034e\u01a8\2\u1707\u1705\3\2\2\2\u1707"+
		"\u1708\3\2\2\2\u1708\u1716\3\2\2\2\u1709\u1714\7\u0178\2\2\u170a\u1715"+
		"\5\u031c\u018f\2\u170b\u170c\7M\2\2\u170c\u1712\7\u00e3\2\2\u170d\u170f"+
		"\7\u020f\2\2\u170e\u170d\3\2\2\2\u170e\u170f\3\2\2\2\u170f\u1710\3\2\2"+
		"\2\u1710\u1713\5\u03ce\u01e8\2\u1711\u1713\7\u0326\2\2\u1712\u170e\3\2"+
		"\2\2\u1712\u1711\3\2\2\2\u1713\u1715\3\2\2\2\u1714\u170a\3\2\2\2\u1714"+
		"\u170b\3\2\2\2\u1715\u1717\3\2\2\2\u1716\u1709\3\2\2\2\u1716\u1717\3\2"+
		"\2\2\u1717\u1719\3\2\2\2\u1718\u171a\5\u0332\u019a\2\u1719\u1718\3\2\2"+
		"\2\u1719\u171a\3\2\2\2\u171a\u171c\3\2\2\2\u171b\u171d\5\u033a\u019e\2"+
		"\u171c\u171b\3\2\2\2\u171c\u171d\3\2\2\2\u171d\u171f\3\2\2\2\u171e\u1720"+
		"\7\u0348\2\2\u171f\u171e\3\2\2\2\u171f\u1720\3\2\2\2\u1720\u01b5\3\2\2"+
		"\2\u1721\u1726\5\u03c6\u01e4\2\u1722\u1726\5\u0384\u01c3\2\u1723\u1726"+
		"\5\u025c\u012f\2\u1724\u1726\7\u0326\2\2\u1725\u1721\3\2\2\2\u1725\u1722"+
		"\3\2\2\2\u1725\u1723\3\2\2\2\u1725\u1724\3\2\2\2\u1726\u01b7\3\2\2\2\u1727"+
		"\u1729\5\u0314\u018b\2\u1728\u1727\3\2\2\2\u1728\u1729\3\2\2\2\u1729\u172a"+
		"\3\2\2\2\u172a\u1732\7\u00a4\2\2\u172b\u172c\7\u015d\2\2\u172c\u172d\7"+
		"\u0345\2\2\u172d\u172e\5\u02d8\u016d\2\u172e\u1730\7\u0346\2\2\u172f\u1731"+
		"\7\u00f7\2\2\u1730\u172f\3\2\2\2\u1730\u1731\3\2\2\2\u1731\u1733\3\2\2"+
		"\2\u1732\u172b\3\2\2\2\u1732\u1733\3\2\2\2\u1733\u1735\3\2\2\2\u1734\u1736"+
		"\7\u00a7\2\2\u1735\u1734\3\2\2\2\u1735\u1736\3\2\2\2\u1736\u1739\3\2\2"+
		"\2\u1737\u173a\5\u03c6\u01e4\2\u1738\u173a\5\u025c\u012f\2\u1739\u1737"+
		"\3\2\2\2\u1739\u1738\3\2\2\2\u173a\u173c\3\2\2\2\u173b\u173d\5\u0388\u01c5"+
		"\2\u173c\u173b\3\2\2\2\u173c\u173d\3\2\2\2\u173d\u1742\3\2\2\2\u173e\u173f"+
		"\7\u0345\2\2\u173f\u1740\5\u03cc\u01e7\2\u1740\u1741\7\u0346\2\2\u1741"+
		"\u1743\3\2\2\2\u1742\u173e\3\2\2\2\u1742\u1743\3\2\2\2\u1743\u1745\3\2"+
		"\2\2\u1744\u1746\5\u01c4\u00e3\2\u1745\u1744\3\2\2\2\u1745\u1746\3\2\2"+
		"\2\u1746\u1747\3\2\2\2\u1747\u1749\5\u01ba\u00de\2\u1748\u174a\5\u0332"+
		"\u019a\2\u1749\u1748\3\2\2\2\u1749\u174a\3\2\2\2\u174a\u174c\3\2\2\2\u174b"+
		"\u174d\5\u033a\u019e\2\u174c\u174b\3\2\2\2\u174c\u174d\3\2\2\2\u174d\u174f"+
		"\3\2\2\2\u174e\u1750\7\u0348\2\2\u174f\u174e\3\2\2\2\u174f\u1750\3\2\2"+
		"\2\u1750\u01b9\3\2\2\2\u1751\u1757\5\u0392\u01ca\2\u1752\u1757\5\u036c"+
		"\u01b7\2\u1753\u1757\5\u0278\u013d\2\u1754\u1755\7[\2\2\u1755\u1757\7"+
		"\u0171\2\2\u1756\u1751\3\2\2\2\u1756\u1752\3\2\2\2\u1756\u1753\3\2\2\2"+
		"\u1756\u1754\3\2\2\2\u1757\u01bb\3\2\2\2\u1758\u175a\7\u0345\2\2\u1759"+
		"\u1758\3\2\2\2\u1759\u175a\3\2\2\2\u175a\u175b\3\2\2\2\u175b\u1760\7\u02a4"+
		"\2\2\u175c\u1761\7\b\2\2\u175d\u1761\7d\2\2\u175e\u1761\5\u032a\u0196"+
		"\2\u175f\u1761\7\u034a\2\2\u1760\u175c\3\2\2\2\u1760\u175d\3\2\2\2\u1760"+
		"\u175e\3\2\2\2\u1760\u175f\3\2\2\2\u1761\u176a\3\2\2\2\u1762\u1763\7\u0326"+
		"\2\2\u1763\u1764\7\u0333\2\2\u1764\u1766\5\u02d8\u016d\2\u1765\u1767\7"+
		"\u0347\2\2\u1766\u1765\3\2\2\2\u1766\u1767\3\2\2\2\u1767\u1769\3\2\2\2"+
		"\u1768\u1762\3\2\2\2\u1769\u176c\3\2\2\2\u176a\u1768\3\2\2\2\u176a\u176b"+
		"\3\2\2\2\u176b\u176d\3\2\2\2\u176c\u176a\3\2\2\2\u176d\u176e\7\u008d\2"+
		"\2\u176e\u1774\5\u03ba\u01de\2\u176f\u1770\7\u00a7\2\2\u1770\u1771\5\u03f4"+
		"\u01fb\2\u1771\u1772\7\u0178\2\2\u1772\u1773\5\u031c\u018f\2\u1773\u1775"+
		"\3\2\2\2\u1774\u176f\3\2\2\2\u1774\u1775\3\2\2\2\u1775\u1777\3\2\2\2\u1776"+
		"\u1778\7\u0346\2\2\u1777\u1776\3\2\2\2\u1777\u1778\3\2\2\2\u1778\u01bd"+
		"\3\2\2\2\u1779\u177b\5\u0314\u018b\2\u177a\u1779\3\2\2\2\u177a\u177b\3"+
		"\2\2\2\u177b\u177c\3\2\2\2\u177c\u177e\5\u0324\u0193\2\u177d\u177f\5\u0330"+
		"\u0199\2\u177e\u177d\3\2\2\2\u177e\u177f\3\2\2\2\u177f\u1781\3\2\2\2\u1780"+
		"\u1782\5\u0332\u019a\2\u1781\u1780\3\2\2\2\u1781\u1782\3\2\2\2\u1782\u1784"+
		"\3\2\2\2\u1783\u1785\5\u033a\u019e\2\u1784\u1783\3\2\2\2\u1784\u1785\3"+
		"\2\2\2\u1785\u1787\3\2\2\2\u1786\u1788\7\u0348\2\2\u1787\u1786\3\2\2\2"+
		"\u1787\u1788\3\2\2\2\u1788\u01bf\3\2\2\2\u1789\u178c\7\u0326\2\2\u178a"+
		"\u178c\5\u03f0\u01f9\2\u178b\u1789\3\2\2\2\u178b\u178a\3\2\2\2\u178c\u01c1"+
		"\3\2\2\2\u178d\u178f\5\u0314\u018b\2\u178e\u178d\3\2\2\2\u178e\u178f\3"+
		"\2\2\2\u178f\u1790\3\2\2\2\u1790\u1798\7\u016b\2\2\u1791\u1792\7\u015d"+
		"\2\2\u1792\u1793\7\u0345\2\2\u1793\u1794\5\u02d8\u016d\2\u1794\u1796\7"+
		"\u0346\2\2\u1795\u1797\7\u00f7\2\2\u1796\u1795\3\2\2\2\u1796\u1797\3\2"+
		"\2\2\u1797\u1799\3\2\2\2\u1798\u1791\3\2\2\2\u1798\u1799\3\2\2\2\u1799"+
		"\u179c\3\2\2\2\u179a\u179d\5\u03c6\u01e4\2\u179b\u179d\5\u025c\u012f\2"+
		"\u179c\u179a\3\2\2\2\u179c\u179b\3\2\2\2\u179d\u179f\3\2\2\2\u179e\u17a0"+
		"\5\u0386\u01c4\2\u179f\u179e\3\2\2\2\u179f\u17a0\3\2\2\2\u17a0\u17a1\3"+
		"\2\2\2\u17a1\u17a2\7\u013d\2\2\u17a2\u17a7\5\u0318\u018d\2\u17a3\u17a4"+
		"\7\u0347\2\2\u17a4\u17a6\5\u0318\u018d\2\u17a5\u17a3\3\2\2\2\u17a6\u17a9"+
		"\3\2\2\2\u17a7\u17a5\3\2\2\2\u17a7\u17a8\3\2\2\2\u17a8\u17ab\3\2\2\2\u17a9"+
		"\u17a7\3\2\2\2\u17aa\u17ac\5\u01c4\u00e3\2\u17ab\u17aa\3\2\2\2\u17ab\u17ac"+
		"\3\2\2\2\u17ac\u17af\3\2\2\2\u17ad\u17ae\7\u008d\2\2\u17ae\u17b0\5\u034e"+
		"\u01a8\2\u17af\u17ad\3\2\2\2\u17af\u17b0\3\2\2\2\u17b0\u17be\3\2\2\2\u17b1"+
		"\u17bc\7\u0178\2\2\u17b2\u17bd\5\u031a\u018e\2\u17b3\u17b4\7M\2\2\u17b4"+
		"\u17ba\7\u00e3\2\2\u17b5\u17b7\7\u020f\2\2\u17b6\u17b5\3\2\2\2\u17b6\u17b7"+
		"\3\2\2\2\u17b7\u17b8\3\2\2\2\u17b8\u17bb\5\u03ce\u01e8\2\u17b9\u17bb\7"+
		"\u0326\2\2\u17ba\u17b6\3\2\2\2\u17ba\u17b9\3\2\2\2\u17bb\u17bd\3\2\2\2"+
		"\u17bc\u17b2\3\2\2\2\u17bc\u17b3\3\2\2\2\u17bd\u17bf\3\2\2\2\u17be\u17b1"+
		"\3\2\2\2\u17be\u17bf\3\2\2\2\u17bf\u17c1\3\2\2\2\u17c0\u17c2\5\u0332\u019a"+
		"\2\u17c1\u17c0\3\2\2\2\u17c1\u17c2\3\2\2\2\u17c2\u17c4\3\2\2\2\u17c3\u17c5"+
		"\5\u033a\u019e\2\u17c4\u17c3\3\2\2\2\u17c4\u17c5\3\2\2\2\u17c5\u17c7\3"+
		"\2\2\2\u17c6\u17c8\7\u0348\2\2\u17c7\u17c6\3\2\2\2\u17c7\u17c8\3\2\2\2"+
		"\u17c8\u01c3\3\2\2\2\u17c9\u17ca\7\u027d\2\2\u17ca\u17cf\5\u01c6\u00e4"+
		"\2\u17cb\u17cc\7\u0347\2\2\u17cc\u17ce\5\u01c6\u00e4\2\u17cd\u17cb\3\2"+
		"\2\2\u17ce\u17d1\3\2\2\2\u17cf\u17cd\3\2\2\2\u17cf\u17d0\3\2\2\2\u17d0"+
		"\u17dd\3\2\2\2\u17d1\u17cf\3\2\2\2\u17d2\u17d5\7\u00a7\2\2\u17d3\u17d6"+
		"\7\u0326\2\2\u17d4\u17d6\5\u03bc\u01df\2\u17d5\u17d3\3\2\2\2\u17d5\u17d4"+
		"\3\2\2\2\u17d6\u17db\3\2\2\2\u17d7\u17d8\7\u0345\2\2\u17d8\u17d9\5\u03cc"+
		"\u01e7\2\u17d9\u17da\7\u0346\2\2\u17da\u17dc\3\2";
	private static final String _serializedATNSegment3 =
		"\2\2\u17db\u17d7\3\2\2\2\u17db\u17dc\3\2\2\2\u17dc\u17de\3\2\2\2\u17dd"+
		"\u17d2\3\2\2\2\u17dd\u17de\3\2\2\2\u17de\u01c5\3\2\2\2\u17df\u17e2\5\u01c8"+
		"\u00e5\2\u17e0\u17e2\5\u02d8\u016d\2\u17e1\u17df\3\2\2\2\u17e1\u17e0\3"+
		"\2\2\2\u17e2\u17e4\3\2\2\2\u17e3\u17e5\5\u0380\u01c1\2\u17e4\u17e3\3\2"+
		"\2\2\u17e4\u17e5\3\2\2\2\u17e5\u01c7\3\2\2\2\u17e6\u17ea\7\u01d9\2\2\u17e7"+
		"\u17ea\7\u0224\2\2\u17e8\u17ea\5\u03bc\u01df\2\u17e9\u17e6\3\2\2\2\u17e9"+
		"\u17e7\3\2\2\2\u17e9\u17e8\3\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u17ee\7\u0340"+
		"\2\2\u17ec\u17ef\7\u034a\2\2\u17ed\u17ef\5\u03f4\u01fb\2\u17ee\u17ec\3"+
		"\2\2\2\u17ee\u17ed\3\2\2\2\u17ef\u17f2\3\2\2\2\u17f0\u17f2\7\u031c\2\2"+
		"\u17f1\u17e9\3\2\2\2\u17f1\u17f0\3\2\2\2\u17f2\u01c9\3\2\2\2\u17f3\u17f4"+
		"\7K\2\2\u17f4\u17f5\7V\2\2\u17f5\u17f9\5\u03f4\u01fb\2\u17f6\u17f7\7@"+
		"\2\2\u17f7\u17f8\7\u0333\2\2\u17f8\u17fa\t\67\2\2\u17f9\u17f6\3\2\2\2"+
		"\u17f9\u17fa\3\2\2\2\u17fa\u1807\3\2\2\2\u17fb\u17fd\7\u00e7\2\2\u17fc"+
		"\u17fe\7\u0102\2\2\u17fd\u17fc\3\2\2\2\u17fd\u17fe\3\2\2\2\u17fe\u17ff"+
		"\3\2\2\2\u17ff\u1804\5\u03ae\u01d8\2\u1800\u1801\7\u0347\2\2\u1801\u1803"+
		"\5\u03ae\u01d8\2\u1802\u1800\3\2\2\2\u1803\u1806\3\2\2\2\u1804\u1802\3"+
		"\2\2\2\u1804\u1805\3\2\2\2\u1805\u1808\3\2\2\2\u1806\u1804\3\2\2\2\u1807"+
		"\u17fb\3\2\2\2\u1807\u1808\3\2\2\2\u1808\u1813\3\2\2\2\u1809\u180a\7\u00bd"+
		"\2\2\u180a\u180b\7\u00e7\2\2\u180b\u1810\5\u03ae\u01d8\2\u180c\u180d\7"+
		"\u0347\2\2\u180d\u180f\5\u03ae\u01d8\2\u180e\u180c\3\2\2\2\u180f\u1812"+
		"\3\2\2\2\u1810\u180e\3\2\2\2\u1810\u1811\3\2\2\2\u1811\u1814\3\2\2\2\u1812"+
		"\u1810\3\2\2\2\u1813\u1809\3\2\2\2\u1813\u1814\3\2\2\2\u1814\u1817\3\2"+
		"\2\2\u1815\u1816\79\2\2\u1816\u1818\5\u03f4\u01fb\2\u1817\u1815\3\2\2"+
		"\2\u1817\u1818\3\2\2\2\u1818\u1822\3\2\2\2\u1819\u181a\7\u017b\2\2\u181a"+
		"\u181f\5\u03aa\u01d6\2\u181b\u181c\7\u0347\2\2\u181c\u181e\5\u03aa\u01d6"+
		"\2\u181d\u181b\3\2\2\2\u181e\u1821\3\2\2\2\u181f\u181d\3\2\2\2\u181f\u1820"+
		"\3\2\2\2\u1820\u1823\3\2\2\2\u1821\u181f\3\2\2\2\u1822\u1819\3\2\2\2\u1822"+
		"\u1823\3\2\2\2\u1823\u01cb\3\2\2\2\u1824\u1826\7K\2\2\u1825\u1827\7\u0167"+
		"\2\2\u1826\u1825\3\2\2\2\u1826\u1827\3\2\2\2\u1827\u1829\3\2\2\2\u1828"+
		"\u182a\5\u03d2\u01ea\2\u1829\u1828\3\2\2\2\u1829\u182a\3\2\2\2\u182a\u182b"+
		"\3\2\2\2\u182b\u182c\7\u00a0\2\2\u182c\u182d\5\u03f4\u01fb\2\u182d\u182e"+
		"\7\u00e7\2\2\u182e\u182f\5\u0366\u01b4\2\u182f\u1830\7\u0345\2\2\u1830"+
		"\u1831\5\u03ca\u01e6\2\u1831\u1837\7\u0346\2\2\u1832\u1833\7\u009e\2\2"+
		"\u1833\u1834\7\u0345\2\2\u1834\u1835\5\u03cc\u01e7\2\u1835\u1836\7\u0346"+
		"\2\2\u1836\u1838\3\2\2\2\u1837\u1832\3\2\2\2\u1837\u1838\3\2\2\2\u1838"+
		"\u183b\3\2\2\2\u1839\u183a\7\u0178\2\2\u183a\u183c\5\u031c\u018f\2\u183b"+
		"\u1839\3\2\2\2\u183b\u183c\3\2\2\2\u183c\u183e\3\2\2\2\u183d\u183f\5\u02c8"+
		"\u0165\2\u183e\u183d\3\2\2\2\u183e\u183f\3\2\2\2\u183f\u1842\3\2\2\2\u1840"+
		"\u1841\7\u00e7\2\2\u1841\u1843\5\u03f4\u01fb\2\u1842\u1840\3\2\2\2\u1842"+
		"\u1843\3\2\2\2\u1843\u1845\3\2\2\2\u1844\u1846\7\u0348\2\2\u1845\u1844"+
		"\3\2\2\2\u1845\u1846\3\2\2\2\u1846\u01cd\3\2\2\2\u1847\u184a\7K\2\2\u1848"+
		"\u1849\7\u00ef\2\2\u1849\u184b\7\f\2\2\u184a\u1848\3\2\2\2\u184a\u184b"+
		"\3\2\2\2\u184b\u184e\3\2\2\2\u184c\u184e\7\f\2\2\u184d\u1847\3\2\2\2\u184d"+
		"\u184c\3\2\2\2\u184e\u184f\3\2\2\2\u184f\u1850\t8\2\2\u1850\u1853\5\u03c0"+
		"\u01e1\2\u1851\u1852\7\u0348\2\2\u1852\u1854\7\u032b\2\2\u1853\u1851\3"+
		"\2\2\2\u1853\u1854\3\2\2\2\u1854\u1863\3\2\2\2\u1855\u1857\7\u0345\2\2"+
		"\u1856\u1855\3\2\2\2\u1856\u1857\3\2\2\2\u1857\u1858\3\2\2\2\u1858\u185d"+
		"\5\u01e4\u00f3\2\u1859\u185a\7\u0347\2\2\u185a\u185c\5\u01e4\u00f3\2\u185b"+
		"\u1859\3\2\2\2\u185c\u185f\3\2\2\2\u185d\u185b\3\2\2\2\u185d\u185e\3\2"+
		"\2\2\u185e\u1861\3\2\2\2\u185f\u185d\3\2\2\2\u1860\u1862\7\u0346\2\2\u1861"+
		"\u1860\3\2\2\2\u1861\u1862\3\2\2\2\u1862\u1864\3\2\2\2\u1863\u1856\3\2"+
		"\2\2\u1863\u1864\3\2\2\2\u1864\u186e\3\2\2\2\u1865\u1866\7\u017b\2\2\u1866"+
		"\u186b\5\u01e6\u00f4\2\u1867\u1868\7\u0347\2\2\u1868\u186a\5\u01e6\u00f4"+
		"\2\u1869\u1867\3\2\2\2\u186a\u186d\3\2\2\2\u186b\u1869\3\2\2\2\u186b\u186c"+
		"\3\2\2\2\u186c\u186f\3\2\2\2\u186d\u186b\3\2\2\2\u186e\u1865\3\2\2\2\u186e"+
		"\u186f\3\2\2\2\u186f\u1872\3\2\2\2\u1870\u1871\7\u0087\2\2\u1871\u1873"+
		"\7\u0114\2\2\u1872\u1870\3\2\2\2\u1872\u1873\3\2\2\2\u1873\u1874\3\2\2"+
		"\2\u1874\u1875\7\22\2\2\u1875\u1876\5\6\4\2\u1876\u01cf\3\2\2\2\u1877"+
		"\u187a\5\u01d2\u00ea\2\u1878\u187a\5\u01d8\u00ed\2\u1879\u1877\3\2\2\2"+
		"\u1879\u1878\3\2\2\2\u187a\u01d1\3\2\2\2\u187b\u187e\7K\2\2\u187c\u187d"+
		"\7\u00ef\2\2\u187d\u187f\7\f\2\2\u187e\u187c\3\2\2\2\u187e\u187f\3\2\2"+
		"\2\u187f\u1882\3\2\2\2\u1880\u1882\7\f\2\2\u1881\u187b\3\2\2\2\u1881\u1880"+
		"\3\2\2\2\u1882\u1883\3\2\2\2\u1883\u1884\7\u0162\2\2\u1884\u1885\5\u03be"+
		"\u01e0\2\u1885\u1886\7\u00e7\2\2\u1886\u1890\5\u03bc\u01df\2\u1887\u1888"+
		"\7\u017b\2\2\u1888\u188d\5\u01d4\u00eb\2\u1889\u188a\7\u0347\2\2\u188a"+
		"\u188c\5\u01d4\u00eb\2\u188b\u1889\3\2\2\2\u188c\u188f\3\2\2\2\u188d\u188b"+
		"\3\2\2\2\u188d\u188e\3\2\2\2\u188e\u1891\3\2\2\2\u188f\u188d\3\2\2\2\u1890"+
		"\u1887\3\2\2\2\u1890\u1891\3\2\2\2\u1891\u1896\3\2\2\2\u1892\u1897\7\u0087"+
		"\2\2\u1893\u1897\7\u018a\2\2\u1894\u1895\7\u00a5\2\2\u1895\u1897\7\u00e3"+
		"\2\2\u1896\u1892\3\2\2\2\u1896\u1893\3\2\2\2\u1896\u1894\3\2\2\2\u1897"+
		"\u1898\3\2\2\2\u1898\u189d\5\u01d6\u00ec\2\u1899\u189a\7\u0347\2\2\u189a"+
		"\u189c\5\u01d6\u00ec\2\u189b\u1899\3\2\2\2\u189c\u189f\3\2\2\2\u189d\u189b"+
		"\3\2\2\2\u189d\u189e\3\2\2\2\u189e\u18a2\3\2\2\2\u189f\u189d\3\2\2\2\u18a0"+
		"\u18a1\7\u017b\2\2\u18a1\u18a3\7\20\2\2\u18a2\u18a0\3\2\2\2\u18a2\u18a3"+
		"\3\2\2\2\u18a3\u18a7\3\2\2\2\u18a4\u18a5\7\u00de\2\2\u18a5\u18a6\7\u0087"+
		"\2\2\u18a6\u18a8\7\u0114\2\2\u18a7\u18a4\3\2\2\2\u18a7\u18a8\3\2\2\2\u18a8"+
		"\u18a9\3\2\2\2\u18a9\u18aa\7\22\2\2\u18aa\u18ab\5\6\4\2\u18ab\u01d3\3"+
		"\2\2\2\u18ac\u18af\7\u01ee\2\2\u18ad\u18af\5\u02ae\u0158\2\u18ae\u18ac"+
		"\3\2\2\2\u18ae\u18ad\3\2\2\2\u18af\u01d5\3\2\2\2\u18b0\u18b1\t9\2\2\u18b1"+
		"\u01d7\3\2\2\2\u18b2\u18b5\7K\2\2\u18b3\u18b4\7\u00ef\2\2\u18b4\u18b6"+
		"\7\f\2\2\u18b5\u18b3\3\2\2\2\u18b5\u18b6\3\2\2\2\u18b6\u18b9\3\2\2\2\u18b7"+
		"\u18b9\7\f\2\2\u18b8\u18b2\3\2\2\2\u18b8\u18b7\3\2\2\2\u18b9\u18ba\3\2"+
		"\2\2\u18ba\u18bb\7\u0162\2\2\u18bb\u18bc\5\u03f6\u01fc\2\u18bc\u18c0\7"+
		"\u00e7\2\2\u18bd\u18be\7\b\2\2\u18be\u18c1\7\u0137\2\2\u18bf\u18c1\7V"+
		"\2\2\u18c0\u18bd\3\2\2\2\u18c0\u18bf\3\2\2\2\u18c1\u18cb\3\2\2\2\u18c2"+
		"\u18c3\7\u017b\2\2\u18c3\u18c8\5\u01d4\u00eb\2\u18c4\u18c5\7\u0347\2\2"+
		"\u18c5\u18c7\5\u01d4\u00eb\2\u18c6\u18c4\3\2\2\2\u18c7\u18ca\3\2\2\2\u18c8"+
		"\u18c6\3\2\2\2\u18c8\u18c9\3\2\2\2\u18c9\u18cc\3\2\2\2\u18ca\u18c8\3\2"+
		"\2\2\u18cb\u18c2\3\2\2\2\u18cb\u18cc\3\2\2\2\u18cc\u18cd\3\2\2\2\u18cd"+
		"\u18ce\t:\2\2\u18ce\u18d3\5\u01da\u00ee\2\u18cf\u18d0\7\u0347\2\2\u18d0"+
		"\u18d2\5\u01d6\u00ec\2\u18d1\u18cf\3\2\2\2\u18d2\u18d5\3\2\2\2\u18d3\u18d1"+
		"\3\2\2\2\u18d3\u18d4\3\2\2\2\u18d4\u18d6\3\2\2\2\u18d5\u18d3\3\2\2\2\u18d6"+
		"\u18d7\7\22\2\2\u18d7\u18d8\5\6\4\2\u18d8\u01d9\3\2\2\2\u18d9\u18da\5"+
		"\u03f6\u01fc\2\u18da\u01db\3\2\2\2\u18db\u18de\7K\2\2\u18dc\u18dd\7\u00ef"+
		"\2\2\u18dd\u18df\7\f\2\2\u18de\u18dc\3\2\2\2\u18de\u18df\3\2\2\2\u18df"+
		"\u18e2\3\2\2\2\u18e0\u18e2\7\f\2\2\u18e1\u18db\3\2\2\2\u18e1\u18e0\3\2"+
		"\2\2\u18e2\u18e3\3\2\2\2\u18e3\u18e4\7\u008f\2\2\u18e4\u18f2\5\u03c0\u01e1"+
		"\2\u18e5\u18e6\7\u0345\2\2\u18e6\u18eb\5\u01e4\u00f3\2\u18e7\u18e8\7\u0347"+
		"\2\2\u18e8\u18ea\5\u01e4\u00f3\2\u18e9\u18e7\3\2\2\2\u18ea\u18ed\3\2\2"+
		"\2\u18eb\u18e9\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec\u18ee\3\2\2\2\u18ed\u18eb"+
		"\3\2\2\2\u18ee\u18ef\7\u0346\2\2\u18ef\u18f3\3\2\2\2\u18f0\u18f1\7\u0345"+
		"\2\2\u18f1\u18f3\7\u0346\2\2\u18f2\u18e5\3\2\2\2\u18f2\u18f0\3\2\2\2\u18f3"+
		"\u18f7\3\2\2\2\u18f4\u18f8\5\u01de\u00f0\2\u18f5\u18f8\5\u01e0\u00f1\2"+
		"\u18f6\u18f8\5\u01e2\u00f2\2\u18f7\u18f4\3\2\2\2\u18f7\u18f5\3\2\2\2\u18f7"+
		"\u18f6\3\2\2\2\u18f8\u18fa\3\2\2\2\u18f9\u18fb\7\u0348\2\2\u18fa\u18f9"+
		"\3\2\2\2\u18fa\u18fb\3\2\2\2\u18fb\u01dd\3\2\2\2\u18fc\u18fd\7\u011d\2"+
		"\2\u18fd\u1907\7\u0155\2\2\u18fe\u18ff\7\u017b\2\2\u18ff\u1904\5\u01e8"+
		"\u00f5\2\u1900\u1901\7\u0347\2\2\u1901\u1903\5\u01e8\u00f5\2\u1902\u1900"+
		"\3\2\2\2\u1903\u1906\3\2\2\2\u1904\u1902\3\2\2\2\u1904\u1905\3\2\2\2\u1905"+
		"\u1908\3\2\2\2\u1906\u1904\3\2\2\2\u1907\u18fe\3\2\2\2\u1907\u1908\3\2"+
		"\2\2\u1908\u190a\3\2\2\2\u1909\u190b\7\22\2\2\u190a\u1909\3\2\2\2\u190a"+
		"\u190b\3\2\2\2\u190b\u190c\3\2\2\2\u190c\u1912\7\u011c\2\2\u190d\u190e"+
		"\7\u0345\2\2\u190e\u190f\5\u01be\u00e0\2\u190f\u1910\7\u0346\2\2\u1910"+
		"\u1913\3\2\2\2\u1911\u1913\5\u01be\u00e0\2\u1912\u190d\3\2\2\2\u1912\u1911"+
		"\3\2\2\2\u1913\u01df\3\2\2\2\u1914\u1915\7\u011d\2\2\u1915\u1916\7\u0326"+
		"\2\2\u1916\u1920\5\u02b2\u015a\2\u1917\u1918\7\u017b\2\2\u1918\u191d\5"+
		"\u01e8\u00f5\2\u1919\u191a\7\u0347\2\2\u191a\u191c\5\u01e8\u00f5\2\u191b"+
		"\u1919\3\2\2\2\u191c\u191f\3\2\2\2\u191d\u191b\3\2\2\2\u191d\u191e\3\2"+
		"\2\2\u191e\u1921\3\2\2\2\u191f\u191d\3\2\2\2\u1920\u1917\3\2\2\2\u1920"+
		"\u1921\3\2\2\2\u1921\u1923\3\2\2\2\u1922\u1924\7\22\2\2\u1923\u1922\3"+
		"\2\2\2\u1923\u1924\3\2\2\2\u1924\u1925\3\2\2\2\u1925\u1929\7\36\2\2\u1926"+
		"\u1928\5\b\5\2\u1927\u1926\3\2\2\2\u1928\u192b\3\2\2\2\u1929\u1927\3\2"+
		"\2\2\u1929\u192a\3\2\2\2\u192a\u192c\3\2\2\2\u192b\u1929\3\2\2\2\u192c"+
		"\u192e\7\u011c\2\2\u192d\u192f\7\u0348\2\2\u192e\u192d\3\2\2\2\u192e\u192f"+
		"\3\2\2\2\u192f\u1930\3\2\2\2\u1930\u1932\7n\2\2\u1931\u1933\7\u0348\2"+
		"\2\u1932\u1931\3\2\2\2\u1932\u1933\3\2\2\2\u1933\u01e1\3\2\2\2\u1934\u1935"+
		"\7\u011d\2\2\u1935\u193f\5\u03ec\u01f7\2\u1936\u1937\7\u017b\2\2\u1937"+
		"\u193c\5\u01e8\u00f5\2\u1938\u1939\7\u0347\2\2\u1939\u193b\5\u01e8\u00f5"+
		"\2\u193a\u1938\3\2\2\2\u193b\u193e\3\2\2\2\u193c\u193a\3\2\2\2\u193c\u193d"+
		"\3\2\2\2\u193d\u1940\3\2\2\2\u193e\u193c\3\2\2\2\u193f\u1936\3\2\2\2\u193f"+
		"\u1940\3\2\2\2\u1940\u1942\3\2\2\2\u1941\u1943\7\22\2\2\u1942\u1941\3"+
		"\2\2\2\u1942\u1943\3\2\2\2\u1943\u1944\3\2\2\2\u1944\u1948\7\36\2\2\u1945"+
		"\u1947\5\b\5\2\u1946\u1945\3\2\2\2\u1947\u194a\3\2\2\2\u1948\u1946\3\2"+
		"\2\2\u1948\u1949\3\2\2\2\u1949\u194b\3\2\2\2\u194a\u1948\3\2\2\2\u194b"+
		"\u194c\7\u011c\2\2\u194c\u194e\5\u02d8\u016d\2\u194d\u194f\7\u0348\2\2"+
		"\u194e\u194d\3\2\2\2\u194e\u194f\3\2\2\2\u194f\u1950\3\2\2\2\u1950\u1951"+
		"\7n\2\2\u1951\u01e3\3\2\2\2\u1952\u1956\7\u0326\2\2\u1953\u1954\5\u03f4"+
		"\u01fb\2\u1954\u1955\7\u0340\2\2\u1955\u1957\3\2\2\2\u1956\u1953\3\2\2"+
		"\2\u1956\u1957\3\2\2\2\u1957\u1959\3\2\2\2\u1958\u195a\7\22\2\2\u1959"+
		"\u1958\3\2\2\2\u1959\u195a\3\2\2\2\u195a\u195b\3\2\2\2\u195b\u195d\5\u03ec"+
		"\u01f7\2\u195c\u195e\7\u0172\2\2\u195d\u195c\3\2\2\2\u195d\u195e\3\2\2"+
		"\2\u195e\u1961\3\2\2\2\u195f\u1960\7\u0333\2\2\u1960\u1962\5\u03ee\u01f8"+
		"\2\u1961\u195f\3\2\2\2\u1961\u1962\3\2\2\2\u1962\u1964\3\2\2\2\u1963\u1965"+
		"\t;\2\2\u1964\u1963\3\2\2\2\u1964\u1965\3\2\2\2\u1965\u01e5\3\2\2\2\u1966"+
		"\u196a\7\u01ee\2\2\u1967\u196a\7\u02a5\2\2\u1968\u196a\5\u02ae\u0158\2"+
		"\u1969\u1966\3\2\2\2\u1969\u1967\3\2\2\2\u1969\u1968\3\2\2\2\u196a\u01e7"+
		"\3\2\2\2\u196b\u1978\7\u01ee\2\2\u196c\u1978\7\u02c0\2\2\u196d\u196e\7"+
		"\u011d\2\2\u196e\u196f\7\u00e1\2\2\u196f\u1970\7\u00e7\2\2\u1970\u1971"+
		"\7\u00e1\2\2\u1971\u1978\7\u0222\2\2\u1972\u1973\7*\2\2\u1973\u1974\7"+
		"\u00e7\2\2\u1974\u1975\7\u00e1\2\2\u1975\u1978\7\u0222\2\2\u1976\u1978"+
		"\5\u02ae\u0158\2\u1977\u196b\3\2\2\2\u1977\u196c\3\2\2\2\u1977\u196d\3"+
		"\2\2\2\u1977\u1972\3\2\2\2\u1977\u1976\3\2\2\2\u1978\u01e9\3\2\2\2\u1979"+
		"\u197a\7K\2\2\u197a\u197b\7\u014a\2\2\u197b\u197c\5\u03f4\u01fb\2\u197c"+
		"\u197d\7\u00e7\2\2\u197d\u197e\5\u0366\u01b4\2\u197e\u197f\7\u0345\2\2"+
		"\u197f\u1980\5\u03cc\u01e7\2\u1980\u1993\7\u0346\2\2\u1981\u1987\7\u017b"+
		"\2\2\u1982\u1988\7\u020a\2\2\u1983\u1984\7\u02bf\2\2\u1984\u1985\7\u032b"+
		"\2\2\u1985\u1988\t<\2\2\u1986\u1988\7\u02e1\2\2\u1987\u1982\3\2\2\2\u1987"+
		"\u1983\3\2\2\2\u1987\u1986\3\2\2\2\u1988\u198b\3\2\2\2\u1989\u198a\7\u0347"+
		"\2\2\u198a\u198c\7\u026c\2\2\u198b\u1989\3\2\2\2\u198b\u198c\3\2\2\2\u198c"+
		"\u1991\3\2\2\2\u198d\u198e\7\u0347\2\2\u198e\u198f\7\u0220\2\2\u198f\u1990"+
		"\7\u0333\2\2\u1990\u1992\5\u03d0\u01e9\2\u1991\u198d\3\2\2\2\u1991\u1992"+
		"\3\2\2\2\u1992\u1994\3\2\2\2\u1993\u1981\3\2\2\2\u1993\u1994\3\2\2\2\u1994"+
		"\u1996\3\2\2\2\u1995\u1997\7\u0348\2\2\u1996\u1995\3\2\2\2\u1996\u1997"+
		"\3\2\2\2\u1997\u01eb\3\2\2\2\u1998\u199a\7\u016b\2\2\u1999\u199b\t=\2"+
		"\2\u199a\u1999\3\2\2\2\u199a\u199b\3\2\2\2\u199b\u199c\3\2\2\2\u199c\u199d"+
		"\7\u014a\2\2\u199d\u199f\5\u03ba\u01de\2\u199e\u19a0\5\u03f4\u01fb\2\u199f"+
		"\u199e\3\2\2\2\u199f\u19a0\3\2\2\2\u19a0\u19a4\3\2\2\2\u19a1\u19a2\7\u030a"+
		"\2\2\u19a2\u19a3\7\u032b\2\2\u19a3\u19a5\7\u0171\2\2\u19a4\u19a1\3\2\2"+
		"\2\u19a4\u19a5\3\2\2\2\u19a5\u01ed\3\2\2\2\u19a6\u19a7\7K\2\2\u19a7\u19a8"+
		"\7\u0155\2\2\u19a8\u19a9\5\u03bc\u01df\2\u19a9\u19aa\7\u0345\2\2\u19aa"+
		"\u19ac\5\u02b8\u015d\2\u19ab\u19ad\7\u0347\2\2\u19ac\u19ab\3\2\2\2\u19ac"+
		"\u19ad\3\2\2\2\u19ad\u19ae\3\2\2\2\u19ae\u19b1\7\u0346\2\2\u19af\u19b0"+
		"\7\u023b\2\2\u19b0\u19b2\5\u03f6\u01fc\2\u19b1\u19af\3\2\2\2\u19b1\u19b2"+
		"\3\2\2\2\u19b2\u19b6\3\2\2\2\u19b3\u19b5\5\u01f0\u00f9\2\u19b4\u19b3\3"+
		"\2\2\2\u19b5\u19b8\3\2\2\2\u19b6\u19b4\3\2\2\2\u19b6\u19b7\3\2\2\2\u19b7"+
		"\u19bc\3\2\2\2\u19b8\u19b6\3\2\2\2\u19b9\u19ba\7\u00e7\2\2\u19ba\u19bd"+
		"\5\u03f4\u01fb\2\u19bb\u19bd\7[\2\2\u19bc\u19b9\3\2\2\2\u19bc\u19bb\3"+
		"\2\2\2\u19bc\u19bd\3\2\2\2\u19bd\u19c1\3\2\2\2\u19be\u19bf\7\u02f4\2\2"+
		"\u19bf\u19c2\5\u03f4\u01fb\2\u19c0\u19c2\7[\2\2\u19c1\u19be\3\2\2\2\u19c1"+
		"\u19c0\3\2\2\2\u19c1\u19c2\3\2\2\2\u19c2\u19c4\3\2\2\2\u19c3\u19c5\7\u0348"+
		"\2\2\u19c4\u19c3\3\2\2\2\u19c4\u19c5\3\2\2\2\u19c5\u01ef\3\2\2\2\u19c6"+
		"\u19da\7\u017b\2\2\u19c7\u19c8\7\u0345\2\2\u19c8\u19cd\5\u02ca\u0166\2"+
		"\u19c9\u19ca\7\u0347\2\2\u19ca\u19cc\5\u02ca\u0166\2\u19cb\u19c9\3\2\2"+
		"\2\u19cc\u19cf\3\2\2\2\u19cd\u19cb\3\2\2\2\u19cd\u19ce\3\2\2\2\u19ce\u19d0"+
		"\3\2\2\2\u19cf\u19cd\3\2\2\2\u19d0\u19d1\7\u0346\2\2\u19d1\u19db\3\2\2"+
		"\2\u19d2\u19d7\5\u02ca\u0166\2\u19d3\u19d4\7\u0347\2\2\u19d4\u19d6\5\u02ca"+
		"\u0166\2\u19d5\u19d3\3\2\2\2\u19d6\u19d9\3\2\2\2\u19d7\u19d5\3\2\2\2\u19d7"+
		"\u19d8\3\2\2\2\u19d8\u19db\3\2\2\2\u19d9\u19d7\3\2\2\2\u19da\u19c7\3\2"+
		"\2\2\u19da\u19d2\3\2\2\2\u19db\u01f1\3\2\2\2\u19dc\u19dd\7K\2\2\u19dd"+
		"\u19de\7\u0174\2\2\u19de\u19e3\5\u03be\u01e0\2\u19df\u19e0\7\u0345\2\2"+
		"\u19e0\u19e1\5\u03cc\u01e7\2\u19e1\u19e2\7\u0346\2\2\u19e2\u19e4\3\2\2"+
		"\2\u19e3\u19df\3\2\2\2\u19e3\u19e4\3\2\2\2\u19e4\u19ee\3\2\2\2\u19e5\u19e6"+
		"\7\u017b\2\2\u19e6\u19eb\5\u01f4\u00fb\2\u19e7\u19e8\7\u0347\2\2\u19e8"+
		"\u19ea\5\u01f4\u00fb\2\u19e9\u19e7\3\2\2\2\u19ea\u19ed\3\2\2\2\u19eb\u19e9"+
		"\3\2\2\2\u19eb\u19ec\3\2\2\2\u19ec\u19ef\3\2\2\2\u19ed\u19eb\3\2\2\2\u19ee"+
		"\u19e5\3\2\2\2\u19ee\u19ef\3\2\2\2\u19ef\u19f0\3\2\2\2\u19f0\u19f1\7\22"+
		"\2\2\u19f1\u19f5\5\u01be\u00e0\2\u19f2\u19f3\7\u017b\2\2\u19f3\u19f4\7"+
		"\60\2\2\u19f4\u19f6\7\u00ee\2\2\u19f5\u19f2\3\2\2\2\u19f5\u19f6\3\2\2"+
		"\2\u19f6\u19f8\3\2\2\2\u19f7\u19f9\7\u0348\2\2\u19f8\u19f7\3\2\2\2\u19f8"+
		"\u19f9\3\2\2\2\u19f9\u01f3\3\2\2\2\u19fa\u19fb\t>\2\2\u19fb\u01f5\3\2"+
		"\2\2\u19fc\u19fd\7\f\2\2\u19fd\u19fe\7\u0155\2\2\u19fe\u1a2a\5\u03bc\u01df"+
		"\2\u19ff\u1a00\7\u013d\2\2\u1a00\u1a01\7\u0345\2\2\u1a01\u1a02\7\u023c"+
		"\2\2\u1a02\u1a03\7\u0333\2\2\u1a03\u1a04\t?\2\2\u1a04\u1a2b\7\u0346\2"+
		"\2\u1a05\u1a06\7\6\2\2\u1a06\u1a2b\5\u02ba\u015e\2\u1a07\u1a08\7\f\2\2"+
		"\u1a08\u1a09\7:\2\2\u1a09\u1a2b\5\u02bc\u015f\2\u1a0a\u1a0b\7i\2\2\u1a0b"+
		"\u1a0c\7:\2\2\u1a0c\u1a2b\5\u03f4\u01fb\2\u1a0d\u1a0e\7i\2\2\u1a0e\u1a0f"+
		"\7?\2\2\u1a0f\u1a2b\5\u03f4\u01fb\2\u1a10\u1a11\7\u017b\2\2\u1a11\u1a12"+
		"\7\60\2\2\u1a12\u1a13\7\6\2\2\u1a13\u1a14\7?\2\2\u1a14\u1a15\5\u03f4\u01fb"+
		"\2\u1a15\u1a16\7\u008a\2\2\u1a16\u1a17\7\u00ae\2\2\u1a17\u1a18\7\u0345"+
		"\2\2\u1a18\u1a19\5\u03cc\u01e7\2\u1a19\u1a1a\7\u0346\2\2\u1a1a\u1a1b\7"+
		"\u0110\2\2\u1a1b\u1a1c\5\u03bc\u01df\2\u1a1c\u1a1d\7\u0345\2\2\u1a1d\u1a1e"+
		"\5\u03cc\u01e7\2\u1a1e\u1a1f\7\u0346\2\2\u1a1f\u1a2b\3\2\2\2\u1a20\u1a21"+
		"\7\60\2\2\u1a21\u1a22\7?\2\2\u1a22\u1a2b\5\u03f4\u01fb\2\u1a23\u1a24\t"+
		"\27\2\2\u1a24\u1a26\7\u0162\2\2\u1a25\u1a27\5\u03f4\u01fb\2\u1a26\u1a25"+
		"\3\2\2\2\u1a26\u1a27\3\2\2\2\u1a27\u1a2b\3\2\2\2\u1a28\u1a29\7\u02a3\2"+
		"\2\u1a29\u1a2b\5\u01f0\u00f9\2\u1a2a\u19ff\3\2\2\2\u1a2a\u1a05\3\2\2\2"+
		"\u1a2a\u1a07\3\2\2\2\u1a2a\u1a0a\3\2\2\2\u1a2a\u1a0d\3\2\2\2\u1a2a\u1a10"+
		"\3\2\2\2\u1a2a\u1a20\3\2\2\2\u1a2a\u1a23\3\2\2\2\u1a2a\u1a28\3\2\2\2\u1a2b"+
		"\u1a2d\3\2\2\2\u1a2c\u1a2e\7\u0348\2\2\u1a2d\u1a2c\3\2\2\2\u1a2d\u1a2e"+
		"\3\2\2\2\u1a2e\u01f7\3\2\2\2\u1a2f\u1a30\7\f\2\2\u1a30\u1a33\7V\2\2\u1a31"+
		"\u1a34\5\u03f4\u01fb\2\u1a32\u1a34\7M\2\2\u1a33\u1a31\3\2\2\2\u1a33\u1a32"+
		"\3\2\2\2\u1a34\u1a41\3\2\2\2\u1a35\u1a36\7\u025c\2\2\u1a36\u1a37\7\u025f"+
		"\2\2\u1a37\u1a38\7\u0333\2\2\u1a38\u1a42\5\u03f4\u01fb\2\u1a39\u1a3a\7"+
		"9\2\2\u1a3a\u1a42\5\u03f4\u01fb\2\u1a3b\u1a3c\7\u013d\2\2\u1a3c\u1a3f"+
		"\5\u01fa\u00fe\2\u1a3d\u1a3e\7\u017b\2\2\u1a3e\u1a40\5\u0240\u0121\2\u1a3f"+
		"\u1a3d\3\2\2\2\u1a3f\u1a40\3\2\2\2\u1a40\u1a42\3\2\2\2\u1a41\u1a35\3\2"+
		"\2\2\u1a41\u1a39\3\2\2\2\u1a41\u1a3b\3\2\2\2\u1a42\u1a44\3\2\2\2\u1a43"+
		"\u1a45\7\u0348\2\2\u1a44\u1a43\3\2\2\2\u1a44\u1a45\3\2\2\2\u1a45\u01f9"+
		"\3\2\2\2\u1a46\u1a5e\5\u01fc\u00ff\2\u1a47\u1a5e\5\u01fe\u0100\2\u1a48"+
		"\u1a5e\5\u0202\u0102\2\u1a49\u1a5e\5\u0204\u0103\2\u1a4a\u1a5e\5\u0208"+
		"\u0105\2\u1a4b\u1a5e\5\u0222\u0112\2\u1a4c\u1a5e\5\u0224\u0113\2\u1a4d"+
		"\u1a5e\5\u0226\u0114\2\u1a4e\u1a5e\5\u0228\u0115\2\u1a4f\u1a5e\5\u022a"+
		"\u0116\2\u1a50\u1a5e\5\u022c\u0117\2\u1a51\u1a5e\5\u022e\u0118\2\u1a52"+
		"\u1a53\7\u0200\2\2\u1a53\u1a5e\5\u03ac\u01d7\2\u1a54\u1a5e\5\u0230\u0119"+
		"\2\u1a55\u1a5e\5\u0232\u011a\2\u1a56\u1a5e\5\u0234\u011b\2\u1a57\u1a5e"+
		"\5\u0236\u011c\2\u1a58\u1a5e\5\u0238\u011d\2\u1a59\u1a5e\5\u023a\u011e"+
		"\2\u1a5a\u1a5e\5\u023c\u011f\2\u1a5b\u1a5e\5\u023e\u0120\2\u1a5c\u1a5e"+
		"\5\u0240\u0121\2\u1a5d\u1a46\3\2\2\2\u1a5d\u1a47\3\2\2\2\u1a5d\u1a48\3"+
		"\2\2\2\u1a5d\u1a49\3\2\2\2\u1a5d\u1a4a\3\2\2\2\u1a5d\u1a4b\3\2\2\2\u1a5d"+
		"\u1a4c\3\2\2\2\u1a5d\u1a4d\3\2\2\2\u1a5d\u1a4e\3\2\2\2\u1a5d\u1a4f\3\2"+
		"\2\2\u1a5d\u1a50\3\2\2\2\u1a5d\u1a51\3\2\2\2\u1a5d\u1a52\3\2\2\2\u1a5d"+
		"\u1a54\3\2\2\2\u1a5d\u1a55\3\2\2\2\u1a5d\u1a56\3\2\2\2\u1a5d\u1a57\3\2"+
		"\2\2\u1a5d\u1a58\3\2\2\2\u1a5d\u1a59\3\2\2\2\u1a5d\u1a5a\3\2\2\2\u1a5d"+
		"\u1a5b\3\2\2\2\u1a5d\u1a5c\3\2\2\2\u1a5e\u01fb\3\2\2\2\u1a5f\u1a60\7\u019c"+
		"\2\2\u1a60\u1a71\5\u03d0\u01e9\2\u1a61\u1a62\7\u019d\2\2\u1a62\u1a71\7"+
		"\u00e4\2\2\u1a63\u1a68\7\u00e7\2\2\u1a64\u1a65\7\u0220\2\2\u1a65\u1a66"+
		"\7\u0333\2\2\u1a66\u1a69\7\u00e7\2\2\u1a67\u1a69\7\u00e4\2\2\u1a68\u1a64"+
		"\3\2\2\2\u1a68\u1a67\3\2\2\2\u1a69\u1a71\3\2\2\2\u1a6a\u1a6b\7\u019e\2"+
		"\2\u1a6b\u1a71\5\u03d0\u01e9\2\u1a6c\u1a6d\7\u019f\2\2\u1a6d\u1a71\5\u03d0"+
		"\u01e9\2\u1a6e\u1a6f\7\u01a0\2\2\u1a6f\u1a71\t\t\2\2\u1a70\u1a5f\3\2\2"+
		"\2\u1a70\u1a61\3\2\2\2\u1a70\u1a63\3\2\2\2\u1a70\u1a6a\3\2\2\2\u1a70\u1a6c"+
		"\3\2\2\2\u1a70\u1a6e\3\2\2\2\u1a71\u01fd\3\2\2\2\u1a72\u1a73\7\u01b3\2"+
		"\2\u1a73\u1a83\7\u0333\2\2\u1a74\u1a84\7\u00e4\2\2\u1a75\u1a80\7\u00e7"+
		"\2\2\u1a76\u1a7b\5\u0200\u0101\2\u1a77\u1a78\7\u0347\2\2\u1a78\u1a7a\5"+
		"\u0200\u0101\2\u1a79\u1a77\3\2\2\2\u1a7a\u1a7d\3\2\2\2\u1a7b\u1a79\3\2"+
		"\2\2\u1a7b\u1a7c\3\2\2\2\u1a7c\u1a7f\3\2\2\2\u1a7d\u1a7b\3\2\2\2\u1a7e"+
		"\u1a76\3\2\2\2\u1a7f\u1a82\3\2\2\2\u1a80\u1a7e\3\2\2\2\u1a80\u1a81\3\2"+
		"\2\2\u1a81\u1a84\3\2\2\2\u1a82\u1a80\3\2\2\2\u1a83\u1a74\3\2\2\2\u1a83"+
		"\u1a75\3\2\2\2\u1a84\u01ff\3\2\2\2\u1a85\u1a86\7\u019b\2\2\u1a86\u1a87"+
		"\7\u0333\2\2\u1a87\u1a8c\5\u03d0\u01e9\2\u1a88\u1a89\7\u01b2\2\2\u1a89"+
		"\u1a8a\7\u0333\2\2\u1a8a\u1a8c\t@\2\2\u1a8b\u1a85\3\2\2\2\u1a8b\u1a88"+
		"\3\2\2\2\u1a8c\u0201\3\2\2\2\u1a8d\u1a8e\7@\2\2\u1a8e\u1a8f\7\u0333\2"+
		"\2\u1a8f\u1a90\t\67\2\2\u1a90\u0203\3\2\2\2\u1a91\u1a92\7\u01c8\2\2\u1a92"+
		"\u1a96\5\u03d0\u01e9\2\u1a93\u1a94\7\u01c9\2\2\u1a94\u1a96\tA\2\2\u1a95"+
		"\u1a91\3\2\2\2\u1a95\u1a93\3\2\2\2\u1a96\u0205\3\2\2\2\u1a97\u1a98\7\f"+
		"\2\2\u1a98\u1a99\7o\2\2\u1a99\u1a9c\5\u03f4\u01fb\2\u1a9a\u1a9b\7\26\2"+
		"\2\u1a9b\u1a9d\5\u03f4\u01fb\2\u1a9c\u1a9a\3\2\2\2\u1a9c\u1a9d\3\2\2\2"+
		"\u1a9d\u1aa5\3\2\2\2\u1a9e\u1a9f\7\u014b\2\2\u1a9f\u1aa3\7\u0333\2\2\u1aa0"+
		"\u1aa4\7\u014e\2\2\u1aa1\u1aa4\7\u0151\2\2\u1aa2\u1aa4\7\u01e4\2\2\u1aa3"+
		"\u1aa0\3\2\2\2\u1aa3\u1aa1\3\2\2\2\u1aa3\u1aa2\3\2\2\2\u1aa4\u1aa6\3\2"+
		"\2\2\u1aa5\u1a9e\3\2\2\2\u1aa5\u1aa6\3\2\2\2\u1aa6\u1aa7\3\2\2\2\u1aa7"+
		"\u1aa8\7\22\2\2\u1aa8\u1aa9\7\u0159\2\2\u1aa9\u1aaa\7\u0345\2\2\u1aaa"+
		"\u1aab\7\u00ba\2\2\u1aab\u1aac\7\u0333\2\2\u1aac\u1ab1\7\u032b\2\2\u1aad"+
		"\u1aae\7\u0347\2\2\u1aae\u1aaf\7\u00b9\2\2\u1aaf\u1ab0\7\u0333\2\2\u1ab0"+
		"\u1ab2\tB\2\2\u1ab1\u1aad\3\2\2\2\u1ab1\u1ab2\3\2\2\2\u1ab2\u1ab3\3\2"+
		"\2\2\u1ab3\u1b21\7\u0346\2\2\u1ab4\u1b22\7\u0301\2\2\u1ab5\u1ab6\7\u0087"+
		"\2\2\u1ab6\u1ab7\7\u0139\2\2\u1ab7\u1ab8\7\u0345\2\2\u1ab8\u1ab9\7\27"+
		"\2\2\u1ab9\u1aca\7\u0333\2\2\u1aba\u1abc\7\u017a\2\2\u1abb\u1abd\tC\2"+
		"\2\u1abc\u1abb\3\2\2\2\u1abc\u1abd\3\2\2\2\u1abd\u1ac0\3\2\2\2\u1abe\u1abf"+
		"\7-\2\2\u1abf\u1ac1\5\u03f4\u01fb\2\u1ac0\u1abe\3\2\2\2\u1ac0\u1ac1\3"+
		"\2\2\2\u1ac1\u1acb\3\2\2\2\u1ac2\u1ac3\7-\2\2\u1ac3\u1ac5\5\u03f4\u01fb"+
		"\2\u1ac4\u1ac6\7\u017a\2\2\u1ac5\u1ac4\3\2\2\2\u1ac5\u1ac6\3\2\2\2\u1ac6"+
		"\u1ac8\3\2\2\2\u1ac7\u1ac9\tC\2\2\u1ac8\u1ac7\3\2\2\2\u1ac8\u1ac9\3\2"+
		"\2\2\u1ac9\u1acb\3\2\2\2\u1aca\u1aba\3\2\2\2\u1aca\u1ac2\3\2\2\2\u1acb"+
		"\u1add\3\2\2\2\u1acc\u1ace\7\u0347\2\2\u1acd\u1acc\3\2\2\2\u1acd\u1ace"+
		"\3\2\2\2\u1ace\u1acf\3\2\2\2\u1acf\u1ad0\7\u01ee\2\2\u1ad0\u1ad1\7\u0333"+
		"\2\2\u1ad1\u1adb\tD\2\2\u1ad2\u1ad9\7\u018c\2\2\u1ad3\u1ada\7\7\2\2\u1ad4"+
		"\u1ada\7\u029c\2\2\u1ad5\u1ad6\7\7\2\2\u1ad6\u1ada\7\u029c\2\2\u1ad7\u1ad8"+
		"\7\u029c\2\2\u1ad8\u1ada\7\7\2\2\u1ad9\u1ad3\3\2\2\2\u1ad9\u1ad4\3\2\2"+
		"\2\u1ad9\u1ad5\3\2\2\2\u1ad9\u1ad7\3\2\2\2\u1ada\u1adc\3\2\2\2\u1adb\u1ad2"+
		"\3\2\2\2\u1adb\u1adc\3\2\2\2\u1adc\u1ade\3\2\2\2\u1add\u1acd\3\2\2\2\u1add"+
		"\u1ade\3\2\2\2\u1ade\u1ae5\3\2\2\2\u1adf\u1ae1\7\u0347\2\2\u1ae0\u1adf"+
		"\3\2\2\2\u1ae0\u1ae1\3\2\2\2\u1ae1\u1ae2\3\2\2\2\u1ae2\u1ae3\7\u00cc\2"+
		"\2\u1ae3\u1ae4\7\u0333\2\2\u1ae4\u1ae6\tE\2\2\u1ae5\u1ae0\3\2\2\2\u1ae5"+
		"\u1ae6\3\2\2\2\u1ae6\u1aed\3\2\2\2\u1ae7\u1ae9\7\u0347\2\2\u1ae8\u1ae7"+
		"\3\2\2\2\u1ae8\u1ae9\3\2\2\2\u1ae9\u1aea\3\2\2\2\u1aea\u1aeb\7\u00cd\2"+
		"\2\u1aeb\u1aec\7\u0333\2\2\u1aec\u1aee\7\u032b\2\2\u1aed\u1ae8\3\2\2\2"+
		"\u1aed\u1aee\3\2\2\2\u1aee\u1aef\3\2\2\2\u1aef\u1b22\7\u0346\2\2\u1af0"+
		"\u1af1\7\u0087\2\2\u1af1\u1af2\7W\2\2\u1af2\u1af3\7\u0345\2\2\u1af3\u1af4"+
		"\7\27\2\2\u1af4\u1b05\7\u0333\2\2\u1af5\u1af7\7\u017a\2\2\u1af6\u1af8"+
		"\tC\2\2\u1af7\u1af6\3\2\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1afb\3\2\2\2\u1af9"+
		"\u1afa\7-\2\2\u1afa\u1afc\5\u03f4\u01fb\2\u1afb\u1af9\3\2\2\2\u1afb\u1afc"+
		"\3\2\2\2\u1afc\u1b06\3\2\2\2\u1afd\u1afe\7-\2\2\u1afe\u1b00\5\u03f4\u01fb"+
		"\2\u1aff\u1b01\7\u017a\2\2\u1b00\u1aff\3\2\2\2\u1b00\u1b01\3\2\2\2\u1b01"+
		"\u1b03\3\2\2\2\u1b02\u1b04\tC\2\2\u1b03\u1b02\3\2\2\2\u1b03\u1b04\3\2"+
		"\2\2\u1b04\u1b06\3\2\2\2\u1b05\u1af5\3\2\2\2\u1b05\u1afd\3\2\2\2\u1b06"+
		"\u1b18\3\2\2\2\u1b07\u1b09\7\u0347\2\2\u1b08\u1b07\3\2\2\2\u1b08\u1b09"+
		"\3\2\2\2\u1b09\u1b0a\3\2\2\2\u1b0a\u1b0b\7\u01ee\2\2\u1b0b\u1b0c\7\u0333"+
		"\2\2\u1b0c\u1b16\tD\2\2\u1b0d\u1b14\7\u018c\2\2\u1b0e\u1b15\7\7\2\2\u1b0f"+
		"\u1b15\7\u029c\2\2\u1b10\u1b11\7\7\2\2\u1b11\u1b15\7\u029c\2\2\u1b12\u1b13"+
		"\7\u029c\2\2\u1b13\u1b15\7\7\2\2\u1b14\u1b0e\3\2\2\2\u1b14\u1b0f\3\2\2"+
		"\2\u1b14\u1b10\3\2\2\2\u1b14\u1b12\3\2\2\2\u1b15\u1b17\3\2\2\2\u1b16\u1b0d"+
		"\3\2\2\2\u1b16\u1b17\3\2\2\2\u1b17\u1b19\3\2\2\2\u1b18\u1b08\3\2\2\2\u1b18"+
		"\u1b19\3\2\2\2\u1b19\u1b1b\3\2\2\2\u1b1a\u1b1c\7\u0347\2\2\u1b1b\u1b1a"+
		"\3\2\2\2\u1b1b\u1b1c\3\2\2\2\u1b1c\u1b1d\3\2\2\2\u1b1d\u1b1e\7\u0123\2"+
		"\2\u1b1e\u1b1f\7\u0333\2\2\u1b1f\u1b20\tF\2\2\u1b20\u1b22\7\u0346\2\2"+
		"\u1b21\u1ab4\3\2\2\2\u1b21\u1ab5\3\2\2\2\u1b21\u1af0\3\2\2\2\u1b22\u0207"+
		"\3\2\2\2\u1b23\u1b24\5\u020a\u0106\2\u1b24\u0209\3\2\2\2\u1b25\u1b26\5"+
		"\u020c\u0107\2\u1b26\u1b27\5\u0212\u010a\2\u1b27\u1b2c\3\2\2\2\u1b28\u1b29"+
		"\5\u020e\u0108\2\u1b29\u1b2a\5\u0214\u010b\2\u1b2a\u1b2c\3\2\2\2\u1b2b"+
		"\u1b25\3\2\2\2\u1b2b\u1b28\3\2\2\2\u1b2c\u020b\3\2\2\2\u1b2d\u1b2e\7\u0284"+
		"\2\2\u1b2e\u020d\3\2\2\2\u1b2f\u1b30\7\u017e\2\2\u1b30\u020f\3\2\2\2\u1b31"+
		"\u1b32\7\u0333\2\2\u1b32\u0211\3\2\2\2\u1b33\u1b34\5\u0210\u0109\2\u1b34"+
		"\u1b35\5\u0218\u010d\2\u1b35\u1b40\3\2\2\2\u1b36\u1b40\7\177\2\2\u1b37"+
		"\u1b40\7\u0089\2\2\u1b38\u1b40\7\u00e4\2\2\u1b39\u1b40\7\u011a\2\2\u1b3a"+
		"\u1b3b\7\u012b\2\2\u1b3b\u1b40\tG\2\2\u1b3c\u1b40\7\u02ec\2\2\u1b3d\u1b3e"+
		"\7\u02f8\2\2\u1b3e\u1b40\7\u032b\2\2\u1b3f\u1b33\3\2\2\2\u1b3f\u1b36\3"+
		"\2\2\2\u1b3f\u1b37\3\2\2\2\u1b3f\u1b38\3\2\2\2\u1b3f\u1b39\3\2\2\2\u1b3f"+
		"\u1b3a\3\2\2\2\u1b3f\u1b3c\3\2\2\2\u1b3f\u1b3d\3\2\2\2\u1b40\u0213\3\2"+
		"\2\2\u1b41\u1b42\5\u0210\u0109\2\u1b42\u1b43\5\u0216\u010c\2\u1b43\u1b46"+
		"\3\2\2\2\u1b44\u1b46\7\u00e4\2\2\u1b45\u1b41\3\2\2\2\u1b45\u1b44\3\2\2"+
		"\2\u1b46\u0215\3\2\2\2\u1b47\u1b48\5\u0218\u010d\2\u1b48\u0217\3\2\2\2"+
		"\u1b49\u1b4a\5\u021c\u010f\2\u1b4a\u1b4b\5\u0220\u0111\2\u1b4b\u1b4c\5"+
		"\u021a\u010e\2\u1b4c\u1b4d\5\u021e\u0110\2\u1b4d\u0219\3\2\2\2\u1b4e\u1b4f"+
		"\7\u0349\2\2\u1b4f\u021b\3\2\2\2\u1b50\u1b51\7\u0159\2\2\u1b51\u1b52\7"+
		"\u0349\2\2\u1b52\u1b53\7h\2\2\u1b53\u021d\3\2\2\2\u1b54\u1b55\7\u032b"+
		"\2\2\u1b55\u021f\3\2\2\2\u1b56\u1b57\5\u03f4\u01fb\2\u1b57\u1b58\7\u0340"+
		"\2\2\u1b58\u1b59\5\u0220\u0111\2\u1b59\u1b61\3\2\2\2\u1b5a\u1b5b\5\u03f4"+
		"\u01fb\2\u1b5b\u1b5c\7\u0340\2\2\u1b5c\u1b5f\3\2\2\2\u1b5d\u1b5f\5\u03f4"+
		"\u01fb\2\u1b5e\u1b5a\3\2\2\2\u1b5e\u1b5d\3\2\2\2\u1b5f\u1b61\3\2\2\2\u1b60"+
		"\u1b56\3\2\2\2\u1b60\u1b5e\3\2\2\2\u1b61\u0221\3\2\2\2\u1b62\u1b63\7\u01cb"+
		"\2\2\u1b63\u1b64\5\u03d0\u01e9\2\u1b64\u0223\3\2\2\2\u1b65\u1b66\7\u01ee"+
		"\2\2\u1b66\u1b67\5\u03d0\u01e9\2\u1b67\u0225\3\2\2\2\u1b68\u1b69\tH\2"+
		"\2\u1b69\u0227\3\2\2\2\u1b6a\u1b6b\tI\2\2\u1b6b\u0229\3\2\2\2\u1b6c\u1b6d"+
		"\tJ\2\2\u1b6d\u022b\3\2\2\2\u1b6e\u1b6f\7\u01d8\2\2\u1b6f\u1b70\7\u0333"+
		"\2\2\u1b70\u1b71\tK\2\2\u1b71\u022d\3\2\2\2\u1b72\u1b73\7\u01d1\2\2\u1b73"+
		"\u1b8c\5\u03d0\u01e9\2\u1b74\u1b75\7\u02ff\2\2\u1b75\u1b8c\5\u03d0\u01e9"+
		"\2\u1b76\u1b77\7\u01d6\2\2\u1b77\u1b7a\7\u0333\2\2\u1b78\u1b7b\5\u03f4"+
		"\u01fb\2\u1b79\u1b7b\7\u032f\2\2\u1b7a\u1b78\3\2\2\2\u1b7a\u1b79\3\2\2"+
		"\2\u1b7b\u1b8c\3\2\2\2\u1b7c\u1b7d\7\u01d5\2\2\u1b7d\u1b80\7\u0333\2\2"+
		"\u1b7e\u1b81\5\u03f4\u01fb\2\u1b7f\u1b81\7\u032f\2\2\u1b80\u1b7e\3\2\2"+
		"\2\u1b80\u1b7f\3\2\2\2\u1b81\u1b8c\3\2\2\2\u1b82\u1b83\7\u0260\2\2\u1b83"+
		"\u1b84\7\u0333\2\2\u1b84\u1b8c\t\t\2\2\u1b85\u1b86\7\u02fc\2\2\u1b86\u1b87"+
		"\7\u0333\2\2\u1b87\u1b8c\t\t\2\2\u1b88\u1b89\7\u0302\2\2\u1b89\u1b8a\7"+
		"\u0333\2\2\u1b8a\u1b8c\7\u032b\2\2\u1b8b\u1b72\3\2\2\2\u1b8b\u1b74\3\2"+
		"\2\2\u1b8b\u1b76\3\2\2\2\u1b8b\u1b7c\3\2\2\2\u1b8b\u1b82\3\2\2\2\u1b8b"+
		"\u1b85\3\2\2\2\u1b8b\u1b88\3\2\2\2\u1b8c\u022f\3\2\2\2\u1b8d\u1b96\7\u0214"+
		"\2\2\u1b8e\u1b8f\7\u01a1\2\2\u1b8f\u1b90\7\u0094\2\2\u1b90\u1b91\7\u0333"+
		"\2\2\u1b91\u1b94\5\u03f4\u01fb\2\u1b92\u1b94\7\u00e4\2\2\u1b93\u1b8e\3"+
		"\2\2\2\u1b93\u1b92\3\2\2\2\u1b94\u1b97\3\2\2\2\u1b95\u1b97\tL\2\2\u1b96"+
		"\u1b93\3\2\2\2\u1b96\u1b95\3\2\2\2\u1b97\u0231\3\2\2\2\u1b98\u1b99\7\u025a"+
		"\2\2\u1b99\u1b9a\t\t\2\2\u1b9a\u0233\3\2\2\2\u1b9b\u1b9c\7\u0281\2\2\u1b9c"+
		"\u1b9d\tM\2\2\u1b9d\u0235\3\2\2\2\u1b9e\u1b9f\7\u02a6\2\2\u1b9f\u1ba5"+
		"\tN\2\2\u1ba0\u1ba1\7\u02fb\2\2\u1ba1\u1ba5\5\u03d0\u01e9\2\u1ba2\u1ba3"+
		"\7\u0280\2\2\u1ba3\u1ba5\tO\2\2\u1ba4\u1b9e\3\2\2\2\u1ba4\u1ba0\3\2\2"+
		"\2\u1ba4\u1ba2\3\2\2\2\u1ba5\u0237\3\2\2\2\u1ba6\u1bad\7\u01ec\2\2\u1ba7"+
		"\u1bad\7\u01e3\2\2\u1ba8\u1bad\7\u0262\2\2\u1ba9\u1bad\7\u01f0\2\2\u1baa"+
		"\u1bab\7\u0218\2\2\u1bab\u1bad\5\u03d0\u01e9\2\u1bac\u1ba6\3\2\2\2\u1bac"+
		"\u1ba7\3\2\2\2\u1bac\u1ba8\3\2\2\2\u1bac\u1ba9\3\2\2\2\u1bac\u1baa\3\2"+
		"\2\2\u1bad\u0239\3\2\2\2\u1bae\u1baf\7\u018e\2\2\u1baf\u1bb4\5\u03d0\u01e9"+
		"\2\u1bb0\u1bb1\7\u029e\2\2\u1bb1\u1bb4\t\t\2\2\u1bb2\u1bb4\t\t\2\2\u1bb3"+
		"\u1bae\3\2\2\2\u1bb3\u1bb0\3\2\2\2\u1bb3\u1bb2\3\2\2\2\u1bb4\u023b\3\2"+
		"\2\2\u1bb5\u1bb6\7\u0190\2\2\u1bb6\u1bcb\5\u03d0\u01e9\2\u1bb7\u1bb8\7"+
		"\u0191\2\2\u1bb8\u1bcb\5\u03d0\u01e9\2\u1bb9\u1bba\7\u0192\2\2\u1bba\u1bcb"+
		"\5\u03d0\u01e9\2\u1bbb\u1bbc\7\u0193\2\2\u1bbc\u1bcb\5\u03d0\u01e9\2\u1bbd"+
		"\u1bbe\7\u0196\2\2\u1bbe\u1bcb\5\u03d0\u01e9\2\u1bbf\u1bc0\7\u01ba\2\2"+
		"\u1bc0\u1bc1\7\u0333\2\2\u1bc1\u1bcb\7\u032b\2\2\u1bc2\u1bc3\7\u01bc\2"+
		"\2\u1bc3\u1bcb\5\u03d0\u01e9\2\u1bc4\u1bc5\7\u0272\2\2\u1bc5\u1bcb\5\u03d0"+
		"\u01e9\2\u1bc6\u1bc7\7\u0298\2\2\u1bc7\u1bcb\5\u03d0\u01e9\2\u1bc8\u1bc9"+
		"\7\u02a7\2\2\u1bc9\u1bcb\5\u03d0\u01e9\2\u1bca\u1bb5\3\2\2\2\u1bca\u1bb7"+
		"\3\2\2\2\u1bca\u1bb9\3\2\2\2\u1bca\u1bbb\3\2\2\2\u1bca\u1bbd\3\2\2\2\u1bca"+
		"\u1bbf\3\2\2\2\u1bca\u1bc2\3\2\2\2\u1bca\u1bc4\3\2\2\2\u1bca\u1bc6\3\2"+
		"\2\2\u1bca\u1bc8\3\2\2\2\u1bcb\u023d\3\2\2\2\u1bcc\u1bcd\7\u02f2\2\2\u1bcd"+
		"\u1bce\7\u0333\2\2\u1bce\u1bcf\7\u032b\2\2\u1bcf\u1bd0\tP\2\2\u1bd0\u023f"+
		"\3\2\2\2\u1bd1\u1bd2\7\u0122\2\2\u1bd2\u1bd3\7\u018a\2\2\u1bd3\u1bd8\7"+
		"\u032b\2\2\u1bd4\u1bd5\7\u0122\2\2\u1bd5\u1bd8\7\u021c\2\2\u1bd6\u1bd8"+
		"\7\u0267\2\2\u1bd7\u1bd1\3\2\2\2\u1bd7\u1bd4\3\2\2\2\u1bd7\u1bd6\3\2\2"+
		"\2\u1bd8\u0241\3\2\2\2\u1bd9\u1bda\7i\2\2\u1bda\u1bdd\7\u00a0\2\2\u1bdb"+
		"\u1bdc\7\u009b\2\2\u1bdc\u1bde\7y\2\2\u1bdd\u1bdb\3\2\2\2\u1bdd\u1bde"+
		"\3\2\2\2\u1bde\u1bef\3\2\2\2\u1bdf\u1be4\5\u0244\u0123\2\u1be0\u1be1\7"+
		"\u0347\2\2\u1be1\u1be3\5\u0244\u0123\2\u1be2\u1be0\3\2\2\2\u1be3\u1be6"+
		"\3\2\2\2\u1be4\u1be2\3\2\2\2\u1be4\u1be5\3\2\2\2\u1be5\u1bf0\3\2\2\2\u1be6"+
		"\u1be4\3\2\2\2\u1be7\u1bec\5\u0246\u0124\2\u1be8\u1be9\7\u0347\2\2\u1be9"+
		"\u1beb\5\u0246\u0124\2\u1bea\u1be8\3\2\2\2\u1beb\u1bee\3\2\2\2\u1bec\u1bea"+
		"\3\2\2\2\u1bec\u1bed\3\2\2\2\u1bed\u1bf0\3\2\2\2\u1bee\u1bec\3\2\2\2\u1bef"+
		"\u1bdf\3\2\2\2\u1bef\u1be7\3\2\2\2\u1bf0\u1bf2\3\2\2\2\u1bf1\u1bf3\7\u0348"+
		"\2\2\u1bf2\u1bf1\3\2\2\2\u1bf2\u1bf3\3\2\2\2\u1bf3\u0243\3\2\2\2\u1bf4"+
		"\u1bf5\5\u03f4\u01fb\2\u1bf5\u1bf6\7\u00e7\2\2\u1bf6\u1bf7\5\u03ba\u01de"+
		"\2\u1bf7\u0245\3\2\2\2\u1bf8\u1bf9\5\u03f4\u01fb\2\u1bf9\u1bfa\7\u0340"+
		"\2\2\u1bfa\u1bfc\3\2\2\2\u1bfb\u1bf8\3\2\2\2\u1bfb\u1bfc\3\2\2\2\u1bfc"+
		"\u1bfd\3\2\2\2\u1bfd\u1bfe\5\u03f4\u01fb\2\u1bfe\u1bff\7\u0340\2\2\u1bff"+
		"\u1c00\5\u03f4\u01fb\2\u1c00\u0247\3\2\2\2\u1c01\u1c02\7i\2\2\u1c02\u1c05"+
		"\t8\2\2\u1c03\u1c04\7\u009b\2\2\u1c04\u1c06\7y\2\2\u1c05\u1c03\3\2\2\2"+
		"\u1c05\u1c06\3\2\2\2\u1c06\u1c07\3\2\2\2\u1c07\u1c0c\5\u03c0\u01e1\2\u1c08"+
		"\u1c09\7\u0347\2\2\u1c09\u1c0b\5\u03c0\u01e1\2\u1c0a\u1c08\3\2\2\2\u1c0b"+
		"\u1c0e\3\2\2\2\u1c0c\u1c0a\3\2\2\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u1c10\3\2"+
		"\2\2\u1c0e\u1c0c\3\2\2\2\u1c0f\u1c11\7\u0348\2\2\u1c10\u1c0f\3\2\2\2\u1c10"+
		"\u1c11\3\2\2\2\u1c11\u0249\3\2\2\2\u1c12\u1c15\5\u024c\u0127\2\u1c13\u1c15"+
		"\5\u024e\u0128\2\u1c14\u1c12\3\2\2\2\u1c14\u1c13\3\2\2\2\u1c15\u024b\3"+
		"\2\2\2\u1c16\u1c17\7i\2\2\u1c17\u1c1a\7\u0162\2\2\u1c18\u1c19\7\u009b"+
		"\2\2\u1c19\u1c1b\7y\2\2\u1c1a\u1c18\3\2\2\2\u1c1a\u1c1b\3\2\2\2\u1c1b"+
		"\u1c1c\3\2\2\2\u1c1c\u1c21\5\u03be\u01e0\2\u1c1d\u1c1e\7\u0347\2\2\u1c1e"+
		"\u1c20\5\u03be\u01e0\2\u1c1f\u1c1d\3\2\2\2\u1c20\u1c23\3\2\2\2\u1c21\u1c1f"+
		"\3\2\2\2\u1c21\u1c22\3\2\2\2\u1c22\u1c25\3\2\2\2\u1c23\u1c21\3\2\2\2\u1c24"+
		"\u1c26\7\u0348\2\2\u1c25\u1c24\3\2\2\2\u1c25\u1c26\3\2\2\2\u1c26\u024d"+
		"\3\2\2\2\u1c27\u1c28\7i\2\2\u1c28\u1c2b\7\u0162\2\2\u1c29\u1c2a\7\u009b"+
		"\2\2\u1c2a\u1c2c\7y\2\2\u1c2b\u1c29\3\2\2\2\u1c2b\u1c2c\3\2\2\2\u1c2c"+
		"\u1c2d\3\2\2\2\u1c2d\u1c32\5\u03be\u01e0\2\u1c2e\u1c2f\7\u0347\2\2\u1c2f"+
		"\u1c31\5\u03be\u01e0\2\u1c30\u1c2e\3\2\2\2\u1c31\u1c34\3\2\2\2\u1c32\u1c30"+
		"\3\2\2\2\u1c32\u1c33\3\2\2\2\u1c33\u1c35\3\2\2\2\u1c34\u1c32\3\2\2\2\u1c35"+
		"\u1c39\7\u00e7\2\2\u1c36\u1c3a\7V\2\2\u1c37\u1c38\7\b\2\2\u1c38\u1c3a"+
		"\7\u0137\2\2\u1c39\u1c36\3\2\2\2\u1c39\u1c37\3\2\2\2\u1c3a\u1c3c\3\2\2"+
		"\2\u1c3b\u1c3d\7\u0348\2\2\u1c3c\u1c3b\3\2\2\2\u1c3c\u1c3d\3\2\2\2\u1c3d"+
		"\u024f\3\2\2\2\u1c3e\u1c3f\7i\2\2\u1c3f\u1c42\7\u008f\2\2\u1c40\u1c41"+
		"\7\u009b\2\2\u1c41\u1c43\7y\2\2\u1c42\u1c40\3\2\2\2\u1c42\u1c43\3\2\2"+
		"\2\u1c43\u1c44\3\2\2\2\u1c44\u1c49\5\u03c0\u01e1\2\u1c45\u1c46\7\u0347"+
		"\2\2\u1c46\u1c48\5\u03c0\u01e1\2\u1c47\u1c45\3\2\2\2\u1c48\u1c4b\3\2\2"+
		"\2\u1c49\u1c47\3\2\2\2\u1c49\u1c4a\3\2\2\2\u1c4a\u1c4d\3\2\2\2\u1c4b\u1c49"+
		"\3\2\2\2\u1c4c\u1c4e\7\u0348\2\2\u1c4d\u1c4c\3\2\2\2\u1c4d\u1c4e\3\2\2"+
		"\2\u1c4e\u0251\3\2\2\2\u1c4f\u1c50\7i\2\2\u1c50\u1c5a\7\u014a\2\2\u1c51"+
		"\u1c53\7\u0347\2\2\u1c52\u1c51\3\2\2\2\u1c52\u1c53\3\2\2\2\u1c53\u1c57"+
		"\3\2\2\2\u1c54\u1c55\5\u03bc\u01df\2\u1c55\u1c56\7\u0340\2\2\u1c56\u1c58"+
		"\3\2\2\2\u1c57\u1c54\3\2\2\2\u1c57\u1c58\3\2\2\2\u1c58\u1c59\3\2\2\2\u1c59"+
		"\u1c5b\5\u03f4\u01fb\2\u1c5a\u1c52\3\2\2\2\u1c5b\u1c5c\3\2\2\2\u1c5c\u1c5a"+
		"\3\2\2\2\u1c5c\u1c5d\3\2\2\2\u1c5d\u1c5e\3\2\2\2\u1c5e\u1c5f\7\u0348\2"+
		"\2\u1c5f\u0253\3\2\2\2\u1c60\u1c61\7i\2\2\u1c61\u1c64\7\u0155\2\2\u1c62"+
		"\u1c63\7\u009b\2\2\u1c63\u1c65\7y\2\2\u1c64\u1c62\3\2\2\2\u1c64\u1c65"+
		"\3\2\2\2\u1c65\u1c66\3\2\2\2\u1c66\u1c68\5\u03bc\u01df\2\u1c67\u1c69\7"+
		"\u0348\2\2\u1c68\u1c67\3\2\2\2\u1c68\u1c69\3\2\2\2\u1c69\u0255\3\2\2\2"+
		"\u1c6a\u1c6b\7i\2\2\u1c6b\u1c6e\7\u0174\2\2\u1c6c\u1c6d\7\u009b\2\2\u1c6d"+
		"\u1c6f\7y\2\2\u1c6e\u1c6c\3\2\2\2\u1c6e\u1c6f\3\2\2\2\u1c6f\u1c70\3\2"+
		"\2\2\u1c70\u1c75\5\u03be\u01e0\2\u1c71\u1c72\7\u0347\2\2\u1c72\u1c74\5"+
		"\u03be\u01e0\2\u1c73\u1c71\3\2\2\2\u1c74\u1c77\3\2\2\2\u1c75\u1c73\3\2"+
		"\2\2\u1c75\u1c76\3\2\2\2\u1c76\u1c79\3\2\2\2\u1c77\u1c75\3\2\2\2\u1c78"+
		"\u1c7a\7\u0348\2\2\u1c79\u1c78\3\2\2\2\u1c79\u1c7a\3\2\2\2\u1c7a\u0257"+
		"\3\2\2\2\u1c7b\u1c7c\7K\2\2\u1c7c\u1c7d\7\u0303\2\2\u1c7d\u1c82\5\u03be"+
		"\u01e0\2\u1c7e\u1c7f\7\u008d\2\2\u1c7f\u1c80\5\u03ec\u01f7\2\u1c80\u1c81"+
		"\5\u03ee\u01f8\2\u1c81\u1c83\3\2\2\2\u1c82\u1c7e\3\2\2\2\u1c82\u1c83\3"+
		"\2\2\2\u1c83\u1c8a\3\2\2\2\u1c84\u1c85\7\22\2\2\u1c85\u1c86\7\u0155\2"+
		"\2\u1c86\u1c87\7\u0345\2\2\u1c87\u1c88\5\u02b8\u015d\2\u1c88\u1c89\7\u0346"+
		"\2\2\u1c89\u1c8b\3\2\2\2\u1c8a\u1c84\3\2\2\2\u1c8a\u1c8b\3\2\2\2\u1c8b"+
		"\u0259\3\2\2\2\u1c8c\u1c8d\7i\2\2\u1c8d\u1c90\7\u0303\2\2\u1c8e\u1c8f"+
		"\7\u009b\2\2\u1c8f\u1c91\7y\2\2\u1c90\u1c8e\3\2\2\2\u1c90\u1c91\3\2\2"+
		"\2\u1c91\u1c92\3\2\2\2\u1c92\u1c93\5\u03be\u01e0\2\u1c93\u025b\3\2\2\2"+
		"\u1c94\u1c97\5\u025e\u0130\2\u1c95\u1c97\5\u0260\u0131\2\u1c96\u1c94\3"+
		"\2\2\2\u1c96\u1c95\3\2\2\2\u1c97\u025d\3\2\2\2\u1c98\u1c99\7\u00eb\2\2"+
		"\u1c99\u1c9a\7\u0345\2\2\u1c9a\u1c9b\5\u03f4\u01fb\2\u1c9b\u1c9c\7\u0347"+
		"\2\2\u1c9c\u1c9d\7\u032f\2\2\u1c9d\u1c9e\7\u0346\2\2\u1c9e\u025f\3\2\2"+
		"\2\u1c9f\u1ca0\7\u00ea\2\2\u1ca0\u1ca1\7\u0345\2\2\u1ca1\u1ca2\7\u032f"+
		"\2\2\u1ca2\u1ca3\7\u0347\2\2\u1ca3\u1ca4\7\u032f\2\2\u1ca4\u1ca5\7\u0346"+
		"\2\2\u1ca5\u1ca7\7\u0340\2\2\u1ca6\u1ca8\5\u03f4\u01fb\2\u1ca7\u1ca6\3"+
		"\2\2\2\u1ca7\u1ca8\3\2\2\2\u1ca8\u1ca9\3\2\2\2\u1ca9\u1cab\7\u0340\2\2"+
		"\u1caa\u1cac\5\u03f4\u01fb\2\u1cab\u1caa\3\2\2\2\u1cab\u1cac\3\2\2\2\u1cac"+
		"\u1cad\3\2\2\2\u1cad\u1cae\7\u0340\2\2\u1cae\u1caf\5\u03f4\u01fb\2\u1caf"+
		"\u0261\3\2\2\2\u1cb0\u1cb1\7Z\2\2\u1cb1\u1cb3\7\u0326\2\2\u1cb2\u1cb4"+
		"\7\22\2\2\u1cb3\u1cb2\3\2\2\2\u1cb3\u1cb4\3\2\2\2\u1cb4\u1cb5\3\2\2\2"+
		"\u1cb5\u1cb7\5\u02b2\u015a\2\u1cb6\u1cb8\7\u0348\2\2\u1cb7\u1cb6\3\2\2"+
		"\2\u1cb7\u1cb8\3\2\2\2\u1cb8\u1cdc\3\2\2\2\u1cb9\u1cba\7Z\2\2\u1cba\u1cbf"+
		"\5\u02b0\u0159\2\u1cbb\u1cbc\7\u0347\2\2\u1cbc\u1cbe\5\u02b0\u0159\2\u1cbd"+
		"\u1cbb\3\2\2\2\u1cbe\u1cc1\3\2\2\2\u1cbf\u1cbd\3\2\2\2\u1cbf\u1cc0\3\2"+
		"\2\2\u1cc0\u1cc3\3\2\2\2\u1cc1\u1cbf\3\2\2\2\u1cc2\u1cc4\7\u0348\2\2\u1cc3"+
		"\u1cc2\3\2\2\2\u1cc3\u1cc4\3\2\2\2\u1cc4\u1cdc\3\2\2\2\u1cc5\u1cc6\7Z"+
		"\2\2\u1cc6\u1cc8\7\u0326\2\2\u1cc7\u1cc9\7\22\2\2\u1cc8\u1cc7\3\2\2\2"+
		"\u1cc8\u1cc9\3\2\2\2\u1cc9\u1cca\3\2\2\2\u1cca\u1ccc\5\u02b4\u015b\2\u1ccb"+
		"\u1ccd\7\u0348\2\2\u1ccc\u1ccb\3\2\2\2\u1ccc\u1ccd\3\2\2\2\u1ccd\u1cdc"+
		"\3\2\2\2\u1cce\u1ccf\7\u017b\2\2\u1ccf\u1cd0\7\u0319\2\2\u1cd0\u1cd1\7"+
		"\u0345\2\2\u1cd1\u1cd3\7\u032f\2\2\u1cd2\u1cd4\7\u0347\2\2\u1cd3\u1cd2"+
		"\3\2\2\2\u1cd3\u1cd4\3\2\2\2\u1cd4\u1cd5\3\2\2\2\u1cd5\u1cd6\7\22\2\2"+
		"\u1cd6\u1cd7\5\u03f4\u01fb\2\u1cd7\u1cd9\7\u0346\2\2\u1cd8\u1cda\7\u0348"+
		"\2\2\u1cd9\u1cd8\3\2\2\2\u1cd9\u1cda\3\2\2\2\u1cda\u1cdc\3\2\2\2\u1cdb"+
		"\u1cb0\3\2\2\2\u1cdb\u1cb9\3\2\2\2\u1cdb\u1cc5\3\2\2\2\u1cdb\u1cce\3\2"+
		"\2\2\u1cdc\u0263\3\2\2\2\u1cdd\u1cdf\7\65\2\2\u1cde\u1ce0\7\u020f\2\2"+
		"\u1cdf\u1cde\3\2\2\2\u1cdf\u1ce0\3\2\2\2\u1ce0\u1ce1\3\2\2\2\u1ce1\u1ce3"+
		"\5\u03ce\u01e8\2\u1ce2\u1ce4\7\u0348\2\2\u1ce3\u1ce2\3\2\2\2\u1ce3\u1ce4"+
		"\3\2\2\2\u1ce4\u1cfb\3\2\2\2\u1ce5\u1ce7\7Y\2\2\u1ce6\u1ce8\7\u020f\2"+
		"\2\u1ce7\u1ce6\3\2\2\2\u1ce7\u1ce8\3\2\2\2\u1ce8\u1cea\3\2\2\2\u1ce9\u1ceb"+
		"\7R\2\2\u1cea\u1ce9\3\2\2\2\u1cea\u1ceb\3\2\2\2\u1ceb\u1cec\3\2\2\2\u1cec"+
		"\u1cee\5\u03ce\u01e8\2\u1ced\u1cef\7\u0348\2\2\u1cee\u1ced\3\2\2\2\u1cee"+
		"\u1cef\3\2\2\2\u1cef\u1cfb\3\2\2\2\u1cf0\u1cfb\5\u02cc\u0167\2\u1cf1\u1cfb"+
		"\5\u02d2\u016a\2\u1cf2\u1cf4\7\u00e9\2\2\u1cf3\u1cf5\7\u020f\2\2\u1cf4"+
		"\u1cf3\3\2\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u1cf6\3\2\2\2\u1cf6\u1cf8\5\u03ce"+
		"\u01e8\2\u1cf7\u1cf9\7\u0348\2\2\u1cf8\u1cf7\3\2\2\2\u1cf8\u1cf9\3\2\2"+
		"\2\u1cf9\u1cfb\3\2\2\2\u1cfa\u1cdd\3\2\2\2\u1cfa\u1ce5\3\2\2\2\u1cfa\u1cf0"+
		"\3\2\2\2\u1cfa\u1cf1\3\2\2\2\u1cfa\u1cf2\3\2\2\2\u1cfb\u0265\3\2\2\2\u1cfc"+
		"\u1cfd\7\34\2\2\u1cfd\u1cfe\7V\2\2\u1cfe\u1d0b\5\u03f4\u01fb\2\u1cff\u1d08"+
		"\7\u010e\2\2\u1d00\u1d02\7\u0347\2\2\u1d01\u1d00\3\2\2\2\u1d01\u1d02\3"+
		"\2\2\2\u1d02\u1d03\3\2\2\2\u1d03\u1d04\tQ\2\2\u1d04\u1d05\7\u0333\2\2"+
		"\u1d05\u1d07\7\u032f\2\2\u1d06\u1d01\3\2\2\2\u1d07\u1d0a\3\2\2\2\u1d08"+
		"\u1d06\3\2\2\2\u1d08\u1d09\3\2\2\2\u1d09\u1d0c\3\2\2\2\u1d0a\u1d08\3\2"+
		"\2\2\u1d0b\u1cff\3\2\2\2\u1d0b\u1d0c\3\2\2\2\u1d0c\u1d15\3\2\2\2\u1d0d"+
		"\u1d0f\7\u0347\2\2\u1d0e\u1d0d\3\2\2\2\u1d0e\u1d0f\3\2\2\2\u1d0f\u1d10"+
		"\3\2\2\2\u1d10\u1d11\tQ\2\2\u1d11\u1d12\7\u0333\2\2\u1d12\u1d14\7\u032f"+
		"\2\2\u1d13\u1d0e\3\2\2\2\u1d14\u1d17\3\2\2\2\u1d15\u1d13\3\2\2\2\u1d15"+
		"\u1d16\3\2\2\2\u1d16\u1d2f\3\2\2\2\u1d17\u1d15\3\2\2\2\u1d18\u1d1d\7\u015c"+
		"\2\2\u1d19\u1d1b\7\u0347\2\2\u1d1a\u1d19\3\2\2\2\u1d1a\u1d1b\3\2\2\2\u1d1b"+
		"\u1d1c\3\2\2\2\u1d1c\u1d1e\5\u03f4\u01fb\2\u1d1d\u1d1a\3\2\2\2\u1d1e\u1d1f"+
		"\3\2\2\2\u1d1f\u1d1d\3\2\2\2\u1d1f\u1d20\3\2\2\2\u1d20\u1d30\3\2\2\2\u1d21"+
		"\u1d2b\7\u015c\2\2\u1d22\u1d24\7\u0347\2\2\u1d23\u1d22\3\2\2\2\u1d23\u1d24"+
		"\3\2\2\2\u1d24\u1d25\3\2\2\2\u1d25\u1d26\tR\2\2\u1d26\u1d29\7\u0333\2"+
		"\2\u1d27\u1d2a\7\u032f\2\2\u1d28\u1d2a\5\u03f4\u01fb\2\u1d29\u1d27\3\2"+
		"\2\2\u1d29\u1d28\3\2\2\2\u1d2a\u1d2c\3\2\2\2\u1d2b\u1d23\3\2\2\2\u1d2c"+
		"\u1d2d\3\2\2\2\u1d2d\u1d2b\3\2\2\2\u1d2d\u1d2e\3\2\2\2\u1d2e\u1d30\3\2"+
		"\2\2\u1d2f\u1d18\3\2\2\2\u1d2f\u1d21\3\2\2\2\u1d30\u1d52\3\2\2\2\u1d31"+
		"\u1d32\7\u00cf\2\2\u1d32\u1d37\7\u015c\2\2\u1d33\u1d35\7\u0347\2\2\u1d34"+
		"\u1d33\3\2\2\2\u1d34\u1d35\3\2\2\2\u1d35\u1d36\3\2\2\2\u1d36\u1d38\5\u03f4"+
		"\u01fb\2\u1d37\u1d34\3\2\2\2\u1d38\u1d39\3\2\2\2\u1d39\u1d37\3\2\2\2\u1d39"+
		"\u1d3a\3\2\2\2\u1d3a\u1d3c\3\2\2\2\u1d3b\u1d31\3\2\2\2\u1d3c\u1d3d\3\2"+
		"\2\2\u1d3d\u1d3b\3\2\2\2\u1d3d\u1d3e\3\2\2\2\u1d3e\u1d53\3\2\2\2\u1d3f"+
		"\u1d40\7\u00cf\2\2\u1d40\u1d4a\7\u015c\2\2\u1d41\u1d43\7\u0347\2\2\u1d42"+
		"\u1d41\3\2\2\2\u1d42\u1d43\3\2\2\2\u1d43\u1d44\3\2\2\2\u1d44\u1d45\tR"+
		"\2\2\u1d45\u1d48\7\u0333\2\2\u1d46\u1d49\7\u032f\2\2\u1d47\u1d49\5\u03f4"+
		"\u01fb\2\u1d48\u1d46\3\2\2\2\u1d48\u1d47\3\2\2\2\u1d49\u1d4b\3\2\2\2\u1d4a"+
		"\u1d42\3\2\2\2\u1d4b\u1d4c\3\2\2\2\u1d4c\u1d4a\3\2\2\2\u1d4c\u1d4d\3\2"+
		"\2\2\u1d4d\u1d4f\3\2\2\2\u1d4e\u1d3f\3\2\2\2\u1d4f\u1d50\3\2\2\2\u1d50"+
		"\u1d4e\3\2\2\2\u1d50\u1d51\3\2\2\2\u1d51\u1d53\3\2\2\2\u1d52\u1d3b\3\2"+
		"\2\2\u1d52\u1d4e\3\2\2\2\u1d52\u1d53\3\2\2\2\u1d53\u1df4\3\2\2\2\u1d54"+
		"\u1df1\7\u017b\2\2\u1d55\u1d57\7\u0347\2\2\u1d56\u1d55\3\2\2\2\u1d56\u1d57"+
		"\3\2\2\2\u1d57\u1d58\3\2\2\2\u1d58\u1df0\7b\2\2\u1d59\u1d5b\7\u0347\2"+
		"\2\u1d5a\u1d59\3\2\2\2\u1d5a\u1d5b\3\2\2\2\u1d5b\u1d5c\3\2\2\2\u1d5c\u1df0"+
		"\7J\2\2\u1d5d\u1d5f\7\u0347\2\2\u1d5e\u1d5d\3\2\2\2\u1d5e\u1d5f\3\2\2"+
		"\2\u1d5f\u1d60\3\2\2\2\u1d60\u1df0\tS\2\2\u1d61\u1d63\7\u0347\2\2\u1d62"+
		"\u1d61\3\2\2\2\u1d62\u1d63\3\2\2\2\u1d63\u1d64\3\2\2\2\u1d64\u1d65\7\u01dd"+
		"\2\2\u1d65\u1d68\7\u0333\2\2\u1d66\u1d69\7\u032f\2\2\u1d67\u1d69\5\u03f4"+
		"\u01fb\2\u1d68\u1d66\3\2\2\2\u1d68\u1d67\3\2\2\2\u1d69\u1df0\3\2\2\2\u1d6a"+
		"\u1d6c\7\u0347\2\2\u1d6b\u1d6a\3\2\2\2\u1d6b\u1d6c\3\2\2\2\u1d6c\u1d6d"+
		"\3\2\2\2\u1d6d\u1d6e\7\u025f\2\2\u1d6e\u1d6f\7\u0333\2\2\u1d6f\u1df0\5"+
		"\u03f4\u01fb\2\u1d70\u1d72\7\u0347\2\2\u1d71\u1d70\3\2\2\2\u1d71\u1d72"+
		"\3\2\2\2\u1d72\u1d73\3\2\2\2\u1d73\u1df0\7\u01c6\2\2\u1d74\u1d76\7\u0347"+
		"\2\2\u1d75\u1d74\3\2\2\2\u1d75\u1d76\3\2\2\2\u1d76\u1d77\3\2\2\2\u1d77"+
		"\u1df0\7\u0086\2\2\u1d78\u1d7a\7\u0347\2\2\u1d79\u1d78\3\2\2\2\u1d79\u1d7a"+
		"\3\2\2\2\u1d7a\u1d87\3\2\2\2\u1d7b\u1d7c\7z\2\2\u1d7c\u1d7f\7\u0333\2"+
		"\2\u1d7d\u1d80\7\u032f\2\2\u1d7e\u1d80\5\u03f4\u01fb\2\u1d7f\u1d7d\3\2"+
		"\2\2\u1d7f\u1d7e\3\2\2\2\u1d80\u1d88\3\2\2\2\u1d81\u1d82\7\u011b\2\2\u1d82"+
		"\u1d85\7\u0333\2\2\u1d83\u1d86\7\u032b\2\2\u1d84\u1d86\5\u03f4\u01fb\2"+
		"\u1d85\u1d83\3\2\2\2\u1d85\u1d84\3\2\2\2\u1d86\u1d88\3\2\2\2\u1d87\u1d7b"+
		"\3\2\2\2\u1d87\u1d81\3\2\2\2\u1d88\u1df0\3\2\2\2\u1d89\u1d8b\7\u0347\2"+
		"\2\u1d8a\u1d89\3\2\2\2\u1d8a\u1d8b\3\2\2\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1df0"+
		"\tT\2\2\u1d8d\u1d8f\7\u0347\2\2\u1d8e\u1d8d\3\2\2\2\u1d8e\u1d8f\3\2\2"+
		"\2\u1d8f\u1d90\3\2\2\2\u1d90\u1df0\tU\2\2\u1d91\u1d93\7\u0347\2\2\u1d92"+
		"\u1d91\3\2\2\2\u1d92\u1d93\3\2\2\2\u1d93\u1d94\3\2\2\2\u1d94\u1df0\tV"+
		"\2\2\u1d95\u1d97\7\u0347\2\2\u1d96\u1d95\3\2\2\2\u1d96\u1d97\3\2\2\2\u1d97"+
		"\u1d98\3\2\2\2\u1d98\u1d99\7\u00c7\2\2\u1d99\u1d9c\7\u0333\2\2\u1d9a\u1d9d"+
		"\7\u032f\2\2\u1d9b\u1d9d\5\u03f4\u01fb\2\u1d9c\u1d9a\3\2\2\2\u1d9c\u1d9b"+
		"\3\2\2\2\u1d9d\u1df0\3\2\2\2\u1d9e\u1da0\7\u0347\2\2\u1d9f\u1d9e\3\2\2"+
		"\2\u1d9f\u1da0\3\2\2\2\u1da0\u1da1\3\2\2\2\u1da1\u1da2\7\u00c8\2\2\u1da2"+
		"\u1da3\7\u0333\2\2\u1da3\u1df0\7\u032f\2\2\u1da4\u1da6\7\u0347\2\2\u1da5"+
		"\u1da4\3\2\2\2\u1da5\u1da6\3\2\2\2\u1da6\u1da7\3\2\2\2\u1da7\u1da8\7!"+
		"\2\2\u1da8\u1dab\7\u0333\2\2\u1da9\u1dac\7\u032b\2\2\u1daa\u1dac\5\u03f4"+
		"\u01fb\2\u1dab\u1da9\3\2\2\2\u1dab\u1daa\3\2\2\2\u1dac\u1df0\3\2\2\2\u1dad"+
		"\u1daf\7\u0347\2\2\u1dae\u1dad\3\2\2\2\u1dae\u1daf\3\2\2\2\u1daf\u1db0"+
		"\3\2\2\2\u1db0\u1db1\7&\2\2\u1db1\u1db4\7\u0333\2\2\u1db2\u1db5\7\u032b"+
		"\2\2\u1db3\u1db5\5\u03f4\u01fb\2\u1db4\u1db2\3\2\2\2\u1db4\u1db3\3\2\2"+
		"\2\u1db5\u1df0\3\2\2\2\u1db6\u1db8\7\u0347\2\2\u1db7\u1db6\3\2\2\2\u1db7"+
		"\u1db8\3\2\2\2\u1db8\u1db9\3\2\2\2\u1db9\u1dba\7\u00c1\2\2\u1dba\u1dbd"+
		"\7\u0333\2\2\u1dbb\u1dbe\7\u032b\2\2\u1dbc\u1dbe\5\u03f4\u01fb\2\u1dbd"+
		"\u1dbb\3\2\2\2\u1dbd\u1dbc\3\2\2\2\u1dbe\u1df0\3\2\2\2\u1dbf\u1dc1\7\u0347"+
		"\2\2\u1dc0\u1dbf\3\2\2\2\u1dc0\u1dc1\3\2\2\2\u1dc1\u1dc2\3\2\2\2\u1dc2"+
		"\u1df0\tW\2\2\u1dc3\u1dc5\7\u0347\2\2\u1dc4\u1dc3\3\2\2\2\u1dc4\u1dc5"+
		"\3\2\2\2\u1dc5\u1dc6\3\2\2\2\u1dc6\u1df0\tX\2\2\u1dc7\u1dc9\7\u0347\2"+
		"\2\u1dc8\u1dc7\3\2\2\2\u1dc8\u1dc9\3\2\2\2\u1dc9\u1dca\3\2\2\2\u1dca\u1df0"+
		"\7\u0117\2\2\u1dcb\u1dcd\7\u0347\2\2\u1dcc\u1dcb\3\2\2\2\u1dcc\u1dcd\3"+
		"\2\2\2\u1dcd\u1dce\3\2\2\2\u1dce\u1dd1\7\u014c\2\2\u1dcf\u1dd0\7\u0333"+
		"\2\2\u1dd0\u1dd2\7\u032b\2\2\u1dd1\u1dcf\3\2\2\2\u1dd1\u1dd2\3\2\2\2\u1dd2"+
		"\u1df0\3\2\2\2\u1dd3\u1dd5\7\u0347\2\2\u1dd4\u1dd3\3\2\2\2\u1dd4\u1dd5"+
		"\3\2\2\2\u1dd5\u1dd6\3\2\2\2\u1dd6\u1df0\tY\2\2\u1dd7\u1dd9\7\u0347\2"+
		"\2\u1dd8\u1dd7\3\2\2\2\u1dd8\u1dd9\3\2\2\2\u1dd9\u1dda\3\2\2\2\u1dda\u1df0"+
		"\tZ\2\2\u1ddb\u1ddd\7\u0347\2\2\u1ddc\u1ddb\3\2\2\2\u1ddc\u1ddd\3\2\2"+
		"\2\u1ddd\u1dde\3\2\2\2\u1dde\u1ddf\7\u01ee\2\2\u1ddf\u1de0\7\u0345\2\2"+
		"\u1de0\u1de1\7\u018c\2\2\u1de1\u1de2\7\u0333\2\2\u1de2\u1de3\t[\2\2\u1de3"+
		"\u1de4\7\u0347\2\2\u1de4\u1de5\7\u0137\2\2\u1de5\u1de6\7-\2\2\u1de6\u1ded"+
		"\7\u0333\2\2\u1de7\u1dee\5\u03f4\u01fb\2\u1de8\u1de9\7\u0137\2\2\u1de9"+
		"\u1dea\7\24\2\2\u1dea\u1deb\7\u00ae\2\2\u1deb\u1dec\7\u0333\2\2\u1dec"+
		"\u1dee\5\u03f4\u01fb\2\u1ded\u1de7\3\2\2\2\u1ded\u1de8\3\2\2\2\u1dee\u1df0"+
		"\3\2\2\2\u1def\u1d56\3\2\2\2\u1def\u1d5a\3\2\2\2\u1def\u1d5e\3\2\2\2\u1def"+
		"\u1d62\3\2\2\2\u1def\u1d6b\3\2\2\2\u1def\u1d71\3\2\2\2\u1def\u1d75\3\2"+
		"\2\2\u1def\u1d79\3\2\2\2\u1def\u1d8a\3\2\2\2\u1def\u1d8e\3\2\2\2\u1def"+
		"\u1d92\3\2\2\2\u1def\u1d96\3\2\2\2\u1def\u1d9f\3\2\2\2\u1def\u1da5\3\2"+
		"\2\2\u1def\u1dae\3\2\2\2\u1def\u1db7\3\2\2\2\u1def\u1dc0\3\2\2\2\u1def"+
		"\u1dc4\3\2\2\2\u1def\u1dc8\3\2\2\2\u1def\u1dcc\3\2\2\2\u1def\u1dd4\3\2"+
		"\2\2\u1def\u1dd8\3\2\2\2\u1def\u1ddc\3\2\2\2\u1df0\u1df3\3\2\2\2\u1df1"+
		"\u1def\3\2\2\2\u1df1\u1df2\3\2\2\2\u1df2\u1df5\3\2\2\2\u1df3\u1df1\3\2"+
		"\2\2\u1df4\u1d54\3\2\2\2\u1df4\u1df5\3\2\2\2\u1df5\u0267\3\2\2\2\u1df6"+
		"\u1df7\7\34\2\2\u1df7\u1df8\7\u00bd\2\2\u1df8\u1e10\5\u03f4\u01fb\2\u1df9"+
		"\u1dfe\7\u015c\2\2\u1dfa\u1dfc\7\u0347\2\2\u1dfb\u1dfa\3\2\2\2\u1dfb\u1dfc"+
		"\3\2\2\2\u1dfc\u1dfd\3\2\2\2\u1dfd\u1dff\5\u03f4\u01fb\2\u1dfe\u1dfb\3"+
		"\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u1dfe\3\2\2\2\u1e00\u1e01\3\2\2\2\u1e01"+
		"\u1e11\3\2\2\2\u1e02\u1e0c\7\u015c\2\2\u1e03\u1e05\7\u0347\2\2\u1e04\u1e03"+
		"\3\2\2\2\u1e04\u1e05\3\2\2\2\u1e05\u1e06\3\2\2\2\u1e06\u1e07\tR\2\2\u1e07"+
		"\u1e0a\7\u0333\2\2\u1e08\u1e0b\7\u032f\2\2\u1e09\u1e0b\5\u03f4\u01fb\2"+
		"\u1e0a\u1e08\3\2\2\2\u1e0a\u1e09\3\2\2\2\u1e0b\u1e0d\3\2\2\2\u1e0c\u1e04"+
		"\3\2\2\2\u1e0d\u1e0e\3\2\2\2\u1e0e\u1e0c\3\2\2\2\u1e0e\u1e0f\3\2\2\2\u1e0f"+
		"\u1e11\3\2\2\2\u1e10\u1df9\3\2\2\2\u1e10\u1e02\3\2\2\2\u1e11\u1e33\3\2"+
		"\2\2\u1e12\u1e13\7\u00cf\2\2\u1e13\u1e18\7\u015c\2\2\u1e14\u1e16\7\u0347"+
		"\2\2\u1e15\u1e14\3\2\2\2\u1e15\u1e16\3\2\2\2\u1e16\u1e17\3\2\2\2\u1e17"+
		"\u1e19\5\u03f4\u01fb\2\u1e18\u1e15\3\2\2\2\u1e19\u1e1a\3\2\2\2\u1e1a\u1e18"+
		"\3\2\2\2\u1e1a\u1e1b\3\2\2\2\u1e1b\u1e1d\3\2\2\2\u1e1c\u1e12\3\2\2\2\u1e1d"+
		"\u1e1e\3\2\2\2\u1e1e\u1e1c\3\2\2\2\u1e1e\u1e1f\3\2\2\2\u1e1f\u1e34\3\2"+
		"\2\2\u1e20\u1e21\7\u00cf\2\2\u1e21\u1e2b\7\u015c\2\2\u1e22\u1e24\7\u0347"+
		"\2\2\u1e23\u1e22\3\2\2\2\u1e23\u1e24\3\2\2\2\u1e24\u1e25\3\2\2\2\u1e25"+
		"\u1e26\tR\2\2\u1e26\u1e29\7\u0333\2\2\u1e27\u1e2a\7\u032f\2\2\u1e28\u1e2a"+
		"\5\u03f4\u01fb\2\u1e29\u1e27\3\2\2\2\u1e29\u1e28\3\2\2\2\u1e2a\u1e2c\3"+
		"\2\2\2\u1e2b\u1e23\3\2\2\2\u1e2c\u1e2d\3\2\2\2\u1e2d\u1e2b\3\2\2\2\u1e2d"+
		"\u1e2e\3\2\2\2\u1e2e\u1e30\3\2\2\2\u1e2f\u1e20\3\2\2\2\u1e30\u1e31\3\2"+
		"\2\2\u1e31\u1e2f\3\2\2\2\u1e31\u1e32\3\2\2\2\u1e32\u1e34\3\2\2\2\u1e33"+
		"\u1e1c\3\2\2\2\u1e33\u1e2f\3\2\2\2\u1e33\u1e34\3\2\2\2\u1e34\u1ee2\3\2"+
		"\2\2\u1e35\u1edf\7\u017b\2\2\u1e36\u1e38\7\u0347\2\2\u1e37\u1e36\3\2\2"+
		"\2\u1e37\u1e38\3\2\2\2\u1e38\u1e39\3\2\2\2\u1e39\u1ede\7b\2\2\u1e3a\u1e3c"+
		"\7\u0347\2\2\u1e3b\u1e3a\3\2\2\2\u1e3b\u1e3c\3\2\2\2\u1e3c\u1e3d\3\2\2"+
		"\2\u1e3d\u1ede\7J\2\2\u1e3e\u1e40\7\u0347\2\2\u1e3f\u1e3e\3\2\2\2\u1e3f"+
		"\u1e40\3\2\2\2\u1e40\u1e41\3\2\2\2\u1e41\u1ede\tS\2\2\u1e42\u1e44\7\u0347"+
		"\2\2\u1e43\u1e42\3\2\2\2\u1e43\u1e44\3\2\2\2\u1e44\u1e45\3\2\2\2\u1e45"+
		"\u1e46\7\u01dd\2\2\u1e46\u1e49\7\u0333\2\2\u1e47\u1e4a\7\u032f\2\2\u1e48"+
		"\u1e4a\5\u03f4\u01fb\2\u1e49\u1e47\3\2\2\2\u1e49\u1e48\3\2\2\2\u1e4a\u1ede"+
		"\3\2\2\2\u1e4b\u1e4d\7\u0347\2\2\u1e4c\u1e4b\3\2\2\2\u1e4c\u1e4d\3\2\2"+
		"\2\u1e4d\u1e4e\3\2\2\2\u1e4e\u1e4f\7\u025f\2\2\u1e4f\u1e50\7\u0333\2\2"+
		"\u1e50\u1ede\5\u03f4\u01fb\2\u1e51\u1e53\7\u0347\2\2\u1e52\u1e51\3\2\2"+
		"\2\u1e52\u1e53\3\2\2\2\u1e53\u1e54\3\2\2\2\u1e54\u1ede\7\u01c6\2\2\u1e55"+
		"\u1e57\7\u0347\2\2\u1e56\u1e55\3\2\2\2\u1e56\u1e57\3\2\2\2\u1e57\u1e58"+
		"\3\2\2\2\u1e58\u1ede\7\u0086\2\2\u1e59\u1e5b\7\u0347\2\2\u1e5a\u1e59\3"+
		"\2\2\2\u1e5a\u1e5b\3\2\2\2\u1e5b\u1e68\3\2\2\2\u1e5c\u1e5d\7z\2\2\u1e5d"+
		"\u1e60\7\u0333\2\2\u1e5e\u1e61\7\u032f\2\2\u1e5f\u1e61\5\u03f4\u01fb\2"+
		"\u1e60\u1e5e\3\2\2\2\u1e60\u1e5f\3\2\2\2\u1e61\u1e69\3\2\2\2\u1e62\u1e63"+
		"\7\u011b\2\2\u1e63\u1e66\7\u0333\2\2\u1e64\u1e67\7\u032b\2\2\u1e65\u1e67"+
		"\5\u03f4\u01fb\2\u1e66\u1e64\3\2\2\2\u1e66\u1e65\3\2\2\2\u1e67\u1e69\3"+
		"\2\2\2\u1e68\u1e5c\3\2\2\2\u1e68\u1e62\3\2\2\2\u1e69\u1ede\3\2\2\2\u1e6a"+
		"\u1e6c\7\u0347\2\2\u1e6b\u1e6a\3\2\2\2\u1e6b\u1e6c\3\2\2\2\u1e6c\u1e6d"+
		"\3\2\2\2\u1e6d\u1ede\tT\2\2\u1e6e\u1e70\7\u0347\2\2\u1e6f\u1e6e\3\2\2"+
		"\2\u1e6f\u1e70\3\2\2\2\u1e70\u1e71\3\2\2\2\u1e71\u1ede\tU\2\2\u1e72\u1e74"+
		"\7\u0347\2\2\u1e73\u1e72\3\2\2\2\u1e73\u1e74\3\2\2\2\u1e74\u1e75\3\2\2"+
		"\2\u1e75\u1ede\tV\2\2\u1e76\u1e78\7\u0347\2\2\u1e77\u1e76\3\2\2\2\u1e77"+
		"\u1e78\3\2\2\2\u1e78\u1e79\3\2\2\2\u1e79\u1e7a\7\u00c7\2\2\u1e7a\u1e7d"+
		"\7\u0333\2\2\u1e7b\u1e7e\7\u032f\2\2\u1e7c\u1e7e\5\u03f4\u01fb\2\u1e7d"+
		"\u1e7b\3\2\2\2\u1e7d\u1e7c\3\2\2\2\u1e7e\u1ede\3\2\2\2\u1e7f\u1e81\7\u0347"+
		"\2\2\u1e80\u1e7f\3\2\2\2\u1e80\u1e81\3\2\2\2\u1e81\u1e82\3\2\2\2\u1e82"+
		"\u1e83\7\u00c8\2\2\u1e83\u1e84\7\u0333\2\2\u1e84\u1ede\7\u032f\2\2\u1e85"+
		"\u1e87\7\u0347\2\2\u1e86\u1e85\3\2\2\2\u1e86\u1e87\3\2\2\2\u1e87\u1e88"+
		"\3\2\2\2\u1e88\u1e89\7!\2\2\u1e89\u1e8c\7\u0333\2\2\u1e8a\u1e8d\7\u032b"+
		"\2\2\u1e8b\u1e8d\5\u03f4\u01fb\2\u1e8c\u1e8a\3\2\2\2\u1e8c\u1e8b\3\2\2"+
		"\2\u1e8d\u1ede\3\2\2\2\u1e8e\u1e90\7\u0347\2\2\u1e8f\u1e8e\3\2\2\2\u1e8f"+
		"\u1e90\3\2\2\2\u1e90\u1e91\3\2\2\2\u1e91\u1e92\7&\2\2\u1e92\u1e95\7\u0333"+
		"\2\2\u1e93\u1e96\7\u032b\2\2\u1e94\u1e96\5\u03f4\u01fb\2\u1e95\u1e93\3"+
		"\2\2\2\u1e95\u1e94\3\2\2\2\u1e96\u1ede\3\2\2\2\u1e97\u1e99\7\u0347\2\2"+
		"\u1e98\u1e97\3\2\2\2\u1e98\u1e99\3\2\2\2\u1e99\u1e9a\3\2\2\2\u1e9a\u1e9b"+
		"\7\u00c1\2\2\u1e9b\u1e9e\7\u0333\2\2\u1e9c\u1e9f\7\u032b\2\2\u1e9d\u1e9f"+
		"\5\u03f4\u01fb\2\u1e9e\u1e9c\3\2\2\2\u1e9e\u1e9d\3\2\2\2\u1e9f\u1ede\3"+
		"\2\2\2\u1ea0\u1ea2\7\u0347\2\2\u1ea1\u1ea0\3\2\2\2\u1ea1\u1ea2\3\2\2\2"+
		"\u1ea2\u1ea3\3\2\2\2\u1ea3\u1ede\tW\2\2\u1ea4\u1ea6\7\u0347\2\2\u1ea5"+
		"\u1ea4\3\2\2\2\u1ea5\u1ea6\3\2\2\2\u1ea6\u1ea7\3\2\2\2\u1ea7\u1ede\tX"+
		"\2\2\u1ea8\u1eaa\7\u0347\2\2\u1ea9\u1ea8\3\2\2\2\u1ea9\u1eaa\3\2\2\2\u1eaa"+
		"\u1eab\3\2\2\2\u1eab\u1ede\7\u0117\2\2\u1eac\u1eae\7\u0347\2\2\u1ead\u1eac"+
		"\3\2\2\2\u1ead\u1eae\3\2\2\2\u1eae\u1eaf\3\2\2\2\u1eaf\u1eb2\7\u014c\2"+
		"\2\u1eb0\u1eb1\7\u0333\2\2\u1eb1\u1eb3\7\u032b\2\2\u1eb2\u1eb0\3\2\2\2"+
		"\u1eb2\u1eb3\3\2\2\2\u1eb3\u1ede\3\2\2\2\u1eb4\u1eb6\7\u0347\2\2\u1eb5"+
		"\u1eb4\3\2\2\2\u1eb5\u1eb6\3\2\2\2\u1eb6\u1eb7\3\2\2\2\u1eb7\u1ede\tY"+
		"\2\2\u1eb8\u1eba\7\u0347\2\2\u1eb9\u1eb8\3\2\2\2\u1eb9\u1eba\3\2\2\2\u1eba"+
		"\u1ebb\3\2\2\2\u1ebb\u1ede\tZ\2\2\u1ebc\u1ebe\7\u0347\2\2\u1ebd\u1ebc"+
		"\3\2\2\2\u1ebd\u1ebe\3\2\2\2\u1ebe\u1ec3\3\2\2\2\u1ebf\u1ec4\7\u026d\2"+
		"\2\u1ec0\u1ec1\7\u02de\2\2\u1ec1\u1ec2\7\u0333\2\2\u1ec2\u1ec4\7\u032f"+
		"\2\2\u1ec3\u1ebf\3\2\2\2\u1ec3\u1ec0\3\2\2\2\u1ec4\u1ede\3\2\2\2\u1ec5"+
		"\u1ec7\7\u0347\2\2\u1ec6\u1ec5\3\2\2\2\u1ec6\u1ec7\3\2\2\2\u1ec7\u1ec8"+
		"\3\2\2\2\u1ec8\u1ede\7\u0266\2\2\u1ec9\u1ecb\7\u0347\2\2\u1eca\u1ec9\3"+
		"\2\2\2\u1eca\u1ecb\3\2\2\2\u1ecb\u1ecc\3\2\2\2\u1ecc\u1ecd\7\u01ee\2\2"+
		"\u1ecd\u1ece\7\u0345\2\2\u1ece\u1ecf\7\u018c\2\2\u1ecf\u1ed0\7\u0333\2"+
		"\2\u1ed0\u1ed1\t[\2\2\u1ed1\u1ed2\7\u0347\2\2\u1ed2\u1ed3\7\u0137\2\2"+
		"\u1ed3\u1ed4\7-\2\2\u1ed4\u1edb\7\u0333\2\2\u1ed5\u1edc\5\u03f4\u01fb"+
		"\2\u1ed6\u1ed7\7\u0137\2\2\u1ed7\u1ed8\7\24\2\2\u1ed8\u1ed9\7\u00ae\2"+
		"\2\u1ed9\u1eda\7\u0333\2\2\u1eda\u1edc\5\u03f4\u01fb\2\u1edb\u1ed5\3\2"+
		"\2\2\u1edb\u1ed6\3\2\2\2\u1edc\u1ede\3\2\2\2\u1edd\u1e37\3\2\2\2\u1edd"+
		"\u1e3b\3\2\2\2\u1edd\u1e3f\3\2\2\2\u1edd\u1e43\3\2\2\2\u1edd\u1e4c\3\2"+
		"\2\2\u1edd\u1e52\3\2\2\2\u1edd\u1e56\3\2\2\2\u1edd\u1e5a\3\2\2\2\u1edd"+
		"\u1e6b\3\2\2\2\u1edd\u1e6f\3\2\2\2\u1edd\u1e73\3\2\2\2\u1edd\u1e77\3\2"+
		"\2\2\u1edd\u1e80\3\2\2\2\u1edd\u1e86\3\2\2\2\u1edd\u1e8f\3\2\2\2\u1edd"+
		"\u1e98\3\2\2\2\u1edd\u1ea1\3\2\2\2\u1edd\u1ea5\3\2\2\2\u1edd\u1ea9\3\2"+
		"\2\2\u1edd\u1ead\3\2\2\2\u1edd\u1eb5\3\2\2\2\u1edd\u1eb9\3\2\2\2\u1edd"+
		"\u1ebd\3\2\2\2\u1edd\u1ec6\3\2\2\2\u1edd\u1eca\3\2\2\2\u1ede\u1ee1\3\2"+
		"\2\2\u1edf\u1edd\3\2\2\2\u1edf\u1ee0\3\2\2\2\u1ee0\u1ee3\3\2\2\2\u1ee1"+
		"\u1edf\3\2\2\2\u1ee2\u1e35\3\2\2\2\u1ee2\u1ee3\3\2\2\2\u1ee3\u0269\3\2"+
		"\2\2\u1ee4\u1ee5\7\34\2\2\u1ee5\u1ee6\7-\2\2\u1ee6\u1ee7\5\u03f4\u01fb"+
		"\2\u1ee7\u1ee8\7\u015c\2\2\u1ee8\u1ee9\7\u0083\2\2\u1ee9\u1eea\7\u0333"+
		"\2\2\u1eea\u1f0a\7\u032f\2\2\u1eeb\u1eec\7\u017b\2\2\u1eec\u1eed\7\u028e"+
		"\2\2\u1eed\u1eee\7\u00ae\2\2\u1eee\u1f05\7\u0345\2\2\u1eef\u1ef1\7\u0347"+
		"\2\2\u1ef0\u1eef\3\2\2\2\u1ef0\u1ef1\3\2\2\2\u1ef1\u1ef2\3\2\2\2\u1ef2"+
		"\u1ef3\7\u0083\2\2\u1ef3\u1ef4\7\u0333\2\2\u1ef4\u1f06\7\u032f\2\2\u1ef5"+
		"\u1ef7\7\u0347\2\2\u1ef6\u1ef5\3\2\2\2\u1ef6\u1ef7\3\2\2\2\u1ef7\u1ef8"+
		"\3\2\2\2\u1ef8\u1ef9\7\u01ee\2\2\u1ef9\u1efa\7(\2\2\u1efa\u1efb\7\u00f6"+
		"\2\2\u1efb\u1efc\7\u0333\2\2\u1efc\u1f06\7\u032f\2\2\u1efd\u1eff\7\u0347"+
		"\2\2\u1efe\u1efd\3\2\2\2\u1efe\u1eff\3\2\2\2\u1eff\u1f00\3\2\2\2\u1f00"+
		"\u1f01\7\u01d3\2\2\u1f01\u1f02\7(\2\2\u1f02\u1f03\7\u00f6\2\2\u1f03\u1f04"+
		"\7\u0333\2\2\u1f04\u1f06\7\u032f\2\2\u1f05\u1ef0\3\2\2\2\u1f05\u1ef6\3"+
		"\2\2\2\u1f05\u1efe\3\2\2\2\u1f06\u1f07\3\2\2\2\u1f07\u1f05\3\2\2\2\u1f07"+
		"\u1f08\3\2\2\2\u1f08\u1f09\3\2\2\2\u1f09\u1f0b\7\u0346\2\2\u1f0a\u1eeb"+
		"\3\2\2\2\u1f0a\u1f0b\3\2\2\2\u1f0b\u026b\3\2\2\2\u1f0c\u1f0d\7\34\2\2"+
		"\u1f0d\u1f0e\7\u00bf\2\2\u1f0e\u1f0f\7\u00ae\2\2\u1f0f\u1f10\7\u015c\2"+
		"\2\u1f10\u1f11\7\u0083\2\2\u1f11\u1f12\7\u0333\2\2\u1f12\u1f13\7\u032f"+
		"\2\2\u1f13\u1f14\7\u01ee\2\2\u1f14\u1f15\7(\2\2\u1f15\u1f16\7\u00f6\2"+
		"\2\u1f16\u1f17\7\u0333\2\2\u1f17\u1f18\7\u032f\2\2\u1f18\u026d\3\2\2\2"+
		"\u1f19\u1f1a\7\34\2\2\u1f1a\u1f1b\7\u0138\2\2\u1f1b\u1f1c\7\u00bf\2\2"+
		"\u1f1c\u1f1d\7\u00ae\2\2\u1f1d\u1f1e\7\u015c\2\2\u1f1e\u1f1f\7\u0083\2"+
		"\2\u1f1f\u1f20\7\u0333\2\2\u1f20\u1f21\7\u032f\2\2\u1f21\u1f22\7\u01ee"+
		"\2\2\u1f22\u1f23\7(\2\2\u1f23\u1f24\7\u00f6\2\2\u1f24\u1f25\7\u0333\2"+
		"\2\u1f25\u1f26\7\u032f\2\2\u1f26\u026f\3\2\2\2\u1f27\u1f2b\7\u00b1\2\2"+
		"\u1f28\u1f2c\5\u0272\u013a\2\u1f29\u1f2c\5\u0274\u013b\2\u1f2a\u1f2c\5"+
		"\u0276\u013c\2\u1f2b\u1f28\3\2\2\2\u1f2b\u1f29\3\2\2\2\u1f2b\u1f2a\3\2"+
		"\2\2\u1f2c\u0271\3\2\2\2\u1f2d\u1f30\t\30\2\2\u1f2e\u1f30\7\u0309\2\2"+
		"\u1f2f\u1f2d\3\2\2\2\u1f2f\u1f2e\3\2\2\2\u1f30\u1f33\3\2\2\2\u1f31\u1f32"+
		"\7\u017b\2\2\u1f32\u1f34\7\u02e3\2\2\u1f33\u1f31\3\2\2\2\u1f33\u1f34\3"+
		"\2\2\2\u1f34\u0273\3\2\2\2\u1f35\u1f36\7\u0295\2\2\u1f36\u1f37\7\u00df"+
		"\2\2\u1f37\u1f3a\7\u02ea\2\2\u1f38\u1f3b\7\b\2\2\u1f39\u1f3b\7\u032b\2"+
		"\2\u1f3a\u1f38\3\2\2\2\u1f3a\u1f39\3\2\2\2\u1f3b\u0275\3\2\2\2\u1f3c\u1f3d"+
		"\7\u014c\2\2\u1f3d\u1f3e\7\u0228\2\2\u1f3e\u1f3f\7\u032b\2\2\u1f3f\u0277"+
		"\3\2\2\2\u1f40\u1f41\7x\2\2\u1f41\u1f42\5\u027a\u013e\2\u1f42\u0279\3"+
		"\2\2\2\u1f43\u1f44\7\u0326\2\2\u1f44\u1f46\7\u0333\2\2\u1f45\u1f43\3\2"+
		"\2\2\u1f45\u1f46\3\2\2\2\u1f46\u1f49\3\2\2\2\u1f47\u1f4a\5\u03c4\u01e3"+
		"\2\u1f48\u1f4a\5\u02d8\u016d\2\u1f49\u1f47\3\2\2\2\u1f49\u1f48\3\2\2\2"+
		"\u1f4a\u1f53\3\2\2\2\u1f4b\u1f50\5\u027c\u013f\2\u1f4c\u1f4d\7\u0347\2"+
		"\2\u1f4d\u1f4f\5\u027c\u013f\2\u1f4e\u1f4c\3\2\2\2\u1f4f\u1f52\3\2\2\2"+
		"\u1f50\u1f4e\3\2\2\2\u1f50\u1f51\3\2\2\2\u1f51\u1f54\3\2\2\2\u1f52\u1f50"+
		"\3\2\2\2\u1f53\u1f4b\3\2\2\2\u1f53\u1f54\3\2\2\2\u1f54\u1f56\3\2\2\2\u1f55"+
		"\u1f57\7\u0348\2\2\u1f56\u1f55\3\2\2\2\u1f56\u1f57\3\2\2\2\u1f57\u1f6e"+
		"\3\2\2\2\u1f58\u1f59\7\u0345\2\2\u1f59\u1f5e\5\u027e\u0140\2\u1f5a\u1f5b"+
		"\7\u034d\2\2\u1f5b\u1f5d\5\u027e\u0140\2\u1f5c\u1f5a\3\2\2\2\u1f5d\u1f60"+
		"\3\2\2\2\u1f5e\u1f5c\3\2\2\2\u1f5e\u1f5f\3\2\2\2\u1f5f\u1f61\3\2\2\2\u1f60"+
		"\u1f5e\3\2\2\2\u1f61\u1f68\7\u0346\2\2\u1f62\u1f64\7\22\2\2\u1f63\u1f62"+
		"\3\2\2\2\u1f63\u1f64\3\2\2\2\u1f64\u1f65\3\2\2\2\u1f65\u1f66\t\\\2\2\u1f66"+
		"\u1f67\7\u0333\2\2\u1f67\u1f69\7\u032f\2\2\u1f68\u1f63\3\2\2\2\u1f68\u1f69"+
		"\3\2\2\2\u1f69\u1f6b\3\2\2\2\u1f6a\u1f6c\7\u0348\2\2\u1f6b\u1f6a\3\2\2"+
		"\2\u1f6b\u1f6c\3\2\2\2\u1f6c\u1f6e\3\2\2\2\u1f6d\u1f45\3\2\2\2\u1f6d\u1f58"+
		"\3\2\2\2\u1f6e\u027b\3\2\2\2\u1f6f\u1f70\7\u0326\2\2\u1f70\u1f72\7\u0333"+
		"\2\2\u1f71\u1f6f\3\2\2\2\u1f71\u1f72\3\2\2\2\u1f72\u1f7c\3\2\2\2\u1f73"+
		"\u1f76\5\u02d6\u016c\2\u1f74\u1f76\5\u03f4\u01fb\2\u1f75\u1f73\3\2\2\2"+
		"\u1f75\u1f74\3\2\2\2\u1f76\u1f78\3\2\2\2\u1f77\u1f79\t]\2\2\u1f78\u1f77"+
		"\3\2\2\2\u1f78\u1f79\3\2\2\2\u1f79\u1f7d\3\2\2\2\u1f7a\u1f7d\7[\2\2\u1f7b"+
		"\u1f7d\7\u00e1\2\2\u1f7c\u1f75\3\2\2\2\u1f7c\u1f7a\3\2\2\2\u1f7c\u1f7b"+
		"\3\2\2\2\u1f7d\u027d\3\2\2\2\u1f7e\u1f7f\t\3\2\2\u1f7f\u027f\3\2\2\2\u1f80"+
		"\u1f82\5\u02ae\u0158\2\u1f81\u1f83\7\u0348\2\2\u1f82\u1f81\3\2\2\2\u1f82"+
		"\u1f83\3\2\2\2\u1f83\u1fbc\3\2\2\2\u1f84\u1f90\7\u0093\2\2\u1f85\u1f87"+
		"\7\b\2\2\u1f86\u1f88\7\u0290\2\2\u1f87\u1f86\3\2\2\2\u1f87\u1f88\3\2\2"+
		"\2\u1f88\u1f91\3\2\2\2\u1f89\u1f8e\5\u029a\u014e\2\u1f8a\u1f8b\7\u0345"+
		"\2\2\u1f8b\u1f8c\5\u03cc\u01e7\2\u1f8c\u1f8d\7\u0346\2\2\u1f8d\u1f8f\3"+
		"\2\2\2\u1f8e\u1f8a\3\2\2\2\u1f8e\u1f8f\3\2\2\2\u1f8f\u1f91\3\2\2\2\u1f90"+
		"\u1f85\3\2\2\2\u1f90\u1f89\3\2\2\2\u1f91\u1f94\3\2\2\2\u1f92\u1f93\7\u00e7"+
		"\2\2\u1f93\u1f95\5\u03bc\u01df\2\u1f94\u1f92\3\2\2\2\u1f94\u1f95\3\2\2"+
		"\2\u1f95\u1f96\3\2\2\2\u1f96\u1f97\7\u015c\2\2\u1f97\u1f9c\5\u03f4\u01fb"+
		"\2\u1f98\u1f99\7\u0347\2\2\u1f99\u1f9b\5\u03f4\u01fb\2\u1f9a\u1f98\3\2"+
		"\2\2\u1f9b\u1f9e\3\2\2\2\u1f9c\u1f9a\3\2\2\2\u1f9c\u1f9d\3\2\2\2\u1f9d"+
		"\u1fa2\3\2\2\2\u1f9e\u1f9c\3\2\2\2\u1f9f\u1fa0\7\u017b\2\2\u1fa0\u1fa1"+
		"\7\u0093\2\2\u1fa1\u1fa3\7\u00ee\2\2\u1fa2\u1f9f\3\2\2\2\u1fa2\u1fa3\3"+
		"\2\2\2\u1fa3\u1fa6\3\2\2\2\u1fa4\u1fa5\7\22\2\2\u1fa5\u1fa7\5\u03f4\u01fb"+
		"\2\u1fa6\u1fa4\3\2\2\2\u1fa6\u1fa7\3\2\2\2\u1fa7\u1fa9\3\2\2\2\u1fa8\u1faa"+
		"\7\u0348\2\2\u1fa9\u1fa8\3\2\2\2\u1fa9\u1faa\3\2\2\2\u1faa\u1fbc\3\2\2"+
		"\2\u1fab\u1fb2\7\u011e\2\2\u1fac\u1fad\7\u0345\2\2\u1fad\u1fae\7\u017b"+
		"\2\2\u1fae\u1faf\7\u01bf\2\2\u1faf\u1fb0\7\u0333\2\2\u1fb0\u1fb1\7\u0326"+
		"\2\2\u1fb1\u1fb3\7\u0346\2\2\u1fb2\u1fac\3\2\2\2\u1fb2\u1fb3\3\2\2\2\u1fb3"+
		"\u1fb5\3\2\2\2\u1fb4\u1fb6\7\u0348\2\2\u1fb5\u1fb4\3\2\2\2\u1fb5\u1fb6"+
		"\3\2\2\2\u1fb6\u1fbc\3\2\2\2\u1fb7\u1fbc\5\u028c\u0147\2\u1fb8\u1fbc\5"+
		"\u028e\u0148\2\u1fb9\u1fbc\5\u0290\u0149\2\u1fba\u1fbc\5\u0282\u0142\2"+
		"\u1fbb\u1f80\3\2\2\2\u1fbb\u1f84\3\2\2\2\u1fbb\u1fab\3\2\2\2\u1fbb\u1fb7"+
		"\3\2\2\2\u1fbb\u1fb8\3\2\2\2\u1fbb\u1fb9\3\2\2\2\u1fbb\u1fba\3\2\2\2\u1fbc"+
		"\u0281\3\2\2\2\u1fbd\u1fbe\7K\2\2\u1fbe\u1fbf\7-\2\2\u1fbf\u1fc2\5\u03f4"+
		"\u01fb\2\u1fc0\u1fc1\7\26\2\2\u1fc1\u1fc3\5\u03f4\u01fb\2\u1fc2\u1fc0"+
		"\3\2\2\2\u1fc2\u1fc3\3\2\2\2\u1fc3\u1fc7\3\2\2\2\u1fc4\u1fc5\7\u008d\2"+
		"\2\u1fc5\u1fc8\5\u0284\u0143\2\u1fc6\u1fc8\5\u0288\u0145\2\u1fc7\u1fc4"+
		"\3\2\2\2\u1fc7\u1fc6\3\2\2\2\u1fc8\u1fcf\3\2\2\2\u1fc9\u1fca\7\u0184\2"+
		"\2\u1fca\u1fcb\7\u0087\2\2\u1fcb\u1fcc\7\36\2\2\u1fcc\u1fcd\7\u01e0\2"+
		"\2\u1fcd\u1fce\7\u0333\2\2\u1fce\u1fd0\t\t\2\2\u1fcf\u1fc9\3\2\2\2\u1fcf"+
		"\u1fd0\3\2\2\2\u1fd0\u0283\3\2\2\2\u1fd1\u1fd2\7\u0197\2\2\u1fd2\u1fe3"+
		"\5\u03f4\u01fb\2\u1fd3\u1fd5\7\u01f2\2\2\u1fd4\u1fd3\3\2\2\2\u1fd4\u1fd5"+
		"\3\2\2\2\u1fd5\u1fd6\3\2\2\2\u1fd6\u1fd7\7\u0083\2\2\u1fd7\u1fd8\7\u0333"+
		"\2\2\u1fd8\u1fe0\7\u032f\2\2\u1fd9\u1fda\7\u017b\2\2\u1fda\u1fdb\7\u028e"+
		"\2\2\u1fdb\u1fdc\7\u00ae\2\2\u1fdc\u1fdd\7\u0345\2\2\u1fdd\u1fde\5\u0286"+
		"\u0144\2\u1fde\u1fdf\7\u0346\2\2\u1fdf\u1fe1\3\2\2\2\u1fe0\u1fd9\3\2\2"+
		"\2\u1fe0\u1fe1\3\2\2\2\u1fe1\u1fe3\3\2\2\2\u1fe2\u1fd1\3\2\2\2\u1fe2\u1fd4"+
		"\3\2\2\2\u1fe3\u0285\3\2\2\2\u1fe4\u1fe5\t^\2\2\u1fe5\u1fe6\7\u0333\2"+
		"\2\u1fe6\u1fed\7\u032f\2\2\u1fe7\u1fe8\7\u0347\2\2\u1fe8\u1fe9\t_\2\2"+
		"\u1fe9\u1fea\7(\2\2\u1fea\u1feb\7\u00f6\2\2\u1feb\u1fec\7\u0333\2\2\u1fec"+
		"\u1fee\7\u032f\2\2\u1fed\u1fe7\3\2\2\2\u1fed\u1fee\3\2\2\2\u1fee\u0287"+
		"\3\2\2\2\u1fef\u1ff0\7\u01ee\2\2\u1ff0\u1ff1\7(\2\2\u1ff1\u1ff2\7\u00f6"+
		"\2\2\u1ff2\u1ff3\7\u0333\2\2\u1ff3\u1ff5\7\u032f\2\2\u1ff4\u1fef\3\2\2"+
		"\2\u1ff4\u1ff5\3\2\2\2\u1ff5\u1ff6\3\2\2\2\u1ff6\u1ff7\7\u017b\2\2\u1ff7"+
		"\u1ff8\7\u02e9\2\2\u1ff8\u1ff9\7\u0333\2\2\u1ff9\u1ffe\7\u032f\2\2\u1ffa"+
		"\u1ffb\7\u0347\2\2\u1ffb\u1ffd\5\u028a\u0146\2\u1ffc\u1ffa\3\2\2\2\u1ffd"+
		"\u2000\3\2\2\2\u1ffe\u1ffc\3\2\2\2\u1ffe\u1fff\3\2\2\2\u1fff\u0289\3\2"+
		"\2\2\u2000\u1ffe\3\2\2\2\u2001\u2002\t`\2\2\u2002\u2003\7\u0333\2\2\u2003"+
		"\u2004\7\u032f\2\2\u2004\u028b\3\2\2\2\u2005\u2006\7\u00e9\2\2\u2006\u2007"+
		"\7\u02ed\2\2\u2007\u2008\7\u00ae\2\2\u2008\u2009\5\u03f4\u01fb\2\u2009"+
		"\u200a\7\u01d3\2\2\u200a\u200b\7(\2\2\u200b\u200c\5\u0298\u014d\2\u200c"+
		"\u2016\3\2\2\2\u200d\u200e\7\u00e9\2\2\u200e\u200f\7\u00bf\2\2\u200f\u2010"+
		"\7\u00ae\2\2\u2010\u2011\7\u01d3\2\2\u2011\u2012\7(\2\2\u2012\u2013\7"+
		"\u00f6\2\2\u2013\u2014\7\u0333\2\2\u2014\u2016\7\u032f\2\2\u2015\u2005"+
		"\3\2\2\2\u2015\u200d\3\2\2\2\u2016\u028d\3\2\2\2\u2017\u2018\7\65\2\2"+
		"\u2018\u2019\7\u02ed\2\2\u2019\u201a\7\u00ae\2\2\u201a\u2023\5\u03f4\u01fb"+
		"\2\u201b\u201c\7\65\2\2\u201c\u201d\7\b\2\2\u201d\u201e\7\u02ed\2\2\u201e"+
		"\u2023\7\u022e\2\2\u201f\u2020\7\65\2\2\u2020\u2021\7\u00bf\2\2\u2021"+
		"\u2023\7\u00ae\2\2\u2022\u2017\3\2\2\2\u2022\u201b\3\2\2\2\u2022\u201f"+
		"\3\2\2\2\u2023\u028f\3\2\2\2\u2024\u2025\7K\2\2\u2025\u2026\7\u00bf\2"+
		"\2\u2026\u2027\7\u00ae\2\2\u2027\u2028\7\u01ee\2\2\u2028\u2029\7(\2\2"+
		"\u2029\u202a\7\u00f6\2\2\u202a\u202b\7\u0333\2\2\u202b\u2048\7\u032f\2"+
		"\2\u202c\u202d\7K\2\2\u202d\u202e\7\u02ed\2\2\u202e\u202f\7\u00ae\2\2"+
		"\u202f\u2032\5\u03f4\u01fb\2\u2030\u2031\7\26\2\2\u2031\u2033\5\u03f4"+
		"\u01fb\2\u2032\u2030\3\2\2\2\u2032\u2033\3\2\2\2\u2033\u2037\3\2\2\2\u2034"+
		"\u2035\7\u008d\2\2\u2035\u2036\7\u0293\2\2\u2036\u2038\5\u03f4\u01fb\2"+
		"\u2037\u2034\3\2\2\2\u2037\u2038\3\2\2\2\u2038\u2039\3\2\2\2\u2039\u2043"+
		"\7\u017b\2\2\u203a\u203f\5\u0292\u014a\2\u203b\u203c\7\u01ee\2\2\u203c"+
		"\u203d\7(\2\2\u203d\u203f\5\u0296\u014c\2\u203e\u203a\3\2\2\2\u203e\u203b"+
		"\3\2\2\2\u203f\u2041\3\2\2\2\u2040\u2042\7\u0347\2\2\u2041\u2040\3\2\2"+
		"\2\u2041\u2042\3\2\2\2\u2042\u2044\3\2\2\2\u2043\u203e\3\2\2\2\u2044\u2045"+
		"\3\2\2\2\u2045\u2043\3\2\2\2\u2045\u2046\3\2\2\2\u2046\u2048\3\2\2\2\u2047"+
		"\u2024\3\2\2\2\u2047\u202c\3\2\2\2\u2048\u0291\3\2\2\2\u2049\u204a\7\u022d"+
		"\2\2\u204a\u204b\7\u0333\2\2\u204b\u2059\7\u032f\2\2\u204c\u204d\7\u018c"+
		"\2\2\u204d\u204e\7\u0333\2\2\u204e\u2059\5\u0294\u014b\2\u204f\u2050\7"+
		"\u021a\2\2\u2050\u2051\7\u0333\2\2\u2051\u2059\7\u032f\2\2\u2052\u2053"+
		"\7\u0294\2\2\u2053\u2054\7\u0333\2\2\u2054\u2059\7\u032f\2\2\u2055\u2056"+
		"\7\u01c5\2\2\u2056\u2057\7\u0333\2\2\u2057\u2059\t\f\2\2\u2058\u2049\3"+
		"\2\2\2\u2058\u204c\3\2\2\2\u2058\u204f\3\2\2\2\u2058\u2052\3\2\2\2\u2058"+
		"\u2055\3\2\2\2\u2059\u0293\3\2\2\2\u205a\u205b\t\63\2\2\u205b\u0295\3"+
		"\2\2\2\u205c\u205d\7-\2\2\u205d\u2068\5\u03f4\u01fb\2\u205e\u205f\7\24"+
		"\2\2\u205f\u2060\7\u00ae\2\2\u2060\u2068\5\u03f4\u01fb\2\u2061\u2062\7"+
		"\u02ed\2\2\u2062\u2063\7\u00ae\2\2\u2063\u2068\5\u03f4\u01fb\2\u2064\u2065"+
		"\7\u00f6\2\2\u2065\u2066\7\u0333\2\2\u2066\u2068\7\u032f\2\2\u2067\u205c"+
		"\3\2\2\2\u2067\u205e\3\2\2\2\u2067\u2061\3\2\2\2\u2067\u2064\3\2\2\2\u2068"+
		"\u0297\3\2\2\2\u2069\u206a\7-\2\2\u206a\u206f\5\u03f4\u01fb\2\u206b\u206c"+
		"\7\u017b\2\2\u206c\u206d\7\u00f6\2\2\u206d\u206e\7\u0333\2\2\u206e\u2070"+
		"\7\u032f\2\2\u206f\u206b\3\2\2\2\u206f\u2070\3\2\2\2\u2070\u2081\3\2\2"+
		"\2\u2071\u2072\7\24\2\2\u2072\u2073\7\u00ae\2\2\u2073\u2078\5\u03f4\u01fb"+
		"\2\u2074\u2075\7\u017b\2\2\u2075\u2076\7\u00f6\2\2\u2076\u2077\7\u0333"+
		"\2\2\u2077\u2079\7\u032f\2\2\u2078\u2074\3\2\2\2\u2078\u2079\3\2\2\2\u2079"+
		"\u2081\3\2\2\2\u207a\u207b\7\u02ed\2\2\u207b\u207c\7\u00ae\2\2\u207c\u2081"+
		"\5\u03f4\u01fb\2\u207d\u207e\7\u00f6\2\2\u207e\u207f\7\u0333\2\2\u207f"+
		"\u2081\7\u032f\2\2\u2080\u2069\3\2\2\2\u2080\u2071\3\2\2\2\u2080\u207a"+
		"\3\2\2\2\u2080\u207d\3\2\2\2\u2081\u0299\3\2\2\2\u2082\u209d\7x\2\2\u2083"+
		"\u2084\7\u0174\2\2\u2084\u209d\5\u03f4\u01fb\2\u2085\u2086\7\u02f1\2\2"+
		"\u2086\u209d\5\u03f4\u01fb\2\u2087\u2089\7\u01be\2\2\u2088\u208a\5\u03f4"+
		"\u01fb\2\u2089\u2088\3\2\2\2\u2089\u208a\3\2\2\2\u208a\u209d\3\2\2\2\u208b"+
		"\u208c\7K\2\2\u208c\u209d\ta\2\2\u208d\u209d\7\u02d6\2\2\u208e\u209d\7"+
		"\u021d\2\2\u208f\u209d\7\u0133\2\2\u2090\u209d\7\u0110\2\2\u2091\u209d"+
		"\7\u00a4\2\2\u2092\u209a\7\f\2\2\u2093\u2095\7\17\2\2\u2094\u2093\3\2"+
		"\2\2\u2094\u2095\3\2\2\2\u2095\u2098\3\2\2\2\u2096\u2099\5\u03f4\u01fb"+
		"\2\u2097\u2099\7V\2\2\u2098\u2096\3\2\2\2\u2098\u2097\3\2\2\2\u2099\u209b"+
		"\3\2\2\2\u209a\u2094\3\2\2\2\u209a\u209b\3\2\2\2\u209b\u209d\3\2\2\2\u209c"+
		"\u2082\3\2\2\2\u209c\u2083\3\2\2\2\u209c\u2085\3\2\2\2\u209c\u2087\3\2"+
		"\2\2\u209c\u208b\3\2\2\2\u209c\u208d\3\2\2\2\u209c\u208e\3\2\2\2\u209c"+
		"\u208f\3\2\2\2\u209c\u2090\3\2\2\2\u209c\u2091\3\2\2\2\u209c\u2092\3\2"+
		"\2\2\u209d\u029b\3\2\2\2\u209e\u209f\7\u013d\2\2\u209f\u20a2\7\u0326\2"+
		"\2\u20a0\u20a1\7\u0340\2\2\u20a1\u20a3\5\u03f4\u01fb\2\u20a2\u20a0\3\2"+
		"\2\2\u20a2\u20a3\3\2\2\2\u20a3\u20a4\3\2\2\2\u20a4\u20a5\7\u0333\2\2\u20a5"+
		"\u20a7\5\u02d8\u016d\2\u20a6\u20a8\7\u0348\2\2\u20a7\u20a6\3\2\2\2\u20a7"+
		"\u20a8\3\2\2\2\u20a8\u20c6\3\2\2\2\u20a9\u20aa\7\u013d\2\2\u20aa\u20ab"+
		"\7\u0326\2\2\u20ab\u20ac\5\u03fa\u01fe\2\u20ac\u20ae\5\u02d8\u016d\2\u20ad"+
		"\u20af\7\u0348\2\2\u20ae\u20ad\3\2\2\2\u20ae\u20af\3\2\2\2\u20af\u20c6"+
		"\3\2\2\2\u20b0\u20b1\7\u013d\2\2\u20b1\u20b2\7\u0326\2\2\u20b2\u20b3\7"+
		"\u0333\2\2\u20b3\u20b4\7R\2\2\u20b4\u20bf\5\u02ce\u0168\2\u20b5\u20bd"+
		"\7\u0087\2\2\u20b6\u20b7\7\u010c\2\2\u20b7\u20be\7\u0278\2\2\u20b8\u20bb"+
		"\7\u016b\2\2\u20b9\u20ba\7\u00e3\2\2\u20ba\u20bc\5\u03cc\u01e7\2\u20bb"+
		"\u20b9\3\2\2\2\u20bb\u20bc\3\2\2\2\u20bc\u20be\3\2\2\2\u20bd\u20b6\3\2"+
		"\2\2\u20bd\u20b8\3\2\2\2\u20be\u20c0\3\2\2\2\u20bf\u20b5\3\2\2\2\u20bf"+
		"\u20c0\3\2\2\2\u20c0\u20c2\3\2\2\2\u20c1\u20c3\7\u0348\2\2\u20c2\u20c1"+
		"\3\2\2\2\u20c2\u20c3\3\2\2\2\u20c3\u20c6\3\2\2\2\u20c4\u20c6\5\u02d4\u016b"+
		"\2\u20c5\u209e\3\2\2\2\u20c5\u20a9\3\2\2\2\u20c5\u20b0\3\2\2\2\u20c5\u20c4"+
		"\3\2\2\2\u20c6\u029d\3\2\2\2\u20c7\u20c8\7\36\2\2\u20c8\u20c9\7e\2\2\u20c9"+
		"\u20cc\tb\2\2\u20ca\u20cd\5\u03f4\u01fb\2\u20cb\u20cd\7\u0326\2\2\u20cc"+
		"\u20ca\3\2\2\2\u20cc\u20cb\3\2\2\2\u20cc\u20cd\3\2\2\2\u20cd\u20cf\3\2"+
		"\2\2\u20ce\u20d0\7\u0348\2\2\u20cf\u20ce\3\2\2\2\u20cf\u20d0\3\2\2\2\u20d0"+
		"\u2119\3\2\2\2\u20d1\u20d2\7\36\2\2\u20d2\u20dc\tb\2\2\u20d3\u20d6\5\u03f4"+
		"\u01fb\2\u20d4\u20d6\7\u0326\2\2\u20d5\u20d3\3\2\2\2\u20d5\u20d4\3\2\2"+
		"\2\u20d6\u20da\3\2\2\2\u20d7\u20d8\7\u017b\2\2\u20d8\u20d9\7\u0241\2\2"+
		"\u20d9\u20db\7\u032f\2\2\u20da\u20d7\3\2\2\2\u20da\u20db\3\2\2\2\u20db"+
		"\u20dd\3\2\2\2\u20dc\u20d5\3\2\2\2\u20dc\u20dd\3\2\2\2\u20dd\u20df\3\2"+
		"\2\2\u20de\u20e0\7\u0348\2\2\u20df\u20de\3\2\2\2\u20df\u20e0\3\2\2\2\u20e0"+
		"\u2119\3\2\2\2\u20e1\u20e2\7<\2\2\u20e2\u20ef\tb\2\2\u20e3\u20e6\5\u03f4"+
		"\u01fb\2\u20e4\u20e6\7\u0326\2\2\u20e5\u20e3\3\2\2\2\u20e5\u20e4\3\2\2"+
		"\2\u20e6\u20ed\3\2\2\2\u20e7\u20e8\7\u017b\2\2\u20e8\u20e9\7\u0345\2\2"+
		"\u20e9\u20ea\7\u01d8\2\2\u20ea\u20eb\7\u0333\2\2\u20eb\u20ec\t\t\2\2\u20ec"+
		"\u20ee\7\u0346\2\2\u20ed\u20e7\3\2\2\2\u20ed\u20ee\3\2\2\2\u20ee\u20f0"+
		"\3\2\2\2\u20ef\u20e5\3\2\2\2\u20ef\u20f0\3\2\2\2\u20f0\u20f2\3\2\2\2\u20f1"+
		"\u20f3\7\u0348\2\2\u20f2\u20f1\3\2\2\2\u20f2\u20f3\3\2\2\2\u20f3\u2119"+
		"\3\2\2\2\u20f4\u20f6\7<\2\2\u20f5\u20f7\7\u0315\2\2\u20f6\u20f5\3\2\2"+
		"\2\u20f6\u20f7\3\2\2\2\u20f7\u20f9\3\2\2\2\u20f8\u20fa\7\u0348\2\2\u20f9"+
		"\u20f8\3\2\2\2\u20f9\u20fa\3\2\2\2\u20fa\u2119\3\2\2\2\u20fb\u20fc\7<"+
		"\2\2\u20fc\u2119\5\u03f4\u01fb\2\u20fd\u20fe\7\u0122\2\2\u20fe\u2119\5"+
		"\u03f4\u01fb\2\u20ff\u2100\7\u0122\2\2\u2100\u2103\tb\2\2\u2101\u2104"+
		"\5\u03f4\u01fb\2\u2102\u2104\7\u0326\2\2\u2103\u2101\3\2\2\2\u2103\u2102"+
		"\3\2\2\2\u2103\u2104\3\2\2\2\u2104\u2106\3\2\2\2\u2105\u2107\7\u0348\2"+
		"\2\u2106\u2105\3\2\2\2\u2106\u2107\3\2\2\2\u2107\u2119\3\2\2\2\u2108\u210a"+
		"\7\u0122\2\2\u2109\u210b\7\u0315\2\2\u210a\u2109\3\2\2\2\u210a\u210b\3"+
		"\2\2\2\u210b\u210d\3\2\2\2\u210c\u210e\7\u0348\2\2\u210d\u210c\3\2\2\2"+
		"\u210d\u210e\3\2\2\2\u210e\u2119\3\2\2\2\u210f\u2110\7\u012e\2\2\u2110"+
		"\u2113\tb\2\2\u2111\u2114\5\u03f4\u01fb\2\u2112\u2114\7\u0326\2\2\u2113"+
		"\u2111\3\2\2\2\u2113\u2112\3\2\2\2\u2113\u2114\3\2\2\2\u2114\u2116\3\2"+
		"\2\2\u2115\u2117\7\u0348\2\2\u2116\u2115\3\2\2\2\u2116\u2117\3\2\2\2\u2117"+
		"\u2119\3\2\2\2\u2118\u20c7\3\2\2\2\u2118\u20d1\3\2\2\2\u2118\u20e1\3\2"+
		"\2\2\u2118\u20f4\3\2\2\2\u2118\u20fb\3\2\2\2\u2118\u20fd\3\2\2\2\u2118"+
		"\u20ff\3\2\2\2\u2118\u2108\3\2\2\2\u2118\u210f\3\2\2\2\u2119\u029f\3\2"+
		"\2\2\u211a\u211c\7\u0210\2\2\u211b\u211d\7\u032b\2\2\u211c\u211b\3\2\2"+
		"\2\u211c\u211d\3\2\2\2\u211d\u02a1\3\2\2\2\u211e\u211f\7\u016e\2\2\u211f"+
		"\u2121\5\u03f4\u01fb\2\u2120\u2122\7\u0348\2\2\u2121\u2120\3\2\2\2\u2121"+
		"\u2122\3\2\2\2\u2122\u02a3\3\2\2\2\u2123\u2125\7\u013e\2\2\u2124\u2126"+
		"\7\u032f\2\2\u2125\u2124\3\2\2\2\u2125\u2126\3\2\2\2\u2126\u02a5\3\2\2"+
		"\2\u2127\u212a\7\u010f\2\2\u2128\u2129\7\u017b\2\2\u2129\u212b\7\u027e"+
		"\2\2\u212a\u2128\3\2\2\2\u212a\u212b\3\2\2\2\u212b\u02a7\3\2\2\2\u212c"+
		"\u212f\7\u013f\2\2\u212d\u212e\7\u017b\2\2\u212e\u2130\7\u026e\2\2\u212f"+
		"\u212d\3\2\2\2\u212f\u2130\3\2\2\2\u2130\u02a9\3\2\2\2\u2131\u2132\7X"+
		"\2\2\u2132\u2137\5\u03f6\u01fc\2\u2133\u2134\7\u0345\2\2\u2134\u2135\5"+
		"\u0394\u01cb\2\u2135\u2136\7\u0346\2\2\u2136\u2138\3\2\2\2\u2137\u2133"+
		"\3\2\2\2\u2137\u2138\3\2\2\2\u2138\u213b\3\2\2\2\u2139\u213a\7\u017b\2"+
		"\2\u213a\u213c\5\u02ac\u0157\2\u213b\u2139\3\2\2\2\u213b\u213c\3\2\2\2"+
		"\u213c\u213e\3\2\2\2\u213d\u213f\7\u0348\2\2\u213e\u213d\3\2\2\2\u213e"+
		"\u213f\3\2\2\2\u213f\u02ab\3\2\2\2\u2140\u2143\5\u03f6\u01fc\2\u2141\u2142"+
		"\7\u0347\2\2\u2142\u2144\5\u03f6\u01fc\2\u2143\u2141\3\2\2\2\u2143\u2144"+
		"\3\2\2\2\u2144\u02ad\3\2\2\2\u2145\u2146\7x\2\2\u2146\u2147\7\22\2\2\u2147"+
		"\u2148\tc\2\2\u2148\u02af\3\2\2\2\u2149\u214b\7\u0326\2\2\u214a\u214c"+
		"\7\22\2\2\u214b\u214a\3\2\2\2\u214b\u214c\3\2\2\2\u214c\u214d\3\2\2\2"+
		"\u214d\u2150\5\u03ec\u01f7\2\u214e\u214f\7\u0333\2\2\u214f\u2151\5\u02d8"+
		"\u016d\2\u2150\u214e\3\2\2\2\u2150\u2151\3\2\2\2\u2151\u02b1\3\2\2\2\u2152"+
		"\u2153\7\u0155\2\2\u2153\u2154\7\u0345\2\2\u2154\u2155\5\u02b8\u015d\2"+
		"\u2155\u2156\7\u0346\2\2\u2156\u02b3\3\2\2\2\u2157\u2158\7\u0317\2\2\u2158"+
		"\u215a\7\u0345\2\2\u2159\u215b\td\2\2\u215a\u2159\3\2\2\2\u215a\u215b"+
		"\3\2\2\2\u215b\u215c\3\2\2\2\u215c\u215d\5\u02b6\u015c\2\u215d\u215e\7"+
		"\u0346\2\2\u215e\u02b5\3\2\2\2\u215f\u2160\7\u032c\2\2\u2160\u2161\7\u0340"+
		"\2\2\u2161\u2162\7\u032c\2\2\u2162\u02b7\3\2\2\2\u2163\u216a\5\u02ba\u015e"+
		"\2\u2164\u2166\7\u0347\2\2\u2165\u2164\3\2\2\2\u2165\u2166\3\2\2\2\u2166"+
		"\u2167\3\2\2\2\u2167\u2169\5\u02ba\u015e\2\u2168\u2165\3\2\2\2\u2169\u216c"+
		"\3\2\2\2\u216a\u2168\3\2\2\2\u216a\u216b\3\2\2\2\u216b\u02b9\3\2\2\2\u216c"+
		"\u216a\3\2\2\2\u216d\u2171\5\u02bc\u015f\2\u216e\u2171\5\u02be\u0160\2"+
		"\u216f\u2171\5\u02c2\u0162\2\u2170\u216d\3\2\2\2\u2170\u216e\3\2\2\2\u2170"+
		"\u216f\3\2\2\2\u2171\u02bb\3\2\2\2\u2172\u2176\5\u03f4\u01fb\2\u2173\u2177"+
		"\5\u03ec\u01f7\2\u2174\u2175\7\22\2\2\u2175\u2177\5\u02d8\u016d\2\u2176"+
		"\u2173\3\2\2\2\u2176\u2174\3\2\2\2\u2177\u217a\3\2\2\2\u2178\u2179\79"+
		"\2\2\u2179\u217b\5\u03f4\u01fb\2\u217a\u2178\3\2\2\2\u217a\u217b\3\2\2"+
		"\2\u217b\u217d\3\2\2\2\u217c\u217e\5\u03d4\u01eb\2\u217d\u217c\3\2\2\2"+
		"\u217d\u217e\3\2\2\2\u217e\u2194\3\2\2\2\u217f\u2180\7?\2\2\u2180\u2182"+
		"\5\u03f4\u01fb\2\u2181\u217f\3\2\2\2\u2181\u2182\3\2\2\2\u2182\u2183\3"+
		"\2\2\2\u2183\u2185\5\u03d6\u01ec\2\u2184\u2186\5\u03d6\u01ec\2\u2185\u2184"+
		"\3\2\2\2\u2185\u2186\3\2\2\2\u2186\u2195\3\2\2\2\u2187\u218d\7\u0098\2"+
		"\2\u2188\u2189\7\u0345\2\2\u2189\u218a\7\u032b\2\2\u218a\u218b\7\u0347"+
		"\2\2\u218b\u218c\7\u032b\2\2\u218c\u218e\7\u0346\2\2\u218d\u2188\3\2\2"+
		"\2\u218d\u218e\3\2\2\2\u218e\u2192\3\2\2\2\u218f\u2190\7\u00de\2\2\u2190"+
		"\u2191\7\u0087\2\2\u2191\u2193\7\u0114\2\2\u2192\u218f\3\2\2\2\u2192\u2193"+
		"\3\2\2\2\u2193\u2195\3\2\2\2\u2194\u2181\3\2\2\2\u2194\u2187\3\2\2\2\u2194"+
		"\u2195\3\2\2\2\u2195\u2197\3\2\2\2\u2196\u2198\7\u0125\2\2\u2197\u2196"+
		"\3\2\2\2\u2197\u2198\3\2\2\2\u2198\u219c\3\2\2\2\u2199\u219b\5\u02c0\u0161"+
		"\2\u219a\u2199\3\2\2\2\u219b\u219e\3\2\2\2\u219c\u219a\3\2\2\2\u219c\u219d"+
		"\3\2\2\2\u219d\u02bd\3\2\2\2\u219e\u219c\3\2\2\2\u219f\u21a0\5\u03f4\u01fb"+
		"\2\u21a0\u21a1\te\2\2\u21a1\u21a5\5\u02d8\u016d\2\u21a2\u21a6\7\u0242"+
		"\2\2\u21a3\u21a4\7\u00de\2\2\u21a4\u21a6\7\u0242\2\2\u21a5\u21a2\3\2\2"+
		"\2\u21a5\u21a3\3\2\2\2\u21a5\u21a6\3\2\2\2\u21a6\u02bf\3\2\2\2\u21a7\u21a8"+
		"\7?\2\2\u21a8\u21aa\5\u03f4\u01fb\2\u21a9\u21a7\3\2\2\2\u21a9\u21aa\3"+
		"\2\2\2\u21aa\u21d0\3\2\2\2\u21ab\u21ac\7\u0102\2\2\u21ac\u21af\7\u00ae"+
		"\2\2\u21ad\u21af\7\u0167\2\2\u21ae\u21ab\3\2\2\2\u21ae\u21ad\3\2\2\2\u21af"+
		"\u21b1\3\2\2\2\u21b0\u21b2\5\u03d2\u01ea\2\u21b1\u21b0\3\2\2\2\u21b1\u21b2"+
		"\3\2\2\2\u21b2\u21b4\3\2\2\2\u21b3\u21b5\5\u02c8\u0165\2\u21b4\u21b3\3"+
		"\2\2\2\u21b4\u21b5\3\2\2\2\u21b5\u21d1\3\2\2\2\u21b6\u21ba\7\60\2\2\u21b7"+
		"\u21b8\7\u00de\2\2\u21b8\u21b9\7\u0087\2\2\u21b9\u21bb\7\u0114\2\2\u21ba"+
		"\u21b7\3\2\2\2\u21ba\u21bb\3\2\2\2\u21bb\u21bc\3\2\2\2\u21bc\u21bd\7\u0345"+
		"\2\2\u21bd\u21be\5\u031c\u018f\2\u21be\u21bf\7\u0346\2\2\u21bf\u21d1\3"+
		"\2\2\2\u21c0\u21c1\7\u008a\2\2\u21c1\u21c3\7\u00ae\2\2\u21c2\u21c0\3\2"+
		"\2\2\u21c2\u21c3\3\2\2\2\u21c3\u21c4\3\2\2\2\u21c4\u21c5\7\u0110\2\2\u21c5"+
		"\u21c6\5\u03bc\u01df\2\u21c6\u21c7\7\u0345\2\2\u21c7\u21c8\5\u03cc\u01e7"+
		"\2\u21c8\u21ca\7\u0346\2\2\u21c9\u21cb\5\u02c4\u0163\2\u21ca\u21c9\3\2"+
		"\2\2\u21ca\u21cb\3\2\2\2\u21cb\u21cd\3\2\2\2\u21cc\u21ce\5\u02c6\u0164"+
		"\2\u21cd\u21cc\3\2\2\2\u21cd\u21ce\3\2\2\2\u21ce\u21d1\3\2\2\2\u21cf\u21d1"+
		"\5\u03d4\u01eb\2\u21d0\u21ae\3\2\2\2\u21d0\u21b6\3\2\2\2\u21d0\u21c2\3"+
		"\2\2\2\u21d0\u21cf\3\2\2\2\u21d1\u02c1\3\2\2\2\u21d2\u21d3\7?\2\2\u21d3"+
		"\u21d5\5\u03f4\u01fb\2\u21d4\u21d2\3\2\2\2\u21d4\u21d5\3\2\2\2\u21d5\u2216"+
		"\3\2\2\2\u21d6\u21d7\7\u0102\2\2\u21d7\u21da\7\u00ae\2\2\u21d8\u21da\7"+
		"\u0167\2\2\u21d9\u21d6\3\2\2\2\u21d9\u21d8\3\2\2\2\u21da\u21dc\3\2\2\2"+
		"\u21db\u21dd\5\u03d2\u01ea\2\u21dc\u21db\3\2\2\2\u21dc\u21dd\3\2\2\2\u21dd"+
		"\u21de\3\2\2\2\u21de\u21df\7\u0345\2\2\u21df\u21e0\5\u03ca\u01e6\2\u21e0"+
		"\u21e2\7\u0346\2\2\u21e1\u21e3\5\u02c8\u0165\2\u21e2\u21e1\3\2\2\2\u21e2"+
		"\u21e3\3\2\2\2\u21e3\u21e6\3\2\2\2\u21e4\u21e5\7\u00e7\2\2\u21e5\u21e7"+
		"\5\u03f4\u01fb\2\u21e6\u21e4\3\2\2\2\u21e6\u21e7\3\2\2\2\u21e7\u2217\3"+
		"\2\2\2\u21e8\u21ec\7\60\2\2\u21e9\u21ea\7\u00de\2\2\u21ea\u21eb\7\u0087"+
		"\2\2\u21eb\u21ed\7\u0114\2\2\u21ec\u21e9\3\2\2\2\u21ec\u21ed\3\2\2\2\u21ed"+
		"\u21ee\3\2\2\2\u21ee\u21ef\7\u0345\2\2\u21ef\u21f0\5\u031c\u018f\2\u21f0"+
		"\u21f1\7\u0346\2\2\u21f1\u2217\3\2\2\2\u21f2\u21f4\7[\2\2\u21f3\u21f5"+
		"\7\u0345\2\2\u21f4\u21f3\3\2\2\2\u21f4\u21f5\3\2\2\2\u21f5\u21fa\3\2\2"+
		"\2\u21f6\u21fb\7\u032f\2\2\u21f7\u21fb\7\u034d\2\2\u21f8\u21fb\5\u036e"+
		"\u01b8\2\u21f9\u21fb\7\u032b\2\2\u21fa\u21f6\3\2\2\2\u21fa\u21f7\3\2\2"+
		"\2\u21fa\u21f8\3\2\2\2\u21fa\u21f9\3\2\2\2\u21fb\u21fc\3\2\2\2\u21fc\u21fa"+
		"\3\2\2\2\u21fc\u21fd\3\2\2\2\u21fd\u21ff\3\2\2\2\u21fe\u2200\7\u0346\2"+
		"\2\u21ff\u21fe\3\2\2\2\u21ff\u2200\3\2\2\2\u2200\u2201\3\2\2\2\u2201\u2202"+
		"\7\u0087\2\2\u2202\u2217\5\u03f4\u01fb\2\u2203\u2204\7\u008a\2\2\u2204"+
		"\u2205\7\u00ae\2\2\u2205\u2206\7\u0345\2\2\u2206\u2207\5\u03cc\u01e7\2"+
		"\u2207\u2208\7\u0346\2\2\u2208\u2209\7\u0110\2\2\u2209\u220e\5\u03bc\u01df"+
		"\2\u220a\u220b\7\u0345\2\2\u220b\u220c\5\u03cc\u01e7\2\u220c\u220d\7\u0346"+
		"\2\2\u220d\u220f\3\2\2\2\u220e\u220a\3\2\2\2\u220e\u220f\3\2\2\2\u220f"+
		"\u2211\3\2\2\2\u2210\u2212\5\u02c4\u0163\2\u2211\u2210\3\2\2\2\u2211\u2212"+
		"\3\2\2\2\u2212\u2214\3\2\2\2\u2213\u2215\5\u02c6\u0164\2\u2214\u2213\3"+
		"\2\2\2\u2214\u2215\3\2\2\2\u2215\u2217\3\2\2\2\u2216\u21d9\3\2\2\2\u2216"+
		"\u21e8\3\2\2\2\u2216\u21f2\3\2\2\2\u2216\u2203\3\2\2\2\u2217\u02c3\3\2"+
		"\2\2\u2218\u2219\7\u00e7\2\2\u2219\u2221\7^\2\2\u221a\u221b\7\u0265\2"+
		"\2\u221b\u2222\7\u0182\2\2\u221c\u2222\7+\2\2\u221d\u221e\7\u013d\2\2"+
		"\u221e\u2222\7\u00e1\2\2\u221f\u2220\7\u013d\2\2\u2220\u2222\7[\2\2\u2221"+
		"\u221a\3\2\2\2\u2221\u221c\3\2\2\2\u2221\u221d\3\2\2\2\u2221\u221f\3\2"+
		"\2\2\u2222\u02c5\3\2\2\2\u2223\u2224\7\u00e7\2\2\u2224\u222c\7\u016b\2"+
		"\2\u2225\u2226\7\u0265\2\2\u2226\u222d\7\u0182\2\2\u2227\u222d\7+\2\2"+
		"\u2228\u2229\7\u013d\2\2\u2229\u222d\7\u00e1\2\2\u222a\u222b\7\u013d\2"+
		"\2\u222b\u222d\7[\2\2\u222c\u2225\3\2\2\2\u222c\u2227\3\2\2\2\u222c\u2228"+
		"\3\2\2\2\u222c\u222a\3\2\2\2\u222d\u02c7\3\2\2\2\u222e\u222f\7\u017b\2"+
		"\2\u222f\u2230\7\u0345\2\2\u2230\u2235\5\u02ca\u0166\2\u2231\u2232\7\u0347"+
		"\2\2\u2232\u2234\5\u02ca\u0166\2\u2233\u2231\3\2\2\2\u2234\u2237\3\2\2"+
		"\2\u2235\u2233\3\2\2\2\u2235\u2236\3\2\2\2\u2236\u2238\3\2\2\2\u2237\u2235"+
		"\3\2\2\2\u2238\u2239\7\u0346\2\2\u2239\u02c9\3\2\2\2\u223a\u223b\5\u03f6"+
		"\u01fc\2\u223b\u223f\7\u0333\2\2\u223c\u2240\5\u03f6\u01fc\2\u223d\u2240"+
		"\5\u03d0\u01e9\2\u223e\u2240\7\u032b\2\2\u223f\u223c\3\2\2\2\u223f\u223d"+
		"\3\2\2\2\u223f\u223e\3\2\2\2\u2240\u02cb\3\2\2\2\u2241\u2242\7Z\2\2\u2242"+
		"\u2262\5\u03ce\u01e8\2\u2243\u224d\7R\2\2\u2244\u224b\5\u02ce\u0168\2"+
		"\u2245\u2246\7\u0087\2\2\u2246\u2249\7\u016b\2\2\u2247\u2248\7\u00e3\2"+
		"\2\u2248\u224a\5\u03cc\u01e7\2\u2249\u2247\3\2\2\2\u2249\u224a\3\2\2\2"+
		"\u224a\u224c\3\2\2\2\u224b\u2245\3\2\2\2\u224b\u224c\3\2\2\2\u224c\u224e"+
		"\3\2\2\2\u224d\u2244\3\2\2\2\u224d\u224e\3\2\2\2\u224e\u2263\3\2\2\2\u224f"+
		"\u2251\tf\2\2\u2250\u224f\3\2\2\2\u2250\u2251\3\2\2\2\u2251\u2253\3\2"+
		"\2\2\u2252\u2254\7\u02c2\2\2\u2253\u2252\3\2\2\2\u2253\u2254\3\2\2\2\u2254"+
		"\u2255\3\2\2\2\u2255\u2256\7R\2\2\u2256\u2257\7\u0087\2\2\u2257\u2260"+
		"\5\u01be\u00e0\2\u2258\u225e\7\u0087\2\2\u2259\u225a\7\u010c\2\2\u225a"+
		"\u225f\7\u0278\2\2\u225b\u225f\7\u016b\2\2\u225c\u225d\7\u00e3\2\2\u225d"+
		"\u225f\5\u03cc\u01e7\2\u225e\u2259\3\2\2\2\u225e\u225b\3\2\2\2\u225e\u225c"+
		"\3\2\2\2\u225f\u2261\3\2\2\2\u2260\u2258\3\2\2\2\u2260\u2261\3\2\2\2\u2261"+
		"\u2263\3\2\2\2\u2262\u2243\3\2\2\2\u2262\u2250\3\2\2\2\u2263\u2265\3\2"+
		"\2\2\u2264\u2266\7\u0348\2\2\u2265\u2264\3\2\2\2\u2265\u2266\3\2\2\2\u2266"+
		"\u02cd\3\2\2\2\u2267\u2269\5\u02d0\u0169\2\u2268\u2267\3\2\2\2\u2269\u226c"+
		"\3\2\2\2\u226a\u2268\3\2\2\2\u226a\u226b\3\2\2\2\u226b\u226d\3\2\2\2\u226c"+
		"\u226a\3\2\2\2\u226d\u226e\7\u0087\2\2\u226e\u226f\5\u01be\u00e0\2\u226f"+
		"\u02cf\3\2\2\2\u2270\u2276\tA\2\2\u2271\u2276\tg\2\2\u2272\u2276\th\2"+
		"\2\u2273\u2276\ti\2\2\u2274\u2276\7\u0304\2\2\u2275\u2270\3\2\2\2\u2275"+
		"\u2271\3\2\2\2\u2275\u2272\3\2\2\2\u2275\u2273\3\2\2\2\u2275\u2274\3\2"+
		"\2\2\u2276\u02d1\3\2\2\2\u2277\u2281\7\u0082\2\2\u2278\u227f\7\u0264\2"+
		"\2\u2279\u227f\7\u028b\2\2\u227a\u227f\7\u0202\2\2\u227b\u227f\7\u0231"+
		"\2\2\u227c\u227d\tj\2\2\u227d\u227f\5\u02d8\u016d\2\u227e\u2278\3\2\2"+
		"\2\u227e\u2279\3\2\2\2\u227e\u227a\3\2\2\2\u227e\u227b\3\2\2\2\u227e\u227c"+
		"\3\2\2\2\u227e\u227f\3\2\2\2\u227f\u2280\3\2\2\2\u2280\u2282\7\u008d\2"+
		"\2\u2281\u227e\3\2\2\2\u2281\u2282\3\2\2\2\u2282\u2284\3\2\2\2\u2283\u2285"+
		"\7\u020f\2\2\u2284\u2283\3\2\2\2\u2284\u2285\3\2\2\2\u2285\u2286\3\2\2"+
		"\2\u2286\u2290\5\u03ce\u01e8\2\u2287\u2288\7\u00a7\2\2\u2288\u228d\7\u0326"+
		"\2\2\u2289\u228a\7\u0347\2\2\u228a\u228c\7\u0326\2\2\u228b\u2289\3\2\2"+
		"\2\u228c\u228f\3\2\2\2\u228d\u228b\3\2\2\2\u228d\u228e\3\2\2\2\u228e\u2291"+
		"\3\2\2\2\u228f\u228d\3\2\2\2\u2290\u2287\3\2\2\2\u2290\u2291\3\2\2\2\u2291"+
		"\u2293\3\2\2\2\u2292\u2294\7\u0348\2\2\u2293\u2292\3\2\2\2\u2293\u2294"+
		"\3\2\2\2\u2294\u02d3\3\2\2\2\u2295\u2296\7\u013d\2\2\u2296\u229a\5\u03f4"+
		"\u01fb\2\u2297\u229b\5\u03f4\u01fb\2\u2298\u229b\5\u02d6\u016c\2\u2299"+
		"\u229b\5\u03d0\u01e9\2\u229a\u2297\3\2\2\2\u229a\u2298\3\2\2\2\u229a\u2299"+
		"\3\2\2\2\u229b\u229d\3\2\2\2\u229c\u229e\7\u0348\2\2\u229d\u229c\3\2\2"+
		"\2\u229d\u229e\3\2\2\2\u229e\u22c7\3\2\2\2\u229f\u22a0\7\u013d\2\2\u22a0"+
		"\u22a1\7\u0160\2\2\u22a1\u22a2\7\u0227\2\2\u22a2\u22ac\7\u0234\2\2\u22a3"+
		"\u22a4\7\u010c\2\2\u22a4\u22ad\7\u0306\2\2\u22a5\u22a6\7\u010c\2\2\u22a6"+
		"\u22ad\7\u01b9\2\2\u22a7\u22a8\7\u02ad\2\2\u22a8\u22ad\7\u010c\2\2\u22a9"+
		"\u22ad\7\u02dc\2\2\u22aa\u22ad\7\u02d2\2\2\u22ab\u22ad\7\u032b\2\2\u22ac"+
		"\u22a3\3\2\2\2\u22ac\u22a5\3\2\2\2\u22ac\u22a7\3\2\2\2\u22ac\u22a9\3\2"+
		"\2\2\u22ac\u22aa\3\2\2\2\u22ac\u22ab\3\2\2\2\u22ad\u22af\3\2\2\2\u22ae"+
		"\u22b0\7\u0348\2\2\u22af\u22ae\3\2\2\2\u22af\u22b0\3\2\2\2\u22b0\u22c7"+
		"\3\2\2\2\u22b1\u22b2\7\u013d\2\2\u22b2\u22b3\7\u009a\2\2\u22b3\u22b4\5"+
		"\u03bc\u01df\2\u22b4\u22b6\5\u03d0\u01e9\2\u22b5\u22b7\7\u0348\2\2\u22b6"+
		"\u22b5\3\2\2\2\u22b6\u22b7\3\2\2\2\u22b7\u22c7\3\2\2\2\u22b8\u22b9\7\u013d"+
		"\2\2\u22b9\u22ba\7\u0191\2\2\u22ba\u22c7\5\u03d0\u01e9\2\u22bb\u22bc\7"+
		"\u013d\2\2\u22bc\u22bd\7\u0298\2\2\u22bd\u22c7\5\u03d0\u01e9\2\u22be\u22bf"+
		"\7\u013d\2\2\u22bf\u22c0\7\u0192\2\2\u22c0\u22c7\5\u03d0\u01e9\2\u22c1"+
		"\u22c2\7\u013d\2\2\u22c2\u22c3\7\u0193\2\2\u22c3\u22c7\5\u03d0\u01e9\2"+
		"\u22c4\u22c5\7\u013d\2\2\u22c5\u22c7\5\u0378\u01bd\2\u22c6\u2295\3\2\2"+
		"\2\u22c6\u229f\3\2\2\2\u22c6\u22b1\3\2\2\2\u22c6\u22b8\3\2\2\2\u22c6\u22bb"+
		"\3\2\2\2\u22c6\u22be\3\2\2\2\u22c6\u22c1\3\2\2\2\u22c6\u22c4\3\2\2\2\u22c7"+
		"\u02d5\3\2\2\2\u22c8\u22cb\5\u03f0\u01f9\2\u22c9\u22cb\7\u0326\2\2\u22ca"+
		"\u22c8\3\2\2\2\u22ca\u22c9\3\2\2\2\u22cb\u02d7\3\2\2\2\u22cc\u22cd\b\u016d"+
		"\1\2\u22cd\u22d7\5\u02da\u016e\2\u22ce\u22d7\5\u02dc\u016f\2\u22cf\u22d7"+
		"\5\u0308\u0185\2\u22d0\u22d7\5\u036e\u01b8\2\u22d1\u22d7\5\u030a\u0186"+
		"\2\u22d2\u22d7\5\u03c8\u01e5\2\u22d3\u22d7\5\u030e\u0188\2\u22d4\u22d7"+
		"\5\u030c\u0187\2\u22d5\u22d7\5\u039e\u01d0\2\u22d6\u22cc\3\2\2\2\u22d6"+
		"\u22ce\3\2\2\2\u22d6\u22cf\3\2\2\2\u22d6\u22d0\3\2\2\2\u22d6\u22d1\3\2"+
		"\2\2\u22d6\u22d2\3\2\2\2\u22d6\u22d3\3\2\2\2\u22d6\u22d4\3\2\2\2\u22d6"+
		"\u22d5\3\2\2\2\u22d7\u22eb\3\2\2\2\u22d8\u22d9\f\7\2\2\u22d9\u22da\tk"+
		"\2\2\u22da\u22ea\5\u02d8\u016d\b\u22db\u22dc\f\6\2\2\u22dc\u22dd\tl\2"+
		"\2\u22dd\u22ea\5\u02d8\u016d\7\u22de\u22df\f\5\2\2\u22df\u22e0\5\u03f8"+
		"\u01fd\2\u22e0\u22e1\5\u02d8\u016d\6\u22e1\u22ea\3\2\2\2\u22e2\u22e3\f"+
		"\4\2\2\u22e3\u22e4\5\u03fa\u01fe\2\u22e4\u22e5\5\u02d8\u016d\5\u22e5\u22ea"+
		"\3\2\2\2\u22e6\u22e7\f\f\2\2\u22e7\u22e8\79\2\2\u22e8\u22ea\5\u03f4\u01fb"+
		"\2\u22e9\u22d8\3\2\2\2\u22e9\u22db\3\2\2\2\u22e9\u22de\3\2\2\2\u22e9\u22e2"+
		"\3\2\2\2\u22e9\u22e6\3\2\2\2\u22ea\u22ed\3\2\2\2\u22eb\u22e9\3\2\2\2\u22eb"+
		"\u22ec\3\2\2\2\u22ec\u02d9\3\2\2\2\u22ed\u22eb\3\2\2\2\u22ee\u22f7\5\u02de"+
		"\u0170\2\u22ef\u22f7\5\u02e2\u0172\2\u22f0\u22f7\5\u02e0\u0171\2\u22f1"+
		"\u22f7\5\u02ea\u0176\2\u22f2\u22f7\5\u02f6\u017c\2\u22f3\u22f7\5\u02f4"+
		"\u017b\2\u22f4\u22f7\5\u02fe\u0180\2\u22f5\u22f7\5\u0306\u0184\2\u22f6"+
		"\u22ee\3\2\2\2\u22f6\u22ef\3\2\2\2\u22f6\u22f0\3\2\2\2\u22f6\u22f1\3\2"+
		"\2\2\u22f6\u22f2\3\2\2\2\u22f6\u22f3\3\2\2\2\u22f6\u22f4\3\2\2\2\u22f6"+
		"\u22f5\3\2\2\2\u22f7\u02db\3\2\2\2\u22f8\u2302\5\u02e4\u0173\2\u22f9\u2302"+
		"\5\u02e8\u0175\2\u22fa\u2302\5\u02e6\u0174\2\u22fb\u2302\5\u02f0\u0179"+
		"\2\u22fc\u2302\5\u02f2\u017a\2\u22fd\u2302\5\u02f8\u017d\2\u22fe\u2302"+
		"\5\u0300\u0181\2\u22ff\u2302\5\u0302\u0182\2\u2300\u2302\5\u0304\u0183"+
		"\2\u2301\u22f8\3\2\2\2\u2301\u22f9\3\2\2\2\u2301\u22fa\3\2\2\2\u2301\u22fb"+
		"\3\2\2\2\u2301\u22fc\3\2\2\2\u2301\u22fd\3\2\2\2\u2301\u22fe\3\2\2\2\u2301"+
		"\u22ff\3\2\2\2\u2301\u2300\3\2\2\2\u2302\u02dd\3\2\2\2\u2303\u2304\7\u0326"+
		"\2\2\u2304\u02df\3\2\2\2\u2305\u2306\7\u0327\2\2\u2306\u02e1\3\2\2\2\u2307"+
		"\u2308\7\u0328\2\2\u2308\u02e3\3\2\2\2\u2309\u230a\7\u0329\2\2\u230a\u02e5"+
		"\3\2\2\2\u230b\u230c\7\u032a\2\2\u230c\u02e7\3\2\2\2\u230d\u230e\7\u0342"+
		"\2\2\u230e\u230f\7\u034a\2\2\u230f\u02e9\3\2\2\2\u2310\u2313\5\u02ec\u0177"+
		"\2\u2311\u2313\5\u02ee\u0178\2\u2312\u2310\3\2\2\2\u2312\u2311\3\2\2\2"+
		"\u2313\u02eb\3\2\2\2\u2314\u2315\5\u02de\u0170\2\u2315\u2316\7\u0343\2"+
		"\2\u2316\u2317\7\u031d\2\2\u2317\u02ed\3\2\2\2\u2318\u2319\5\u02e2\u0172"+
		"\2\u2319\u231a\7\u0343\2\2\u231a\u231b\7\u031d\2\2\u231b\u02ef\3\2\2\2"+
		"\u231c\u231d\5\u02e4\u0173\2\u231d\u231e\7\u0343\2\2\u231e\u231f\7\u031d"+
		"\2\2\u231f\u02f1\3\2\2\2\u2320\u2321\5\u02e6\u0174\2\u2321\u2322\7\u0343"+
		"\2\2\u2322\u2323\7\u031d\2\2\u2323\u02f3\3\2\2\2\u2324\u2325\5\u02de\u0170"+
		"\2\u2325\u2326\7\u0343\2\2\u2326\u2327\7\u031e\2\2\u2327\u02f5\3\2\2\2"+
		"\u2328\u2329\5\u02de\u0170\2\u2329\u232a\7\u0343\2\2\u232a\u232b\7\u031f"+
		"\2\2\u232b\u02f7\3\2\2\2\u232c\u232f\5\u02fa\u017e\2\u232d\u232f\5\u02fc"+
		"\u017f\2\u232e\u232c\3\2\2\2\u232e\u232d\3\2\2\2\u232f\u02f9\3\2\2\2\u2330"+
		"\u2331\5\u02e4\u0173\2\u2331\u2332\7\u0352\2\2\u2332\u2333\5\u03f6\u01fc"+
		"\2\u2333\u02fb\3\2\2\2\u2334\u2335\5\u02e6\u0174\2\u2335\u2336\7\u0352"+
		"\2\2\u2336\u2337\5\u03f6\u01fc\2\u2337\u02fd\3\2\2\2\u2338\u2339\5\u02de"+
		"\u0170\2\u2339\u233a\7\u0349\2\2\u233a\u233b\5\u03f6\u01fc\2\u233b\u02ff"+
		"\3\2\2\2\u233c\u233d\5\u02e4\u0173\2\u233d\u233e\7\u0349\2\2\u233e\u233f"+
		"\5\u03f6\u01fc\2\u233f\u0301\3\2\2\2\u2340\u2341\5\u02e4\u0173\2\u2341"+
		"\u2342\7\u0340\2\2\u2342\u2343\5\u03f6\u01fc\2\u2343\u0303\3\2\2\2\u2344"+
		"\u2345\5\u02e6\u0174\2\u2345\u2346\7\u0340\2\2\u2346\u2347\5\u03f6\u01fc"+
		"\2\u2347\u0305\3\2\2\2\u2348\u2349\tm\2\2\u2349\u234a\5\u03f6\u01fc\2"+
		"\u234a\u0307\3\2\2\2\u234b\u2350\7[\2\2\u234c\u2350\7\u00e1\2\2\u234d"+
		"\u2350\7\u0326\2\2\u234e\u2350\5\u03f0\u01f9\2\u234f\u234b\3\2\2\2\u234f"+
		"\u234c\3";
	private static final String _serializedATNSegment4 =
		"\2\2\2\u234f\u234d\3\2\2\2\u234f\u234e\3\2\2\2\u2350\u0309\3\2\2\2\u2351"+
		"\u2352\7,\2\2\u2352\u2354\5\u02d8\u016d\2\u2353\u2355\5\u037c\u01bf\2"+
		"\u2354\u2353\3\2\2\2\u2355\u2356\3\2\2\2\u2356\u2354\3\2\2\2\u2356\u2357"+
		"\3\2\2\2\u2357\u235a\3\2\2\2\u2358\u2359\7l\2\2\u2359\u235b\5\u02d8\u016d"+
		"\2\u235a\u2358\3\2\2\2\u235a\u235b\3\2\2\2\u235b\u235c\3\2\2\2\u235c\u235d"+
		"\7n\2\2\u235d\u236b\3\2\2\2\u235e\u2360\7,\2\2\u235f\u2361\5\u037e\u01c0"+
		"\2\u2360\u235f\3\2\2\2\u2361\u2362\3\2\2\2\u2362\u2360\3\2\2\2\u2362\u2363"+
		"\3\2\2\2\u2363\u2366\3\2\2\2\u2364\u2365\7l\2\2\u2365\u2367\5\u02d8\u016d"+
		"\2\u2366\u2364\3\2\2\2\u2366\u2367\3\2\2\2\u2367\u2368\3\2\2\2\u2368\u2369"+
		"\7n\2\2\u2369\u236b\3\2\2\2\u236a\u2351\3\2\2\2\u236a\u235e\3\2\2\2\u236b"+
		"\u030b\3\2\2\2\u236c\u236d\7\u034f\2\2\u236d\u2371\5\u02d8\u016d\2\u236e"+
		"\u236f\tn\2\2\u236f\u2371\5\u02d8\u016d\2\u2370\u236c\3\2\2\2\u2370\u236e"+
		"\3\2\2\2\u2371\u030d\3\2\2\2\u2372\u2373\7\u0345\2\2\u2373\u2374\5\u02d8"+
		"\u016d\2\u2374\u2375\7\u0346\2\2\u2375\u237b\3\2\2\2\u2376\u2377\7\u0345"+
		"\2\2\u2377\u2378\5\u0312\u018a\2\u2378\u2379\7\u0346\2\2\u2379\u237b\3"+
		"\2\2\2\u237a\u2372\3\2\2\2\u237a\u2376\3\2\2\2\u237b\u030f\3\2\2\2\u237c"+
		"\u2385\7\u00e1\2\2\u237d\u2385\5\u03f0\u01f9\2\u237e\u2385\5\u036e\u01b8"+
		"\2\u237f\u2385\7\u0326\2\2\u2380\u2381\7\u0345\2\2\u2381\u2382\5\u0310"+
		"\u0189\2\u2382\u2383\7\u0346\2\2\u2383\u2385\3\2\2\2\u2384\u237c\3\2\2"+
		"\2\u2384\u237d\3\2\2\2\u2384\u237e\3\2\2\2\u2384\u237f\3\2\2\2\u2384\u2380"+
		"\3\2\2\2\u2385\u0311\3\2\2\2\u2386\u2387\5\u01be\u00e0\2\u2387\u0313\3"+
		"\2\2\2\u2388\u238b\7\u017b\2\2\u2389\u238a\7\u0319\2\2\u238a\u238c\7\u0347"+
		"\2\2\u238b\u2389\3\2\2\2\u238b\u238c\3\2\2\2\u238c\u238d\3\2\2\2\u238d"+
		"\u2392\5\u0316\u018c\2\u238e\u238f\7\u0347\2\2\u238f\u2391\5\u0316\u018c"+
		"\2\u2390\u238e\3\2\2\2\u2391\u2394\3\2\2\2\u2392\u2390\3\2\2\2\u2392\u2393"+
		"\3\2\2\2\u2393\u23a3\3\2\2\2\u2394\u2392\3\2\2\2\u2395\u2396\7\u017b\2"+
		"\2\u2396\u239b\7\"\2\2\u2397\u2398\7\u0345\2\2\u2398\u2399\5\u0364\u01b3"+
		"\2\u2399\u239a\7\u0346\2\2\u239a\u239c\3\2\2\2\u239b\u2397\3\2\2\2\u239b"+
		"\u239c\3\2\2\2\u239c\u239d\3\2\2\2\u239d\u239e\7\22\2\2\u239e\u239f\7"+
		"\u0345\2\2\u239f\u23a0\5\u01be\u00e0\2\u23a0\u23a1\7\u0346\2\2\u23a1\u23a3"+
		"\3\2\2\2\u23a2\u2388\3\2\2\2\u23a2\u2395\3\2\2\2\u23a3\u0315\3\2\2\2\u23a4"+
		"\u23a9\5\u03f4\u01fb\2\u23a5\u23a6\7\u0345\2\2\u23a6\u23a7\5\u03cc\u01e7"+
		"\2\u23a7\u23a8\7\u0346\2\2\u23a8\u23aa\3\2\2\2\u23a9\u23a5\3\2\2\2\u23a9"+
		"\u23aa\3\2\2\2\u23aa\u23ab\3\2\2\2\u23ab\u23ac\7\22\2\2\u23ac\u23ad\7"+
		"\u0345\2\2\u23ad\u23ae\5\u01be\u00e0\2\u23ae\u23af\7\u0346\2\2\u23af\u0317"+
		"\3\2\2\2\u23b0\u23b3\5\u03c8\u01e5\2\u23b1\u23b3\7\u0326\2\2\u23b2\u23b0"+
		"\3\2\2\2\u23b2\u23b1\3\2\2\2\u23b3\u23b6\3\2\2\2\u23b4\u23b7\7\u0333\2"+
		"\2\u23b5\u23b7\5\u03fa\u01fe\2\u23b6\u23b4\3\2\2\2\u23b6\u23b5\3\2\2\2"+
		"\u23b7\u23b8\3\2\2\2\u23b8\u23c1\5\u02d8\u016d\2\u23b9\u23ba\5\u03f4\u01fb"+
		"\2\u23ba\u23bb\7\u0340\2\2\u23bb\u23bc\5\u03f4\u01fb\2\u23bc\u23bd\7\u0345"+
		"\2\2\u23bd\u23be\5\u0394\u01cb\2\u23be\u23bf\7\u0346\2\2\u23bf\u23c1\3"+
		"\2\2\2\u23c0\u23b2\3\2\2\2\u23c0\u23b9\3\2\2\2\u23c1\u0319\3\2\2\2\u23c2"+
		"\u23c7\5\u031c\u018f\2\u23c3\u23c4\7\u0347\2\2\u23c4\u23c6\5\u031c\u018f"+
		"\2\u23c5\u23c3\3\2\2\2\u23c6\u23c9\3\2\2\2\u23c7\u23c5\3\2\2\2\u23c7\u23c8"+
		"\3\2\2\2\u23c8\u031b\3\2\2\2\u23c9\u23c7\3\2\2\2\u23ca\u23cf\5\u031e\u0190"+
		"\2\u23cb\u23cc\7\u00ef\2\2\u23cc\u23ce\5\u031e\u0190\2\u23cd\u23cb\3\2"+
		"\2\2\u23ce\u23d1\3\2\2\2\u23cf\u23cd\3\2\2\2\u23cf\u23d0\3\2\2\2\u23d0"+
		"\u031d\3\2\2\2\u23d1\u23cf\3\2\2\2\u23d2\u23d7\5\u0320\u0191\2\u23d3\u23d4"+
		"\7\r\2\2\u23d4\u23d6\5\u0320\u0191\2\u23d5\u23d3\3\2\2\2\u23d6\u23d9\3"+
		"\2\2\2\u23d7\u23d5\3\2\2\2\u23d7\u23d8\3\2\2\2\u23d8\u031f\3\2\2\2\u23d9"+
		"\u23d7\3\2\2\2\u23da\u23dc\7\u00de\2\2\u23db\u23da\3\2\2\2\u23db\u23dc"+
		"\3\2\2\2\u23dc\u23dd\3\2\2\2\u23dd\u23de\5\u0322\u0192\2\u23de\u0321\3"+
		"\2\2\2\u23df\u23e0\7y\2\2\u23e0\u23e1\7\u0345\2\2\u23e1\u23e2\5\u0312"+
		"\u018a\2\u23e2\u23e3\7\u0346\2\2\u23e3\u2418\3\2\2\2\u23e4\u23e5\5\u02d8"+
		"\u016d\2\u23e5\u23e6\5\u03f8\u01fd\2\u23e6\u23e7\5\u02d8\u016d\2\u23e7"+
		"\u2418\3\2\2\2\u23e8\u23e9\5\u02d8\u016d\2\u23e9\u23ea\5\u03f8\u01fd\2"+
		"\u23ea\u23eb\to\2\2\u23eb\u23ec\7\u0345\2\2\u23ec\u23ed\5\u0312\u018a"+
		"\2\u23ed\u23ee\7\u0346\2\2\u23ee\u2418\3\2\2\2\u23ef\u23f1\5\u02d8\u016d"+
		"\2\u23f0\u23f2\7\u00de\2\2\u23f1\u23f0\3\2\2\2\u23f1\u23f2\3\2\2\2\u23f2"+
		"\u23f3\3\2\2\2\u23f3\u23f4\7\37\2\2\u23f4\u23f5\5\u02d8\u016d\2\u23f5"+
		"\u23f6\7\r\2\2\u23f6\u23f7\5\u02d8\u016d\2\u23f7\u2418\3\2\2\2\u23f8\u23fa"+
		"\5\u02d8\u016d\2\u23f9\u23fb\7\u00de\2\2\u23fa\u23f9\3\2\2\2\u23fa\u23fb"+
		"\3\2\2\2\u23fb\u23fc\3\2\2\2\u23fc\u23fd\7\u009d\2\2\u23fd\u2400\7\u0345"+
		"\2\2\u23fe\u2401\5\u0312\u018a\2\u23ff\u2401\5\u0394\u01cb\2\u2400\u23fe"+
		"\3\2\2\2\u2400\u23ff\3\2\2\2\u2401\u2402\3\2\2\2\u2402\u2403\7\u0346\2"+
		"\2\u2403\u2418\3\2\2\2\u2404\u2406\5\u02d8\u016d\2\u2405\u2407\7\u00de"+
		"\2\2\u2406\u2405\3\2\2\2\u2406\u2407\3\2\2\2\u2407\u2408\3\2\2\2\u2408"+
		"\u2409\7\u00b6\2\2\u2409\u240c\5\u02d8\u016d\2\u240a\u240b\7q\2\2\u240b"+
		"\u240d\5\u02d8\u016d\2\u240c\u240a\3\2\2\2\u240c\u240d\3\2\2\2\u240d\u2418"+
		"\3\2\2\2\u240e\u240f\5\u02d8\u016d\2\u240f\u2410\7\u00aa\2\2\u2410\u2411"+
		"\5\u03d4\u01eb\2\u2411\u2418\3\2\2\2\u2412\u2418\5\u02dc\u016f\2\u2413"+
		"\u2414\7\u0345\2\2\u2414\u2415\5\u031c\u018f\2\u2415\u2416\7\u0346\2\2"+
		"\u2416\u2418\3\2\2\2\u2417\u23df\3\2\2\2\u2417\u23e4\3\2\2\2\u2417\u23e8"+
		"\3\2\2\2\u2417\u23ef\3\2\2\2\u2417\u23f8\3\2\2\2\u2417\u2404\3\2\2\2\u2417"+
		"\u240e\3\2\2\2\u2417\u2412\3\2\2\2\u2417\u2413\3\2\2\2\u2418\u0323\3\2"+
		"\2\2\u2419\u241f\5\u0328\u0195\2\u241a\u241b\7\u0345\2\2\u241b\u241c\5"+
		"\u0324\u0193\2\u241c\u241d\7\u0346\2\2\u241d\u241f\3\2\2\2\u241e\u2419"+
		"\3\2\2\2\u241e\u241a\3\2\2\2\u241f\u2423\3\2\2\2\u2420\u2422\5\u0326\u0194"+
		"\2\u2421\u2420\3\2\2\2\u2422\u2425\3\2\2\2\u2423\u2421\3\2\2\2\u2423\u2424"+
		"\3\2\2\2\u2424\u0325\3\2\2\2\u2425\u2423\3\2\2\2\u2426\u2428\7\u0166\2"+
		"\2\u2427\u2429\7\b\2\2\u2428\u2427\3\2\2\2\u2428\u2429\3\2\2\2\u2429\u242d"+
		"\3\2\2\2\u242a\u242d\7v\2\2\u242b\u242d\7\u00a6\2\2\u242c\u2426\3\2\2"+
		"\2\u242c\u242a\3\2\2\2\u242c\u242b\3\2\2\2\u242d\u2433\3\2\2\2\u242e\u2434"+
		"\5\u0328\u0195\2\u242f\u2430\7\u0345\2\2\u2430\u2431\5\u0324\u0193\2\u2431"+
		"\u2432\7\u0346\2\2\u2432\u2434\3\2\2\2\u2433\u242e\3\2\2\2\u2433\u242f"+
		"\3\2\2\2\u2434\u0327\3\2\2\2\u2435\u2437\7\u0133\2\2\u2436\u2438\tp\2"+
		"\2\u2437\u2436\3\2\2\2\u2437\u2438\3\2\2\2\u2438\u243a\3\2\2\2\u2439\u243b"+
		"\5\u032a\u0196\2\u243a\u2439\3\2\2\2\u243a\u243b\3\2\2\2\u243b\u243c\3"+
		"\2\2\2\u243c\u243f\5\u0340\u01a1\2\u243d\u243e\7\u00a7\2\2\u243e\u2440"+
		"\5\u03bc\u01df\2\u243f\u243d\3\2\2\2\u243f\u2440\3\2\2\2\u2440\u2443\3"+
		"\2\2\2\u2441\u2442\7\u008d\2\2\u2442\u2444\5\u034e\u01a8\2\u2443\u2441"+
		"\3\2\2\2\u2443\u2444\3\2\2\2\u2444\u2447\3\2\2\2\u2445\u2446\7\u0178\2"+
		"\2\u2446\u2448\5\u031c\u018f\2\u2447\u2445\3\2\2\2\u2447\u2448\3\2\2\2"+
		"\u2448\u2456\3\2\2\2\u2449\u244a\7\u0094\2\2\u244a\u244c\7(\2\2\u244b"+
		"\u244d\7\b\2\2\u244c\u244b\3\2\2\2\u244c\u244d\3\2\2\2\u244d\u244e\3\2"+
		"\2\2\u244e\u2453\5\u0338\u019d\2\u244f\u2450\7\u0347\2\2\u2450\u2452\5"+
		"\u0338\u019d\2\u2451\u244f\3\2\2\2\u2452\u2455\3\2\2\2\u2453\u2451\3\2"+
		"\2\2\u2453\u2454\3\2\2\2\u2454\u2457\3\2\2\2\u2455\u2453\3\2\2\2\u2456"+
		"\u2449\3\2\2\2\u2456\u2457\3\2\2\2\u2457\u245a\3\2\2\2\u2458\u2459\7\u0095"+
		"\2\2\u2459\u245b\5\u031c\u018f\2\u245a\u2458\3\2\2\2\u245a\u245b\3\2\2"+
		"\2\u245b\u0329\3\2\2\2\u245c\u245f\7\u015d\2\2\u245d\u2460\5\u032c\u0197"+
		"\2\u245e\u2460\5\u032e\u0198\2\u245f\u245d\3\2\2\2\u245f\u245e\3\2\2\2"+
		"\u2460\u2463\3\2\2\2\u2461\u2462\7\u017b\2\2\u2462\u2464\7\u02f6\2\2\u2463"+
		"\u2461\3\2\2\2\u2463\u2464\3\2\2\2\u2464\u032b\3\2\2\2\u2465\u2466\tq"+
		"\2\2\u2466\u246d\7\u00f7\2\2\u2467\u2468\7\u0345\2\2\u2468\u2469\5\u02d8"+
		"\u016d\2\u2469\u246a\7\u0346\2\2\u246a\u246b\7\u00f7\2\2\u246b\u246d\3"+
		"\2\2\2\u246c\u2465\3\2\2\2\u246c\u2467\3\2\2\2\u246d\u032d\3\2\2\2\u246e"+
		"\u2474\7\u032b\2\2\u246f\u2470\7\u0345\2\2\u2470\u2471\5\u02d8\u016d\2"+
		"\u2471\u2472\7\u0346\2\2\u2472\u2474\3\2\2\2\u2473\u246e\3\2\2\2\u2473"+
		"\u246f\3\2\2\2\u2474\u032f\3\2\2\2\u2475\u2476\7\u00f0\2\2\u2476\u2477"+
		"\7(\2\2\u2477\u247c\5\u0336\u019c\2\u2478\u2479\7\u0347\2\2\u2479\u247b"+
		"\5\u0336\u019c\2\u247a\u2478\3\2\2\2\u247b\u247e\3\2\2\2\u247c\u247a\3"+
		"\2\2\2\u247c\u247d\3\2\2\2\u247d\u248a\3\2\2\2\u247e\u247c\3\2\2\2\u247f"+
		"\u2480\7\u0275\2\2\u2480\u2481\5\u02d8\u016d\2\u2481\u2488\tr\2\2\u2482"+
		"\u2483\7\u0082\2\2\u2483\u2484\ts\2\2\u2484\u2485\5\u02d8\u016d\2\u2485"+
		"\u2486\tr\2\2\u2486\u2487\7\u0278\2\2\u2487\u2489\3\2\2\2\u2488\u2482"+
		"\3\2\2\2\u2488\u2489\3\2\2\2\u2489\u248b\3\2\2\2\u248a\u247f\3\2\2\2\u248a"+
		"\u248b\3\2\2\2\u248b\u0331\3\2\2\2\u248c\u248d\7\u0087\2\2\u248d\u24e5"+
		"\7$\2\2\u248e\u248f\7\u0087\2\2\u248f\u2497\7\u0317\2\2\u2490\u2494\7"+
		"\u010b\2\2\u2491\u2492\7\u0345\2\2\u2492\u2493\7\u032f\2\2\u2493\u2495"+
		"\7\u0346\2\2\u2494\u2491\3\2\2\2\u2494\u2495\3\2\2\2\u2495\u2498\3\2\2"+
		"\2\u2496\u2498\7\u019a\2\2\u2497\u2490\3\2\2\2\u2497\u2496\3\2\2\2\u2498"+
		"\u249c\3\2\2\2\u2499\u249b\5\u0334\u019b\2\u249a\u2499\3\2\2\2\u249b\u249e"+
		"\3\2\2\2\u249c\u249a\3\2\2\2\u249c\u249d\3\2\2\2\u249d\u24a9\3\2\2\2\u249e"+
		"\u249c\3\2\2\2\u249f\u24a7\7\u0347\2\2\u24a0\u24a8\7\u0318\2\2\u24a1\u24a5"+
		"\7\u031a\2\2\u24a2\u24a3\7\u0345\2\2\u24a3\u24a4\7\u032f\2\2\u24a4\u24a6"+
		"\7\u0346\2\2\u24a5\u24a2\3\2\2\2\u24a5\u24a6\3\2\2\2\u24a6\u24a8\3\2\2"+
		"\2\u24a7\u24a0\3\2\2\2\u24a7\u24a1\3\2\2\2\u24a8\u24aa\3\2\2\2\u24a9\u249f"+
		"\3\2\2\2\u24a9\u24aa\3\2\2\2\u24aa\u24ae\3\2\2\2\u24ab\u24ac\7\u0347\2"+
		"\2\u24ac\u24ad\7\u01e8\2\2\u24ad\u24af\tt\2\2\u24ae\u24ab\3\2\2\2\u24ae"+
		"\u24af\3\2\2\2\u24af\u24e5\3\2\2\2\u24b0\u24b1\7\u0087\2\2\u24b1\u24b2"+
		"\7\u0317\2\2\u24b2\u24b6\7\u01f6\2\2\u24b3\u24b5\5\u0334\u019b\2\u24b4"+
		"\u24b3\3\2\2\2\u24b5\u24b8\3\2\2\2\u24b6\u24b4\3\2\2\2\u24b6\u24b7\3\2"+
		"\2\2\u24b7\u24bb\3\2\2\2\u24b8\u24b6\3\2\2\2\u24b9\u24ba\7\u0347\2\2\u24ba"+
		"\u24bc\7\u0318\2\2\u24bb\u24b9\3\2\2\2\u24bb\u24bc\3\2\2\2\u24bc\u24e5"+
		"\3\2\2\2\u24bd\u24be\7\u0087\2\2\u24be\u24bf\7\u0317\2\2\u24bf\u24c3\7"+
		"\u0285\2\2\u24c0\u24c1\7\u0345\2\2\u24c1\u24c2\7\u032f\2\2\u24c2\u24c4"+
		"\7\u0346\2\2\u24c3\u24c0\3\2\2\2\u24c3\u24c4\3\2\2\2\u24c4\u24c8\3\2\2"+
		"\2\u24c5\u24c7\5\u0334\u019b\2\u24c6\u24c5\3\2\2\2\u24c7\u24ca\3\2\2\2"+
		"\u24c8\u24c6\3\2\2\2\u24c8\u24c9\3\2\2\2\u24c9\u24ce\3\2\2\2\u24ca\u24c8"+
		"\3\2\2\2\u24cb\u24cc\7\u0347\2\2\u24cc\u24cd\7\u01e8\2\2\u24cd\u24cf\t"+
		"t\2\2\u24ce\u24cb\3\2\2\2\u24ce\u24cf\3\2\2\2\u24cf\u24e5\3\2\2\2\u24d0"+
		"\u24d1\7\u0087\2\2\u24d1\u24d2\7\u0229\2\2\u24d2\u24da\tu\2\2\u24d3\u24d4"+
		"\7\u0347\2\2\u24d4\u24d8\7\u02b9\2\2\u24d5\u24d6\7\u0345\2\2\u24d6\u24d7"+
		"\7\u032f\2\2\u24d7\u24d9\7\u0346\2\2\u24d8\u24d5\3\2\2\2\u24d8\u24d9\3"+
		"\2\2\2\u24d9\u24db\3\2\2\2\u24da\u24d3\3\2\2\2\u24da\u24db\3\2\2\2\u24db"+
		"\u24de\3\2\2\2\u24dc\u24dd\7\u0347\2\2\u24dd\u24df\7\u021f\2\2\u24de\u24dc"+
		"\3\2\2\2\u24de\u24df\3\2\2\2\u24df\u24e2\3\2\2\2\u24e0\u24e1\7\u0347\2"+
		"\2\u24e1\u24e3\7\u0314\2\2\u24e2\u24e0\3\2\2\2\u24e2\u24e3\3\2\2\2\u24e3"+
		"\u24e5\3\2\2\2\u24e4\u248c\3\2\2\2\u24e4\u248e\3\2\2\2\u24e4\u24b0\3\2"+
		"\2\2\u24e4\u24bd\3\2\2\2\u24e4\u24d0\3\2\2\2\u24e5\u0333\3\2\2\2\u24e6"+
		"\u24ef\7\u0347\2\2\u24e7\u24f0\7\u01a6\2\2\u24e8\u24f0\7\u0303\2\2\u24e9"+
		"\u24ed\7\u02b9\2\2\u24ea\u24eb\7\u0345\2\2\u24eb\u24ec\7\u032f\2\2\u24ec"+
		"\u24ee\7\u0346\2\2\u24ed\u24ea\3\2\2\2\u24ed\u24ee\3\2\2\2\u24ee\u24f0"+
		"\3\2\2\2\u24ef\u24e7\3\2\2\2\u24ef\u24e8\3\2\2\2\u24ef\u24e9\3\2\2\2\u24f0"+
		"\u0335\3\2\2\2\u24f1\u24f3\5\u02d8\u016d\2\u24f2\u24f4\tv\2\2\u24f3\u24f2"+
		"\3\2\2\2\u24f3\u24f4\3\2\2\2\u24f4\u0337\3\2\2\2\u24f5\u24f6\5\u02d8\u016d"+
		"\2\u24f6\u0339\3\2\2\2\u24f7\u24f8\7\u00ee\2\2\u24f8\u24f9\7\u0345\2\2"+
		"\u24f9\u24fe\5\u033c\u019f\2\u24fa\u24fb\7\u0347\2\2\u24fb\u24fd\5\u033c"+
		"\u019f\2\u24fc\u24fa\3\2\2\2\u24fd\u2500\3\2\2\2\u24fe\u24fc\3\2\2\2\u24fe"+
		"\u24ff\3\2\2\2\u24ff\u2501\3\2\2\2\u2500\u24fe\3\2\2\2\u2501\u2502\7\u0346"+
		"\2\2\u2502\u033b\3\2\2\2\u2503\u2504\7\u01fb\2\2\u2504\u2531\7\u032b\2"+
		"\2\u2505\u2506\tw\2\2\u2506\u2531\7\u0094\2\2\u2507\u2508\tx\2\2\u2508"+
		"\u2531\7\u0166\2\2\u2509\u250a\ty\2\2\u250a\u2531\7\u00ac\2\2\u250b\u250c"+
		"\7\u01f4\2\2\u250c\u2531\7\u0311\2\2\u250d\u250e\7\u0205\2\2\u250e\u2531"+
		"\7\u00f0\2\2\u250f\u2531\7\u021b\2\2\u2510\u2511\7\u022b\2\2\u2511\u2531"+
		"\7\u00fd\2\2\u2512\u2513\7\u022c\2\2\u2513\u2531\7\u00fd\2\2\u2514\u2515"+
		"\7\u024c\2\2\u2515\u2531\7\u032b\2\2\u2516\u2517\7\u024d\2\2\u2517\u2531"+
		"\7\u032b\2\2\u2518\u2519\7\u027b\2\2\u2519\u251a\7\u0087\2\2\u251a\u251b"+
		"\7\u0345\2\2\u251b\u2520\5\u033e\u01a0\2\u251c\u251d\7\u0347\2\2\u251d"+
		"\u251f\5\u033e\u01a0\2\u251e\u251c\3\2\2\2\u251f\u2522\3\2\2\2\u2520\u251e"+
		"\3\2\2\2\u2520\u2521\3\2\2\2\u2521\u2523\3\2\2\2\u2522\u2520\3\2\2\2\u2523"+
		"\u2524\7\u0346\2\2\u2524\u2531\3\2\2\2\u2525\u2526\7\u027b\2\2\u2526\u2527"+
		"\7\u0087\2\2\u2527\u2531\7\u0307\2\2\u2528\u2529\7\u0281\2\2\u2529\u2531"+
		"\tM\2\2\u252a\u2531\7\u02a5\2\2\u252b\u252c\7\u02b8\2\2\u252c\u2531\7"+
		"\u00fd\2\2\u252d\u252e\7\u016e\2\2\u252e\u252f\7\u00fd\2\2\u252f\u2531"+
		"\7\u032f\2\2\u2530\u2503\3\2\2\2\u2530\u2505\3\2\2\2\u2530\u2507\3\2\2"+
		"\2\u2530\u2509\3\2\2\2\u2530\u250b\3\2\2\2\u2530\u250d\3\2\2\2\u2530\u250f"+
		"\3\2\2\2\u2530\u2510\3\2\2\2\u2530\u2512\3\2\2\2\u2530\u2514\3\2\2\2\u2530"+
		"\u2516\3\2\2\2\u2530\u2518\3\2\2\2\u2530\u2525\3\2\2\2\u2530\u2528\3\2"+
		"\2\2\u2530\u252a\3\2\2\2\u2530\u252b\3\2\2\2\u2530\u252d\3\2\2\2\u2531"+
		"\u033d\3\2\2\2\u2532\u2539\7\u0326\2\2\u2533\u253a\7\u0307\2\2\u2534\u2537"+
		"\7\u0333\2\2\u2535\u2538\5\u03f0\u01f9\2\u2536\u2538\7\u00e1\2\2\u2537"+
		"\u2535\3\2\2\2\u2537\u2536\3\2\2\2\u2538\u253a\3\2\2\2\u2539\u2533\3\2"+
		"\2\2\u2539\u2534\3\2\2\2\u253a\u033f\3\2\2\2\u253b\u2540\5\u034c\u01a7"+
		"\2\u253c\u253d\7\u0347\2\2\u253d\u253f\5\u034c\u01a7\2\u253e\u253c\3\2"+
		"\2\2\u253f\u2542\3\2\2\2\u2540\u253e\3\2\2\2\u2540\u2541\3\2\2\2\u2541"+
		"\u0341\3\2\2\2\u2542\u2540\3\2\2\2\u2543\u2544\7\u0345\2\2\u2544\u2549"+
		"\5\u027e\u0140\2\u2545\u2546\7\u0347\2\2\u2546\u2548\5\u027e\u0140\2\u2547"+
		"\u2545\3\2\2\2\u2548\u254b\3\2\2\2\u2549\u2547\3\2\2\2\u2549\u254a\3\2"+
		"\2\2\u254a\u254c\3\2\2\2\u254b\u2549\3\2\2\2\u254c\u254d\7\u0346\2\2\u254d"+
		"\u0343\3\2\2\2\u254e\u254f\5\u03bc\u01df\2\u254f\u2550\7\u0340\2\2\u2550"+
		"\u2552\3\2\2\2\u2551\u254e\3\2\2\2\u2551\u2552\3\2\2\2\u2552\u2553\3\2"+
		"\2\2\u2553\u2554\7\u034a\2\2\u2554\u0345\3\2\2\2\u2555\u2556\5\u03bc\u01df"+
		"\2\u2556\u2557\7\u0340\2\2\u2557\u2559\3\2\2\2\u2558\u2555\3\2\2\2\u2558"+
		"\u2559\3\2\2\2\u2559\u255f\3\2\2\2\u255a\u2560\5\u03f4\u01fb\2\u255b\u255c"+
		"\7\u0344\2\2\u255c\u2560\7\u0098\2\2\u255d\u255e\7\u0344\2\2\u255e\u2560"+
		"\7\u02bd\2\2\u255f\u255a\3\2\2\2\u255f\u255b\3\2\2\2\u255f\u255d\3\2\2"+
		"\2\u2560\u2563\3\2\2\2\u2561\u2563\7\u00e1\2\2\u2562\u2558\3\2\2\2\u2562"+
		"\u2561\3\2\2\2\u2563\u2565\3\2\2\2\u2564\u2566\5\u0380\u01c1\2\u2565\u2564"+
		"\3\2\2\2\u2565\u2566\3\2\2\2\u2566\u0347\3\2\2\2\u2567\u2568\5\u03f4\u01fb"+
		"\2\u2568\u2569\7\u0340\2\2\u2569\u256a\5\u03f4\u01fb\2\u256a\u256c\5\u0342"+
		"\u01a2\2\u256b\u256d\5\u0380\u01c1\2\u256c\u256b\3\2\2\2\u256c\u256d\3"+
		"\2\2\2\u256d\u2579\3\2\2\2\u256e\u256f\5\u03f4\u01fb\2\u256f\u2570\7\u0349"+
		"\2\2\u2570\u2571\7\u0349\2\2\u2571\u2573\5\u03f4\u01fb\2\u2572\u2574\5"+
		"\u0342\u01a2\2\u2573\u2572\3\2\2\2\u2573\u2574\3\2\2\2\u2574\u2576\3\2"+
		"\2\2\u2575\u2577\5\u0380\u01c1\2\u2576\u2575\3\2\2\2\u2576\u2577\3\2\2"+
		"\2\u2577\u2579\3\2\2\2\u2578\u2567\3\2\2\2\u2578\u256e\3\2\2\2\u2579\u0349"+
		"\3\2\2\2\u257a\u257b\5\u0390\u01c9\2\u257b\u257c\7\u0333\2\2\u257c\u257d"+
		"\5\u02d8\u016d\2\u257d\u2583\3\2\2\2\u257e\u2580\5\u02d8\u016d\2\u257f"+
		"\u2581\5\u0380\u01c1\2\u2580\u257f\3\2\2\2\u2580\u2581\3\2\2\2\u2581\u2583"+
		"\3\2\2\2\u2582\u257a\3\2\2\2\u2582\u257e\3\2\2\2\u2583\u034b\3\2\2\2\u2584"+
		"\u2589\5\u0344\u01a3\2\u2585\u2589\5\u0346\u01a4\2\u2586\u2589\5\u0348"+
		"\u01a5\2\u2587\u2589\5\u034a\u01a6\2\u2588\u2584\3\2\2\2\u2588\u2585\3"+
		"\2\2\2\u2588\u2586\3\2\2\2\u2588\u2587\3\2\2\2\u2589\u034d\3\2\2\2\u258a"+
		"\u258f\5\u0350\u01a9\2\u258b\u258c\7\u0347\2\2\u258c\u258e\5\u0350\u01a9"+
		"\2\u258d\u258b\3\2\2\2\u258e\u2591\3\2\2\2\u258f\u258d\3\2\2\2\u258f\u2590"+
		"\3\2\2\2\u2590\u034f\3\2\2\2\u2591\u258f\3\2\2\2\u2592\u2598\5\u0352\u01aa"+
		"\2\u2593\u2594\7\u0345\2\2\u2594\u2595\5\u0352\u01aa\2\u2595\u2596\7\u0346"+
		"\2\2\u2596\u2598\3\2\2\2\u2597\u2592\3\2\2\2\u2597\u2593\3\2\2\2\u2598"+
		"\u0351\3\2\2\2\u2599\u259d\5\u0354\u01ab\2\u259a\u259c\5\u035e\u01b0\2"+
		"\u259b\u259a\3\2\2\2\u259c\u259f\3\2\2\2\u259d\u259b\3\2\2\2\u259d\u259e"+
		"\3\2\2\2\u259e\u0353\3\2\2\2\u259f\u259d\3\2\2\2\u25a0\u25a2\5\u0366\u01b4"+
		"\2\u25a1\u25a3\5\u0382\u01c2\2\u25a2\u25a1\3\2\2\2\u25a2\u25a3\3\2\2\2"+
		"\u25a3\u25d2\3\2\2\2\u25a4\u25a6\5\u03ba\u01de\2\u25a5\u25a7\5\u0382\u01c2"+
		"\2\u25a6\u25a5\3\2\2\2\u25a6\u25a7\3\2\2\2\u25a7\u25d2\3\2\2\2\u25a8\u25aa"+
		"\5\u0368\u01b5\2\u25a9\u25ab\5\u0382\u01c2\2\u25aa\u25a9\3\2\2\2\u25aa"+
		"\u25ab\3\2\2\2\u25ab\u25d2\3\2\2\2\u25ac\u25b1\5\u036c\u01b7\2\u25ad\u25af"+
		"\5\u0382\u01c2\2\u25ae\u25b0\5\u038e\u01c8\2\u25af\u25ae\3\2\2\2\u25af"+
		"\u25b0\3\2\2\2\u25b0\u25b2\3\2\2\2\u25b1\u25ad\3\2\2\2\u25b1\u25b2\3\2"+
		"\2\2\u25b2\u25d2\3\2\2\2\u25b3\u25b4\5\u035c\u01af\2\u25b4\u25b5\5\u0382"+
		"\u01c2\2\u25b5\u25d2\3\2\2\2\u25b6\u25bb\5\u036e\u01b8\2\u25b7\u25b9\5"+
		"\u0382\u01c2\2\u25b8\u25ba\5\u038e\u01c8\2\u25b9\u25b8\3\2\2\2\u25b9\u25ba"+
		"\3\2\2\2\u25ba\u25bc\3\2\2\2\u25bb\u25b7\3\2\2\2\u25bb\u25bc\3\2\2\2\u25bc"+
		"\u25d2\3\2\2\2\u25bd\u25bf\7\u0326\2\2\u25be\u25c0\5\u0382\u01c2\2\u25bf"+
		"\u25be\3\2\2\2\u25bf\u25c0\3\2\2\2\u25c0\u25d2\3\2\2\2\u25c1\u25c2\7\u0326"+
		"\2\2\u25c2\u25c3\7\u0340\2\2\u25c3\u25c8\5\u036e\u01b8\2\u25c4\u25c6\5"+
		"\u0382\u01c2\2\u25c5\u25c7\5\u038e\u01c8\2\u25c6\u25c5\3\2\2\2\u25c6\u25c7"+
		"\3\2\2\2\u25c7\u25c9\3\2\2\2\u25c8\u25c4\3\2\2\2\u25c8\u25c9\3\2\2\2\u25c9"+
		"\u25d2\3\2\2\2\u25ca\u25d2\5\u0356\u01ac\2\u25cb\u25cc\7\u0349\2\2\u25cc"+
		"\u25cd\7\u0349\2\2\u25cd\u25cf\5\u036e\u01b8\2\u25ce\u25d0\5\u0382\u01c2"+
		"\2\u25cf\u25ce\3\2\2\2\u25cf\u25d0\3\2\2\2\u25d0\u25d2\3\2\2\2\u25d1\u25a0"+
		"\3\2\2\2\u25d1\u25a4\3\2\2\2\u25d1\u25a8\3\2\2\2\u25d1\u25ac\3\2\2\2\u25d1"+
		"\u25b3\3\2\2\2\u25d1\u25b6\3\2\2\2\u25d1\u25bd\3\2\2\2\u25d1\u25c1\3\2"+
		"\2\2\u25d1\u25ca\3\2\2\2\u25d1\u25cb\3\2\2\2\u25d2\u0355\3\2\2\2\u25d3"+
		"\u25d4\7\u00ed\2\2\u25d4\u25d5\7\u0345\2\2\u25d5\u25d6\5\u02d8\u016d\2"+
		"\u25d6\u25d7\7\u0347\2\2\u25d7\u25da\5\u02d8\u016d\2\u25d8\u25d9\7\u0347"+
		"\2\2\u25d9\u25db\5\u02d8\u016d\2\u25da\u25d8\3\2\2\2\u25da\u25db\3\2\2"+
		"\2\u25db\u25dc\3\2\2\2\u25dc\u25e2\7\u0346\2\2\u25dd\u25de\7\u017b\2\2"+
		"\u25de\u25df\7\u0345\2\2\u25df\u25e0\5\u0358\u01ad\2\u25e0\u25e1\7\u0346"+
		"\2\2\u25e1\u25e3\3\2\2\2\u25e2\u25dd\3\2\2\2\u25e2\u25e3\3\2\2\2\u25e3"+
		"\u0357\3\2\2\2\u25e4\u25e9\5\u035a\u01ae\2\u25e5\u25e6\7\u0347\2\2\u25e6"+
		"\u25e8\5\u035a\u01ae\2\u25e7\u25e5\3\2\2\2\u25e8\u25eb\3\2\2\2\u25e9\u25e7"+
		"\3\2\2\2\u25e9\u25ea\3\2\2\2\u25ea\u0359\3\2\2\2\u25eb\u25e9\3\2\2\2\u25ec"+
		"\u25ed\7\u032c\2\2\u25ed\u25ef\5\u03ec\u01f7\2\u25ee\u25f0\7\u032f\2\2"+
		"\u25ef\u25ee\3\2\2\2\u25ef\u25f0\3\2\2\2\u25f0\u035b\3\2\2\2\u25f1\u25f2"+
		"\7.\2\2\u25f2\u25f3\7\u0345\2\2\u25f3\u25f4\7/\2\2\u25f4\u25f5\5\u03bc"+
		"\u01df\2\u25f5\u25f6\7\u0347\2\2\u25f6\u25f7\tz\2\2\u25f7\u25f8\7\u0346"+
		"\2\2\u25f8\u035d\3\2\2\2\u25f9\u25fb\7\u00a3\2\2\u25fa\u25f9\3\2\2\2\u25fa"+
		"\u25fb\3\2\2\2\u25fb\u2601\3\2\2\2\u25fc\u25fe\t{\2\2\u25fd\u25ff\7\u00f1"+
		"\2\2\u25fe\u25fd\3\2\2\2\u25fe\u25ff\3\2\2\2\u25ff\u2601\3\2\2\2\u2600"+
		"\u25fa\3\2\2\2\u2600\u25fc\3\2\2\2\u2601\u2603\3\2\2\2\u2602\u2604\t|"+
		"\2\2\u2603\u2602\3\2\2\2\u2603\u2604\3\2\2\2\u2604\u2605\3\2\2\2\u2605"+
		"\u2606\7\u00ac\2\2\u2606\u2607\5\u0350\u01a9\2\u2607\u2608\7\u00e7\2\2"+
		"\u2608\u2609\5\u031c\u018f\2\u2609\u261c\3\2\2\2\u260a\u260b\7L\2\2\u260b"+
		"\u260c\7\u00ac\2\2\u260c\u261c\5\u0350\u01a9\2\u260d\u260e\7L\2\2\u260e"+
		"\u260f\7\u0195\2\2\u260f\u261c\5\u0350\u01a9\2\u2610\u2611\7\u00f1\2\2"+
		"\u2611\u2612\7\u0195\2\2\u2612\u261c\5\u0350\u01a9\2\u2613\u2614\7\u00fc"+
		"\2\2\u2614\u2615\5\u0360\u01b1\2\u2615\u2616\5\u0382\u01c2\2\u2616\u261c"+
		"\3\2\2\2\u2617\u2618\7\u0169\2\2\u2618\u2619\5\u0362\u01b2\2\u2619\u261a"+
		"\5\u0382\u01c2\2\u261a\u261c\3\2\2\2\u261b\u2600\3\2\2\2\u261b\u260a\3"+
		"\2\2\2\u261b\u260d\3\2\2\2\u261b\u2610\3\2\2\2\u261b\u2613\3\2\2\2\u261b"+
		"\u2617\3\2\2\2\u261c\u035f\3\2\2\2\u261d\u261e\7\u0345\2\2\u261e\u261f"+
		"\5\u0398\u01cd\2\u261f\u2620\7\u0087\2\2\u2620\u2621\5\u03c8\u01e5\2\u2621"+
		"\u2622\7\u009d\2\2\u2622\u2623\5\u038e\u01c8\2\u2623\u2624\7\u0346\2\2"+
		"\u2624\u0361\3\2\2\2\u2625\u2626\7\u0345\2\2\u2626\u2627\5\u02d8\u016d"+
		"\2\u2627\u2628\7\u0087\2\2\u2628\u2629\5\u03c8\u01e5\2\u2629\u262a\7\u009d"+
		"\2\2\u262a\u262b\7\u0345\2\2\u262b\u262c\5\u0364\u01b3\2\u262c\u262d\7"+
		"\u0346\2\2\u262d\u262e\7\u0346\2\2\u262e\u0363\3\2\2\2\u262f\u2634\5\u03c8"+
		"\u01e5\2\u2630\u2631\7\u0347\2\2\u2631\u2633\5\u03c8\u01e5\2\u2632\u2630"+
		"\3\2\2\2\u2633\u2636\3\2\2\2\u2634\u2632\3\2\2\2\u2634\u2635\3\2\2\2\u2635"+
		"\u0365\3\2\2\2\u2636\u2634\3\2\2\2\u2637\u2639\5\u03bc\u01df\2\u2638\u263a"+
		"\5\u0386\u01c4\2\u2639\u2638\3\2\2\2\u2639\u263a\3\2\2\2\u263a\u0367\3"+
		"\2\2\2\u263b\u263c\7\u00ec\2\2\u263c\u263d\7\u0345\2\2\u263d\u263e\7\u032f"+
		"\2\2\u263e\u263f\7\u0347\2\2\u263f\u2640\7\u032f\2\2\u2640\u2641\7\u0347"+
		"\2\2\u2641\u2642\7\u032f\2\2\u2642\u2656\7\u0346\2\2\u2643\u2644\7\u00ec"+
		"\2\2\u2644\u2645\7\u0345\2\2\u2645\u2646\7\'\2\2\u2646\u2647\7\u032f\2"+
		"\2\u2647\u2651\7\u0347\2\2\u2648\u264d\5\u036a\u01b6\2\u2649\u264a\7\u0347"+
		"\2\2\u264a\u264c\5\u036a\u01b6\2\u264b\u2649\3\2\2\2\u264c\u264f\3\2\2"+
		"\2\u264d\u264b\3\2\2\2\u264d\u264e\3\2\2\2\u264e\u2652\3\2\2\2\u264f\u264d"+
		"\3\2\2\2\u2650\u2652\5\u03f4\u01fb\2\u2651\u2648\3\2\2\2\u2651\u2650\3"+
		"\2\2\2\u2652\u2653\3\2\2\2\u2653\u2654\7\u0346\2\2\u2654\u2656\3\2\2\2"+
		"\u2655\u263b\3\2\2\2\u2655\u2643\3\2\2\2\u2656\u0369\3\2\2\2\u2657\u2658"+
		"\5\u03f4\u01fb\2\u2658\u2659\7\u0333\2\2\u2659\u265a\t\30\2\2\u265a\u036b"+
		"\3\2\2\2\u265b\u2666\5\u0312\u018a\2\u265c\u265d\7\u0345\2\2\u265d\u265e"+
		"\5\u0312\u018a\2\u265e\u265f\7\u0346\2\2\u265f\u2666\3\2\2\2\u2660\u2666"+
		"\5\u0392\u01ca\2\u2661\u2662\7\u0345\2\2\u2662\u2663\5\u0392\u01ca\2\u2663"+
		"\u2664\7\u0346\2\2\u2664\u2666\3\2\2\2\u2665\u265b\3\2\2\2\u2665\u265c"+
		"\3\2\2\2\u2665\u2660\3\2\2\2\u2665\u2661\3\2\2\2\u2666\u036d\3\2\2\2\u2667"+
		"\u2668\7\u01a7\2\2\u2668\u2669\7\u0345\2\2\u2669\u266a\7\u034a\2\2\u266a"+
		"\u26fa\7\u0346\2\2\u266b\u266c\7\u01af\2\2\u266c\u266d\7\u0345\2\2\u266d"+
		"\u266e\5\u02d8\u016d\2\u266e\u266f\7\22\2\2\u266f\u2670\5\u03ec\u01f7"+
		"\2\u2670\u2671\7\u0346\2\2\u2671\u26fa\3\2\2\2\u2672\u2673\7I\2\2\u2673"+
		"\u2674\7\u0345\2\2\u2674\u2675\5\u03ec\u01f7\2\u2675\u2676\7\u0347\2\2"+
		"\u2676\u2679\5\u02d8\u016d\2\u2677\u2678\7\u0347\2\2\u2678\u267a\5\u02d8"+
		"\u016d\2\u2679\u2677\3\2\2\2\u2679\u267a\3\2\2\2\u267a\u267b\3\2\2\2\u267b"+
		"\u267c\7\u0346\2\2\u267c\u26fa\3\2\2\2\u267d\u267e\7\u01b4\2\2\u267e\u267f"+
		"\7\u0345\2\2\u267f\u2680\7\u034a\2\2\u2680\u26fa\7\u0346\2\2\u2681\u2682"+
		"\78\2\2\u2682\u2683\7\u0345\2\2\u2683\u2684\5\u0394\u01cb\2\u2684\u2685"+
		"\7\u0346\2\2\u2685\u26fa\3\2\2\2\u2686\u26fa\7P\2\2\u2687\u26fa\7Q\2\2"+
		"\u2688\u2689\7\u01cc\2\2\u2689\u268a\7\u0345\2\2\u268a\u268b\7\u032c\2"+
		"\2\u268b\u268c\7\u0347\2\2\u268c\u268d\5\u02d8\u016d\2\u268d\u268e\7\u0347"+
		"\2\2\u268e\u268f\5\u02d8\u016d\2\u268f\u2690\7\u0346\2\2\u2690\u26fa\3"+
		"\2\2\2\u2691\u2692\7\u01cd\2\2\u2692\u2693\7\u0345\2\2\u2693\u2694\7\u032c"+
		"\2\2\u2694\u2695\7\u0347\2\2\u2695\u2696\5\u02d8\u016d\2\u2696\u2697\7"+
		"\u0347\2\2\u2697\u2698\5\u02d8\u016d\2\u2698\u2699\7\u0346\2\2\u2699\u26fa"+
		"\3\2\2\2\u269a\u269b\7\u01ce\2\2\u269b\u269c\7\u0345\2\2\u269c\u269d\7"+
		"\u032c\2\2\u269d\u269e\7\u0347\2\2\u269e\u269f\5\u02d8\u016d\2\u269f\u26a0"+
		"\7\u0346\2\2\u26a0\u26fa\3\2\2\2\u26a1\u26a2\7\u01cf\2\2\u26a2\u26a3\7"+
		"\u0345\2\2\u26a3\u26a4\7\u032c\2\2\u26a4\u26a5\7\u0347\2\2\u26a5\u26a6"+
		"\5\u02d8\u016d\2\u26a6\u26a7\7\u0346\2\2\u26a7\u26fa\3\2\2\2\u26a8\u26a9"+
		"\7\u020d\2\2\u26a9\u26aa\7\u0345\2\2\u26aa\u26fa\7\u0346\2\2\u26ab\u26ac"+
		"\7\u020e\2\2\u26ac\u26ad\7\u0345\2\2\u26ad\u26fa\7\u0346\2\2\u26ae\u26af"+
		"\7\u0098\2\2\u26af\u26b0\7\u0345\2\2\u26b0\u26b3\5\u03ec\u01f7\2\u26b1"+
		"\u26b2\7\u0347\2\2\u26b2\u26b4\7\u032b\2\2\u26b3\u26b1\3\2\2\2\u26b3\u26b4"+
		"\3\2\2\2\u26b4\u26b7\3\2\2\2\u26b5\u26b6\7\u0347\2\2\u26b6\u26b8\7\u032b"+
		"\2\2\u26b7\u26b5\3\2\2\2\u26b7\u26b8\3\2\2\2\u26b8\u26b9\3\2\2\2\u26b9"+
		"\u26ba\7\u0346\2\2\u26ba\u26fa\3\2\2\2\u26bb\u26fa\7\u0254\2\2\u26bc\u26bd"+
		"\7\u00e2\2\2\u26bd\u26be\7\u0345\2\2\u26be\u26bf\5\u02d8\u016d\2\u26bf"+
		"\u26c0\7\u0347\2\2\u26c0\u26c1\5\u02d8\u016d\2\u26c1\u26c2\7\u0346\2\2"+
		"\u26c2\u26fa\3\2\2\2\u26c3\u26c4\7\u02e8\2\2\u26c4\u26c5\7\u0345\2\2\u26c5"+
		"\u26c6\5\u02d8\u016d\2\u26c6\u26c7\7\u0347\2\2\u26c7\u26c8\7\u032b\2\2"+
		"\u26c8\u26c9\7\u0347\2\2\u26c9\u26ca\7\u032b\2\2\u26ca\u26cb\7\u0347\2"+
		"\2\u26cb\u26cc\5\u02d8\u016d\2\u26cc\u26cd\7\u0346\2\2\u26cd\u26fa\3\2"+
		"\2\2\u26ce\u26fa\7\u013c\2\2\u26cf\u26fa\7\u0154\2\2\u26d0\u26d1\7\u00ab"+
		"\2\2\u26d1\u26d2\7\u0345\2\2\u26d2\u26d3\5\u02d8\u016d\2\u26d3\u26d4\7"+
		"\u0347\2\2\u26d4\u26d5\5\u02d8\u016d\2\u26d5\u26d6\7\u0346\2\2\u26d6\u26fa"+
		"\3\2\2\2\u26d7\u26fa\5\u0370\u01b9\2\u26d8\u26d9\7\u009c\2\2\u26d9\u26da"+
		"\7\u0345\2\2\u26da\u26db\5\u031c\u018f\2\u26db\u26dc\7\u0347\2\2\u26dc"+
		"\u26dd\5\u02d8\u016d\2\u26dd\u26de\7\u0347\2\2\u26de\u26df\5\u02d8\u016d"+
		"\2\u26df\u26e0\7\u0346\2\2\u26e0\u26fa\3\2\2\2\u26e1\u26fa\5\u0396\u01cc"+
		"\2\u26e2\u26fa\5\u0398\u01cd\2\u26e3\u26fa\5\u039a\u01ce\2\u26e4\u26e5"+
		"\5\u03d8\u01ed\2\u26e5\u26e7\7\u0345\2\2\u26e6\u26e8\5\u0394\u01cb\2\u26e7"+
		"\u26e6\3\2\2\2\u26e7\u26e8\3\2\2\2\u26e8\u26e9\3\2\2\2\u26e9\u26ea\7\u0346"+
		"\2\2\u26ea\u26fa\3\2\2\2\u26eb\u26ec\7\u02e7\2\2\u26ec\u26ed\7\u0345\2"+
		"\2\u26ed\u26ee\5\u02d8\u016d\2\u26ee\u26ef\7\u0347\2\2\u26ef\u26f0\5\u02d8"+
		"\u016d\2\u26f0\u26f7\7\u0346\2\2\u26f1\u26f2\7\u017c\2\2\u26f2\u26f3\7"+
		"\u0094\2\2\u26f3\u26f4\7\u0345\2\2\u26f4\u26f5\5\u0330\u0199\2\u26f5\u26f6"+
		"\7\u0346\2\2\u26f6\u26f8\3\2\2\2\u26f7\u26f1\3\2\2\2\u26f7\u26f8\3\2\2"+
		"\2\u26f8\u26fa\3\2\2\2\u26f9\u2667\3\2\2\2\u26f9\u266b\3\2\2\2\u26f9\u2672"+
		"\3\2\2\2\u26f9\u267d\3\2\2\2\u26f9\u2681\3\2\2\2\u26f9\u2686\3\2\2\2\u26f9"+
		"\u2687\3\2\2\2\u26f9\u2688\3\2\2\2\u26f9\u2691\3\2\2\2\u26f9\u269a\3\2"+
		"\2\2\u26f9\u26a1\3\2\2\2\u26f9\u26a8\3\2\2\2\u26f9\u26ab\3\2\2\2\u26f9"+
		"\u26ae\3\2\2\2\u26f9\u26bb\3\2\2\2\u26f9\u26bc\3\2\2\2\u26f9\u26c3\3\2"+
		"\2\2\u26f9\u26ce\3\2\2\2\u26f9\u26cf\3\2\2\2\u26f9\u26d0\3\2\2\2\u26f9"+
		"\u26d7\3\2\2\2\u26f9\u26d8\3\2\2\2\u26f9\u26e1\3\2\2\2\u26f9\u26e2\3\2"+
		"\2\2\u26f9\u26e3\3\2\2\2\u26f9\u26e4\3\2\2\2\u26f9\u26eb\3\2\2\2\u26fa"+
		"\u036f\3\2\2\2\u26fb\u2701\5\u0372\u01ba\2\u26fc\u2701\5\u0374\u01bb\2"+
		"\u26fd\u2701\5\u0376\u01bc\2\u26fe\u2701\5\u0378\u01bd\2\u26ff\u2701\5"+
		"\u037a\u01be\2\u2700\u26fb\3\2\2\2\u2700\u26fc\3\2\2\2\u2700\u26fd\3\2"+
		"\2\2\u2700\u26fe\3\2\2\2\u2700\u26ff\3\2\2\2\u2701\u0371\3\2\2\2\u2702"+
		"\u2707\7\u0326\2\2\u2703\u2707\7\u032c\2\2\u2704\u2707\7t\2\2\u2705\u2707"+
		"\5\u0374\u01bb\2\u2706\u2702\3\2\2\2\u2706\u2703\3\2\2\2\u2706\u2704\3"+
		"\2\2\2\u2706\u2705\3\2\2\2\u2707\u2708\3\2\2\2\u2708\u2709\7\u0340\2\2"+
		"\u2709\u270a\7\u030d\2\2\u270a\u270b\7\u0345\2\2\u270b\u270c\7\u032f\2"+
		"\2\u270c\u270d\7\u0347\2\2\u270d\u270e\7\u032f\2\2\u270e\u272e\7\u0346"+
		"\2\2\u270f\u2714\7\u0326\2\2\u2710\u2714\7\u032c\2\2\u2711\u2714\7t\2"+
		"\2\u2712\u2714\5\u0374\u01bb\2\u2713\u270f\3\2\2\2\u2713\u2710\3\2\2\2"+
		"\u2713\u2711\3\2\2\2\u2713\u2712\3\2\2\2\u2714\u2715\3\2\2\2\u2715\u2716"+
		"\7\u0340\2\2\u2716\u2717\7\u02bb\2\2\u2717\u2718\7\u0340\2\2\u2718\u2719"+
		"\7\u030d\2\2\u2719\u271a\7\u0345\2\2\u271a\u271b\7\u032f\2\2\u271b\u271c"+
		"\7\u0347\2\2\u271c\u271d\7\u032f\2\2\u271d\u272e\7\u0346\2\2\u271e\u2723"+
		"\7\u0326\2\2\u271f\u2723\7\u032c\2\2\u2720\u2723\7t\2\2\u2721\u2723\5"+
		"\u0374\u01bb\2\u2722\u271e\3\2\2\2\u2722\u271f\3\2\2\2\u2722\u2720\3\2"+
		"\2\2\u2722\u2721\3\2\2\2\u2723\u2724\3\2\2\2\u2724\u2725\7\u0340\2\2\u2725"+
		"\u2726\7\u00f4\2\2\u2726\u2727\7\u0340\2\2\u2727\u2728\7\u030d\2\2\u2728"+
		"\u2729\7\u0345\2\2\u2729\u272a\7\u032f\2\2\u272a\u272b\7\u0347\2\2\u272b"+
		"\u272c\7\u032f\2\2\u272c\u272e\7\u0346\2\2\u272d\u2706\3\2\2\2\u272d\u2713"+
		"\3\2\2\2\u272d\u2722\3\2\2\2\u272e\u0373\3\2\2\2\u272f\u2733\7\u0326\2"+
		"\2\u2730\u2733\7\u032c\2\2\u2731\u2733\5\u03ba\u01de\2\u2732\u272f\3\2"+
		"\2\2\u2732\u2730\3\2\2\2\u2732\u2731\3\2\2\2\u2733\u2734\3\2\2\2\u2734"+
		"\u2735\7\u0340\2\2\u2735\u2736\7\u0295\2\2\u2736\u2737\7\u0345\2\2\u2737"+
		"\u2738\7\u032f\2\2\u2738\u2746\7\u0346\2\2\u2739\u273d\7\u0326\2\2\u273a"+
		"\u273d\7\u032c\2\2\u273b\u273d\5\u03ba\u01de\2\u273c\u2739\3\2\2\2\u273c"+
		"\u273a\3\2\2\2\u273c\u273b\3\2\2\2\u273d\u273e\3\2\2\2\u273e\u273f\7\u0340"+
		"\2\2\u273f\u2740\7\u02bb\2\2\u2740\u2741\7\u0340\2\2\u2741\u2742\7\u0295"+
		"\2\2\u2742\u2743\7\u0345\2\2\u2743\u2744\7\u032f\2\2\u2744\u2746\7\u0346"+
		"\2\2\u2745\u2732\3\2\2\2\u2745\u273c\3\2\2\2\u2746\u0375\3\2\2\2\u2747"+
		"\u2748\t}\2\2\u2748\u2749\7\u0340\2\2\u2749\u274a\7\u01f3\2\2\u274a\u274b"+
		"\7\u0345\2\2\u274b\u274c\7\u032f\2\2\u274c\u274d\7\u0346\2\2\u274d\u0377"+
		"\3\2\2\2\u274e\u274f\t}\2\2\u274f\u2750\7\u0340\2\2\u2750\u2751\7\u025c"+
		"\2\2\u2751\u2752\7\u0345\2\2\u2752\u2753\7\u032f\2\2\u2753\u2754\7\u0346"+
		"\2\2\u2754\u0379\3\2\2\2\u2755\u2756\t}\2\2\u2756\u2757\7\u0340\2\2\u2757"+
		"\u2758\7\u0269\2\2\u2758\u2759\7\u0345\2\2\u2759\u275a\7\u032f\2\2\u275a"+
		"\u275b\7\u0346\2\2\u275b\u037b\3\2\2\2\u275c\u275d\7\u0177\2\2\u275d\u275e"+
		"\5\u02d8\u016d\2\u275e\u275f\7\u015b\2\2\u275f\u2760\5\u02d8\u016d\2\u2760"+
		"\u037d\3\2\2\2\u2761\u2762\7\u0177\2\2\u2762\u2763\5\u031c\u018f\2\u2763"+
		"\u2764\7\u015b\2\2\u2764\u2765\5\u02d8\u016d\2\u2765\u037f\3\2\2\2\u2766"+
		"\u2768\7\22\2\2\u2767\u2766\3\2\2\2\u2767\u2768\3\2\2\2\u2768\u2769\3"+
		"\2\2\2\u2769\u276a\5\u0390\u01c9\2\u276a\u0381\3\2\2\2\u276b\u276d\7\22"+
		"\2\2\u276c\u276b\3\2\2\2\u276c\u276d\3\2\2\2\u276d\u276e\3\2\2\2\u276e"+
		"\u276f\5\u0384\u01c3\2\u276f\u0383\3\2\2\2\u2770\u2772\5\u03f4\u01fb\2"+
		"\u2771\u2773\5\u0386\u01c4\2\u2772\u2771\3\2\2\2\u2772\u2773\3\2\2\2\u2773"+
		"\u0385\3\2\2\2\u2774\u2776\7\u017b\2\2\u2775\u2774\3\2\2\2\u2775\u2776"+
		"\3\2\2\2\u2776\u2777\3\2\2\2\u2777\u2778\7\u0345\2\2\u2778\u277f\5\u038a"+
		"\u01c6\2\u2779\u277b\7\u0347\2\2\u277a\u2779\3\2\2\2\u277a\u277b\3\2\2"+
		"\2\u277b\u277c\3\2\2\2\u277c\u277e\5\u038a\u01c6\2\u277d\u277a\3\2\2\2"+
		"\u277e\u2781\3\2\2\2\u277f\u277d\3\2\2\2\u277f\u2780\3\2\2\2\u2780\u2782"+
		"\3\2\2\2\u2781\u277f\3\2\2\2\u2782\u2783\7\u0346\2\2\u2783\u0387\3\2\2"+
		"\2\u2784\u2785\7\u017b\2\2\u2785\u2786\7\u0345\2\2\u2786\u278d\5\u038a"+
		"\u01c6\2\u2787\u2789\7\u0347\2\2\u2788\u2787\3\2\2\2\u2788\u2789\3\2\2"+
		"\2\u2789\u278a\3\2\2\2\u278a\u278c\5\u038a\u01c6\2\u278b\u2788\3\2\2\2"+
		"\u278c\u278f\3\2\2\2\u278d\u278b\3\2\2\2\u278d\u278e\3\2\2\2\u278e\u2790"+
		"\3\2\2\2\u278f\u278d\3\2\2\2\u2790\u2791\7\u0346\2\2\u2791\u0389\3\2\2"+
		"\2\u2792\u2794\7\u026a\2\2\u2793\u2792\3\2\2\2\u2793\u2794\3\2\2\2\u2794"+
		"\u27c5\3\2\2\2\u2795\u27a9\7\u00a0\2\2\u2796\u2797\7\u0345\2\2\u2797\u279c"+
		"\5\u038c\u01c7\2\u2798\u2799\7\u0347\2\2\u2799\u279b\5\u038c\u01c7\2\u279a"+
		"\u2798\3\2\2\2\u279b\u279e\3\2\2\2\u279c\u279a\3\2\2\2\u279c\u279d\3\2"+
		"\2\2\u279d\u279f\3\2\2\2\u279e\u279c\3\2\2\2\u279f\u27a0\7\u0346\2\2\u27a0"+
		"\u27aa\3\2\2\2\u27a1\u27a6\5\u038c\u01c7\2\u27a2\u27a3\7\u0347\2\2\u27a3"+
		"\u27a5\5\u038c\u01c7\2\u27a4\u27a2\3\2\2\2\u27a5\u27a8\3\2\2\2\u27a6\u27a4"+
		"\3\2\2\2\u27a6\u27a7\3\2\2\2\u27a7\u27aa\3\2\2\2\u27a8\u27a6\3\2\2\2\u27a9"+
		"\u2796\3\2\2\2\u27a9\u27a1\3\2\2\2\u27aa\u27c6\3\2\2\2\u27ab\u27ac\7\u00a0"+
		"\2\2\u27ac\u27ad\7\u0333\2\2\u27ad\u27c6\5\u038c\u01c7\2\u27ae\u27bd\7"+
		"\u0088\2\2\u27af\u27b0\7\u0345\2\2\u27b0\u27b1\5\u038c\u01c7\2\u27b1\u27b2"+
		"\7\u0345\2\2\u27b2\u27b7\7\u032c\2\2\u27b3\u27b4\7\u0347\2\2\u27b4\u27b6"+
		"\7\u032c\2\2\u27b5\u27b3\3\2\2\2\u27b6\u27b9\3\2\2\2\u27b7\u27b5\3\2\2"+
		"\2\u27b7\u27b8\3\2\2\2\u27b8\u27ba\3\2\2\2\u27b9\u27b7\3\2\2\2\u27ba\u27bb"+
		"\7\u0346\2\2\u27bb\u27bc\7\u0346\2\2\u27bc\u27be\3\2\2\2\u27bd\u27af\3"+
		"\2\2\2\u27bd\u27be\3\2\2\2\u27be\u27c6\3\2\2\2\u27bf\u27c6\7\u02d2\2\2"+
		"\u27c0\u27c6\7\u02dc\2\2\u27c1\u27c2\7\u02dd\2\2\u27c2\u27c3\7\u0333\2"+
		"\2\u27c3\u27c6\7\u032b\2\2\u27c4\u27c6\7\u032c\2\2\u27c5\u2795\3\2\2\2"+
		"\u27c5\u27ab\3\2\2\2\u27c5\u27ae\3\2\2\2\u27c5\u27bf\3\2\2\2\u27c5\u27c0"+
		"\3\2\2\2\u27c5\u27c1\3\2\2\2\u27c5\u27c4\3\2\2\2\u27c6\u038b\3\2\2\2\u27c7"+
		"\u27ca\5\u03f4\u01fb\2\u27c8\u27ca\7\u032b\2\2\u27c9\u27c7\3\2\2\2\u27c9"+
		"\u27c8\3\2\2\2\u27ca\u038d\3\2\2\2\u27cb\u27cc\7\u0345\2\2\u27cc\u27d1"+
		"\5\u0390\u01c9\2\u27cd\u27ce\7\u0347\2\2\u27ce\u27d0\5\u0390\u01c9\2\u27cf"+
		"\u27cd\3\2\2\2\u27d0\u27d3\3\2\2\2\u27d1\u27cf\3\2\2\2\u27d1\u27d2\3\2"+
		"\2\2\u27d2\u27d4\3\2\2\2\u27d3\u27d1\3\2\2\2\u27d4\u27d5\7\u0346\2\2\u27d5"+
		"\u038f\3\2\2\2\u27d6\u27d9\5\u03f4\u01fb\2\u27d7\u27d9\7\u032f\2\2\u27d8"+
		"\u27d6\3\2\2\2\u27d8\u27d7\3\2\2\2\u27d9\u0391\3\2\2\2\u27da\u27db\7\u0171"+
		"\2\2\u27db\u27dc\7\u0345\2\2\u27dc\u27dd\5\u0394\u01cb\2\u27dd\u27e5\7"+
		"\u0346\2\2\u27de\u27df\7\u0347\2\2\u27df\u27e0\7\u0345\2\2\u27e0\u27e1"+
		"\5\u0394\u01cb\2\u27e1\u27e2\7\u0346\2\2\u27e2\u27e4\3\2\2\2\u27e3\u27de"+
		"\3\2\2\2\u27e4\u27e7\3\2\2\2\u27e5\u27e3\3\2\2\2\u27e5\u27e6\3\2\2\2\u27e6"+
		"\u0393\3\2\2\2\u27e7\u27e5\3\2\2\2\u27e8\u27ed\5\u02d8\u016d\2\u27e9\u27ea"+
		"\7\u0347\2\2\u27ea\u27ec\5\u02d8\u016d\2\u27eb\u27e9\3\2\2\2\u27ec\u27ef"+
		"\3\2\2\2\u27ed\u27eb\3\2\2\2\u27ed\u27ee\3\2\2\2\u27ee\u0395\3\2\2\2\u27ef"+
		"\u27ed\3\2\2\2\u27f0\u27f1\t~\2\2\u27f1\u27f2\7\u0345\2\2\u27f2\u27f3"+
		"\7\u0346\2\2\u27f3\u27fb\5\u039e\u01d0\2\u27f4\u27f5\7\u026f\2\2\u27f5"+
		"\u27f6\7\u0345\2\2\u27f6\u27f7\5\u02d8\u016d\2\u27f7\u27f8\7\u0346\2\2"+
		"\u27f8\u27f9\5\u039e\u01d0\2\u27f9\u27fb\3\2\2\2\u27fa\u27f0\3\2\2\2\u27fa"+
		"\u27f4\3\2\2\2\u27fb\u0397\3\2\2\2\u27fc\u27fd\t\177\2\2\u27fd\u27fe\7"+
		"\u0345\2\2\u27fe\u27ff\5\u039c\u01cf\2\u27ff\u2801\7\u0346\2\2\u2800\u2802"+
		"\5\u039e\u01d0\2\u2801\u2800\3\2\2\2\u2801\u2802\3\2\2\2\u2802\u281d\3"+
		"\2\2\2\u2803\u2804\t\u0080\2\2\u2804\u2807\7\u0345\2\2\u2805\u2808\7\u034a"+
		"\2\2\u2806\u2808\5\u039c\u01cf\2\u2807\u2805\3\2\2\2\u2807\u2806\3\2\2"+
		"\2\u2808\u2809\3\2\2\2\u2809\u280b\7\u0346\2\2\u280a\u280c\5\u039e\u01d0"+
		"\2\u280b\u280a\3\2\2\2\u280b\u280c\3\2\2\2\u280c\u281d\3\2\2\2\u280d\u280e"+
		"\7\u01b5\2\2\u280e\u280f\7\u0345\2\2\u280f\u2810\5\u039c\u01cf\2\u2810"+
		"\u2811\7\u0346\2\2\u2811\u281d\3\2\2\2\u2812\u2813\7\u0212\2\2\u2813\u2814"+
		"\7\u0345\2\2\u2814\u2815\5\u02d8\u016d\2\u2815\u2816\7\u0346\2\2\u2816"+
		"\u281d\3\2\2\2\u2817\u2818\7\u0213\2\2\u2818\u2819\7\u0345\2\2\u2819\u281a"+
		"\5\u0394\u01cb\2\u281a\u281b\7\u0346\2\2\u281b\u281d\3\2\2\2\u281c\u27fc"+
		"\3\2\2\2\u281c\u2803\3\2\2\2\u281c\u280d\3\2\2\2\u281c\u2812\3\2\2\2\u281c"+
		"\u2817\3\2\2\2\u281d\u0399\3\2\2\2\u281e\u281f\t\u0081\2\2\u281f\u2820"+
		"\7\u0345\2\2\u2820\u2821\5\u02d8\u016d\2\u2821\u2822\7\u0346\2\2\u2822"+
		"\u2823\5\u039e\u01d0\2\u2823\u2833\3\2\2\2\u2824\u2825\t\u0082\2\2\u2825"+
		"\u2826\7\u0345\2\2\u2826\u282d\5\u02d8\u016d\2\u2827\u2828\7\u0347\2\2"+
		"\u2828\u282b\5\u02d8\u016d\2\u2829\u282a\7\u0347\2\2\u282a\u282c\5\u02d8"+
		"\u016d\2\u282b\u2829\3\2\2\2\u282b\u282c\3\2\2\2\u282c\u282e\3\2\2\2\u282d"+
		"\u2827\3\2\2\2\u282d\u282e\3\2\2\2\u282e\u282f\3\2\2\2\u282f\u2830\7\u0346"+
		"\2\2\u2830\u2831\5\u039e\u01d0\2\u2831\u2833\3\2\2\2\u2832\u281e\3\2\2"+
		"\2\u2832\u2824\3\2\2\2\u2833\u039b\3\2\2\2\u2834\u2836\tp\2\2\u2835\u2834"+
		"\3\2\2\2\u2835\u2836\3\2\2\2\u2836\u2837\3\2\2\2\u2837\u2838\5\u02d8\u016d"+
		"\2\u2838\u039d\3\2\2\2\u2839\u283a\7\u00f2\2\2\u283a\u283e\7\u0345\2\2"+
		"\u283b\u283c\7\u0282\2\2\u283c\u283d\7(\2\2\u283d\u283f\5\u0394\u01cb"+
		"\2\u283e\u283b\3\2\2\2\u283e\u283f\3\2\2\2\u283f\u2841\3\2\2\2\u2840\u2842"+
		"\5\u0330\u0199\2\u2841\u2840\3\2\2\2\u2841\u2842\3\2\2\2\u2842\u2844\3"+
		"\2\2\2\u2843\u2845\5\u03a0\u01d1\2\u2844\u2843\3\2\2\2\u2844\u2845\3\2"+
		"\2\2\u2845\u2846\3\2\2\2\u2846\u2847\7\u0346\2\2\u2847\u039f\3\2\2\2\u2848"+
		"\u2849\t\u0083\2\2\u2849\u284a\5\u03a2\u01d2\2\u284a\u03a1\3\2\2\2\u284b"+
		"\u2852\5\u03a6\u01d4\2\u284c\u284d\7\37\2\2\u284d\u284e\5\u03a4\u01d3"+
		"\2\u284e\u284f\7\r\2\2\u284f\u2850\5\u03a4\u01d3\2\u2850\u2852\3\2\2\2"+
		"\u2851\u284b\3\2\2\2\u2851\u284c\3\2\2\2\u2852\u03a3\3\2\2\2\u2853\u2856"+
		"\5\u03a6\u01d4\2\u2854\u2856\5\u03a8\u01d5\2\u2855\u2853\3\2\2\2\u2855"+
		"\u2854\3\2\2\2\u2856\u03a5\3\2\2\2\u2857\u2858\7\u0305\2\2\u2858\u285e"+
		"\7\u0289\2\2\u2859\u285a\7\u032b\2\2\u285a\u285e\7\u0289\2\2\u285b\u285c"+
		"\7M\2\2\u285c\u285e\7\u02bb\2\2\u285d\u2857\3\2\2\2\u285d\u2859\3\2\2"+
		"\2\u285d\u285b\3\2\2\2\u285e\u03a7\3\2\2\2\u285f\u2860\7\u0305\2\2\u2860"+
		"\u2864\7\u0204\2\2\u2861\u2862\7\u032b\2\2\u2862\u2864\7\u0204\2\2\u2863"+
		"\u285f\3\2\2\2\u2863\u2861\3\2\2\2\u2864\u03a9\3\2\2\2\u2865\u2866\7\u0200"+
		"\2\2\u2866\u286b\5\u03ac\u01d7\2\u2867\u2868\7\u0347\2\2\u2868\u286a\5"+
		"\u03ac\u01d7\2\u2869\u2867\3\2\2\2\u286a\u286d\3\2\2\2\u286b\u2869\3\2"+
		"\2\2\u286b\u286c\3\2\2\2\u286c\u2888\3\2\2\2\u286d\u286b\3\2\2\2\u286e"+
		"\u286f\7\u01d6\2\2\u286f\u2872\7\u0333\2\2\u2870\u2873\5\u03f4\u01fb\2"+
		"\u2871\u2873\7\u032f\2\2\u2872\u2870\3\2\2\2\u2872\u2871\3\2\2\2\u2873"+
		"\u2888\3\2\2\2\u2874\u2875\7\u01d5\2\2\u2875\u2878\7\u0333\2\2\u2876\u2879"+
		"\5\u03f4\u01fb\2\u2877\u2879\7\u032f\2\2\u2878\u2876\3\2\2\2\u2878\u2877"+
		"\3\2\2\2\u2879\u2888\3\2\2\2\u287a\u287b\7\u0260\2\2\u287b\u287c\7\u0333"+
		"\2\2\u287c\u2888\t\t\2\2\u287d\u287e\7\u02fc\2\2\u287e\u287f\7\u0333\2"+
		"\2\u287f\u2888\t\t\2\2\u2880\u2881\7\u0302\2\2\u2881\u2882\7\u0333\2\2"+
		"\u2882\u2888\7\u032b\2\2\u2883\u2884\7\u01d1\2\2\u2884\u2888\t\t\2\2\u2885"+
		"\u2886\7\u02ff\2\2\u2886\u2888\t\t\2\2\u2887\u2865\3\2\2\2\u2887\u286e"+
		"\3\2\2\2\u2887\u2874\3\2\2\2\u2887\u287a\3\2\2\2\u2887\u287d\3\2\2\2\u2887"+
		"\u2880\3\2\2\2\u2887\u2883\3\2\2\2\u2887\u2885\3\2\2\2\u2888\u03ab\3\2"+
		"\2\2\u2889\u2890\7\u0345\2\2\u288a\u288b\7\u026b\2\2\u288b\u288c\7\u0333"+
		"\2\2\u288c\u2891\t\u0084\2\2\u288d\u288e\7\u01e1\2\2\u288e\u288f\7\u0333"+
		"\2\2\u288f\u2891\7\u032f\2\2\u2890\u288a\3\2\2\2\u2890\u288d\3\2\2\2\u2891"+
		"\u2892\3\2\2\2\u2892\u2893\7\u0346\2\2\u2893\u03ad\3\2\2\2\u2894\u2897"+
		"\5\u03b0\u01d9\2\u2895\u2897\5\u03b2\u01da\2\u2896\u2894\3\2\2\2\u2896"+
		"\u2895\3\2\2\2\u2897\u03af\3\2\2\2\u2898\u2899\7\u01fd\2\2\u2899\u289c"+
		"\5\u03f4\u01fb\2\u289a\u289b\7A\2\2\u289b\u289d\7\u0200\2\2\u289c\u289a"+
		"\3\2\2\2\u289c\u289d\3\2\2\2\u289d\u289f\3\2\2\2\u289e\u28a0\7[\2\2\u289f"+
		"\u289e\3\2\2\2\u289f\u28a0\3\2\2\2\u28a0\u28a3\3\2\2\2\u28a1\u28a2\7A"+
		"\2\2\u28a2\u28a4\7\u0251\2\2\u28a3\u28a1\3\2\2\2\u28a3\u28a4\3\2\2\2\u28a4"+
		"\u28a5\3\2\2\2\u28a5\u28aa\5\u03b2\u01da\2\u28a6\u28a7\7\u0347\2\2\u28a7"+
		"\u28a9\5\u03b2\u01da\2\u28a8\u28a6\3\2\2\2\u28a9\u28ac\3\2\2\2\u28aa\u28a8"+
		"\3\2\2\2\u28aa\u28ab\3\2\2\2\u28ab\u03b1\3\2\2\2\u28ac\u28aa\3\2\2\2\u28ad"+
		"\u28ae\7\u0345\2\2\u28ae\u28af\7\u025f\2\2\u28af\u28b2\7\u0333\2\2\u28b0"+
		"\u28b3\5\u03f4\u01fb\2\u28b1\u28b3\7\u032f\2\2\u28b2\u28b0\3\2\2\2\u28b2"+
		"\u28b1\3\2\2\2\u28b3\u28b5\3\2\2\2\u28b4\u28b6\7\u0347\2\2\u28b5\u28b4"+
		"\3\2\2\2\u28b5\u28b6\3\2\2\2\u28b6\u28b7\3\2\2\2\u28b7\u28b8\7\u0084\2"+
		"\2\u28b8\u28b9\7\u0333\2\2\u28b9\u28bb\7\u032f\2\2\u28ba\u28bc\7\u0347"+
		"\2\2\u28bb\u28ba\3\2\2\2\u28bb\u28bc\3\2\2\2\u28bc\u28c3\3\2\2\2\u28bd"+
		"\u28be\7\u02da\2\2\u28be\u28bf\7\u0333\2\2\u28bf\u28c1\5\u03fc\u01ff\2"+
		"\u28c0\u28c2\7\u0347\2\2\u28c1\u28c0\3\2\2\2\u28c1\u28c2\3\2\2\2\u28c2"+
		"\u28c4\3\2\2\2\u28c3\u28bd\3\2\2\2\u28c3\u28c4\3\2\2\2\u28c4\u28ce\3\2"+
		"\2\2\u28c5\u28c6\7\u024e\2\2\u28c6\u28c9\7\u0333\2\2\u28c7\u28ca\5\u03fc"+
		"\u01ff\2\u28c8\u28ca\7\u0308\2\2\u28c9\u28c7\3\2\2\2\u28c9\u28c8\3\2\2"+
		"\2\u28ca\u28cc\3\2\2\2\u28cb\u28cd\7\u0347\2\2\u28cc\u28cb\3\2\2\2\u28cc"+
		"\u28cd\3\2\2\2\u28cd\u28cf\3\2\2\2\u28ce\u28c5\3\2\2\2\u28ce\u28cf\3\2"+
		"\2\2\u28cf\u28d6\3\2\2\2\u28d0\u28d1\7\u01fe\2\2\u28d1\u28d2\7\u0333\2"+
		"\2\u28d2\u28d4\5\u03fc\u01ff\2\u28d3\u28d5\7\u0347\2\2\u28d4\u28d3\3\2"+
		"\2\2\u28d4\u28d5\3\2\2\2\u28d5\u28d7\3\2\2\2\u28d6\u28d0\3\2\2\2\u28d6"+
		"\u28d7\3\2\2\2\u28d7\u28d8\3\2\2\2\u28d8\u28d9\7\u0346\2\2\u28d9\u03b3"+
		"\3\2\2\2\u28da\u28db\5\u03f4\u01fb\2\u28db\u28dc\7\u0340\2\2\u28dc\u28dd"+
		"\5\u03f4\u01fb\2\u28dd\u28de\7\u0340\2\2\u28de\u28df\5\u03f4\u01fb\2\u28df"+
		"\u28e0\7\u0340\2\2\u28e0\u28ec\3\2\2\2\u28e1\u28e2\5\u03f4\u01fb\2\u28e2"+
		"\u28e4\7\u0340\2\2\u28e3\u28e5\5\u03f4\u01fb\2\u28e4\u28e3\3\2\2\2\u28e4"+
		"\u28e5\3\2\2\2\u28e5\u28e6\3\2\2\2\u28e6\u28e7\7\u0340\2\2\u28e7\u28ec"+
		"\3\2\2\2\u28e8\u28e9\5\u03f4\u01fb\2\u28e9\u28ea\7\u0340\2\2\u28ea\u28ec"+
		"\3\2\2\2\u28eb\u28da\3\2\2\2\u28eb\u28e1\3\2\2\2\u28eb\u28e8\3\2\2\2\u28eb"+
		"\u28ec\3\2\2\2\u28ec\u28ed\3\2\2\2\u28ed\u28ee\5\u03f4\u01fb\2\u28ee\u03b5"+
		"\3\2\2\2\u28ef\u28f5\5\u03f4\u01fb\2\u28f0\u28f1\5\u03f4\u01fb\2\u28f1"+
		"\u28f2\7\u0340\2\2\u28f2\u28f3\5\u03f4\u01fb\2\u28f3\u28f5\3\2\2\2\u28f4"+
		"\u28ef\3\2\2\2\u28f4\u28f0\3\2\2\2\u28f5\u03b7\3\2\2\2\u28f6\u28fc\5\u03f4"+
		"\u01fb\2\u28f7\u28f8\5\u03f4\u01fb\2\u28f8\u28f9\7\u0340\2\2\u28f9\u28fa"+
		"\5\u03f4\u01fb\2\u28fa\u28fc\3\2\2\2\u28fb\u28f6\3\2\2\2\u28fb\u28f7\3"+
		"\2\2\2\u28fc\u03b9\3\2\2\2\u28fd\u28fe\5\u03f4\u01fb\2\u28fe\u28ff\7\u0340"+
		"\2\2\u28ff\u2900\5\u03f4\u01fb\2\u2900\u2901\7\u0340\2\2\u2901\u2902\5"+
		"\u03f4\u01fb\2\u2902\u2903\7\u0340\2\2\u2903\u290f\3\2\2\2\u2904\u2905"+
		"\5\u03f4\u01fb\2\u2905\u2907\7\u0340\2\2\u2906\u2908\5\u03f4\u01fb\2\u2907"+
		"\u2906\3\2\2\2\u2907\u2908\3\2\2\2\u2908\u2909\3\2\2\2\u2909\u290a\7\u0340"+
		"\2\2\u290a\u290f\3\2\2\2\u290b\u290c\5\u03f4\u01fb\2\u290c\u290d\7\u0340"+
		"\2\2\u290d\u290f\3\2\2\2\u290e\u28fd\3\2\2\2\u290e\u2904\3\2\2\2\u290e"+
		"\u290b\3\2\2\2\u290e\u290f\3\2\2\2\u290f\u2910\3\2\2\2\u2910\u2911\5\u03f4"+
		"\u01fb\2\u2911\u03bb\3\2\2\2\u2912\u2913\5\u03f4\u01fb\2\u2913\u2915\7"+
		"\u0340\2\2\u2914\u2916\5\u03f4\u01fb\2\u2915\u2914\3\2\2\2\u2915\u2916"+
		"\3\2\2\2\u2916\u2917\3\2\2\2\u2917\u2918\7\u0340\2\2\u2918\u291d\3\2\2"+
		"\2\u2919\u291a\5\u03f4\u01fb\2\u291a\u291b\7\u0340\2\2\u291b\u291d\3\2"+
		"\2\2\u291c\u2912\3\2\2\2\u291c\u2919\3\2\2\2\u291c\u291d\3\2\2\2\u291d"+
		"\u291e\3\2\2\2\u291e\u292d\5\u03f4\u01fb\2\u291f\u2920\5\u03f4\u01fb\2"+
		"\u2920\u2922\7\u0340\2\2\u2921\u2923\5\u03f4\u01fb\2\u2922\u2921\3\2\2"+
		"\2\u2922\u2923\3\2\2\2\u2923\u2924\3\2\2\2\u2924\u2925\7\u0340\2\2\u2925"+
		"\u292a\3\2\2\2\u2926\u2927\5\u03f4\u01fb\2\u2927\u2928\7\u0340\2\2\u2928"+
		"\u292a\3\2\2\2\u2929\u291f\3\2\2\2\u2929\u2926\3\2\2\2\u2929\u292a\3\2"+
		"\2\2\u292a\u292b\3\2\2\2\u292b\u292d\7\"\2\2\u292c\u291c\3\2\2\2\u292c"+
		"\u2929\3\2\2\2\u292d\u03bd\3\2\2\2\u292e\u292f\5\u03f4\u01fb\2\u292f\u2930"+
		"\7\u0340\2\2\u2930\u2932\3\2\2\2\u2931\u292e\3\2\2\2\u2931\u2932\3\2\2"+
		"\2\u2932\u2933\3\2\2\2\u2933\u2934\5\u03f4\u01fb\2\u2934\u03bf\3\2\2\2"+
		"\u2935\u2936\5\u03f4\u01fb\2\u2936\u2937\7\u0340\2\2\u2937\u2939\3\2\2"+
		"\2\u2938\u2935\3\2\2\2\u2938\u2939\3\2\2\2\u2939\u293a\3\2\2\2\u293a\u293b"+
		"\5\u03f4\u01fb\2\u293b\u03c1\3\2\2\2\u293c\u2948\5\u03c0\u01e1\2\u293d"+
		"\u293e\5\u03f4\u01fb\2\u293e\u2940\7\u0340\2\2\u293f\u2941\5\u03f4\u01fb"+
		"\2\u2940\u293f\3\2\2\2\u2940\u2941\3\2\2\2\u2941\u2942\3\2\2\2\u2942\u2943"+
		"\7\u0340\2\2\u2943\u2945\3\2\2\2\u2944\u293d\3\2\2\2\u2944\u2945\3\2\2"+
		"\2\u2945\u2946\3\2\2\2\u2946\u2948\5\u03f4\u01fb\2\u2947\u293c\3\2\2\2"+
		"\u2947\u2944\3\2\2\2\u2948\u03c3\3\2\2\2\u2949\u2957\5\u03c2\u01e2\2\u294a"+
		"\u294b\5\u03f4\u01fb\2\u294b\u294c\7\u0340\2\2\u294c\u294d\5\u03f4\u01fb"+
		"\2\u294d\u294f\7\u0340\2\2\u294e\u2950\5\u03f4\u01fb\2\u294f\u294e\3\2"+
		"\2\2\u294f\u2950\3\2\2\2\u2950\u2951\3\2\2\2\u2951\u2952\7\u0340\2\2\u2952"+
		"\u2954\3\2\2\2\u2953\u294a\3\2\2\2\u2953\u2954\3\2\2\2\u2954\u2955\3\2"+
		"\2\2\u2955\u2957\5\u03f4\u01fb\2\u2956\u2949\3\2\2\2\u2956\u2953\3\2\2"+
		"\2\u2957\u03c5\3\2\2\2\u2958\u295b\5\u03ba\u01de\2\u2959\u295b\7\u0326"+
		"\2\2\u295a\u2958\3\2\2\2\u295a\u2959\3\2\2\2\u295b\u03c7\3\2\2\2\u295c"+
		"\u295d\5\u03bc\u01df\2\u295d\u295e\7\u0340\2\2\u295e\u2960\3\2\2\2\u295f"+
		"\u295c\3\2\2\2\u295f\u2960\3\2\2\2\u2960\u2961\3\2\2\2\u2961\u298d\5\u03f4"+
		"\u01fb\2\u2962\u2963\5\u03bc\u01df\2\u2963\u2964\7\u0340\2\2\u2964\u2966"+
		"\3\2\2\2\u2965\u2962\3\2\2\2\u2965\u2966\3\2\2\2\u2966\u2967\3\2\2\2\u2967"+
		"\u298d\7\u01ba\2\2\u2968\u2969\5\u03bc\u01df\2\u2969\u296a\7\u0340\2\2"+
		"\u296a\u296c\3\2\2\2\u296b\u2968\3\2\2\2\u296b\u296c\3\2\2\2\u296c\u296d"+
		"\3\2\2\2\u296d\u298d\7\u02e2\2\2\u296e\u296f\5\u03bc\u01df\2\u296f\u2970"+
		"\7\u0340\2\2\u2970\u2972\3\2\2\2\u2971\u296e\3\2\2\2\u2971\u2972\3\2\2"+
		"\2\u2972\u2973\3\2\2\2\u2973\u298d\7\u0298\2\2\u2974\u2975\5\u03bc\u01df"+
		"\2\u2975\u2976\7\u0340\2\2\u2976\u2978\3\2\2\2\u2977\u2974\3\2\2\2\u2977"+
		"\u2978\3\2\2\2\u2978\u2979\3\2\2\2\u2979\u298d\7\u0196\2\2\u297a\u297b"+
		"\5\u03bc\u01df\2\u297b\u297c\7\u0340\2\2\u297c\u297e\3\2\2\2\u297d\u297a"+
		"\3\2\2\2\u297d\u297e\3\2\2\2\u297e\u297f\3\2\2\2\u297f\u298d\7\u0193\2"+
		"\2\u2980\u2981\5\u03bc\u01df\2\u2981\u2982\7\u0340\2\2\u2982\u2984\3\2"+
		"\2\2\u2983\u2980\3\2\2\2\u2983\u2984\3\2\2\2\u2984\u2985\3\2\2\2\u2985"+
		"\u298d\7\u0192\2\2\u2986\u2987\5\u03bc\u01df\2\u2987\u2988\7\u0340\2\2"+
		"\u2988\u298a\3\2\2\2\u2989\u2986\3\2\2\2\u2989\u298a\3\2\2\2\u298a\u298b"+
		"\3\2\2\2\u298b\u298d\7\u0191\2\2\u298c\u295f\3\2\2\2\u298c\u2965\3\2\2"+
		"\2\u298c\u296b\3\2\2\2\u298c\u2971\3\2\2\2\u298c\u2977\3\2\2\2\u298c\u297d"+
		"\3\2\2\2\u298c\u2983\3\2\2\2\u298c\u2989\3\2\2\2\u298d\u03c9\3\2\2\2\u298e"+
		"\u2990\5\u03f4\u01fb\2\u298f\u2991\tv\2\2\u2990\u298f\3\2\2\2\u2990\u2991"+
		"\3\2\2\2\u2991\u2999\3\2\2\2\u2992\u2993\7\u0347\2\2\u2993\u2995\5\u03f4"+
		"\u01fb\2\u2994\u2996\tv\2\2\u2995\u2994\3\2\2\2\u2995\u2996\3\2\2\2\u2996"+
		"\u2998\3\2\2\2\u2997\u2992\3\2\2\2\u2998\u299b\3\2\2\2\u2999\u2997\3\2"+
		"\2\2\u2999\u299a\3\2\2\2\u299a\u03cb\3\2\2\2\u299b\u2999\3\2\2\2\u299c"+
		"\u29a1\5\u03f4\u01fb\2\u299d\u299e\7\u0347\2\2\u299e\u29a0\5\u03f4\u01fb"+
		"\2\u299f\u299d\3\2\2\2\u29a0\u29a3\3\2\2\2\u29a1\u299f\3\2\2\2\u29a1\u29a2"+
		"\3\2\2\2\u29a2\u03cd\3\2\2\2\u29a3\u29a1\3\2\2\2\u29a4\u29a7\5\u03f4\u01fb"+
		"\2\u29a5\u29a7\7\u0326\2\2\u29a6\u29a4\3\2\2\2\u29a6\u29a5\3\2\2\2\u29a7"+
		"\u03cf\3\2\2\2\u29a8\u29a9\t\t\2\2\u29a9\u03d1\3\2\2\2\u29aa\u29ab\t\u0085"+
		"\2\2\u29ab\u03d3\3\2\2\2\u29ac\u29ae\7\u00de\2\2\u29ad\u29ac\3\2\2\2\u29ad"+
		"\u29ae\3\2\2\2\u29ae\u29af\3\2\2\2\u29af\u29b0\7\u00e1\2\2\u29b0\u03d5"+
		"\3\2\2\2\u29b1\u29b9\5\u03d4\u01eb\2\u29b2\u29b3\7[\2\2\u29b3\u29b6\5"+
		"\u0310\u0189\2\u29b4\u29b5\7\u017b\2\2\u29b5\u29b7\7\u0171\2\2\u29b6\u29b4"+
		"\3\2\2\2\u29b6\u29b7\3\2\2\2\u29b7\u29b9\3\2\2\2\u29b8\u29b1\3\2\2\2\u29b8"+
		"\u29b2\3\2\2\2\u29b9\u03d7\3\2\2\2\u29ba\u29c0\5\u03c4\u01e3\2\u29bb\u29c0"+
		"\7\u0121\2\2\u29bc\u29c0\7\u00b3\2\2\u29bd\u29c0\7\u01a7\2\2\u29be\u29c0"+
		"\7\u01b4\2\2\u29bf\u29ba\3\2\2\2\u29bf\u29bb\3\2\2\2\u29bf\u29bc\3\2\2"+
		"\2\u29bf\u29bd\3\2\2\2\u29bf\u29be\3\2\2\2\u29c0\u03d9\3\2\2\2\u29c1\u29c2"+
		"\7\36\2\2\u29c2\u29c3\7H\2\2\u29c3\u29c4\7\u02f9\2\2\u29c4\u29c5\7\u0345"+
		"\2\2\u29c5\u29c6\7\u0326\2\2\u29c6\u29c7\7\u0346\2\2\u29c7\u29c8\7\u02f8"+
		"\2\2\u29c8\u29c9\7\u0333\2\2\u29c9\u29cb\5\u01c0\u00e1\2\u29ca\u29cc\7"+
		"\u0348\2\2\u29cb\u29ca\3\2\2\2\u29cb\u29cc\3\2\2\2\u29cc\u03db\3\2\2\2"+
		"\u29cd\u29ce\7\36\2\2\u29ce\u29d0\7\u01e0\2\2\u29cf\u29d1\7H\2\2\u29d0"+
		"\u29cf\3\2\2\2\u29d0\u29d1\3\2\2\2\u29d1\u29d2\3\2\2\2\u29d2\u29d3\7\u0326"+
		"\2\2\u29d3\u29d4\7\u008d\2\2\u29d4\u29d5\7\u0138\2\2\u29d5\u29d6\5\u03e0"+
		"\u01f1\2\u29d6\u29d7\7\u015c\2\2\u29d7\u29d8\7\u0138\2\2\u29d8\u29db\5"+
		"\u03e0\u01f1\2\u29d9\u29da\7\u0347\2\2\u29da\u29dc\7\u032f\2\2\u29db\u29d9"+
		"\3\2\2\2\u29db\u29dc\3\2\2\2\u29dc\u29dd\3\2\2\2\u29dd\u29de\7\u00e7\2"+
		"\2\u29de\u29df\7F\2\2\u29df\u29f6\5\u03de\u01f0\2\u29e0\u29e7\7\u017b"+
		"\2\2\u29e1\u29e2\t\u0086\2\2\u29e2\u29e3\7\u0333\2\2\u29e3\u29e5\7\u0326"+
		"\2\2\u29e4\u29e6\7\u0347\2\2\u29e5\u29e4\3\2\2\2\u29e5\u29e6\3\2\2\2\u29e6"+
		"\u29e8\3\2\2\2\u29e7\u29e1\3\2\2\2\u29e7\u29e8\3\2\2\2\u29e8\u29ef\3\2"+
		"\2\2\u29e9\u29ea\7\u00b5\2\2\u29ea\u29eb\7\u0333\2\2\u29eb\u29ed\t\2\2"+
		"\2\u29ec\u29ee\7\u0347\2\2\u29ed\u29ec\3\2\2\2\u29ed\u29ee\3\2\2\2\u29ee"+
		"\u29f0\3\2\2\2\u29ef\u29e9\3\2\2\2\u29ef\u29f0\3\2\2\2\u29f0\u29f4\3\2"+
		"\2\2\u29f1\u29f2\7\u01ee\2\2\u29f2\u29f3\7\u0333\2\2\u29f3\u29f5\t\t\2"+
		"\2\u29f4\u29f1\3\2\2\2\u29f4\u29f5\3\2\2\2\u29f5\u29f7\3\2\2\2\u29f6\u29e0"+
		"\3\2\2\2\u29f6\u29f7\3\2\2\2\u29f7\u29f9\3\2\2\2\u29f8\u29fa\7\u0348\2"+
		"\2\u29f9\u29f8\3\2\2\2\u29f9\u29fa\3\2\2\2\u29fa\u03dd\3\2\2\2\u29fb\u29fe"+
		"\5\u03f4\u01fb\2\u29fc\u29fe\5\u02d8\u016d\2\u29fd\u29fb\3\2\2\2\u29fd"+
		"\u29fc\3\2\2\2\u29fe\u03df\3\2\2\2\u29ff\u2a02\5\u03f4\u01fb\2\u2a00\u2a02"+
		"\5\u02d8\u016d\2\u2a01\u29ff\3\2\2\2\u2a01\u2a00\3\2\2\2\u2a02\u03e1\3"+
		"\2\2\2\u2a03\u2a04\7n\2\2\u2a04\u2a05\7H\2\2\u2a05\u2a07\7\u0326\2\2\u2a06"+
		"\u2a08\7\u0348\2\2\u2a07\u2a06\3\2\2\2\u2a07\u2a08\3\2\2\2\u2a08\u2a15"+
		"\3\2\2\2\u2a09\u2a10\7\u017b\2\2\u2a0a\u2a0b\7r\2\2\u2a0b\u2a0c\7\u0333"+
		"\2\2\u2a0c\u2a0d\t\3\2\2\u2a0d\u2a0e\7\u01dd\2\2\u2a0e\u2a0f\7\u0333\2"+
		"\2\u2a0f\u2a11\t\3\2\2\u2a10\u2a0a\3\2\2\2\u2a10\u2a11\3\2\2\2\u2a11\u2a13"+
		"\3\2\2\2\u2a12\u2a14\7\u01b6\2\2\u2a13\u2a12\3\2\2\2\u2a13\u2a14\3\2\2"+
		"\2\u2a14\u2a16\3\2\2\2\u2a15\u2a09\3\2\2\2\u2a15\u2a16\3\2\2\2\u2a16\u03e3"+
		"\3\2\2\2\u2a17\u2a19\7\u0176\2\2\u2a18\u2a17\3\2\2\2\u2a18\u2a19\3\2\2"+
		"\2\u2a19\u2a1a\3\2\2\2\u2a1a\u2a1b\7\u0345\2\2\u2a1b\u2a1c\5\u03e6\u01f4"+
		"\2\u2a1c\u2a22\7\u0346\2\2\u2a1d\u2a1f\7\u0347\2\2\u2a1e\u2a1d\3\2\2\2"+
		"\u2a1e\u2a1f\3\2\2\2\u2a1f\u2a20\3\2\2\2\u2a20\u2a21\7\u02f8\2\2\u2a21"+
		"\u2a23\5\u01c0\u00e1\2\u2a22\u2a1e\3\2\2\2\u2a22\u2a23\3\2\2\2\u2a23\u2a25"+
		"\3\2\2\2\u2a24\u2a26\7\u0348\2\2\u2a25\u2a24\3\2\2\2\u2a25\u2a26\3\2\2"+
		"\2\u2a26\u03e5\3\2\2\2\u2a27\u2a28\7\u0090\2\2\u2a28\u2a29\7H\2\2\u2a29"+
		"\u2a2a\7\u0094\2\2\u2a2a\u2a2b\t\3\2\2\u2a2b\u2a2c\7\u008d\2\2\u2a2c\u2a2e"+
		"\5\u03e8\u01f5\2\u2a2d\u2a2f\7\u0348\2\2\u2a2e\u2a2d\3\2\2\2\u2a2e\u2a2f"+
		"\3\2\2\2\u2a2f\u03e7\3\2\2\2\u2a30\u2a31\5\u03f4\u01fb\2\u2a31\u2a32\7"+
		"\u0340\2\2\u2a32\u2a33\5\u03f4\u01fb\2\u2a33\u2a34\7\u0340\2\2\u2a34\u2a35"+
		"\5\u03f4\u01fb\2\u2a35\u2a38\3\2\2\2\u2a36\u2a38\5\u03f4\u01fb\2\u2a37"+
		"\u2a30\3\2\2\2\u2a37\u2a36\3\2\2\2\u2a38\u03e9\3\2\2\2\u2a39\u2a3a\7\u02cf"+
		"\2\2\u2a3a\u2a3b\7\u00e7\2\2\u2a3b\u2a3c\7H\2\2\u2a3c\u2a3d\t\3\2\2\u2a3d"+
		"\u2a3e\7\u0252\2\2\u2a3e\u2a3f\7\u0303\2\2\u2a3f\u2a43\5\u02d8\u016d\2"+
		"\u2a40\u2a41\7\u0345\2\2\u2a41\u2a42\t\3\2\2\u2a42\u2a44\7\u0346\2\2\u2a43"+
		"\u2a40\3\2\2\2\u2a43\u2a44\3\2\2\2\u2a44\u2a46\3\2\2\2\u2a45\u2a47\7\u0348"+
		"\2\2\u2a46\u2a45\3\2\2\2\u2a46\u2a47\3\2\2\2\u2a47\u03eb\3\2\2\2\u2a48"+
		"\u2a4a\5\u03f4\u01fb\2\u2a49\u2a4b\7\u0098\2\2\u2a4a\u2a49\3\2\2\2\u2a4a"+
		"\u2a4b\3\2\2\2\u2a4b\u2a53\3\2\2\2\u2a4c\u2a4d\7\u0345\2\2\u2a4d\u2a50"+
		"\t\u0087\2\2\u2a4e\u2a4f\7\u0347\2\2\u2a4f\u2a51\7\u032b\2\2\u2a50\u2a4e"+
		"\3\2\2\2\u2a50\u2a51\3\2\2\2\u2a51\u2a52\3\2\2\2\u2a52\u2a54\7\u0346\2"+
		"\2\u2a53\u2a4c\3\2\2\2\u2a53\u2a54\3\2\2\2\u2a54\u2a5e\3\2\2\2\u2a55\u2a57"+
		"\7f\2\2\u2a56\u2a58\7\u0100\2\2\u2a57\u2a56\3\2\2\2\u2a57\u2a58\3\2\2"+
		"\2\u2a58\u2a5e\3\2\2\2\u2a59\u2a5e\7\u0225\2\2\u2a5a\u2a5e\7\u02fa\2\2"+
		"\u2a5b\u2a5e\7\u02db\2\2\u2a5c\u2a5e\7\u01a5\2\2\u2a5d\u2a48\3\2\2\2\u2a5d"+
		"\u2a55\3\2\2\2\u2a5d\u2a59\3\2\2\2\u2a5d\u2a5a\3\2\2\2\u2a5d\u2a5b\3\2"+
		"\2\2\u2a5d\u2a5c\3\2\2\2\u2a5e\u03ed\3\2\2\2\u2a5f\u2a63\7\u00e1\2\2\u2a60"+
		"\u2a63\7[\2\2\u2a61\u2a63\5\u03f0\u01f9\2\u2a62\u2a5f\3\2\2\2\u2a62\u2a60"+
		"\3\2\2\2\u2a62\u2a61\3\2\2\2\u2a63\u03ef\3\2\2\2\u2a64\u2a74\7\u032f\2"+
		"\2\u2a65\u2a74\7\u0330\2\2\u2a66\u2a68\5\u03f2\u01fa\2\u2a67\u2a66\3\2"+
		"\2\2\u2a67\u2a68\3\2\2\2\u2a68\u2a69\3\2\2\2\u2a69\u2a74\7\u032b\2\2\u2a6a"+
		"\u2a6c\5\u03f2\u01fa\2\u2a6b\u2a6a\3\2\2\2\u2a6b\u2a6c\3\2\2\2\u2a6c\u2a6d"+
		"\3\2\2\2\u2a6d\u2a74\tq\2\2\u2a6e\u2a70\5\u03f2\u01fa\2\u2a6f\u2a6e\3"+
		"\2\2\2\u2a6f\u2a70\3\2\2\2\u2a70\u2a71\3\2\2\2\u2a71\u2a72\7\u0344\2\2"+
		"\u2a72\u2a74\t\u0088\2\2\u2a73\u2a64\3\2\2\2\u2a73\u2a65\3\2\2\2\u2a73"+
		"\u2a67\3\2\2\2\u2a73\u2a6b\3\2\2\2\u2a73\u2a6f\3\2\2\2\u2a74\u03f1\3\2"+
		"\2\2\u2a75\u2a76\tn\2\2\u2a76\u03f3\3\2\2\2\u2a77\u2a7b\5\u03f6\u01fc"+
		"\2\u2a78\u2a7b\7\u0323\2\2\u2a79\u2a7b\7\u0325\2\2\u2a7a\u2a77\3\2\2\2"+
		"\u2a7a\u2a78\3\2\2\2\u2a7a\u2a79\3\2\2\2\u2a7b\u03f5\3\2\2\2\u2a7c\u2a7d"+
		"\t\u0089\2\2\u2a7d\u03f7\3\2\2\2\u2a7e\u2a8e\7\u0333\2\2\u2a7f\u2a8e\7"+
		"\u0334\2\2\u2a80\u2a8e\7\u0335\2\2\u2a81\u2a82\7\u0335\2\2\u2a82\u2a8e"+
		"\7\u0333\2\2\u2a83\u2a84\7\u0334\2\2\u2a84\u2a8e\7\u0333\2\2\u2a85\u2a86"+
		"\7\u0335\2\2\u2a86\u2a8e\7\u0334\2\2\u2a87\u2a88\7\u0336\2\2\u2a88\u2a8e"+
		"\7\u0333\2\2\u2a89\u2a8a\7\u0336\2\2\u2a8a\u2a8e\7\u0334\2\2\u2a8b\u2a8c"+
		"\7\u0336\2\2\u2a8c\u2a8e\7\u0335\2\2\u2a8d\u2a7e\3\2\2\2\u2a8d\u2a7f\3"+
		"\2\2\2\u2a8d\u2a80\3\2\2\2\u2a8d\u2a81\3\2\2\2\u2a8d\u2a83\3\2\2\2\u2a8d"+
		"\u2a85\3\2\2\2\u2a8d\u2a87\3\2\2\2\u2a8d\u2a89\3\2\2\2\u2a8d\u2a8b\3\2"+
		"\2\2\u2a8e\u03f9\3\2\2\2\u2a8f\u2a90\t\u008a\2\2\u2a90\u03fb\3\2\2\2\u2a91"+
		"\u2a93\7\u032b\2\2\u2a92\u2a94\t\u008b\2\2\u2a93\u2a92\3\2\2\2\u2a93\u2a94"+
		"\3\2\2\2\u2a94\u03fd\3\2\2\2\u05f9\u0401\u040a\u040e\u0414\u0417\u041b"+
		"\u041f\u0428\u042f\u04d0\u04d7\u04e5\u04e9\u04ec\u04f0\u04f4\u04f8\u04fd"+
		"\u0502\u0504\u0508\u050b\u0512\u0515\u051e\u0521\u052c\u052f\u0534\u0539"+
		"\u053c\u0541\u0545\u0548\u054c\u054f\u0552\u0559\u055d\u055f\u0564\u056a"+
		"\u056e\u057b\u0581\u0584\u058d\u0590\u05a4\u05ac\u05b1\u05b4\u05b9\u05bc"+
		"\u05c1\u05c9\u05ce\u05d1\u05d6\u05dc\u05e1\u05f2\u05f5\u05f8\u05fb\u0600"+
		"\u0609\u0618\u0629\u0634\u063a\u0649\u0658\u0661\u0665\u066a\u0670\u0676"+
		"\u0679\u067e\u0683\u068b\u0695\u06a8\u06b0\u06bd\u06bf\u06cb\u06cd\u06d4"+
		"\u06dd\u06e3\u06ec\u06fb\u0705\u070f\u0737\u074e\u0772\u0784\u0787\u078c"+
		"\u078f\u0794\u0797\u079c\u079f\u07a4\u07a7\u07af\u07b2\u07ba\u07c7\u07d2"+
		"\u07d7\u07db\u07e1\u07f8\u0804\u080f\u0814\u0818\u081e\u0820\u082d\u0844"+
		"\u084b\u0854\u0859\u085c\u0861\u0864\u0869\u086e\u088a\u0891\u0896\u089d"+
		"\u089f\u08aa\u08b0\u08bf\u08cd\u08d0\u08d2\u08d7\u08db\u08de\u08e0\u08e6"+
		"\u08e9\u08eb\u08f1\u08f3\u0909\u0911\u0919\u091b\u091d\u0926\u093b\u0948"+
		"\u0957\u095b\u097e\u0981\u0986\u0998\u099b\u09a0\u09ba\u09c8\u09cd\u09d5"+
		"\u09da\u09e1\u09f6\u0a1b\u0a20\u0a33\u0a3f\u0a42\u0a47\u0a4a\u0a50\u0a5f"+
		"\u0a64\u0a6c\u0a6f\u0a74\u0a79\u0a7c\u0a94\u0a9b\u0aa0\u0aa5\u0aaa\u0aac"+
		"\u0ab3\u0ac0\u0ac6\u0acb\u0ad3\u0ae3\u0aea\u0aef\u0af4\u0af7\u0afd\u0b03"+
		"\u0b08\u0b0d\u0b12\u0b15\u0b1b\u0b21\u0b2c\u0b2f\u0b39\u0b3f\u0b43\u0b47"+
		"\u0b64\u0b71\u0b77\u0b81\u0b84\u0b98\u0b9c\u0ba0\u0ba5\u0bb4\u0bbb\u0bc4"+
		"\u0bcc\u0bcf\u0bd4\u0bd9\u0be1\u0be7\u0beb\u0bf1\u0bf6\u0bfa\u0c01\u0c09"+
		"\u0c11\u0c1a\u0c1f\u0c23\u0c26\u0c2a\u0c30\u0c35\u0c3d\u0c45\u0c4b\u0c51"+
		"\u0c54\u0c59\u0c5c\u0c63\u0c65\u0c68\u0c6e\u0c71\u0c76\u0c79\u0c7e\u0c81"+
		"\u0c86\u0c89\u0c8e\u0c91\u0c94\u0c97\u0c9e\u0ca2\u0ca9\u0cb0\u0cb6\u0cc3"+
		"\u0cc7\u0ccc\u0cd6\u0cdf\u0ce3\u0cef\u0cf5\u0cfa\u0cfc\u0d10\u0d14\u0d1c"+
		"\u0d25\u0d2b\u0d31\u0d39\u0d3b\u0d45\u0d49\u0d4c\u0d50\u0d55\u0d5b\u0d5e"+
		"\u0d62\u0d6a\u0d6c\u0d6f\u0d77\u0d7f\u0d86\u0d8d\u0d8f\u0d91\u0d96\u0d9c"+
		"\u0d9f\u0da1\u0da3\u0da6\u0dab\u0dae\u0db3\u0dc2\u0dc9\u0dd0\u0dd2\u0dd4"+
		"\u0dd9\u0ddf\u0de2\u0de4\u0de6\u0de9\u0dee\u0df1\u0df6\u0e03\u0e08\u0e11"+
		"\u0e16\u0e1c\u0e20\u0e24\u0e35\u0e37\u0e41\u0e46\u0e48\u0e4c\u0e52\u0e5a"+
		"\u0e5f\u0e62\u0e6a\u0e6d\u0e72\u0e77\u0e7c\u0e81\u0e86\u0e8b\u0e8f\u0e94"+
		"\u0e9f\u0ea4\u0ea7\u0eaa\u0eaf\u0eb2\u0eb7\u0eba\u0ebf\u0ec2\u0ec7\u0eca"+
		"\u0ecf\u0ed2\u0ed7\u0edd\u0ee2\u0ee5\u0eea\u0ef1\u0ef3\u0ef9\u0f02\u0f07"+
		"\u0f09\u0f15\u0f1b\u0f27\u0f2a\u0f2f\u0f31\u0f3b\u0f40\u0f42\u0f46\u0f4c"+
		"\u0f5e\u0f60\u0f6f\u0f81\u0f89\u0f93\u0fa3\u0fb8\u0fc3\u0fc9\u0fd2\u0fdb"+
		"\u0fe1\u0fea\u0fef\u0ff2\u0ff7\u0ffa\u0fff\u1002\u100a\u1010\u1014\u101b"+
		"\u1021\u1025\u1028\u102a\u102d\u1032\u1035\u103a\u103d\u1042\u1045\u104a"+
		"\u104d\u105c\u1067\u1073\u107a\u1081\u1085\u108a\u108d\u1092\u1095\u109a"+
		"\u109d\u10a6\u10ad\u10bc\u10c0\u10c5\u10d0\u10da\u10e6\u10ec\u10ee\u10f6"+
		"\u10ff\u1104\u110f\u1112\u1116\u111e\u1122\u1126\u112e\u1133\u113b\u1140"+
		"\u1144\u1146\u114b\u1154\u1157\u115c\u1163\u1169\u116b\u1170\u1176\u117c"+
		"\u1181\u1187\u118e\u1193\u1198\u119d\u11a0\u11a4\u11a8\u11ac\u11b0\u11b5"+
		"\u11b9\u11bd\u11c7\u11cd\u11d4\u11d7\u11dd\u11e3\u11e8\u11ea\u11f0\u11f2"+
		"\u11f7\u11fd\u1203\u1208\u120a\u120e\u1212\u1215\u1223\u1228\u122c\u1239"+
		"\u123c\u123e\u1246\u1250\u1256\u125d\u1260\u1266\u126c\u1271\u1273\u1279"+
		"\u127b\u1280\u1286\u128c\u1292\u1297\u1299\u129d\u12a1\u12a4\u12b2\u12b7"+
		"\u12bb\u12c8\u12cb\u12cd\u12d5\u12e0\u12e9\u12f2\u12fd\u1306\u130f\u131b"+
		"\u131f\u1324\u1326\u1328\u132d\u1331\u1336\u1338\u133a\u1348\u134d\u1363"+
		"\u1379\u137e\u138b\u1393\u13a7\u13aa\u13b0\u13b8\u13bf\u13c4\u13c8\u13cc"+
		"\u13cf\u13d6\u13e8\u13ea\u13fe\u1406\u140b\u141d\u142c\u142e\u1435\u143c"+
		"\u1441\u1446\u144c\u1451\u1453\u145a\u1460\u1466\u1469\u146f\u1479\u147c"+
		"\u1483\u1486\u148b\u148d\u1495\u1499\u149f\u14a4\u14a6\u14a9\u14b0\u14b6"+
		"\u14bd\u14c0\u14c6\u14cb\u14cd\u14d0\u14d8\u14de\u14e5\u14e8\u14ee\u14f3"+
		"\u14f5\u14fd\u1505\u150b\u1510\u1512\u151c\u1521\u152b\u1531\u153d\u153f"+
		"\u1546\u154c\u1552\u1558\u155d\u155f\u1566\u156e\u1574\u1582\u1584\u1587"+
		"\u158c\u158e\u159a\u15a0\u15ae\u15b0\u15b3\u15b8\u15bb\u15c0\u15c2\u15cb"+
		"\u15d2\u15d8\u15db\u15e0\u15e7\u15e9\u15ef\u15f1\u15f9\u15fb\u1601\u1603"+
		"\u1609\u160b\u1612\u1615\u1617\u161a\u161e\u1620\u1629\u162f\u1633\u163b"+
		"\u1642\u1648\u164a\u1655\u165a\u1660\u1664\u166e\u1676\u1682\u1685\u168d"+
		"\u168f\u1692\u1696\u1699\u16a3\u16a9\u16b1\u16b5\u16b9\u16c2\u16c8\u16cc"+
		"\u16cf\u16da\u16de\u16e5\u16ea\u16ed\u16f5\u16f9\u16fc\u1700\u1703\u1707"+
		"\u170e\u1712\u1714\u1716\u1719\u171c\u171f\u1725\u1728\u1730\u1732\u1735"+
		"\u1739\u173c\u1742\u1745\u1749\u174c\u174f\u1756\u1759\u1760\u1766\u176a"+
		"\u1774\u1777\u177a\u177e\u1781\u1784\u1787\u178b\u178e\u1796\u1798\u179c"+
		"\u179f\u17a7\u17ab\u17af\u17b6\u17ba\u17bc\u17be\u17c1\u17c4\u17c7\u17cf"+
		"\u17d5\u17db\u17dd\u17e1\u17e4\u17e9\u17ee\u17f1\u17f9\u17fd\u1804\u1807"+
		"\u1810\u1813\u1817\u181f\u1822\u1826\u1829\u1837\u183b\u183e\u1842\u1845"+
		"\u184a\u184d\u1853\u1856\u185d\u1861\u1863\u186b\u186e\u1872\u1879\u187e"+
		"\u1881\u188d\u1890\u1896\u189d\u18a2\u18a7\u18ae\u18b5\u18b8\u18c0\u18c8"+
		"\u18cb\u18d3\u18de\u18e1\u18eb\u18f2\u18f7\u18fa\u1904\u1907\u190a\u1912"+
		"\u191d\u1920\u1923\u1929\u192e\u1932\u193c\u193f\u1942\u1948\u194e\u1956"+
		"\u1959\u195d\u1961\u1964\u1969\u1977\u1987\u198b\u1991\u1993\u1996\u199a"+
		"\u199f\u19a4\u19ac\u19b1\u19b6\u19bc\u19c1\u19c4\u19cd\u19d7\u19da\u19e3"+
		"\u19eb\u19ee\u19f5\u19f8\u1a26\u1a2a\u1a2d\u1a33\u1a3f\u1a41\u1a44\u1a5d"+
		"\u1a68\u1a70\u1a7b\u1a80\u1a83\u1a8b\u1a95\u1a9c\u1aa3\u1aa5\u1ab1\u1abc"+
		"\u1ac0\u1ac5\u1ac8\u1aca\u1acd\u1ad9\u1adb\u1add\u1ae0\u1ae5\u1ae8\u1aed"+
		"\u1af7\u1afb\u1b00\u1b03\u1b05\u1b08\u1b14\u1b16\u1b18\u1b1b\u1b21\u1b2b"+
		"\u1b3f\u1b45\u1b5e\u1b60\u1b7a\u1b80\u1b8b\u1b93\u1b96\u1ba4\u1bac\u1bb3"+
		"\u1bca\u1bd7\u1bdd\u1be4\u1bec\u1bef\u1bf2\u1bfb\u1c05\u1c0c\u1c10\u1c14"+
		"\u1c1a\u1c21\u1c25\u1c2b\u1c32\u1c39\u1c3c\u1c42\u1c49\u1c4d\u1c52\u1c57"+
		"\u1c5c\u1c64\u1c68\u1c6e\u1c75\u1c79\u1c82\u1c8a\u1c90\u1c96\u1ca7\u1cab"+
		"\u1cb3\u1cb7\u1cbf\u1cc3\u1cc8\u1ccc\u1cd3\u1cd9\u1cdb\u1cdf\u1ce3\u1ce7"+
		"\u1cea\u1cee\u1cf4\u1cf8\u1cfa\u1d01\u1d08\u1d0b\u1d0e\u1d15\u1d1a\u1d1f"+
		"\u1d23\u1d29\u1d2d\u1d2f\u1d34\u1d39\u1d3d\u1d42\u1d48\u1d4c\u1d50\u1d52"+
		"\u1d56\u1d5a\u1d5e\u1d62\u1d68\u1d6b\u1d71\u1d75\u1d79\u1d7f\u1d85\u1d87"+
		"\u1d8a\u1d8e\u1d92\u1d96\u1d9c\u1d9f\u1da5\u1dab\u1dae\u1db4\u1db7\u1dbd"+
		"\u1dc0\u1dc4\u1dc8\u1dcc\u1dd1\u1dd4\u1dd8\u1ddc\u1ded\u1def\u1df1\u1df4"+
		"\u1dfb\u1e00\u1e04\u1e0a\u1e0e\u1e10\u1e15\u1e1a\u1e1e\u1e23\u1e29\u1e2d"+
		"\u1e31\u1e33\u1e37\u1e3b\u1e3f\u1e43\u1e49\u1e4c\u1e52\u1e56\u1e5a\u1e60"+
		"\u1e66\u1e68\u1e6b\u1e6f\u1e73\u1e77\u1e7d\u1e80\u1e86\u1e8c\u1e8f\u1e95"+
		"\u1e98\u1e9e\u1ea1\u1ea5\u1ea9\u1ead\u1eb2\u1eb5\u1eb9\u1ebd\u1ec3\u1ec6"+
		"\u1eca\u1edb\u1edd\u1edf\u1ee2\u1ef0\u1ef6\u1efe\u1f05\u1f07\u1f0a\u1f2b"+
		"\u1f2f\u1f33\u1f3a\u1f45\u1f49\u1f50\u1f53\u1f56\u1f5e\u1f63\u1f68\u1f6b"+
		"\u1f6d\u1f71\u1f75\u1f78\u1f7c\u1f82\u1f87\u1f8e\u1f90\u1f94\u1f9c\u1fa2"+
		"\u1fa6\u1fa9\u1fb2\u1fb5\u1fbb\u1fc2\u1fc7\u1fcf\u1fd4\u1fe0\u1fe2\u1fed"+
		"\u1ff4\u1ffe\u2015\u2022\u2032\u2037\u203e\u2041\u2045\u2047\u2058\u2067"+
		"\u206f\u2078\u2080\u2089\u2094\u2098\u209a\u209c\u20a2\u20a7\u20ae\u20bb"+
		"\u20bd\u20bf\u20c2\u20c5\u20cc\u20cf\u20d5\u20da\u20dc\u20df\u20e5\u20ed"+
		"\u20ef\u20f2\u20f6\u20f9\u2103\u2106\u210a\u210d\u2113\u2116\u2118\u211c"+
		"\u2121\u2125\u212a\u212f\u2137\u213b\u213e\u2143\u214b\u2150\u215a\u2165"+
		"\u216a\u2170\u2176\u217a\u217d\u2181\u2185\u218d\u2192\u2194\u2197\u219c"+
		"\u21a5\u21a9\u21ae\u21b1\u21b4\u21ba\u21c2\u21ca\u21cd\u21d0\u21d4\u21d9"+
		"\u21dc\u21e2\u21e6\u21ec\u21f4\u21fa\u21fc\u21ff\u220e\u2211\u2214\u2216"+
		"\u2221\u222c\u2235\u223f\u2249\u224b\u224d\u2250\u2253\u225e\u2260\u2262"+
		"\u2265\u226a\u2275\u227e\u2281\u2284\u228d\u2290\u2293\u229a\u229d\u22ac"+
		"\u22af\u22b6\u22c6\u22ca\u22d6\u22e9\u22eb\u22f6\u2301\u2312\u232e\u234f"+
		"\u2356\u235a\u2362\u2366\u236a\u2370\u237a\u2384\u238b\u2392\u239b\u23a2"+
		"\u23a9\u23b2\u23b6\u23c0\u23c7\u23cf\u23d7\u23db\u23f1\u23fa\u2400\u2406"+
		"\u240c\u2417\u241e\u2423\u2428\u242c\u2433\u2437\u243a\u243f\u2443\u2447"+
		"\u244c\u2453\u2456\u245a\u245f\u2463\u246c\u2473\u247c\u2488\u248a\u2494"+
		"\u2497\u249c\u24a5\u24a7\u24a9\u24ae\u24b6\u24bb\u24c3\u24c8\u24ce\u24d8"+
		"\u24da\u24de\u24e2\u24e4\u24ed\u24ef\u24f3\u24fe\u2520\u2530\u2537\u2539"+
		"\u2540\u2549\u2551\u2558\u255f\u2562\u2565\u256c\u2573\u2576\u2578\u2580"+
		"\u2582\u2588\u258f\u2597\u259d\u25a2\u25a6\u25aa\u25af\u25b1\u25b9\u25bb"+
		"\u25bf\u25c6\u25c8\u25cf\u25d1\u25da\u25e2\u25e9\u25ef\u25fa\u25fe\u2600"+
		"\u2603\u261b\u2634\u2639\u264d\u2651\u2655\u2665\u2679\u26b3\u26b7\u26e7"+
		"\u26f7\u26f9\u2700\u2706\u2713\u2722\u272d\u2732\u273c\u2745\u2767\u276c"+
		"\u2772\u2775\u277a\u277f\u2788\u278d\u2793\u279c\u27a6\u27a9\u27b7\u27bd"+
		"\u27c5\u27c9\u27d1\u27d8\u27e5\u27ed\u27fa\u2801\u2807\u280b\u281c\u282b"+
		"\u282d\u2832\u2835\u283e\u2841\u2844\u2851\u2855\u285d\u2863\u286b\u2872"+
		"\u2878\u2887\u2890\u2896\u289c\u289f\u28a3\u28aa\u28b2\u28b5\u28bb\u28c1"+
		"\u28c3\u28c9\u28cc\u28ce\u28d4\u28d6\u28e4\u28eb\u28f4\u28fb\u2907\u290e"+
		"\u2915\u291c\u2922\u2929\u292c\u2931\u2938\u2940\u2944\u2947\u294f\u2953"+
		"\u2956\u295a\u295f\u2965\u296b\u2971\u2977\u297d\u2983\u2989\u298c\u2990"+
		"\u2995\u2999\u29a1\u29a6\u29ad\u29b6\u29b8\u29bf\u29cb\u29d0\u29db\u29e5"+
		"\u29e7\u29ed\u29ef\u29f4\u29f6\u29f9\u29fd\u2a01\u2a07\u2a10\u2a13\u2a15"+
		"\u2a18\u2a1e\u2a22\u2a25\u2a2e\u2a37\u2a43\u2a46\u2a4a\u2a50\u2a53\u2a57"+
		"\u2a5d\u2a62\u2a67\u2a6b\u2a6f\u2a73\u2a7a\u2a8d\u2a93";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}